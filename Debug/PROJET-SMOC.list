
PROJET-SMOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f0c  0800b888  0800b888  0001b888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d794  0800d794  0001d794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d79c  0800d79c  0001d79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d7a0  0800d7a0  0001d7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001d7c  20000000  0800d7a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00021d7c  2**0
                  CONTENTS
  8 .bss          00007460  20001d7c  20001d7c  00021d7c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200091dc  200091dc  00021d7c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00021d7c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00044894  00000000  00000000  00021dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000089d3  00000000  00000000  00066640  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00016f70  00000000  00000000  0006f013  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017c8  00000000  00000000  00085f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002410  00000000  00000000  00087750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000121a9  00000000  00000000  00089b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008f45  00000000  00000000  0009bd09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000a4c4e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000050a8  00000000  00000000  000a4ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001d7c 	.word	0x20001d7c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b870 	.word	0x0800b870

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001d80 	.word	0x20001d80
 80001cc:	0800b870 	.word	0x0800b870

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_InitTick+0x3c>)
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_InitTick+0x40>)
{
 80005b6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b8:	7818      	ldrb	r0, [r3, #0]
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	fbb3 f3f0 	udiv	r3, r3, r0
 80005c2:	6810      	ldr	r0, [r2, #0]
 80005c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005c8:	f000 f8aa 	bl	8000720 <HAL_SYSTICK_Config>
 80005cc:	4604      	mov	r4, r0
 80005ce:	b958      	cbnz	r0, 80005e8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d0:	2d0f      	cmp	r5, #15
 80005d2:	d809      	bhi.n	80005e8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d4:	4602      	mov	r2, r0
 80005d6:	4629      	mov	r1, r5
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295
 80005dc:	f000 f85e 	bl	800069c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <HAL_InitTick+0x44>)
 80005e2:	4620      	mov	r0, r4
 80005e4:	601d      	str	r5, [r3, #0]
 80005e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005e8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20001ba8 	.word	0x20001ba8
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000004 	.word	0x20000004

080005f8 <HAL_Init>:
{
 80005f8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <HAL_Init+0x30>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000602:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800060a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000612:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f82f 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff ffc8 	bl	80005b0 <HAL_InitTick>
  HAL_MspInit();
 8000620:	f009 fc12 	bl	8009e48 <HAL_MspInit>
}
 8000624:	2000      	movs	r0, #0
 8000626:	bd08      	pop	{r3, pc}
 8000628:	40023c00 	.word	0x40023c00

0800062c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <HAL_IncTick+0x10>)
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <HAL_IncTick+0x14>)
 8000630:	6811      	ldr	r1, [r2, #0]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	440b      	add	r3, r1
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20002364 	.word	0x20002364
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <HAL_GetTick+0x8>)
 8000646:	6818      	ldr	r0, [r3, #0]
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20002364 	.word	0x20002364

08000650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000650:	b538      	push	{r3, r4, r5, lr}
 8000652:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000654:	f7ff fff6 	bl	8000644 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000658:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800065a:	bf1c      	itt	ne
 800065c:	4b05      	ldrne	r3, [pc, #20]	; (8000674 <HAL_Delay+0x24>)
 800065e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000660:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000662:	bf18      	it	ne
 8000664:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000666:	f7ff ffed 	bl	8000644 <HAL_GetTick>
 800066a:	1b40      	subs	r0, r0, r5
 800066c:	4284      	cmp	r4, r0
 800066e:	d8fa      	bhi.n	8000666 <HAL_Delay+0x16>
  {
  }
}
 8000670:	bd38      	pop	{r3, r4, r5, pc}
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800067a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000680:	041b      	lsls	r3, r3, #16
 8000682:	0c1b      	lsrs	r3, r3, #16
 8000684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	0200      	lsls	r0, r0, #8
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000692:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000694:	60d3      	str	r3, [r2, #12]
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	68dc      	ldr	r4, [r3, #12]
 80006a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	bf28      	it	cs
 80006b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 0501 	mov.w	r5, #1
 80006b8:	fa05 f303 	lsl.w	r3, r5, r3
 80006bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c0:	bf8c      	ite	hi
 80006c2:	3c03      	subhi	r4, #3
 80006c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c6:	4019      	ands	r1, r3
 80006c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ca:	fa05 f404 	lsl.w	r4, r5, r4
 80006ce:	3c01      	subs	r4, #1
 80006d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	ea42 0201 	orr.w	r2, r2, r1
 80006d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	bfad      	iteet	ge
 80006de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	f000 000f 	andlt.w	r0, r0, #15
 80006e6:	4b06      	ldrlt	r3, [pc, #24]	; (8000700 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	bfb5      	itete	lt
 80006ee:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	e000ed14 	.word	0xe000ed14

08000704 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000704:	2800      	cmp	r0, #0
 8000706:	db08      	blt.n	800071a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000708:	0942      	lsrs	r2, r0, #5
 800070a:	2301      	movs	r3, #1
 800070c:	f000 001f 	and.w	r0, r0, #31
 8000710:	fa03 f000 	lsl.w	r0, r3, r0
 8000714:	4b01      	ldr	r3, [pc, #4]	; (800071c <HAL_NVIC_EnableIRQ+0x18>)
 8000716:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100

08000720 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	3801      	subs	r0, #1
 8000722:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000726:	d20a      	bcs.n	800073e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	21f0      	movs	r1, #240	; 0xf0
 8000730:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e010 	.word	0xe000e010
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 800074c:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <ETH_Delay.constprop.4+0x20>)
 8000750:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	fbb3 f3f2 	udiv	r3, r3, r2
 800075a:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 800075c:	bf00      	nop
  } 
  while (Delay --);
 800075e:	9b01      	ldr	r3, [sp, #4]
 8000760:	1e5a      	subs	r2, r3, #1
 8000762:	9201      	str	r2, [sp, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f9      	bne.n	800075c <ETH_Delay.constprop.4+0x10>
}
 8000768:	b002      	add	sp, #8
 800076a:	4770      	bx	lr
 800076c:	20001ba8 	.word	0x20001ba8

08000770 <ETH_FlushTransmitFIFO>:
{
 8000770:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 8000772:	2300      	movs	r3, #0
 8000774:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000776:	f241 0118 	movw	r1, #4120	; 0x1018
 800077a:	6803      	ldr	r3, [r0, #0]
 800077c:	585a      	ldr	r2, [r3, r1]
 800077e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000782:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000784:	585b      	ldr	r3, [r3, r1]
 8000786:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000788:	f7ff ffe0 	bl	800074c <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 800078c:	9a01      	ldr	r2, [sp, #4]
 800078e:	6803      	ldr	r3, [r0, #0]
 8000790:	505a      	str	r2, [r3, r1]
}
 8000792:	b003      	add	sp, #12
 8000794:	f85d fb04 	ldr.w	pc, [sp], #4

08000798 <ETH_MACDMAConfig>:
{
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800079c:	b129      	cbz	r1, 80007aa <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800079e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007a2:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 80007a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007a8:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80007aa:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 80007ac:	6822      	ldr	r2, [r4, #0]
                       macinit.LoopbackMode |
 80007ae:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 80007b0:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80007b2:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 80007b4:	68a3      	ldr	r3, [r4, #8]
 80007b6:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80007ba:	4830      	ldr	r0, [pc, #192]	; (800087c <ETH_MACDMAConfig+0xe4>)
 80007bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c0:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80007c4:	bf0c      	ite	eq
 80007c6:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80007ca:	2100      	movne	r1, #0
 80007cc:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80007ce:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80007d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d2:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 80007d4:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d6:	f7ff ff3b 	bl	8000650 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80007da:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007dc:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 80007de:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e0:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007e2:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 80007e4:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e6:	f7ff ff33 	bl	8000650 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80007ea:	6823      	ldr	r3, [r4, #0]
 80007ec:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80007ee:	2500      	movs	r5, #0
 80007f0:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80007f2:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 80007f4:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80007f6:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80007fa:	0412      	lsls	r2, r2, #16
 80007fc:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80007fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000802:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000804:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 8000806:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000808:	f7ff ff22 	bl	8000650 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800080c:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800080e:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 8000810:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000812:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8000814:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000816:	f7ff ff1b 	bl	8000650 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800081a:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 800081e:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000820:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000824:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000826:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000828:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800082a:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800082e:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000832:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000834:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000836:	f7ff ff0b 	bl	8000650 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800083a:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800083c:	4a11      	ldr	r2, [pc, #68]	; (8000884 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 800083e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000844:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000846:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8000848:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800084a:	f7ff ff01 	bl	8000650 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800084e:	6822      	ldr	r2, [r4, #0]
 8000850:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000854:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000856:	69a3      	ldr	r3, [r4, #24]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d107      	bne.n	800086c <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800085c:	f241 011c 	movw	r1, #4124	; 0x101c
 8000860:	5853      	ldr	r3, [r2, r1]
 8000862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086a:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800086c:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800086e:	4a06      	ldr	r2, [pc, #24]	; (8000888 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000870:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000872:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000874:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ETH_MACDMAConfig+0xf4>)
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	ff20810f 	.word	0xff20810f
 8000880:	f8de3f23 	.word	0xf8de3f23
 8000884:	02c12080 	.word	0x02c12080
 8000888:	40028040 	.word	0x40028040
 800088c:	40028044 	.word	0x40028044

08000890 <HAL_ETH_DMATxDescListInit>:
{
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000892:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000896:	2c01      	cmp	r4, #1
 8000898:	f04f 0402 	mov.w	r4, #2
 800089c:	d033      	beq.n	8000906 <HAL_ETH_DMATxDescListInit+0x76>
 800089e:	2501      	movs	r5, #1
 80008a0:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80008a4:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 80008a8:	62c1      	str	r1, [r0, #44]	; 0x2c
 80008aa:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < TxBuffCount; i++)
 80008ae:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008b0:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008b4:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 80008b8:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 80008bc:	429d      	cmp	r5, r3
 80008be:	d10b      	bne.n	80008d8 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80008c0:	6802      	ldr	r2, [r0, #0]
 80008c2:	f241 0310 	movw	r3, #4112	; 0x1010
 80008c6:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008c8:	2301      	movs	r3, #1
 80008ca:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008ce:	2300      	movs	r3, #0
 80008d0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008d4:	4618      	mov	r0, r3
 80008d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008d8:	fb0e 2605 	mla	r6, lr, r5, r2
 80008dc:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008e0:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008e2:	f844 7c20 	str.w	r7, [r4, #-32]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008e6:	b92e      	cbnz	r6, 80008f4 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80008e8:	f854 6c20 	ldr.w	r6, [r4, #-32]
 80008ec:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80008f0:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80008f4:	4565      	cmp	r5, ip
 80008f6:	bf2c      	ite	cs
 80008f8:	460e      	movcs	r6, r1
 80008fa:	4626      	movcc	r6, r4
 80008fc:	f844 6c14 	str.w	r6, [r4, #-20]
  for(i=0U; i < TxBuffCount; i++)
 8000900:	3501      	adds	r5, #1
 8000902:	3420      	adds	r4, #32
 8000904:	e7da      	b.n	80008bc <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8000906:	4620      	mov	r0, r4
}
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800090a <HAL_ETH_DMARxDescListInit>:
{
 800090a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 800090e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000912:	2c01      	cmp	r4, #1
 8000914:	f04f 0402 	mov.w	r4, #2
 8000918:	d030      	beq.n	800097c <HAL_ETH_DMARxDescListInit+0x72>
 800091a:	2501      	movs	r5, #1
 800091c:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000920:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8000924:	6281      	str	r1, [r0, #40]	; 0x28
 8000926:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < RxBuffCount; i++)
 800092a:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800092c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000930:	f244 57f4 	movw	r7, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000934:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 8000938:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 800093c:	429d      	cmp	r5, r3
 800093e:	d10c      	bne.n	800095a <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000940:	6802      	ldr	r2, [r0, #0]
 8000942:	f241 030c 	movw	r3, #4108	; 0x100c
 8000946:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000948:	2301      	movs	r3, #1
 800094a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800094e:	2300      	movs	r3, #0
 8000950:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000954:	4618      	mov	r0, r3
 8000956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800095a:	fb0e 2805 	mla	r8, lr, r5, r2
 800095e:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000962:	4565      	cmp	r5, ip
 8000964:	bf2c      	ite	cs
 8000966:	4688      	movcs	r8, r1
 8000968:	46a0      	movcc	r8, r4
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800096a:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800096e:	f844 7c1c 	str.w	r7, [r4, #-28]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000972:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0U; i < RxBuffCount; i++)
 8000976:	3501      	adds	r5, #1
 8000978:	3420      	adds	r4, #32
 800097a:	e7df      	b.n	800093c <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 800097c:	4620      	mov	r0, r4
}
 800097e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000984 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000984:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000988:	2b01      	cmp	r3, #1
{
 800098a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000990:	d068      	beq.n	8000a64 <HAL_ETH_TransmitFrame+0xe0>
 8000992:	2201      	movs	r2, #1
 8000994:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000998:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 800099c:	b929      	cbnz	r1, 80009aa <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 800099e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80009a2:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 80009a6:	4610      	mov	r0, r2
 80009a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80009aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009ac:	681c      	ldr	r4, [r3, #0]
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	da06      	bge.n	80009c0 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80009b2:	2312      	movs	r3, #18
 80009b4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80009b8:	2300      	movs	r3, #0
 80009ba:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80009be:	e7f2      	b.n	80009a6 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 80009c0:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80009c4:	42a1      	cmp	r1, r4
 80009c6:	d92e      	bls.n	8000a26 <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80009c8:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80009cc:	fb04 1412 	mls	r4, r4, r2, r1
 80009d0:	b33c      	cbz	r4, 8000a22 <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 80009d2:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80009d4:	4c24      	ldr	r4, [pc, #144]	; (8000a68 <HAL_ETH_TransmitFrame+0xe4>)
 80009d6:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 80009da:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80009de:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80009e2:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009e4:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 80009e8:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80009ea:	681d      	ldr	r5, [r3, #0]
 80009ec:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 80009f0:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 80009f2:	b91c      	cbnz	r4, 80009fc <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80009f4:	681d      	ldr	r5, [r3, #0]
 80009f6:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80009fa:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 80009fc:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009fe:	bf08      	it	eq
 8000a00:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a02:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a04:	bf04      	itt	eq
 8000a06:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 8000a0a:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a0c:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a0e:	bf08      	it	eq
 8000a10:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 8000a12:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a14:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 8000a18:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a1a:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a1c:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 8000a1e:	d1e4      	bne.n	80009ea <HAL_ETH_TransmitFrame+0x66>
 8000a20:	e00d      	b.n	8000a3e <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 8000a22:	2a01      	cmp	r2, #1
 8000a24:	d1d6      	bne.n	80009d4 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000a2c:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a2e:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a30:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a38:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a3a:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000a40:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a44:	6803      	ldr	r3, [r0, #0]
 8000a46:	5899      	ldr	r1, [r3, r2]
 8000a48:	0749      	lsls	r1, r1, #29
 8000a4a:	d505      	bpl.n	8000a58 <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8000a50:	f241 0204 	movw	r2, #4100	; 0x1004
 8000a54:	2100      	movs	r1, #0
 8000a56:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000a64:	4618      	mov	r0, r3
}
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a68:	fffffa0c 	.word	0xfffffa0c

08000a6c <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8000a6c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a70:	2b01      	cmp	r3, #1
{
 8000a72:	b530      	push	{r4, r5, lr}
 8000a74:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000a78:	d023      	beq.n	8000ac2 <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 8000a7a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a80:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000a82:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a84:	2a00      	cmp	r2, #0
  __HAL_LOCK(heth);
 8000a86:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a8a:	db27      	blt.n	8000adc <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	68d9      	ldr	r1, [r3, #12]
 8000a90:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a94:	d017      	beq.n	8000ac6 <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 8000a96:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000a98:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 8000a9a:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1U)
 8000a9c:	42a2      	cmp	r2, r4
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8000a9e:	bf08      	it	eq
 8000aa0:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000aa2:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos).SegCount++;
 8000aa4:	6382      	str	r2, [r0, #56]	; 0x38
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000aa6:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000aaa:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 8000aac:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000aae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000aba:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8000abc:	6281      	str	r1, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 8000abe:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000ac6:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000ac8:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000aca:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8000acc:	bf55      	itete	pl
 8000ace:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8000ad0:	6303      	strmi	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 8000ad2:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8000ad4:	6342      	strmi	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8000ad6:	bf4c      	ite	mi
 8000ad8:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 8000ada:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8000adc:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000ade:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000ae0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ae4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000ae8:	e7eb      	b.n	8000ac2 <HAL_ETH_GetReceivedFrame+0x56>

08000aea <HAL_ETH_ReadPHYRegister>:
{
 8000aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000aec:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000af0:	2b82      	cmp	r3, #130	; 0x82
{
 8000af2:	4605      	mov	r5, r0
 8000af4:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000af6:	d030      	beq.n	8000b5a <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000af8:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000afa:	2382      	movs	r3, #130	; 0x82
 8000afc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b00:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b02:	0189      	lsls	r1, r1, #6
 8000b04:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b08:	f003 011c 	and.w	r1, r3, #28
 8000b0c:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b0e:	8a04      	ldrh	r4, [r0, #16]
 8000b10:	02e4      	lsls	r4, r4, #11
 8000b12:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000b14:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000b16:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000b1a:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000b1c:	f7ff fd92 	bl	8000644 <HAL_GetTick>
 8000b20:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b22:	f014 0001 	ands.w	r0, r4, #1
 8000b26:	d107      	bne.n	8000b38 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b28:	682b      	ldr	r3, [r5, #0]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b30:	2301      	movs	r3, #1
 8000b32:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b38:	f7ff fd84 	bl	8000644 <HAL_GetTick>
 8000b3c:	1bc0      	subs	r0, r0, r7
 8000b3e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b42:	d307      	bcc.n	8000b54 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000b44:	2301      	movs	r3, #1
 8000b46:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b50:	2003      	movs	r0, #3
 8000b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000b54:	682b      	ldr	r3, [r5, #0]
 8000b56:	691c      	ldr	r4, [r3, #16]
 8000b58:	e7e3      	b.n	8000b22 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000b5a:	2002      	movs	r0, #2
}
 8000b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b5e <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b5e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b62:	2b42      	cmp	r3, #66	; 0x42
{
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b68:	d02e      	beq.n	8000bc8 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b6a:	2342      	movs	r3, #66	; 0x42
 8000b6c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b70:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b72:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b74:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b76:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000b7a:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b7e:	f000 001c 	and.w	r0, r0, #28
 8000b82:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000b84:	8a2c      	ldrh	r4, [r5, #16]
 8000b86:	02e4      	lsls	r4, r4, #11
 8000b88:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000b8a:	4304      	orrs	r4, r0
 8000b8c:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000b8e:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000b90:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000b92:	f7ff fd57 	bl	8000644 <HAL_GetTick>
 8000b96:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b98:	f014 0001 	ands.w	r0, r4, #1
 8000b9c:	d103      	bne.n	8000ba6 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000ba6:	f7ff fd4d 	bl	8000644 <HAL_GetTick>
 8000baa:	1b80      	subs	r0, r0, r6
 8000bac:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bb0:	d307      	bcc.n	8000bc2 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	691c      	ldr	r4, [r3, #16]
 8000bc6:	e7e7      	b.n	8000b98 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000bc8:	2002      	movs	r0, #2
}
 8000bca:	bd70      	pop	{r4, r5, r6, pc}

08000bcc <HAL_ETH_Init>:
{
 8000bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	f000 80de 	beq.w	8000d96 <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000bda:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000be2:	b91b      	cbnz	r3, 8000bec <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000be4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000be8:	f008 fd8a 	bl	8009700 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	4b6a      	ldr	r3, [pc, #424]	; (8000d9c <HAL_ETH_Init+0x1d0>)
 8000bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bf8:	645a      	str	r2, [r3, #68]	; 0x44
 8000bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c04:	4b66      	ldr	r3, [pc, #408]	; (8000da0 <HAL_ETH_Init+0x1d4>)
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c0c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	6a21      	ldr	r1, [r4, #32]
 8000c12:	430a      	orrs	r2, r1
 8000c14:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	f042 0201 	orr.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c24:	f7ff fd0e 	bl	8000644 <HAL_GetTick>
 8000c28:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	07d0      	lsls	r0, r2, #31
 8000c34:	d41d      	bmi.n	8000c72 <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000c36:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c38:	f001 f950 	bl	8001edc <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c3c:	4b59      	ldr	r3, [pc, #356]	; (8000da4 <HAL_ETH_Init+0x1d8>)
 8000c3e:	4a5a      	ldr	r2, [pc, #360]	; (8000da8 <HAL_ETH_Init+0x1dc>)
 8000c40:	4403      	add	r3, r0
 8000c42:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000c44:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c48:	d822      	bhi.n	8000c90 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c4a:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c4e:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c54:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff ff80 	bl	8000b5e <HAL_ETH_WritePHYRegister>
 8000c5e:	4605      	mov	r5, r0
 8000c60:	b368      	cbz	r0, 8000cbe <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8000c62:	2101      	movs	r1, #1
 8000c64:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8000c66:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000c68:	f7ff fd96 	bl	8000798 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000c6c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000c70:	e00b      	b.n	8000c8a <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000c72:	f7ff fce7 	bl	8000644 <HAL_GetTick>
 8000c76:	1b40      	subs	r0, r0, r5
 8000c78:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c7c:	d9d5      	bls.n	8000c2a <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c7e:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000c80:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c82:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	b003      	add	sp, #12
 8000c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000c90:	4b46      	ldr	r3, [pc, #280]	; (8000dac <HAL_ETH_Init+0x1e0>)
 8000c92:	4a47      	ldr	r2, [pc, #284]	; (8000db0 <HAL_ETH_Init+0x1e4>)
 8000c94:	4403      	add	r3, r0
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d802      	bhi.n	8000ca0 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000c9a:	f045 050c 	orr.w	r5, r5, #12
 8000c9e:	e7d6      	b.n	8000c4e <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000ca0:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <HAL_ETH_Init+0x1e8>)
 8000ca2:	4a45      	ldr	r2, [pc, #276]	; (8000db8 <HAL_ETH_Init+0x1ec>)
 8000ca4:	4403      	add	r3, r0
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d9d1      	bls.n	8000c4e <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000caa:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <HAL_ETH_Init+0x1f0>)
 8000cac:	4a44      	ldr	r2, [pc, #272]	; (8000dc0 <HAL_ETH_Init+0x1f4>)
 8000cae:	4403      	add	r3, r0
 8000cb0:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000cb2:	bf94      	ite	ls
 8000cb4:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000cb8:	f045 0510 	orrhi.w	r5, r5, #16
 8000cbc:	e7c7      	b.n	8000c4e <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8000cbe:	20ff      	movs	r0, #255	; 0xff
 8000cc0:	f7ff fcc6 	bl	8000650 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000cc4:	6863      	ldr	r3, [r4, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d053      	beq.n	8000d72 <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000cca:	f7ff fcbb 	bl	8000644 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cce:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cd2:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000cd4:	466a      	mov	r2, sp
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f7ff ff06 	bl	8000aea <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cde:	f7ff fcb1 	bl	8000644 <HAL_GetTick>
 8000ce2:	1b80      	subs	r0, r0, r6
 8000ce4:	42b8      	cmp	r0, r7
 8000ce6:	d90b      	bls.n	8000d00 <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000ce8:	2101      	movs	r1, #1
 8000cea:	4620      	mov	r0, r4
 8000cec:	f7ff fd54 	bl	8000798 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000cfc:	2503      	movs	r5, #3
 8000cfe:	e7c4      	b.n	8000c8a <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d00:	9b00      	ldr	r3, [sp, #0]
 8000d02:	0759      	lsls	r1, r3, #29
 8000d04:	d5e6      	bpl.n	8000cd4 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	f7ff ff26 	bl	8000b5e <HAL_ETH_WritePHYRegister>
 8000d12:	2800      	cmp	r0, #0
 8000d14:	d1a5      	bne.n	8000c62 <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8000d16:	f7ff fc95 	bl	8000644 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d1a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d1e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d20:	466a      	mov	r2, sp
 8000d22:	2101      	movs	r1, #1
 8000d24:	4620      	mov	r0, r4
 8000d26:	f7ff fee0 	bl	8000aea <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d2a:	f7ff fc8b 	bl	8000644 <HAL_GetTick>
 8000d2e:	1b80      	subs	r0, r0, r6
 8000d30:	42b8      	cmp	r0, r7
 8000d32:	d8d9      	bhi.n	8000ce8 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d34:	9b00      	ldr	r3, [sp, #0]
 8000d36:	069a      	lsls	r2, r3, #26
 8000d38:	d5f2      	bpl.n	8000d20 <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d3a:	466a      	mov	r2, sp
 8000d3c:	211f      	movs	r1, #31
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f7ff fed3 	bl	8000aea <HAL_ETH_ReadPHYRegister>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	d18c      	bne.n	8000c62 <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d48:	9b00      	ldr	r3, [sp, #0]
 8000d4a:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d4e:	bf18      	it	ne
 8000d50:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d54:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d56:	bf4c      	ite	mi
 8000d58:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d5a:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d5e:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d60:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000d62:	2100      	movs	r1, #0
 8000d64:	4620      	mov	r0, r4
 8000d66:	f7ff fd17 	bl	8000798 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000d70:	e78b      	b.n	8000c8a <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d72:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d74:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d76:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d78:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000d7c:	b292      	uxth	r2, r2
 8000d7e:	4629      	mov	r1, r5
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff feec 	bl	8000b5e <HAL_ETH_WritePHYRegister>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	f47f af6b 	bne.w	8000c62 <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000d8c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000d90:	f7ff fc5e 	bl	8000650 <HAL_Delay>
 8000d94:	e7e5      	b.n	8000d62 <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8000d96:	2501      	movs	r5, #1
 8000d98:	e777      	b.n	8000c8a <HAL_ETH_Init+0xbe>
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40013800 	.word	0x40013800
 8000da4:	feced300 	.word	0xfeced300
 8000da8:	00e4e1bf 	.word	0x00e4e1bf
 8000dac:	fde9f140 	.word	0xfde9f140
 8000db0:	017d783f 	.word	0x017d783f
 8000db4:	fc6c7900 	.word	0xfc6c7900
 8000db8:	026259ff 	.word	0x026259ff
 8000dbc:	fa0a1f00 	.word	0xfa0a1f00
 8000dc0:	02faf07f 	.word	0x02faf07f

08000dc4 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000dc4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000dc8:	2b01      	cmp	r3, #1
{  
 8000dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dcc:	4605      	mov	r5, r0
 8000dce:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000dd2:	d031      	beq.n	8000e38 <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8000dd4:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dd6:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000dd8:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8000ddc:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dde:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000de0:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000de2:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8000de6:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dea:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000df0:	f7ff fcac 	bl	800074c <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000df4:	682b      	ldr	r3, [r5, #0]
 8000df6:	9a01      	ldr	r2, [sp, #4]
 8000df8:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8000dfa:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	f042 0204 	orr.w	r2, r2, #4
 8000e02:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000e08:	f7ff fca0 	bl	800074c <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000e0c:	682b      	ldr	r3, [r5, #0]
 8000e0e:	9a00      	ldr	r2, [sp, #0]
 8000e10:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e12:	4628      	mov	r0, r5
 8000e14:	f7ff fcac 	bl	8000770 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e18:	682a      	ldr	r2, [r5, #0]
 8000e1a:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000e1e:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e20:	58d1      	ldr	r1, [r2, r3]
 8000e22:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000e26:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e28:	58d1      	ldr	r1, [r2, r3]
 8000e2a:	f041 0102 	orr.w	r1, r1, #2
 8000e2e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e30:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e34:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e40:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000ff4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e48:	4a68      	ldr	r2, [pc, #416]	; (8000fec <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e4a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000ff8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e50:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e52:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e54:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000e56:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e58:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000e5a:	42ac      	cmp	r4, r5
 8000e5c:	f040 80b0 	bne.w	8000fc0 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e60:	684c      	ldr	r4, [r1, #4]
 8000e62:	f024 0c10 	bic.w	ip, r4, #16
 8000e66:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000e6a:	2e01      	cmp	r6, #1
 8000e6c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e70:	d812      	bhi.n	8000e98 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000e72:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e74:	2603      	movs	r6, #3
 8000e76:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e7a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	68ce      	ldr	r6, [r1, #12]
 8000e80:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e84:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000e86:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e88:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e8a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8e:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e92:	409e      	lsls	r6, r3
 8000e94:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000e96:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e98:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000e9a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ea0:	43f6      	mvns	r6, r6
 8000ea2:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea6:	688f      	ldr	r7, [r1, #8]
 8000ea8:	fa07 f70e 	lsl.w	r7, r7, lr
 8000eac:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb0:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000eb4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb6:	d116      	bne.n	8000ee6 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000eb8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ebc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ec4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ecc:	f04f 0c0f 	mov.w	ip, #15
 8000ed0:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ed4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed8:	690f      	ldr	r7, [r1, #16]
 8000eda:	fa07 f70b 	lsl.w	r7, r7, fp
 8000ede:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000ee2:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000ee6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eea:	f004 0703 	and.w	r7, r4, #3
 8000eee:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000ef2:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000ef6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef8:	00e6      	lsls	r6, r4, #3
 8000efa:	d561      	bpl.n	8000fc0 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efc:	f04f 0b00 	mov.w	fp, #0
 8000f00:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f04:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f08:	4e39      	ldr	r6, [pc, #228]	; (8000ff0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000f0e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000f12:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000f16:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f1a:	9703      	str	r7, [sp, #12]
 8000f1c:	9f03      	ldr	r7, [sp, #12]
 8000f1e:	f023 0703 	bic.w	r7, r3, #3
 8000f22:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f26:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f2a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f32:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f36:	f04f 0e0f 	mov.w	lr, #15
 8000f3a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f40:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f44:	d043      	beq.n	8000fce <HAL_GPIO_Init+0x192>
 8000f46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f4a:	42b0      	cmp	r0, r6
 8000f4c:	d041      	beq.n	8000fd2 <HAL_GPIO_Init+0x196>
 8000f4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f52:	42b0      	cmp	r0, r6
 8000f54:	d03f      	beq.n	8000fd6 <HAL_GPIO_Init+0x19a>
 8000f56:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f5a:	42b0      	cmp	r0, r6
 8000f5c:	d03d      	beq.n	8000fda <HAL_GPIO_Init+0x19e>
 8000f5e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f62:	42b0      	cmp	r0, r6
 8000f64:	d03b      	beq.n	8000fde <HAL_GPIO_Init+0x1a2>
 8000f66:	4548      	cmp	r0, r9
 8000f68:	d03b      	beq.n	8000fe2 <HAL_GPIO_Init+0x1a6>
 8000f6a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000f6e:	42b0      	cmp	r0, r6
 8000f70:	d039      	beq.n	8000fe6 <HAL_GPIO_Init+0x1aa>
 8000f72:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f76:	42b0      	cmp	r0, r6
 8000f78:	bf14      	ite	ne
 8000f7a:	2608      	movne	r6, #8
 8000f7c:	2607      	moveq	r6, #7
 8000f7e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000f82:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f86:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000f88:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f90:	bf0c      	ite	eq
 8000f92:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000f94:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000f96:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000f98:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f9a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	bf0c      	ite	eq
 8000fa0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fa2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000fa4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000fac:	bf0c      	ite	eq
 8000fae:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fb0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000fb2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000fb4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	bf54      	ite	pl
 8000fba:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000fbc:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000fbe:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	2b10      	cmp	r3, #16
 8000fc4:	f47f af45 	bne.w	8000e52 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fc8:	b005      	add	sp, #20
 8000fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fce:	465e      	mov	r6, fp
 8000fd0:	e7d5      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fd2:	2601      	movs	r6, #1
 8000fd4:	e7d3      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fd6:	2602      	movs	r6, #2
 8000fd8:	e7d1      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fda:	2603      	movs	r6, #3
 8000fdc:	e7cf      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fde:	2604      	movs	r6, #4
 8000fe0:	e7cd      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fe2:	2605      	movs	r6, #5
 8000fe4:	e7cb      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fe6:	2606      	movs	r6, #6
 8000fe8:	e7c9      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fea:	bf00      	nop
 8000fec:	40013c00 	.word	0x40013c00
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40021400 	.word	0x40021400

08000ffc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ffc:	b10a      	cbz	r2, 8001002 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ffe:	6181      	str	r1, [r0, #24]
 8001000:	4770      	bx	lr
 8001002:	0409      	lsls	r1, r1, #16
 8001004:	e7fb      	b.n	8000ffe <HAL_GPIO_WritePin+0x2>

08001006 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001006:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800100a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800100c:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8001010:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8001014:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8001018:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 800101c:	2801      	cmp	r0, #1
 800101e:	d028      	beq.n	8001072 <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 8001020:	2028      	movs	r0, #40	; 0x28
 8001022:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8001026:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8001028:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800102a:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 800102e:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001032:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001036:	bf08      	it	eq
 8001038:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 800103a:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 800103e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8001042:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001046:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800104a:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 800104e:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8001052:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8001056:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 800105a:	f8cd c008 	str.w	ip, [sp, #8]
 800105e:	e88d 4080 	stmia.w	sp, {r7, lr}
 8001062:	6820      	ldr	r0, [r4, #0]
 8001064:	f001 fac6 	bl	80025f4 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001068:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 800106c:	b004      	add	sp, #16
 800106e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8001072:	2002      	movs	r0, #2
 8001074:	e7fa      	b.n	800106c <HAL_HCD_HC_Init+0x66>

08001076 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001076:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800107a:	2b01      	cmp	r3, #1
{
 800107c:	b510      	push	{r4, lr}
 800107e:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001080:	d009      	beq.n	8001096 <HAL_HCD_HC_Halt+0x20>
 8001082:	2301      	movs	r3, #1
 8001084:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001088:	6800      	ldr	r0, [r0, #0]
 800108a:	f001 fb3d 	bl	8002708 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800108e:	2000      	movs	r0, #0
 8001090:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8001094:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001096:	2002      	movs	r0, #2
}
 8001098:	bd10      	pop	{r4, pc}

0800109a <HAL_HCD_Init>:
{
 800109a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 800109e:	4607      	mov	r7, r0
{
 80010a0:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 80010a2:	2800      	cmp	r0, #0
 80010a4:	d041      	beq.n	800112a <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80010a6:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 80010aa:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80010ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010b0:	b91b      	cbnz	r3, 80010ba <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 80010b2:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80010b6:	f009 f883 	bl	800a1c0 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80010ba:	2303      	movs	r3, #3
 80010bc:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 80010c2:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010c4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 80010c8:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 80010cc:	bf08      	it	eq
 80010ce:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 80010d0:	f001 f94c 	bl	800236c <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d6:	466d      	mov	r5, sp
 80010d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80010e6:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80010ea:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010ec:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f001 f8f5 	bl	80022e0 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80010f6:	f856 0b10 	ldr.w	r0, [r6], #16
 80010fa:	2101      	movs	r1, #1
 80010fc:	f001 f93c 	bl	8002378 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001100:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001102:	466d      	mov	r5, sp
 8001104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001106:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800110e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001112:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f001 f9ec 	bl	80024f4 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 800111c:	2301      	movs	r3, #1
 800111e:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 8001122:	2000      	movs	r0, #0
}
 8001124:	b00a      	add	sp, #40	; 0x28
 8001126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800112a:	2001      	movs	r0, #1
 800112c:	e7fa      	b.n	8001124 <HAL_HCD_Init+0x8a>
	...

08001130 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001132:	2428      	movs	r4, #40	; 0x28
 8001134:	fb04 0401 	mla	r4, r4, r1, r0
{
 8001138:	f89d 7014 	ldrb.w	r7, [sp, #20]
 800113c:	9e06      	ldr	r6, [sp, #24]
 800113e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001142:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001146:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 800114a:	b96f      	cbnz	r7, 8001168 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800114c:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800114e:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8001154:	d02b      	beq.n	80011ae <HAL_HCD_HC_SubmitRequest+0x7e>
 8001156:	42bb      	cmp	r3, r7
 8001158:	d029      	beq.n	80011ae <HAL_HCD_HC_SubmitRequest+0x7e>
 800115a:	2b01      	cmp	r3, #1
 800115c:	d131      	bne.n	80011c2 <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800115e:	2328      	movs	r3, #40	; 0x28
 8001160:	fb03 0301 	mla	r3, r3, r1, r0
 8001164:	2200      	movs	r2, #0
 8001166:	e02a      	b.n	80011be <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001168:	f04f 0e02 	mov.w	lr, #2
 800116c:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8001170:	2b03      	cmp	r3, #3
 8001172:	d826      	bhi.n	80011c2 <HAL_HCD_HC_SubmitRequest+0x92>
 8001174:	a401      	add	r4, pc, #4	; (adr r4, 800117c <HAL_HCD_HC_SubmitRequest+0x4c>)
 8001176:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 800117a:	bf00      	nop
 800117c:	0800118d 	.word	0x0800118d
 8001180:	0800115f 	.word	0x0800115f
 8001184:	080011af 	.word	0x080011af
 8001188:	080011af 	.word	0x080011af
      if ((token == 1U) && (direction == 0U)) /*send data */
 800118c:	2f01      	cmp	r7, #1
 800118e:	d118      	bne.n	80011c2 <HAL_HCD_HC_SubmitRequest+0x92>
 8001190:	b9ba      	cbnz	r2, 80011c2 <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 8001192:	b925      	cbnz	r5, 800119e <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8001194:	2328      	movs	r3, #40	; 0x28
 8001196:	fb03 0301 	mla	r3, r3, r1, r0
 800119a:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800119e:	2328      	movs	r3, #40	; 0x28
 80011a0:	fb03 0301 	mla	r3, r3, r1, r0
 80011a4:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80011a8:	b14a      	cbz	r2, 80011be <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011aa:	2202      	movs	r2, #2
 80011ac:	e007      	b.n	80011be <HAL_HCD_HC_SubmitRequest+0x8e>
 80011ae:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80011b0:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 80011b4:	b9d2      	cbnz	r2, 80011ec <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80011b6:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 80011ba:	2c00      	cmp	r4, #0
 80011bc:	d1f5      	bne.n	80011aa <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80011be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80011c2:	2428      	movs	r4, #40	; 0x28
 80011c4:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80011c8:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 80011ca:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80011ce:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80011d0:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 80011d2:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80011d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80011d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 80011da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80011de:	3138      	adds	r1, #56	; 0x38
 80011e0:	7c02      	ldrb	r2, [r0, #16]
 80011e2:	6800      	ldr	r0, [r0, #0]
}
 80011e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80011e8:	f001 baf2 	b.w	80027d0 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80011ec:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80011f0:	e7da      	b.n	80011a8 <HAL_HCD_HC_SubmitRequest+0x78>
 80011f2:	bf00      	nop

080011f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80011f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80011f8:	6806      	ldr	r6, [r0, #0]
{
 80011fa:	b087      	sub	sp, #28
 80011fc:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80011fe:	4630      	mov	r0, r6
 8001200:	f001 f91a 	bl	8002438 <USB_GetMode>
 8001204:	2801      	cmp	r0, #1
 8001206:	f040 80b4 	bne.w	8001372 <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800120a:	6820      	ldr	r0, [r4, #0]
 800120c:	f001 f910 	bl	8002430 <USB_ReadInterrupts>
 8001210:	2800      	cmp	r0, #0
 8001212:	f000 80ae 	beq.w	8001372 <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001216:	6820      	ldr	r0, [r4, #0]
 8001218:	f001 f90a 	bl	8002430 <USB_ReadInterrupts>
 800121c:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800121e:	bf48      	it	mi
 8001220:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001222:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001224:	bf44      	itt	mi
 8001226:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 800122a:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800122c:	f001 f900 	bl	8002430 <USB_ReadInterrupts>
 8001230:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001232:	bf48      	it	mi
 8001234:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001236:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001238:	bf44      	itt	mi
 800123a:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 800123e:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001240:	f001 f8f6 	bl	8002430 <USB_ReadInterrupts>
 8001244:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001246:	bf48      	it	mi
 8001248:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800124a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800124c:	bf44      	itt	mi
 800124e:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8001252:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001254:	f001 f8ec 	bl	8002430 <USB_ReadInterrupts>
 8001258:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800125a:	bf48      	it	mi
 800125c:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800125e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001260:	bf44      	itt	mi
 8001262:	2202      	movmi	r2, #2
 8001264:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001266:	f001 f8e3 	bl	8002430 <USB_ReadInterrupts>
 800126a:	0082      	lsls	r2, r0, #2
 800126c:	d510      	bpl.n	8001290 <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800126e:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8001272:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001276:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800127a:	4620      	mov	r0, r4
 800127c:	f008 fff2 	bl	800a264 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001280:	2101      	movs	r1, #1
 8001282:	6820      	ldr	r0, [r4, #0]
 8001284:	f001 f8dc 	bl	8002440 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800128e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001290:	6820      	ldr	r0, [r4, #0]
 8001292:	f001 f8cd 	bl	8002430 <USB_ReadInterrupts>
 8001296:	01c3      	lsls	r3, r0, #7
 8001298:	d542      	bpl.n	8001320 <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800129a:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800129c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80012a0:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 80012a2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80012a6:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80012a8:	9b05      	ldr	r3, [sp, #20]
 80012aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80012ae:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80012b0:	9b04      	ldr	r3, [sp, #16]
 80012b2:	079f      	lsls	r7, r3, #30
 80012b4:	d50d      	bpl.n	80012d2 <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80012b6:	9b04      	ldr	r3, [sp, #16]
 80012b8:	07d8      	lsls	r0, r3, #31
 80012ba:	d506      	bpl.n	80012ca <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80012bc:	69ab      	ldr	r3, [r5, #24]
 80012be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80012c2:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80012c4:	4620      	mov	r0, r4
 80012c6:	f008 ffc9 	bl	800a25c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80012ca:	9b05      	ldr	r3, [sp, #20]
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80012d2:	9b04      	ldr	r3, [sp, #16]
 80012d4:	0719      	lsls	r1, r3, #28
 80012d6:	d519      	bpl.n	800130c <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80012d8:	9b05      	ldr	r3, [sp, #20]
 80012da:	f043 0308 	orr.w	r3, r3, #8
 80012de:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80012e0:	9b04      	ldr	r3, [sp, #16]
 80012e2:	075a      	lsls	r2, r3, #29
 80012e4:	d550      	bpl.n	8001388 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80012e6:	69a1      	ldr	r1, [r4, #24]
 80012e8:	2902      	cmp	r1, #2
 80012ea:	d145      	bne.n	8001378 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80012ec:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80012ee:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80012f0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80012f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80012f8:	bf18      	it	ne
 80012fa:	2101      	movne	r1, #1
 80012fc:	f001 f8a0 	bl	8002440 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001300:	4620      	mov	r0, r4
 8001302:	f008 ffb4 	bl	800a26e <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8001306:	4620      	mov	r0, r4
 8001308:	f008 ffa8 	bl	800a25c <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800130c:	9b04      	ldr	r3, [sp, #16]
 800130e:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001310:	bf42      	ittt	mi
 8001312:	9b05      	ldrmi	r3, [sp, #20]
 8001314:	f043 0320 	orrmi.w	r3, r3, #32
 8001318:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800131a:	9b05      	ldr	r3, [sp, #20]
 800131c:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001320:	6820      	ldr	r0, [r4, #0]
 8001322:	f001 f885 	bl	8002430 <USB_ReadInterrupts>
 8001326:	0707      	lsls	r7, r0, #28
 8001328:	d505      	bpl.n	8001336 <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 800132a:	4620      	mov	r0, r4
 800132c:	f008 ff92 	bl	800a254 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	2208      	movs	r2, #8
 8001334:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001336:	6820      	ldr	r0, [r4, #0]
 8001338:	f001 f87a 	bl	8002430 <USB_ReadInterrupts>
 800133c:	0185      	lsls	r5, r0, #6
 800133e:	d512      	bpl.n	8001366 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001340:	6820      	ldr	r0, [r4, #0]
 8001342:	f001 f9dc 	bl	80026fe <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001346:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800134a:	9001      	str	r0, [sp, #4]
 800134c:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001350:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001352:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001356:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001358:	68a3      	ldr	r3, [r4, #8]
 800135a:	459a      	cmp	sl, r3
 800135c:	d323      	bcc.n	80013a6 <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001364:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001366:	6820      	ldr	r0, [r4, #0]
 8001368:	f001 f862 	bl	8002430 <USB_ReadInterrupts>
 800136c:	06c3      	lsls	r3, r0, #27
 800136e:	f100 8220 	bmi.w	80017b2 <HAL_HCD_IRQHandler+0x5be>
}
 8001372:	b007      	add	sp, #28
 8001374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001378:	68e3      	ldr	r3, [r4, #12]
 800137a:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 800137c:	bf04      	itt	eq
 800137e:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8001382:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8001386:	e7bb      	b.n	8001300 <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001388:	4620      	mov	r0, r4
 800138a:	f008 ff74 	bl	800a276 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800138e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001392:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001394:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001398:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800139c:	6993      	ldr	r3, [r2, #24]
 800139e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	e7b2      	b.n	800130c <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80013a6:	9a01      	ldr	r2, [sp, #4]
 80013a8:	f00a 030f 	and.w	r3, sl, #15
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
 80013b0:	07d8      	lsls	r0, r3, #31
 80013b2:	f140 808a 	bpl.w	80014ca <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80013b6:	f8d8 3000 	ldr.w	r3, [r8]
 80013ba:	6820      	ldr	r0, [r4, #0]
 80013bc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80013c0:	fa5f f58a 	uxtb.w	r5, sl
 80013c4:	f000 8104 	beq.w	80015d0 <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013c8:	016a      	lsls	r2, r5, #5
 80013ca:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 80013ce:	18d6      	adds	r6, r2, r3
 80013d0:	68b1      	ldr	r1, [r6, #8]
 80013d2:	0749      	lsls	r1, r1, #29
 80013d4:	d513      	bpl.n	80013fe <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013d6:	2104      	movs	r1, #4
 80013d8:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013da:	68f1      	ldr	r1, [r6, #12]
 80013dc:	f041 0102 	orr.w	r1, r1, #2
 80013e0:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80013e2:	68b1      	ldr	r1, [r6, #8]
 80013e4:	0589      	lsls	r1, r1, #22
 80013e6:	d542      	bpl.n	800146e <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013e8:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013ea:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013f2:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013f4:	f001 f988 	bl	8002708 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80013f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fc:	e0c7      	b.n	800158e <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80013fe:	68b1      	ldr	r1, [r6, #8]
 8001400:	0689      	lsls	r1, r1, #26
 8001402:	d502      	bpl.n	800140a <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001404:	2120      	movs	r1, #32
 8001406:	60b1      	str	r1, [r6, #8]
 8001408:	e7eb      	b.n	80013e2 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800140a:	68b1      	ldr	r1, [r6, #8]
 800140c:	0709      	lsls	r1, r1, #28
 800140e:	d515      	bpl.n	800143c <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001410:	68f1      	ldr	r1, [r6, #12]
 8001412:	9303      	str	r3, [sp, #12]
 8001414:	f041 0102 	orr.w	r1, r1, #2
 8001418:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800141a:	fb07 4105 	mla	r1, r7, r5, r4
 800141e:	f04f 0e05 	mov.w	lr, #5
 8001422:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001426:	2110      	movs	r1, #16
 8001428:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800142a:	2108      	movs	r1, #8
 800142c:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800142e:	4629      	mov	r1, r5
 8001430:	9202      	str	r2, [sp, #8]
 8001432:	f001 f969 	bl	8002708 <USB_HC_Halt>
 8001436:	9a02      	ldr	r2, [sp, #8]
 8001438:	9b03      	ldr	r3, [sp, #12]
 800143a:	e7d2      	b.n	80013e2 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800143c:	68b1      	ldr	r1, [r6, #8]
 800143e:	0549      	lsls	r1, r1, #21
 8001440:	d5cf      	bpl.n	80013e2 <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001442:	68f1      	ldr	r1, [r6, #12]
 8001444:	9303      	str	r3, [sp, #12]
 8001446:	f041 0102 	orr.w	r1, r1, #2
 800144a:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800144c:	4629      	mov	r1, r5
 800144e:	9202      	str	r2, [sp, #8]
 8001450:	f001 f95a 	bl	8002708 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001454:	2110      	movs	r1, #16
 8001456:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001458:	fb07 4105 	mla	r1, r7, r5, r4
 800145c:	2008      	movs	r0, #8
 800145e:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001462:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001466:	60b1      	str	r1, [r6, #8]
 8001468:	9b03      	ldr	r3, [sp, #12]
 800146a:	9a02      	ldr	r2, [sp, #8]
 800146c:	e7b9      	b.n	80013e2 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800146e:	68b1      	ldr	r1, [r6, #8]
 8001470:	07c8      	lsls	r0, r1, #31
 8001472:	d53d      	bpl.n	80014f0 <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 8001474:	6921      	ldr	r1, [r4, #16]
 8001476:	b149      	cbz	r1, 800148c <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001478:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800147c:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800147e:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001482:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001486:	1a09      	subs	r1, r1, r0
 8001488:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 800148c:	fb07 4e05 	mla	lr, r7, r5, r4
 8001490:	2001      	movs	r0, #1
 8001492:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001496:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800149a:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800149c:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 80014a0:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80014a4:	d116      	bne.n	80014d4 <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014a6:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014a8:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014b0:	4629      	mov	r1, r5
 80014b2:	f001 f929 	bl	8002708 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014b6:	2310      	movs	r3, #16
 80014b8:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80014ba:	fb07 4505 	mla	r5, r7, r5, r4
 80014be:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80014c2:	f083 0301 	eor.w	r3, r3, #1
 80014c6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80014ca:	f10a 0a01 	add.w	sl, sl, #1
 80014ce:	f108 0820 	add.w	r8, r8, #32
 80014d2:	e741      	b.n	8001358 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80014d4:	2903      	cmp	r1, #3
 80014d6:	d1f0      	bne.n	80014ba <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80014d8:	58d1      	ldr	r1, [r2, r3]
 80014da:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80014de:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80014e0:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80014e4:	4602      	mov	r2, r0
 80014e6:	4629      	mov	r1, r5
 80014e8:	4620      	mov	r0, r4
 80014ea:	f008 febf 	bl	800a26c <HAL_HCD_HC_NotifyURBChange_Callback>
 80014ee:	e7e4      	b.n	80014ba <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80014f0:	68b1      	ldr	r1, [r6, #8]
 80014f2:	0789      	lsls	r1, r1, #30
 80014f4:	d536      	bpl.n	8001564 <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80014f6:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80014f8:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80014fc:	f021 0102 	bic.w	r1, r1, #2
 8001500:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001502:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8001506:	2901      	cmp	r1, #1
 8001508:	d10c      	bne.n	8001524 <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800150a:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800150e:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001512:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001516:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800151a:	4629      	mov	r1, r5
 800151c:	4620      	mov	r0, r4
 800151e:	f008 fea5 	bl	800a26c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001522:	e7d2      	b.n	80014ca <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001524:	2905      	cmp	r1, #5
 8001526:	d0f0      	beq.n	800150a <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001528:	2906      	cmp	r1, #6
 800152a:	d001      	beq.n	8001530 <HAL_HCD_IRQHandler+0x33c>
 800152c:	2908      	cmp	r1, #8
 800152e:	d114      	bne.n	800155a <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 8001530:	fb07 4105 	mla	r1, r7, r5, r4
 8001534:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8001536:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001538:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 800153a:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800153c:	bf83      	ittte	hi
 800153e:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001540:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001544:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001548:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800154c:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800154e:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001552:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001556:	50d1      	str	r1, [r2, r3]
 8001558:	e7d9      	b.n	800150e <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800155a:	2903      	cmp	r1, #3
 800155c:	d1d7      	bne.n	800150e <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800155e:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8001562:	e7f3      	b.n	800154c <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001564:	68b1      	ldr	r1, [r6, #8]
 8001566:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800156a:	d012      	beq.n	8001592 <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800156c:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800156e:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001576:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800157a:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 800157c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800157e:	3201      	adds	r2, #1
 8001580:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001582:	2206      	movs	r2, #6
 8001584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001588:	f001 f8be 	bl	8002708 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	60b3      	str	r3, [r6, #8]
 8001590:	e79b      	b.n	80014ca <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001592:	68b3      	ldr	r3, [r6, #8]
 8001594:	06da      	lsls	r2, r3, #27
 8001596:	d598      	bpl.n	80014ca <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001598:	fb07 4205 	mla	r2, r7, r5, r4
 800159c:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d10a      	bne.n	80015ba <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80015a4:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015a6:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015a8:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015b0:	4629      	mov	r1, r5
 80015b2:	f001 f8a9 	bl	8002708 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015b6:	2310      	movs	r3, #16
 80015b8:	e7e9      	b.n	800158e <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80015ba:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 80015be:	d1fa      	bne.n	80015b6 <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80015c0:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80015c2:	6923      	ldr	r3, [r4, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f6      	bne.n	80015b6 <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 80015c8:	2303      	movs	r3, #3
 80015ca:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 80015ce:	e7ea      	b.n	80015a6 <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80015d0:	0169      	lsls	r1, r5, #5
 80015d2:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 80015d6:	188e      	adds	r6, r1, r2
 80015d8:	68b3      	ldr	r3, [r6, #8]
 80015da:	f013 0e04 	ands.w	lr, r3, #4
 80015de:	d006      	beq.n	80015ee <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80015e0:	2304      	movs	r3, #4
 80015e2:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015e4:	68f3      	ldr	r3, [r6, #12]
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	60f3      	str	r3, [r6, #12]
 80015ec:	e76d      	b.n	80014ca <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80015ee:	68b3      	ldr	r3, [r6, #8]
 80015f0:	f013 0320 	ands.w	r3, r3, #32
 80015f4:	d014      	beq.n	8001620 <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80015f6:	2320      	movs	r3, #32
 80015f8:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80015fa:	fb07 4305 	mla	r3, r7, r5, r4
 80015fe:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001602:	2a01      	cmp	r2, #1
 8001604:	f47f af61 	bne.w	80014ca <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 8001608:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800160c:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001610:	68f3      	ldr	r3, [r6, #12]
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001618:	4629      	mov	r1, r5
 800161a:	f001 f875 	bl	8002708 <USB_HC_Halt>
 800161e:	e754      	b.n	80014ca <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001620:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8001624:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001628:	d011      	beq.n	800164e <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 800162a:	fb07 4205 	mla	r2, r7, r5, r4
 800162e:	2104      	movs	r1, #4
 8001630:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8001634:	2101      	movs	r1, #1
 8001636:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800163a:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800163c:	68f3      	ldr	r3, [r6, #12]
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001644:	4629      	mov	r1, r5
 8001646:	f001 f85f 	bl	8002708 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800164a:	2340      	movs	r3, #64	; 0x40
 800164c:	e79f      	b.n	800158e <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800164e:	68b3      	ldr	r3, [r6, #8]
 8001650:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8001654:	d005      	beq.n	8001662 <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001656:	68f3      	ldr	r3, [r6, #12]
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800165e:	4629      	mov	r1, r5
 8001660:	e6c8      	b.n	80013f4 <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001662:	68b3      	ldr	r3, [r6, #8]
 8001664:	07db      	lsls	r3, r3, #31
 8001666:	d511      	bpl.n	800168c <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001668:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800166a:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800166e:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001672:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001676:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001678:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800167a:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800167c:	f001 f844 	bl	8002708 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001680:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001682:	2201      	movs	r2, #1
 8001684:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800168a:	e71e      	b.n	80014ca <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800168c:	68b3      	ldr	r3, [r6, #8]
 800168e:	071b      	lsls	r3, r3, #28
 8001690:	d50e      	bpl.n	80016b0 <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001692:	2308      	movs	r3, #8
 8001694:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001696:	68f3      	ldr	r3, [r6, #12]
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800169e:	4629      	mov	r1, r5
 80016a0:	f001 f832 	bl	8002708 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80016a4:	fb07 4505 	mla	r5, r7, r5, r4
 80016a8:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80016aa:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80016ae:	e70c      	b.n	80014ca <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80016b0:	68b3      	ldr	r3, [r6, #8]
 80016b2:	06db      	lsls	r3, r3, #27
 80016b4:	d515      	bpl.n	80016e2 <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016b6:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 80016ba:	2203      	movs	r2, #3
 80016bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 80016c0:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016c4:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 80016c8:	b92a      	cbnz	r2, 80016d6 <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80016ca:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80016ce:	b912      	cbnz	r2, 80016d6 <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016d6:	68f3      	ldr	r3, [r6, #12]
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016de:	4629      	mov	r1, r5
 80016e0:	e767      	b.n	80015b2 <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80016e2:	68b3      	ldr	r3, [r6, #8]
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	d50c      	bpl.n	8001702 <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016e8:	68f3      	ldr	r3, [r6, #12]
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016f0:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 80016f2:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016f6:	f001 f807 	bl	8002708 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80016fa:	2306      	movs	r3, #6
 80016fc:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001700:	e744      	b.n	800158c <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001702:	68b3      	ldr	r3, [r6, #8]
 8001704:	055b      	lsls	r3, r3, #21
 8001706:	d50f      	bpl.n	8001728 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001708:	68f3      	ldr	r3, [r6, #12]
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001710:	4629      	mov	r1, r5
 8001712:	f000 fff9 	bl	8002708 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001716:	2310      	movs	r3, #16
 8001718:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800171a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171e:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001720:	fb07 4505 	mla	r5, r7, r5, r4
 8001724:	2308      	movs	r3, #8
 8001726:	e7c0      	b.n	80016aa <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001728:	68b3      	ldr	r3, [r6, #8]
 800172a:	0798      	lsls	r0, r3, #30
 800172c:	f57f aecd 	bpl.w	80014ca <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001730:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001732:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001736:	f023 0302 	bic.w	r3, r3, #2
 800173a:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800173c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001740:	2b01      	cmp	r3, #1
 8001742:	d10e      	bne.n	8001762 <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001744:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001748:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800174c:	3b02      	subs	r3, #2
 800174e:	2b01      	cmp	r3, #1
 8001750:	f63f aedd 	bhi.w	800150e <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001754:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001758:	f083 0301 	eor.w	r3, r3, #1
 800175c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8001760:	e6d5      	b.n	800150e <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001762:	2b03      	cmp	r3, #3
 8001764:	d102      	bne.n	800176c <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001766:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 800176a:	e6d0      	b.n	800150e <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800176c:	2b04      	cmp	r3, #4
 800176e:	d0fa      	beq.n	8001766 <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001770:	2b05      	cmp	r3, #5
 8001772:	d102      	bne.n	800177a <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001774:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8001778:	e6c9      	b.n	800150e <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800177a:	2b06      	cmp	r3, #6
 800177c:	d002      	beq.n	8001784 <HAL_HCD_IRQHandler+0x590>
 800177e:	2b08      	cmp	r3, #8
 8001780:	f47f aec5 	bne.w	800150e <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 8001784:	fb07 4005 	mla	r0, r7, r5, r4
 8001788:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800178a:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800178c:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 800178e:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001790:	bf84      	itt	hi
 8001792:	2304      	movhi	r3, #4
 8001794:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001798:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 800179a:	bf88      	it	hi
 800179c:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80017a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80017a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80017a8:	bf98      	it	ls
 80017aa:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80017ae:	508b      	str	r3, [r1, r2]
 80017b0:	e6ad      	b.n	800150e <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017b2:	6826      	ldr	r6, [r4, #0]
 80017b4:	69b3      	ldr	r3, [r6, #24]
 80017b6:	f023 0310 	bic.w	r3, r3, #16
 80017ba:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 80017bc:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80017be:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 80017c2:	2a02      	cmp	r2, #2
 80017c4:	d129      	bne.n	800181a <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017c6:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80017ca:	f1b8 0f00 	cmp.w	r8, #0
 80017ce:	d024      	beq.n	800181a <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80017d0:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80017d4:	2728      	movs	r7, #40	; 0x28
 80017d6:	fb07 4705 	mla	r7, r7, r5, r4
 80017da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80017dc:	b1e9      	cbz	r1, 800181a <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80017de:	4642      	mov	r2, r8
 80017e0:	4630      	mov	r0, r6
 80017e2:	f000 fe17 	bl	8002414 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80017e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017e8:	4443      	add	r3, r8
 80017ea:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80017ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ee:	4443      	add	r3, r8
 80017f0:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80017f2:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 80017f6:	016b      	lsls	r3, r5, #5
 80017f8:	199a      	adds	r2, r3, r6
 80017fa:	6911      	ldr	r1, [r2, #16]
 80017fc:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <HAL_HCD_IRQHandler+0x634>)
 80017fe:	400a      	ands	r2, r1
 8001800:	b15a      	cbz	r2, 800181a <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001802:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001804:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001808:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800180c:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800180e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001812:	f083 0301 	eor.w	r3, r3, #1
 8001816:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800181a:	6822      	ldr	r2, [r4, #0]
 800181c:	6993      	ldr	r3, [r2, #24]
 800181e:	f043 0310 	orr.w	r3, r3, #16
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	e5a5      	b.n	8001372 <HAL_HCD_IRQHandler+0x17e>
 8001826:	bf00      	nop
 8001828:	1ff80000 	.word	0x1ff80000

0800182c <HAL_HCD_Start>:
{
 800182c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 800182e:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001832:	2b01      	cmp	r3, #1
{
 8001834:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001836:	d00d      	beq.n	8001854 <HAL_HCD_Start+0x28>
 8001838:	2501      	movs	r5, #1
 800183a:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800183e:	6800      	ldr	r0, [r0, #0]
 8001840:	f000 fd8e 	bl	8002360 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001844:	4629      	mov	r1, r5
 8001846:	6820      	ldr	r0, [r4, #0]
 8001848:	f000 fe34 	bl	80024b4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800184c:	2000      	movs	r0, #0
 800184e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8001852:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8001854:	2002      	movs	r0, #2
}
 8001856:	bd38      	pop	{r3, r4, r5, pc}

08001858 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8001858:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800185c:	2b01      	cmp	r3, #1
{
 800185e:	b510      	push	{r4, lr}
 8001860:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001862:	d009      	beq.n	8001878 <HAL_HCD_Stop+0x20>
 8001864:	2301      	movs	r3, #1
 8001866:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800186a:	6800      	ldr	r0, [r0, #0]
 800186c:	f001 f862 	bl	8002934 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001870:	2000      	movs	r0, #0
 8001872:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8001876:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001878:	2002      	movs	r0, #2
}
 800187a:	bd10      	pop	{r4, pc}

0800187c <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 800187c:	6800      	ldr	r0, [r0, #0]
 800187e:	f000 bdfb 	b.w	8002478 <USB_ResetPort>

08001882 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8001882:	2328      	movs	r3, #40	; 0x28
 8001884:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001888:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 800188c:	4770      	bx	lr

0800188e <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800188e:	2328      	movs	r3, #40	; 0x28
 8001890:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001894:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8001896:	4770      	bx	lr

08001898 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001898:	6800      	ldr	r0, [r0, #0]
 800189a:	f000 bea6 	b.w	80025ea <USB_GetCurrentFrame>

0800189e <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800189e:	6800      	ldr	r0, [r0, #0]
 80018a0:	f000 be98 	b.w	80025d4 <USB_GetHostSpeed>

080018a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a6:	4604      	mov	r4, r0
 80018a8:	b908      	cbnz	r0, 80018ae <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80018aa:	2001      	movs	r0, #1
 80018ac:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018b6:	b91b      	cbnz	r3, 80018c0 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018bc:	f008 fae0 	bl	8009e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c0:	2324      	movs	r3, #36	; 0x24
 80018c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e0:	f000 fb02 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018e4:	6865      	ldr	r5, [r4, #4]
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_I2C_Init+0x148>)
 80018e8:	429d      	cmp	r5, r3
 80018ea:	d84d      	bhi.n	8001988 <HAL_I2C_Init+0xe4>
 80018ec:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <HAL_I2C_Init+0x14c>)
 80018ee:	4298      	cmp	r0, r3
 80018f0:	d9db      	bls.n	80018aa <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018f2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80018f4:	493f      	ldr	r1, [pc, #252]	; (80019f4 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018f6:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80018f8:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001900:	430b      	orrs	r3, r1
 8001902:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001904:	6a13      	ldr	r3, [r2, #32]
 8001906:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800190a:	3101      	adds	r1, #1
 800190c:	4319      	orrs	r1, r3
 800190e:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001910:	69d1      	ldr	r1, [r2, #28]
 8001912:	4b36      	ldr	r3, [pc, #216]	; (80019ec <HAL_I2C_Init+0x148>)
 8001914:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001918:	429d      	cmp	r5, r3
 800191a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800191e:	f100 30ff 	add.w	r0, r0, #4294967295
 8001922:	d848      	bhi.n	80019b6 <HAL_I2C_Init+0x112>
 8001924:	006d      	lsls	r5, r5, #1
 8001926:	fbb0 f0f5 	udiv	r0, r0, r5
 800192a:	3001      	adds	r0, #1
 800192c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001930:	2b04      	cmp	r3, #4
 8001932:	bf38      	it	cc
 8001934:	2304      	movcc	r3, #4
 8001936:	430b      	orrs	r3, r1
 8001938:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800193a:	6811      	ldr	r1, [r2, #0]
 800193c:	6a20      	ldr	r0, [r4, #32]
 800193e:	69e3      	ldr	r3, [r4, #28]
 8001940:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001944:	4303      	orrs	r3, r0
 8001946:	430b      	orrs	r3, r1
 8001948:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800194a:	6891      	ldr	r1, [r2, #8]
 800194c:	68e0      	ldr	r0, [r4, #12]
 800194e:	6923      	ldr	r3, [r4, #16]
 8001950:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001954:	4303      	orrs	r3, r0
 8001956:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800195a:	430b      	orrs	r3, r1
 800195c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800195e:	68d1      	ldr	r1, [r2, #12]
 8001960:	69a0      	ldr	r0, [r4, #24]
 8001962:	6963      	ldr	r3, [r4, #20]
 8001964:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001968:	4303      	orrs	r3, r0
 800196a:	430b      	orrs	r3, r1
 800196c:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800196e:	6813      	ldr	r3, [r2, #0]
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001976:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001978:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800197a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800197c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001980:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001982:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001986:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_I2C_Init+0x154>)
 800198a:	4298      	cmp	r0, r3
 800198c:	d98d      	bls.n	80018aa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800198e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001990:	4e18      	ldr	r6, [pc, #96]	; (80019f4 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001992:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001994:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001998:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800199c:	4333      	orrs	r3, r6
 800199e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019a0:	6a13      	ldr	r3, [r2, #32]
 80019a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019a6:	4371      	muls	r1, r6
 80019a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019ac:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80019b0:	fbb1 f1f6 	udiv	r1, r1, r6
 80019b4:	e7a9      	b.n	800190a <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019b6:	68a3      	ldr	r3, [r4, #8]
 80019b8:	b953      	cbnz	r3, 80019d0 <HAL_I2C_Init+0x12c>
 80019ba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80019be:	fbb0 f0f3 	udiv	r0, r0, r3
 80019c2:	1c43      	adds	r3, r0, #1
 80019c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c8:	b16b      	cbz	r3, 80019e6 <HAL_I2C_Init+0x142>
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ce:	e7b2      	b.n	8001936 <HAL_I2C_Init+0x92>
 80019d0:	2319      	movs	r3, #25
 80019d2:	436b      	muls	r3, r5
 80019d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80019d8:	1c43      	adds	r3, r0, #1
 80019da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019de:	b113      	cbz	r3, 80019e6 <HAL_I2C_Init+0x142>
 80019e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019e4:	e7a7      	b.n	8001936 <HAL_I2C_Init+0x92>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e7a5      	b.n	8001936 <HAL_I2C_Init+0x92>
 80019ea:	bf00      	nop
 80019ec:	000186a0 	.word	0x000186a0
 80019f0:	001e847f 	.word	0x001e847f
 80019f4:	000f4240 	.word	0x000f4240
 80019f8:	003d08ff 	.word	0x003d08ff

080019fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a00:	4604      	mov	r4, r0
 8001a02:	b908      	cbnz	r0, 8001a08 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001a04:	2001      	movs	r0, #1
 8001a06:	e03f      	b.n	8001a88 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a08:	6803      	ldr	r3, [r0, #0]
 8001a0a:	07dd      	lsls	r5, r3, #31
 8001a0c:	d410      	bmi.n	8001a30 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	6823      	ldr	r3, [r4, #0]
 8001a10:	0798      	lsls	r0, r3, #30
 8001a12:	d45a      	bmi.n	8001aca <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	071a      	lsls	r2, r3, #28
 8001a18:	f100 809c 	bmi.w	8001b54 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	075b      	lsls	r3, r3, #29
 8001a20:	f100 80ba 	bmi.w	8001b98 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a24:	69a0      	ldr	r0, [r4, #24]
 8001a26:	2800      	cmp	r0, #0
 8001a28:	f040 811b 	bne.w	8001c62 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	e02b      	b.n	8001a88 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a30:	4ba4      	ldr	r3, [pc, #656]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	f002 020c 	and.w	r2, r2, #12
 8001a38:	2a04      	cmp	r2, #4
 8001a3a:	d007      	beq.n	8001a4c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a42:	2a08      	cmp	r2, #8
 8001a44:	d10a      	bne.n	8001a5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	0259      	lsls	r1, r3, #9
 8001a4a:	d507      	bpl.n	8001a5c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	4b9d      	ldr	r3, [pc, #628]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	039a      	lsls	r2, r3, #14
 8001a52:	d5dc      	bpl.n	8001a0e <HAL_RCC_OscConfig+0x12>
 8001a54:	6863      	ldr	r3, [r4, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1d9      	bne.n	8001a0e <HAL_RCC_OscConfig+0x12>
 8001a5a:	e7d3      	b.n	8001a04 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5c:	6863      	ldr	r3, [r4, #4]
 8001a5e:	4d99      	ldr	r5, [pc, #612]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a64:	d113      	bne.n	8001a8e <HAL_RCC_OscConfig+0x92>
 8001a66:	682b      	ldr	r3, [r5, #0]
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a6e:	f7fe fde9 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4d94      	ldr	r5, [pc, #592]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001a74:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	682b      	ldr	r3, [r5, #0]
 8001a78:	039b      	lsls	r3, r3, #14
 8001a7a:	d4c8      	bmi.n	8001a0e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7fe fde2 	bl	8000644 <HAL_GetTick>
 8001a80:	1b80      	subs	r0, r0, r6
 8001a82:	2864      	cmp	r0, #100	; 0x64
 8001a84:	d9f7      	bls.n	8001a76 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001a86:	2003      	movs	r0, #3
}
 8001a88:	b002      	add	sp, #8
 8001a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a92:	d104      	bne.n	8001a9e <HAL_RCC_OscConfig+0xa2>
 8001a94:	682b      	ldr	r3, [r5, #0]
 8001a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9a:	602b      	str	r3, [r5, #0]
 8001a9c:	e7e3      	b.n	8001a66 <HAL_RCC_OscConfig+0x6a>
 8001a9e:	682a      	ldr	r2, [r5, #0]
 8001aa0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aa4:	602a      	str	r2, [r5, #0]
 8001aa6:	682a      	ldr	r2, [r5, #0]
 8001aa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aac:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1dd      	bne.n	8001a6e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001ab2:	f7fe fdc7 	bl	8000644 <HAL_GetTick>
 8001ab6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	039f      	lsls	r7, r3, #14
 8001abc:	d5a7      	bpl.n	8001a0e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001abe:	f7fe fdc1 	bl	8000644 <HAL_GetTick>
 8001ac2:	1b80      	subs	r0, r0, r6
 8001ac4:	2864      	cmp	r0, #100	; 0x64
 8001ac6:	d9f7      	bls.n	8001ab8 <HAL_RCC_OscConfig+0xbc>
 8001ac8:	e7dd      	b.n	8001a86 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aca:	4b7e      	ldr	r3, [pc, #504]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	f012 0f0c 	tst.w	r2, #12
 8001ad2:	d007      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ada:	2a08      	cmp	r2, #8
 8001adc:	d111      	bne.n	8001b02 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	025e      	lsls	r6, r3, #9
 8001ae2:	d40e      	bmi.n	8001b02 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae4:	4b77      	ldr	r3, [pc, #476]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	0795      	lsls	r5, r2, #30
 8001aea:	d502      	bpl.n	8001af2 <HAL_RCC_OscConfig+0xf6>
 8001aec:	68e2      	ldr	r2, [r4, #12]
 8001aee:	2a01      	cmp	r2, #1
 8001af0:	d188      	bne.n	8001a04 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	6921      	ldr	r1, [r4, #16]
 8001af6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001afa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001afe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b00:	e788      	b.n	8001a14 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b02:	68e2      	ldr	r2, [r4, #12]
 8001b04:	4b70      	ldr	r3, [pc, #448]	; (8001cc8 <HAL_RCC_OscConfig+0x2cc>)
 8001b06:	b1b2      	cbz	r2, 8001b36 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b0c:	f7fe fd9a 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	4d6c      	ldr	r5, [pc, #432]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001b12:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	682b      	ldr	r3, [r5, #0]
 8001b16:	0798      	lsls	r0, r3, #30
 8001b18:	d507      	bpl.n	8001b2a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	682b      	ldr	r3, [r5, #0]
 8001b1c:	6922      	ldr	r2, [r4, #16]
 8001b1e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b22:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b26:	602b      	str	r3, [r5, #0]
 8001b28:	e774      	b.n	8001a14 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7fe fd8b 	bl	8000644 <HAL_GetTick>
 8001b2e:	1b80      	subs	r0, r0, r6
 8001b30:	2802      	cmp	r0, #2
 8001b32:	d9ef      	bls.n	8001b14 <HAL_RCC_OscConfig+0x118>
 8001b34:	e7a7      	b.n	8001a86 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001b36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b38:	f7fe fd84 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3c:	4d61      	ldr	r5, [pc, #388]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001b3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b40:	682b      	ldr	r3, [r5, #0]
 8001b42:	0799      	lsls	r1, r3, #30
 8001b44:	f57f af66 	bpl.w	8001a14 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b48:	f7fe fd7c 	bl	8000644 <HAL_GetTick>
 8001b4c:	1b80      	subs	r0, r0, r6
 8001b4e:	2802      	cmp	r0, #2
 8001b50:	d9f6      	bls.n	8001b40 <HAL_RCC_OscConfig+0x144>
 8001b52:	e798      	b.n	8001a86 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b54:	6962      	ldr	r2, [r4, #20]
 8001b56:	4b5d      	ldr	r3, [pc, #372]	; (8001ccc <HAL_RCC_OscConfig+0x2d0>)
 8001b58:	b17a      	cbz	r2, 8001b7a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b5e:	f7fe fd71 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	4d58      	ldr	r5, [pc, #352]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001b64:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b68:	079f      	lsls	r7, r3, #30
 8001b6a:	f53f af57 	bmi.w	8001a1c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6e:	f7fe fd69 	bl	8000644 <HAL_GetTick>
 8001b72:	1b80      	subs	r0, r0, r6
 8001b74:	2802      	cmp	r0, #2
 8001b76:	d9f6      	bls.n	8001b66 <HAL_RCC_OscConfig+0x16a>
 8001b78:	e785      	b.n	8001a86 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001b7a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b7c:	f7fe fd62 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	4d50      	ldr	r5, [pc, #320]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001b82:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b86:	0798      	lsls	r0, r3, #30
 8001b88:	f57f af48 	bpl.w	8001a1c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7fe fd5a 	bl	8000644 <HAL_GetTick>
 8001b90:	1b80      	subs	r0, r0, r6
 8001b92:	2802      	cmp	r0, #2
 8001b94:	d9f6      	bls.n	8001b84 <HAL_RCC_OscConfig+0x188>
 8001b96:	e776      	b.n	8001a86 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b98:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
 8001b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001ba0:	d128      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	9201      	str	r2, [sp, #4]
 8001ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bb6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	4d45      	ldr	r5, [pc, #276]	; (8001cd0 <HAL_RCC_OscConfig+0x2d4>)
 8001bba:	682b      	ldr	r3, [r5, #0]
 8001bbc:	05d9      	lsls	r1, r3, #23
 8001bbe:	d51b      	bpl.n	8001bf8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	68a3      	ldr	r3, [r4, #8]
 8001bc2:	4d40      	ldr	r5, [pc, #256]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d127      	bne.n	8001c18 <HAL_RCC_OscConfig+0x21c>
 8001bc8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001bd0:	f7fe fd38 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	4d3b      	ldr	r5, [pc, #236]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001bd6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bde:	079b      	lsls	r3, r3, #30
 8001be0:	d539      	bpl.n	8001c56 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001be2:	2e00      	cmp	r6, #0
 8001be4:	f43f af1e 	beq.w	8001a24 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4a36      	ldr	r2, [pc, #216]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
 8001bea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	e717      	b.n	8001a24 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001bf4:	2600      	movs	r6, #0
 8001bf6:	e7df      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001c00:	f7fe fd20 	bl	8000644 <HAL_GetTick>
 8001c04:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c06:	682b      	ldr	r3, [r5, #0]
 8001c08:	05da      	lsls	r2, r3, #23
 8001c0a:	d4d9      	bmi.n	8001bc0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0c:	f7fe fd1a 	bl	8000644 <HAL_GetTick>
 8001c10:	1bc0      	subs	r0, r0, r7
 8001c12:	2802      	cmp	r0, #2
 8001c14:	d9f7      	bls.n	8001c06 <HAL_RCC_OscConfig+0x20a>
 8001c16:	e736      	b.n	8001a86 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d104      	bne.n	8001c26 <HAL_RCC_OscConfig+0x22a>
 8001c1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	672b      	str	r3, [r5, #112]	; 0x70
 8001c24:	e7d0      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1cc>
 8001c26:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c28:	f022 0201 	bic.w	r2, r2, #1
 8001c2c:	672a      	str	r2, [r5, #112]	; 0x70
 8001c2e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c30:	f022 0204 	bic.w	r2, r2, #4
 8001c34:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ca      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001c3a:	f7fe fd03 	bl	8000644 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c42:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c44:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c46:	0798      	lsls	r0, r3, #30
 8001c48:	d5cb      	bpl.n	8001be2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7fe fcfb 	bl	8000644 <HAL_GetTick>
 8001c4e:	1bc0      	subs	r0, r0, r7
 8001c50:	4540      	cmp	r0, r8
 8001c52:	d9f7      	bls.n	8001c44 <HAL_RCC_OscConfig+0x248>
 8001c54:	e717      	b.n	8001a86 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7fe fcf5 	bl	8000644 <HAL_GetTick>
 8001c5a:	1bc0      	subs	r0, r0, r7
 8001c5c:	4540      	cmp	r0, r8
 8001c5e:	d9bd      	bls.n	8001bdc <HAL_RCC_OscConfig+0x1e0>
 8001c60:	e711      	b.n	8001a86 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c62:	4d18      	ldr	r5, [pc, #96]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
 8001c64:	68ab      	ldr	r3, [r5, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d047      	beq.n	8001cfe <HAL_RCC_OscConfig+0x302>
 8001c6e:	4e19      	ldr	r6, [pc, #100]	; (8001cd4 <HAL_RCC_OscConfig+0x2d8>)
 8001c70:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c72:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001c74:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c76:	d135      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001c78:	f7fe fce4 	bl	8000644 <HAL_GetTick>
 8001c7c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	682b      	ldr	r3, [r5, #0]
 8001c80:	0199      	lsls	r1, r3, #6
 8001c82:	d429      	bmi.n	8001cd8 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c84:	6a22      	ldr	r2, [r4, #32]
 8001c86:	69e3      	ldr	r3, [r4, #28]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c8c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c98:	4c0a      	ldr	r4, [pc, #40]	; (8001cc4 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c9a:	0852      	lsrs	r2, r2, #1
 8001c9c:	3a01      	subs	r2, #1
 8001c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ca2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001ca8:	f7fe fccc 	bl	8000644 <HAL_GetTick>
 8001cac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	019a      	lsls	r2, r3, #6
 8001cb2:	f53f aebb 	bmi.w	8001a2c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7fe fcc5 	bl	8000644 <HAL_GetTick>
 8001cba:	1b40      	subs	r0, r0, r5
 8001cbc:	2802      	cmp	r0, #2
 8001cbe:	d9f6      	bls.n	8001cae <HAL_RCC_OscConfig+0x2b2>
 8001cc0:	e6e1      	b.n	8001a86 <HAL_RCC_OscConfig+0x8a>
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	42470000 	.word	0x42470000
 8001ccc:	42470e80 	.word	0x42470e80
 8001cd0:	40007000 	.word	0x40007000
 8001cd4:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7fe fcb4 	bl	8000644 <HAL_GetTick>
 8001cdc:	1bc0      	subs	r0, r0, r7
 8001cde:	2802      	cmp	r0, #2
 8001ce0:	d9cd      	bls.n	8001c7e <HAL_RCC_OscConfig+0x282>
 8001ce2:	e6d0      	b.n	8001a86 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001ce4:	f7fe fcae 	bl	8000644 <HAL_GetTick>
 8001ce8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cea:	682b      	ldr	r3, [r5, #0]
 8001cec:	019b      	lsls	r3, r3, #6
 8001cee:	f57f ae9d 	bpl.w	8001a2c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7fe fca7 	bl	8000644 <HAL_GetTick>
 8001cf6:	1b00      	subs	r0, r0, r4
 8001cf8:	2802      	cmp	r0, #2
 8001cfa:	d9f6      	bls.n	8001cea <HAL_RCC_OscConfig+0x2ee>
 8001cfc:	e6c3      	b.n	8001a86 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfe:	2801      	cmp	r0, #1
 8001d00:	f43f aec2 	beq.w	8001a88 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8001d04:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	69e3      	ldr	r3, [r4, #28]
 8001d08:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f47f ae79 	bne.w	8001a04 <HAL_RCC_OscConfig+0x8>
 8001d12:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d14:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	f47f ae73 	bne.w	8001a04 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d24:	4003      	ands	r3, r0
 8001d26:	4293      	cmp	r3, r2
 8001d28:	f47f ae6c 	bne.w	8001a04 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d2e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d32:	4293      	cmp	r3, r2
 8001d34:	f47f ae66 	bne.w	8001a04 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d3a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001d3e:	1ac0      	subs	r0, r0, r3
 8001d40:	bf18      	it	ne
 8001d42:	2001      	movne	r0, #1
 8001d44:	e6a0      	b.n	8001a88 <HAL_RCC_OscConfig+0x8c>
 8001d46:	bf00      	nop

08001d48 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d48:	4913      	ldr	r1, [pc, #76]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001d4a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d4c:	688b      	ldr	r3, [r1, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d003      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x16>
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d003      	beq.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d5a:	4810      	ldr	r0, [pc, #64]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d5c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001d5e:	4810      	ldr	r0, [pc, #64]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001d60:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d62:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d64:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d66:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d68:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6c:	bf14      	ite	ne
 8001d6e:	480c      	ldrne	r0, [pc, #48]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d70:	480a      	ldreq	r0, [pc, #40]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d72:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001d76:	bf18      	it	ne
 8001d78:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7e:	fba1 0100 	umull	r0, r1, r1, r0
 8001d82:	f7fe fa8d 	bl	80002a0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x50>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001d8e:	3301      	adds	r3, #1
 8001d90:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001d92:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d96:	bd08      	pop	{r3, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	00f42400 	.word	0x00f42400
 8001da0:	007a1200 	.word	0x007a1200

08001da4 <HAL_RCC_ClockConfig>:
{
 8001da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001da8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001daa:	4604      	mov	r4, r0
 8001dac:	b910      	cbnz	r0, 8001db4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001dae:	2001      	movs	r0, #1
 8001db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_RCC_ClockConfig+0x124>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	f002 020f 	and.w	r2, r2, #15
 8001dbc:	428a      	cmp	r2, r1
 8001dbe:	d329      	bcc.n	8001e14 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	6821      	ldr	r1, [r4, #0]
 8001dc2:	078f      	lsls	r7, r1, #30
 8001dc4:	d42e      	bmi.n	8001e24 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	07c8      	lsls	r0, r1, #31
 8001dc8:	d441      	bmi.n	8001e4e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dca:	4b3f      	ldr	r3, [pc, #252]	; (8001ec8 <HAL_RCC_ClockConfig+0x124>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f002 020f 	and.w	r2, r2, #15
 8001dd2:	4295      	cmp	r5, r2
 8001dd4:	d367      	bcc.n	8001ea6 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd6:	6822      	ldr	r2, [r4, #0]
 8001dd8:	0751      	lsls	r1, r2, #29
 8001dda:	d46d      	bmi.n	8001eb8 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	0713      	lsls	r3, r2, #28
 8001dde:	d507      	bpl.n	8001df0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de0:	4a3a      	ldr	r2, [pc, #232]	; (8001ecc <HAL_RCC_ClockConfig+0x128>)
 8001de2:	6921      	ldr	r1, [r4, #16]
 8001de4:	6893      	ldr	r3, [r2, #8]
 8001de6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001dea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001df0:	f7ff ffaa 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001df4:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_RCC_ClockConfig+0x128>)
 8001df6:	4a36      	ldr	r2, [pc, #216]	; (8001ed0 <HAL_RCC_ClockConfig+0x12c>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	40d8      	lsrs	r0, r3
 8001e02:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <HAL_RCC_ClockConfig+0x130>)
 8001e04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001e06:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_RCC_ClockConfig+0x134>)
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	f7fe fbd1 	bl	80005b0 <HAL_InitTick>
  return HAL_OK;
 8001e0e:	2000      	movs	r0, #0
 8001e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e14:	b2ca      	uxtb	r2, r1
 8001e16:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	4299      	cmp	r1, r3
 8001e20:	d1c5      	bne.n	8001dae <HAL_RCC_ClockConfig+0xa>
 8001e22:	e7cd      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1c>
 8001e24:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e26:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e2a:	bf1e      	ittt	ne
 8001e2c:	689a      	ldrne	r2, [r3, #8]
 8001e2e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001e32:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e34:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e36:	bf42      	ittt	mi
 8001e38:	689a      	ldrmi	r2, [r3, #8]
 8001e3a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001e3e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	68a0      	ldr	r0, [r4, #8]
 8001e44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e48:	4302      	orrs	r2, r0
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	e7bb      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4e:	6862      	ldr	r2, [r4, #4]
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_RCC_ClockConfig+0x128>)
 8001e52:	2a01      	cmp	r2, #1
 8001e54:	d11d      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	d0a7      	beq.n	8001dae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5e:	4e1b      	ldr	r6, [pc, #108]	; (8001ecc <HAL_RCC_ClockConfig+0x128>)
 8001e60:	68b3      	ldr	r3, [r6, #8]
 8001e62:	f023 0303 	bic.w	r3, r3, #3
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001e6a:	f7fe fbeb 	bl	8000644 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001e72:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e74:	68b3      	ldr	r3, [r6, #8]
 8001e76:	6862      	ldr	r2, [r4, #4]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e80:	d0a3      	beq.n	8001dca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e82:	f7fe fbdf 	bl	8000644 <HAL_GetTick>
 8001e86:	1bc0      	subs	r0, r0, r7
 8001e88:	4540      	cmp	r0, r8
 8001e8a:	d9f3      	bls.n	8001e74 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001e8c:	2003      	movs	r0, #3
}
 8001e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e92:	1e91      	subs	r1, r2, #2
 8001e94:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e96:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e98:	d802      	bhi.n	8001ea0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e9e:	e7dd      	b.n	8001e5c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	f013 0f02 	tst.w	r3, #2
 8001ea4:	e7da      	b.n	8001e5c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	b2ea      	uxtb	r2, r5
 8001ea8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	429d      	cmp	r5, r3
 8001eb2:	f47f af7c 	bne.w	8001dae <HAL_RCC_ClockConfig+0xa>
 8001eb6:	e78e      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb8:	4904      	ldr	r1, [pc, #16]	; (8001ecc <HAL_RCC_ClockConfig+0x128>)
 8001eba:	68e0      	ldr	r0, [r4, #12]
 8001ebc:	688b      	ldr	r3, [r1, #8]
 8001ebe:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001ec2:	4303      	orrs	r3, r0
 8001ec4:	608b      	str	r3, [r1, #8]
 8001ec6:	e789      	b.n	8001ddc <HAL_RCC_ClockConfig+0x38>
 8001ec8:	40023c00 	.word	0x40023c00
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	0800d5d3 	.word	0x0800d5d3
 8001ed4:	20001ba8 	.word	0x20001ba8
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001edc:	4b01      	ldr	r3, [pc, #4]	; (8001ee4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20001ba8 	.word	0x20001ba8

08001ee8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x14>)
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	4a03      	ldr	r2, [pc, #12]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ef6:	6810      	ldr	r0, [r2, #0]
}
 8001ef8:	40d8      	lsrs	r0, r3
 8001efa:	4770      	bx	lr
 8001efc:	40023800 	.word	0x40023800
 8001f00:	0800d5e3 	.word	0x0800d5e3
 8001f04:	20001ba8 	.word	0x20001ba8

08001f08 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	4a03      	ldr	r2, [pc, #12]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f16:	6810      	ldr	r0, [r2, #0]
}
 8001f18:	40d8      	lsrs	r0, r3
 8001f1a:	4770      	bx	lr
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	0800d5e3 	.word	0x0800d5e3
 8001f24:	20001ba8 	.word	0x20001ba8

08001f28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f28:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d036      	beq.n	8001f9e <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f34:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001f38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f3c:	b91b      	cbnz	r3, 8001f46 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f3e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f42:	f007 ffd7 	bl	8009ef4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f46:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f48:	68a0      	ldr	r0, [r4, #8]
 8001f4a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001f52:	680b      	ldr	r3, [r1, #0]
 8001f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f58:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f5a:	6863      	ldr	r3, [r4, #4]
 8001f5c:	4303      	orrs	r3, r0
 8001f5e:	68e0      	ldr	r0, [r4, #12]
 8001f60:	4303      	orrs	r3, r0
 8001f62:	6920      	ldr	r0, [r4, #16]
 8001f64:	4303      	orrs	r3, r0
 8001f66:	6960      	ldr	r0, [r4, #20]
 8001f68:	4303      	orrs	r3, r0
 8001f6a:	69e0      	ldr	r0, [r4, #28]
 8001f6c:	4303      	orrs	r3, r0
 8001f6e:	6a20      	ldr	r0, [r4, #32]
 8001f70:	4303      	orrs	r3, r0
 8001f72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f74:	4303      	orrs	r3, r0
 8001f76:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001f7a:	4303      	orrs	r3, r0
 8001f7c:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f7e:	0c12      	lsrs	r2, r2, #16
 8001f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f82:	f002 0204 	and.w	r2, r2, #4
 8001f86:	431a      	orrs	r2, r3
 8001f88:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f8a:	69cb      	ldr	r3, [r1, #28]
 8001f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f90:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f92:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001f94:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f96:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f98:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001f9c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
}
 8001fa0:	bd10      	pop	{r4, pc}
	...

08001fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fa6:	6803      	ldr	r3, [r0, #0]
 8001fa8:	68c1      	ldr	r1, [r0, #12]
 8001faa:	691a      	ldr	r2, [r3, #16]
{
 8001fac:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fb6:	6925      	ldr	r5, [r4, #16]
 8001fb8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fba:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fbc:	69c0      	ldr	r0, [r0, #28]
 8001fbe:	432a      	orrs	r2, r5
 8001fc0:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001fc2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001fc8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fcc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	69a1      	ldr	r1, [r4, #24]
 8001fd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001fda:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fdc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fe0:	615a      	str	r2, [r3, #20]
 8001fe2:	4a25      	ldr	r2, [pc, #148]	; (8002078 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fe4:	d129      	bne.n	800203a <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d003      	beq.n	8001ff2 <UART_SetConfig+0x4e>
 8001fea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d120      	bne.n	8002034 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ff2:	f7ff ff89 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ff6:	6862      	ldr	r2, [r4, #4]
 8001ff8:	6825      	ldr	r5, [r4, #0]
 8001ffa:	1892      	adds	r2, r2, r2
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	f04f 0119 	mov.w	r1, #25
 8002004:	415b      	adcs	r3, r3
 8002006:	fba0 0101 	umull	r0, r1, r0, r1
 800200a:	f7fe f949 	bl	80002a0 <__aeabi_uldivmod>
 800200e:	2164      	movs	r1, #100	; 0x64
 8002010:	fbb0 f4f1 	udiv	r4, r0, r1
 8002014:	fb01 0314 	mls	r3, r1, r4, r0
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	3332      	adds	r3, #50	; 0x32
 800201c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002020:	f003 0207 	and.w	r2, r3, #7
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800202a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800202e:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002030:	60ab      	str	r3, [r5, #8]
 8002032:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002034:	f7ff ff58 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8002038:	e7dd      	b.n	8001ff6 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800203a:	4293      	cmp	r3, r2
 800203c:	d002      	beq.n	8002044 <UART_SetConfig+0xa0>
 800203e:	4a0f      	ldr	r2, [pc, #60]	; (800207c <UART_SetConfig+0xd8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d116      	bne.n	8002072 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002044:	f7ff ff60 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002048:	6863      	ldr	r3, [r4, #4]
 800204a:	6825      	ldr	r5, [r4, #0]
 800204c:	2119      	movs	r1, #25
 800204e:	009a      	lsls	r2, r3, #2
 8002050:	fba0 0101 	umull	r0, r1, r0, r1
 8002054:	0f9b      	lsrs	r3, r3, #30
 8002056:	f7fe f923 	bl	80002a0 <__aeabi_uldivmod>
 800205a:	2264      	movs	r2, #100	; 0x64
 800205c:	fbb0 f1f2 	udiv	r1, r0, r2
 8002060:	fb02 0311 	mls	r3, r2, r1, r0
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	3332      	adds	r3, #50	; 0x32
 8002068:	fbb3 f3f2 	udiv	r3, r3, r2
 800206c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002070:	e7de      	b.n	8002030 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002072:	f7ff ff39 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8002076:	e7e7      	b.n	8002048 <UART_SetConfig+0xa4>
 8002078:	40011000 	.word	0x40011000
 800207c:	40011400 	.word	0x40011400

08002080 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002082:	4604      	mov	r4, r0
 8002084:	460e      	mov	r6, r1
 8002086:	4617      	mov	r7, r2
 8002088:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800208a:	6821      	ldr	r1, [r4, #0]
 800208c:	680b      	ldr	r3, [r1, #0]
 800208e:	ea36 0303 	bics.w	r3, r6, r3
 8002092:	d101      	bne.n	8002098 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002094:	2000      	movs	r0, #0
}
 8002096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002098:	1c6b      	adds	r3, r5, #1
 800209a:	d0f7      	beq.n	800208c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800209c:	b995      	cbnz	r5, 80020c4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80020b0:	2320      	movs	r3, #32
 80020b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020b6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80020ba:	2300      	movs	r3, #0
 80020bc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80020c0:	2003      	movs	r0, #3
 80020c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020c4:	f7fe fabe 	bl	8000644 <HAL_GetTick>
 80020c8:	1bc0      	subs	r0, r0, r7
 80020ca:	4285      	cmp	r5, r0
 80020cc:	d2dd      	bcs.n	800208a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80020ce:	e7e6      	b.n	800209e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080020d0 <HAL_UART_Init>:
{
 80020d0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80020d2:	4604      	mov	r4, r0
 80020d4:	b340      	cbz	r0, 8002128 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80020d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80020da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020de:	b91b      	cbnz	r3, 80020e8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80020e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80020e4:	f007 ff52 	bl	8009f8c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80020e8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020ea:	2324      	movs	r3, #36	; 0x24
 80020ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80020f0:	68d3      	ldr	r3, [r2, #12]
 80020f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020f6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80020f8:	4620      	mov	r0, r4
 80020fa:	f7ff ff53 	bl	8001fa4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002106:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800210e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002116:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002118:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800211a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800211e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002122:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002126:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002128:	2001      	movs	r0, #1
}
 800212a:	bd10      	pop	{r4, pc}

0800212c <HAL_UART_Transmit>:
{
 800212c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002130:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002132:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002136:	2b20      	cmp	r3, #32
{
 8002138:	4604      	mov	r4, r0
 800213a:	460d      	mov	r5, r1
 800213c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800213e:	d151      	bne.n	80021e4 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8002140:	2900      	cmp	r1, #0
 8002142:	d04c      	beq.n	80021de <HAL_UART_Transmit+0xb2>
 8002144:	2a00      	cmp	r2, #0
 8002146:	d04a      	beq.n	80021de <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8002148:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800214c:	2b01      	cmp	r3, #1
 800214e:	d049      	beq.n	80021e4 <HAL_UART_Transmit+0xb8>
 8002150:	2301      	movs	r3, #1
 8002152:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002156:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800215a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002160:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002164:	f7fe fa6e 	bl	8000644 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002168:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800216c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800216e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8002172:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8002176:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002178:	b29b      	uxth	r3, r3
 800217a:	b95b      	cbnz	r3, 8002194 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800217c:	463b      	mov	r3, r7
 800217e:	4632      	mov	r2, r6
 8002180:	2140      	movs	r1, #64	; 0x40
 8002182:	4620      	mov	r0, r4
 8002184:	f7ff ff7c 	bl	8002080 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002188:	b9a0      	cbnz	r0, 80021b4 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 800218a:	2320      	movs	r3, #32
 800218c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 8002194:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002196:	3b01      	subs	r3, #1
 8002198:	b29b      	uxth	r3, r3
 800219a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800219c:	68a3      	ldr	r3, [r4, #8]
 800219e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021a2:	4632      	mov	r2, r6
 80021a4:	463b      	mov	r3, r7
 80021a6:	f04f 0180 	mov.w	r1, #128	; 0x80
 80021aa:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021ac:	d10e      	bne.n	80021cc <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ae:	f7ff ff67 	bl	8002080 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021b2:	b110      	cbz	r0, 80021ba <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 80021b4:	2003      	movs	r0, #3
 80021b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021ba:	882b      	ldrh	r3, [r5, #0]
 80021bc:	6822      	ldr	r2, [r4, #0]
 80021be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c2:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021c4:	6923      	ldr	r3, [r4, #16]
 80021c6:	b943      	cbnz	r3, 80021da <HAL_UART_Transmit+0xae>
          pData += 2U;
 80021c8:	3502      	adds	r5, #2
 80021ca:	e7d4      	b.n	8002176 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021cc:	f7ff ff58 	bl	8002080 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021d0:	2800      	cmp	r0, #0
 80021d2:	d1ef      	bne.n	80021b4 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	782a      	ldrb	r2, [r5, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	3501      	adds	r5, #1
 80021dc:	e7cb      	b.n	8002176 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80021de:	2001      	movs	r0, #1
 80021e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80021e4:	2002      	movs	r0, #2
}
 80021e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080021ea <HAL_UART_Receive>:
{
 80021ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021ee:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80021f0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80021f4:	2b20      	cmp	r3, #32
{
 80021f6:	4604      	mov	r4, r0
 80021f8:	460d      	mov	r5, r1
 80021fa:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80021fc:	d154      	bne.n	80022a8 <HAL_UART_Receive+0xbe>
    if ((pData == NULL) || (Size == 0U))
 80021fe:	2900      	cmp	r1, #0
 8002200:	d04f      	beq.n	80022a2 <HAL_UART_Receive+0xb8>
 8002202:	2a00      	cmp	r2, #0
 8002204:	d04d      	beq.n	80022a2 <HAL_UART_Receive+0xb8>
    __HAL_LOCK(huart);
 8002206:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800220a:	2b01      	cmp	r3, #1
 800220c:	d04c      	beq.n	80022a8 <HAL_UART_Receive+0xbe>
 800220e:	2301      	movs	r3, #1
 8002210:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002214:	f04f 0900 	mov.w	r9, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002218:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221a:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800221e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8002222:	f7fe fa0f 	bl	8000644 <HAL_GetTick>
    huart->RxXferSize = Size;
 8002226:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 800222a:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 800222c:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8002230:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8002234:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8002236:	b280      	uxth	r0, r0
 8002238:	b920      	cbnz	r0, 8002244 <HAL_UART_Receive+0x5a>
    huart->RxState = HAL_UART_STATE_READY;
 800223a:	2320      	movs	r3, #32
 800223c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8002240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->RxXferCount--;
 8002244:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002246:	3b01      	subs	r3, #1
 8002248:	b29b      	uxth	r3, r3
 800224a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800224c:	68a3      	ldr	r3, [r4, #8]
 800224e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002252:	4632      	mov	r2, r6
 8002254:	463b      	mov	r3, r7
 8002256:	f04f 0120 	mov.w	r1, #32
 800225a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800225c:	d112      	bne.n	8002284 <HAL_UART_Receive+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800225e:	f7ff ff0f 	bl	8002080 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002262:	b110      	cbz	r0, 800226a <HAL_UART_Receive+0x80>
          return HAL_TIMEOUT;
 8002264:	2003      	movs	r0, #3
 8002266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800226a:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800226c:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800226e:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002270:	b922      	cbnz	r2, 800227c <HAL_UART_Receive+0x92>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002276:	f825 3b02 	strh.w	r3, [r5], #2
 800227a:	e7db      	b.n	8002234 <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f825 3b01 	strh.w	r3, [r5], #1
 8002282:	e7d7      	b.n	8002234 <HAL_UART_Receive+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002284:	f7ff fefc 	bl	8002080 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002288:	2800      	cmp	r0, #0
 800228a:	d1eb      	bne.n	8002264 <HAL_UART_Receive+0x7a>
 800228c:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800228e:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	1c6a      	adds	r2, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002294:	b911      	cbnz	r1, 800229c <HAL_UART_Receive+0xb2>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002296:	702b      	strb	r3, [r5, #0]
 8002298:	4615      	mov	r5, r2
 800229a:	e7cb      	b.n	8002234 <HAL_UART_Receive+0x4a>
 800229c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022a0:	e7f9      	b.n	8002296 <HAL_UART_Receive+0xac>
      return  HAL_ERROR;
 80022a2:	2001      	movs	r0, #1
 80022a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80022a8:	2002      	movs	r0, #2
}
 80022aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080022b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80022b2:	3b01      	subs	r3, #1
 80022b4:	d101      	bne.n	80022ba <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80022b6:	2003      	movs	r0, #3
 80022b8:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80022ba:	6902      	ldr	r2, [r0, #16]
 80022bc:	2a00      	cmp	r2, #0
 80022be:	daf8      	bge.n	80022b2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80022c0:	6903      	ldr	r3, [r0, #16]
 80022c2:	4a06      	ldr	r2, [pc, #24]	; (80022dc <USB_CoreReset+0x2c>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80022ca:	3a01      	subs	r2, #1
 80022cc:	d0f3      	beq.n	80022b6 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80022ce:	6903      	ldr	r3, [r0, #16]
 80022d0:	f013 0301 	ands.w	r3, r3, #1
 80022d4:	d1f9      	bne.n	80022ca <USB_CoreReset+0x1a>

  return HAL_OK;
 80022d6:	4618      	mov	r0, r3
}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	00030d41 	.word	0x00030d41

080022e0 <USB_CoreInit>:
{
 80022e0:	b084      	sub	sp, #16
 80022e2:	b538      	push	{r3, r4, r5, lr}
 80022e4:	ad05      	add	r5, sp, #20
 80022e6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80022ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022ec:	2b01      	cmp	r3, #1
{
 80022ee:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80022f0:	d125      	bne.n	800233e <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80022f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f8:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80022fa:	68c3      	ldr	r3, [r0, #12]
 80022fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002304:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002306:	68c3      	ldr	r3, [r0, #12]
 8002308:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800230c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800230e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002310:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002312:	bf02      	ittt	eq
 8002314:	68c3      	ldreq	r3, [r0, #12]
 8002316:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800231a:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800231c:	f7ff ffc8 	bl	80022b0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002320:	9b08      	ldr	r3, [sp, #32]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002326:	68a3      	ldr	r3, [r4, #8]
 8002328:	f043 0306 	orr.w	r3, r3, #6
 800232c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800232e:	68a3      	ldr	r3, [r4, #8]
 8002330:	f043 0320 	orr.w	r3, r3, #32
 8002334:	60a3      	str	r3, [r4, #8]
}
 8002336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800233a:	b004      	add	sp, #16
 800233c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800233e:	68c3      	ldr	r3, [r0, #12]
 8002340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002344:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002346:	f7ff ffb3 	bl	80022b0 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800234a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800234c:	b923      	cbnz	r3, 8002358 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800234e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002354:	63a3      	str	r3, [r4, #56]	; 0x38
 8002356:	e7e3      	b.n	8002320 <USB_CoreInit+0x40>
 8002358:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800235a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235e:	e7f9      	b.n	8002354 <USB_CoreInit+0x74>

08002360 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002360:	6883      	ldr	r3, [r0, #8]
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6083      	str	r3, [r0, #8]
}
 8002368:	2000      	movs	r0, #0
 800236a:	4770      	bx	lr

0800236c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800236c:	6883      	ldr	r3, [r0, #8]
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6083      	str	r3, [r0, #8]
}
 8002374:	2000      	movs	r0, #0
 8002376:	4770      	bx	lr

08002378 <USB_SetCurrentMode>:
{
 8002378:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800237a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800237c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800237e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002382:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002384:	d108      	bne.n	8002398 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002386:	68c3      	ldr	r3, [r0, #12]
 8002388:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800238c:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800238e:	2032      	movs	r0, #50	; 0x32
 8002390:	f7fe f95e 	bl	8000650 <HAL_Delay>
  return HAL_OK;
 8002394:	2000      	movs	r0, #0
 8002396:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002398:	b919      	cbnz	r1, 80023a2 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800239a:	68c3      	ldr	r3, [r0, #12]
 800239c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023a0:	e7f4      	b.n	800238c <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80023a2:	2001      	movs	r0, #1
}
 80023a4:	bd08      	pop	{r3, pc}
	...

080023a8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80023a8:	0189      	lsls	r1, r1, #6
 80023aa:	f041 0120 	orr.w	r1, r1, #32
 80023ae:	4a06      	ldr	r2, [pc, #24]	; (80023c8 <USB_FlushTxFifo+0x20>)
 80023b0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80023b2:	3a01      	subs	r2, #1
 80023b4:	d005      	beq.n	80023c2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80023b6:	6903      	ldr	r3, [r0, #16]
 80023b8:	f013 0320 	ands.w	r3, r3, #32
 80023bc:	d1f9      	bne.n	80023b2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80023be:	4618      	mov	r0, r3
 80023c0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80023c2:	2003      	movs	r0, #3
}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	00030d41 	.word	0x00030d41

080023cc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80023cc:	2310      	movs	r3, #16
 80023ce:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <USB_FlushRxFifo+0x1c>)
 80023d0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80023d2:	3a01      	subs	r2, #1
 80023d4:	d005      	beq.n	80023e2 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80023d6:	6903      	ldr	r3, [r0, #16]
 80023d8:	f013 0310 	ands.w	r3, r3, #16
 80023dc:	d1f9      	bne.n	80023d2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80023de:	4618      	mov	r0, r3
 80023e0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80023e2:	2003      	movs	r0, #3
}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	00030d41 	.word	0x00030d41

080023ec <USB_WritePacket>:
{
 80023ec:	b510      	push	{r4, lr}
 80023ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80023f2:	b94c      	cbnz	r4, 8002408 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 80023f4:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80023f6:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002402:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8002404:	4299      	cmp	r1, r3
 8002406:	d101      	bne.n	800240c <USB_WritePacket+0x20>
}
 8002408:	2000      	movs	r0, #0
 800240a:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800240c:	f851 2b04 	ldr.w	r2, [r1], #4
 8002410:	6002      	str	r2, [r0, #0]
 8002412:	e7f7      	b.n	8002404 <USB_WritePacket+0x18>

08002414 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002414:	3203      	adds	r2, #3
 8002416:	f022 0203 	bic.w	r2, r2, #3
 800241a:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800241c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8002420:	4291      	cmp	r1, r2
 8002422:	d101      	bne.n	8002428 <USB_ReadPacket+0x14>
}
 8002424:	4608      	mov	r0, r1
 8002426:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002428:	6803      	ldr	r3, [r0, #0]
 800242a:	f841 3b04 	str.w	r3, [r1], #4
 800242e:	e7f7      	b.n	8002420 <USB_ReadPacket+0xc>

08002430 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002430:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002432:	6980      	ldr	r0, [r0, #24]
}
 8002434:	4010      	ands	r0, r2
 8002436:	4770      	bx	lr

08002438 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002438:	6940      	ldr	r0, [r0, #20]
}
 800243a:	f000 0001 	and.w	r0, r0, #1
 800243e:	4770      	bx	lr

08002440 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002440:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002444:	f023 0303 	bic.w	r3, r3, #3
{
 8002448:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800244a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800244e:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8002452:	f001 0303 	and.w	r3, r1, #3
 8002456:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8002458:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800245a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800245e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8002462:	d104      	bne.n	800246e <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8002464:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8002468:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 800246a:	2000      	movs	r0, #0
 800246c:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 800246e:	2902      	cmp	r1, #2
 8002470:	d1fb      	bne.n	800246a <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8002472:	f241 7370 	movw	r3, #6000	; 0x1770
 8002476:	e7f7      	b.n	8002468 <USB_InitFSLSPClkSel+0x28>

08002478 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8002478:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 800247a:	2500      	movs	r5, #0
 800247c:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 800247e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002482:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002484:	9b01      	ldr	r3, [sp, #4]
 8002486:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800248a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800248c:	9b01      	ldr	r3, [sp, #4]
 800248e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002492:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002494:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8002498:	2064      	movs	r0, #100	; 0x64
 800249a:	f7fe f8d9 	bl	8000650 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800249e:	9b01      	ldr	r3, [sp, #4]
 80024a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024a4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 80024a8:	200a      	movs	r0, #10
 80024aa:	f7fe f8d1 	bl	8000650 <HAL_Delay>

  return HAL_OK;
}
 80024ae:	4628      	mov	r0, r5
 80024b0:	b003      	add	sp, #12
 80024b2:	bd30      	pop	{r4, r5, pc}

080024b4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80024b4:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80024ba:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80024be:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80024c0:	9b01      	ldr	r3, [sp, #4]
 80024c2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80024c6:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80024c8:	9b01      	ldr	r3, [sp, #4]
 80024ca:	04da      	lsls	r2, r3, #19
 80024cc:	d406      	bmi.n	80024dc <USB_DriveVbus+0x28>
 80024ce:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80024d0:	bf02      	ittt	eq
 80024d2:	9b01      	ldreq	r3, [sp, #4]
 80024d4:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80024d8:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80024dc:	9b01      	ldr	r3, [sp, #4]
 80024de:	04db      	lsls	r3, r3, #19
 80024e0:	d505      	bpl.n	80024ee <USB_DriveVbus+0x3a>
 80024e2:	b921      	cbnz	r1, 80024ee <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80024e4:	9b01      	ldr	r3, [sp, #4]
 80024e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024ea:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 80024ee:	2000      	movs	r0, #0
 80024f0:	b002      	add	sp, #8
 80024f2:	4770      	bx	lr

080024f4 <USB_HostInit>:
{
 80024f4:	b084      	sub	sp, #16
 80024f6:	b538      	push	{r3, r4, r5, lr}
 80024f8:	4604      	mov	r4, r0
 80024fa:	a805      	add	r0, sp, #20
 80024fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002508:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800250c:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800250e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002510:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002514:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251c:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800251e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002520:	05da      	lsls	r2, r3, #23
 8002522:	d53f      	bpl.n	80025a4 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002524:	9b07      	ldr	r3, [sp, #28]
 8002526:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002528:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800252c:	d13c      	bne.n	80025a8 <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800252e:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002532:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8002536:	2110      	movs	r1, #16
 8002538:	4620      	mov	r0, r4
 800253a:	f7ff ff35 	bl	80023a8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800253e:	4620      	mov	r0, r4
 8002540:	f7ff ff44 	bl	80023cc <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8002544:	2300      	movs	r3, #0
 8002546:	9906      	ldr	r1, [sp, #24]
 8002548:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8002550:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8002552:	428b      	cmp	r3, r1
 8002554:	d12b      	bne.n	80025ae <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 8002556:	2101      	movs	r1, #1
 8002558:	4620      	mov	r0, r4
 800255a:	f7ff ffab 	bl	80024b4 <USB_DriveVbus>
  HAL_Delay(200U);
 800255e:	20c8      	movs	r0, #200	; 0xc8
 8002560:	f7fe f876 	bl	8000650 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
 800256c:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800256e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002570:	05db      	lsls	r3, r3, #23
 8002572:	d521      	bpl.n	80025b8 <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8002574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002578:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800257a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800257e:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002582:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8002586:	9b08      	ldr	r3, [sp, #32]
 8002588:	b91b      	cbnz	r3, 8002592 <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800258a:	69a3      	ldr	r3, [r4, #24]
 800258c:	f043 0310 	orr.w	r3, r3, #16
 8002590:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8002592:	69a2      	ldr	r2, [r4, #24]
 8002594:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <USB_HostInit+0xd8>)
 8002596:	4313      	orrs	r3, r2
 8002598:	61a3      	str	r3, [r4, #24]
}
 800259a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800259e:	2000      	movs	r0, #0
 80025a0:	b004      	add	sp, #16
 80025a2:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80025a4:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	e7c1      	b.n	8002532 <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80025ae:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 80025b0:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 80025b2:	60d5      	str	r5, [r2, #12]
 80025b4:	3220      	adds	r2, #32
 80025b6:	e7cc      	b.n	8002552 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80025bc:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 80025c0:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80025c2:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <USB_HostInit+0xdc>)
 80025c4:	e7dd      	b.n	8002582 <USB_HostInit+0x8e>
 80025c6:	bf00      	nop
 80025c8:	00e00300 	.word	0x00e00300
 80025cc:	a3200008 	.word	0xa3200008
 80025d0:	004000e0 	.word	0x004000e0

080025d4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80025d4:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80025da:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80025de:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80025e0:	9801      	ldr	r0, [sp, #4]
}
 80025e2:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80025e6:	b002      	add	sp, #8
 80025e8:	4770      	bx	lr

080025ea <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80025ea:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80025ee:	6880      	ldr	r0, [r0, #8]
}
 80025f0:	b280      	uxth	r0, r0
 80025f2:	4770      	bx	lr

080025f4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80025f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80025f8:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 80025fc:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8002600:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8002604:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002606:	f04f 30ff 	mov.w	r0, #4294967295
 800260a:	60a0      	str	r0, [r4, #8]
 800260c:	fa4f f882 	sxtb.w	r8, r2
 8002610:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8002614:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8002618:	2e03      	cmp	r6, #3
 800261a:	d86c      	bhi.n	80026f6 <USB_HC_Init+0x102>
 800261c:	e8df f006 	tbb	[pc, r6]
 8002620:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002624:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8002628:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800262c:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800262e:	da03      	bge.n	8002638 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002630:	68e1      	ldr	r1, [r4, #12]
 8002632:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002636:	e005      	b.n	8002644 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8002638:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800263a:	05c9      	lsls	r1, r1, #23
 800263c:	d542      	bpl.n	80026c4 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800263e:	68e1      	ldr	r1, [r4, #12]
 8002640:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8002644:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8002646:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002648:	f8dc 4018 	ldr.w	r4, [ip, #24]
 800264c:	2101      	movs	r1, #1
 800264e:	fa01 f10e 	lsl.w	r1, r1, lr
 8002652:	4321      	orrs	r1, r4
 8002654:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002658:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800265a:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800265e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002662:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8002664:	bfb4      	ite	lt
 8002666:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 800266a:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800266c:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 8002670:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002674:	059b      	lsls	r3, r3, #22
 8002676:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800267a:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800267e:	02d2      	lsls	r2, r2, #11
 8002680:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002684:	432b      	orrs	r3, r5
 8002686:	4313      	orrs	r3, r2
 8002688:	04b2      	lsls	r2, r6, #18
 800268a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 800268e:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002690:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 8002694:	bf0c      	ite	eq
 8002696:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 800269a:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800269c:	4323      	orrs	r3, r4
 800269e:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 80026a0:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80026a2:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 80026a6:	d128      	bne.n	80026fa <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80026a8:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80026ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026b0:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 80026b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80026b8:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 80026bc:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80026c0:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 80026c2:	dbb5      	blt.n	8002630 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80026c4:	f8dc 0018 	ldr.w	r0, [ip, #24]
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f10e 	lsl.w	r1, r1, lr
 80026ce:	4301      	orrs	r1, r0
 80026d0:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80026d4:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 80026d6:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80026d8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80026dc:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 80026de:	4604      	mov	r4, r0
 80026e0:	e7c4      	b.n	800266c <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80026e2:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 80026e6:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80026ea:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 80026ec:	daea      	bge.n	80026c4 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80026ee:	68e1      	ldr	r1, [r4, #12]
 80026f0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80026f4:	e7a6      	b.n	8002644 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 80026f6:	2001      	movs	r0, #1
 80026f8:	e7a6      	b.n	8002648 <USB_HC_Init+0x54>
}
 80026fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080026fe <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80026fe:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002702:	6940      	ldr	r0, [r0, #20]
}
 8002704:	b280      	uxth	r0, r0
 8002706:	4770      	bx	lr

08002708 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002708:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800270c:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8002710:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002714:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002718:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800271c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002720:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002724:	d11e      	bne.n	8002764 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002726:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002728:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800272c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002730:	d137      	bne.n	80027a2 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002736:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800273a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800273e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002742:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002746:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800274a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800274e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002752:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8002756:	3b01      	subs	r3, #1
 8002758:	d002      	beq.n	8002760 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800275a:	6811      	ldr	r1, [r2, #0]
 800275c:	2900      	cmp	r1, #0
 800275e:	dbfa      	blt.n	8002756 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8002760:	2000      	movs	r0, #0
 8002762:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002764:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8002768:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800276c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002770:	d117      	bne.n	80027a2 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002772:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002776:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800277a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800277e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002782:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002786:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800278a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800278e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002792:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8002796:	3b01      	subs	r3, #1
 8002798:	d0e2      	beq.n	8002760 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800279a:	6811      	ldr	r1, [r2, #0]
 800279c:	2900      	cmp	r1, #0
 800279e:	dbfa      	blt.n	8002796 <USB_HC_Halt+0x8e>
 80027a0:	e7de      	b.n	8002760 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80027a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027a6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80027aa:	e7d9      	b.n	8002760 <USB_HC_Halt+0x58>

080027ac <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80027ac:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80027b0:	4a06      	ldr	r2, [pc, #24]	; (80027cc <USB_DoPing+0x20>)
 80027b2:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80027b6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80027c2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 80027c6:	2000      	movs	r0, #0
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	80080000 	.word	0x80080000

080027d0 <USB_HC_StartXfer>:
{
 80027d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80027d4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80027d6:	05db      	lsls	r3, r3, #23
{
 80027d8:	4616      	mov	r6, r2
 80027da:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80027dc:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80027de:	d517      	bpl.n	8002810 <USB_HC_StartXfer+0x40>
 80027e0:	790d      	ldrb	r5, [r1, #4]
 80027e2:	b9ad      	cbnz	r5, 8002810 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 80027e4:	b94e      	cbnz	r6, 80027fa <USB_HC_StartXfer+0x2a>
 80027e6:	794b      	ldrb	r3, [r1, #5]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d111      	bne.n	8002810 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 80027ec:	4611      	mov	r1, r2
 80027ee:	f7ff ffdd 	bl	80027ac <USB_DoPing>
}
 80027f2:	2000      	movs	r0, #0
 80027f4:	b002      	add	sp, #8
 80027f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 80027fa:	2e01      	cmp	r6, #1
 80027fc:	d108      	bne.n	8002810 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80027fe:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8002802:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8002806:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800280a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 800280e:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8002810:	6908      	ldr	r0, [r1, #16]
 8002812:	2800      	cmp	r0, #0
 8002814:	d066      	beq.n	80028e4 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8002816:	890b      	ldrh	r3, [r1, #8]
 8002818:	3801      	subs	r0, #1
 800281a:	4418      	add	r0, r3
 800281c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002820:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8002822:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002826:	d903      	bls.n	8002830 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 800282c:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8002830:	78cf      	ldrb	r7, [r1, #3]
 8002832:	b117      	cbz	r7, 800283a <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002834:	890b      	ldrh	r3, [r1, #8]
 8002836:	4343      	muls	r3, r0
 8002838:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800283a:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800283e:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002840:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002844:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002848:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800284c:	ea4e 0e08 	orr.w	lr, lr, r8
 8002850:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002930 <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002854:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002858:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 800285c:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002860:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8002864:	b116      	cbz	r6, 800286c <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002866:	68c8      	ldr	r0, [r1, #12]
 8002868:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800286c:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8002870:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002874:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002878:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 800287c:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002880:	43c0      	mvns	r0, r0
 8002882:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002886:	0740      	lsls	r0, r0, #29
 8002888:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 800288c:	ea40 000c 	orr.w	r0, r0, ip
 8002890:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002894:	4825      	ldr	r0, [pc, #148]	; (800292c <USB_HC_StartXfer+0x15c>)
 8002896:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 800289a:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800289e:	f8d0 c000 	ldr.w	ip, [r0]
 80028a2:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 80028a6:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80028aa:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 80028ae:	b1df      	cbz	r7, 80028e8 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80028b0:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80028b4:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028b8:	f8d0 c000 	ldr.w	ip, [r0]
 80028bc:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 80028c0:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028c4:	6800      	ldr	r0, [r0, #0]
 80028c6:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 80028ca:	2e00      	cmp	r6, #0
 80028cc:	d191      	bne.n	80027f2 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80028ce:	2f00      	cmp	r7, #0
 80028d0:	d18f      	bne.n	80027f2 <USB_HC_StartXfer+0x22>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d08d      	beq.n	80027f2 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 80028d6:	79c8      	ldrb	r0, [r1, #7]
 80028d8:	2803      	cmp	r0, #3
 80028da:	d813      	bhi.n	8002904 <USB_HC_StartXfer+0x134>
 80028dc:	e8df f000 	tbb	[pc, r0]
 80028e0:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 80028e4:	2001      	movs	r0, #1
 80028e6:	e7a3      	b.n	8002830 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80028e8:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 80028ec:	e7e2      	b.n	80028b4 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80028ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80028f0:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80028f2:	f3c5 058f 	ubfx	r5, r5, #2, #16
 80028f6:	b280      	uxth	r0, r0
 80028f8:	4285      	cmp	r5, r0
 80028fa:	d903      	bls.n	8002904 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80028fc:	69a0      	ldr	r0, [r4, #24]
 80028fe:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002902:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8002904:	2000      	movs	r0, #0
 8002906:	9000      	str	r0, [sp, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	68c9      	ldr	r1, [r1, #12]
 800290c:	4620      	mov	r0, r4
 800290e:	f7ff fd6d 	bl	80023ec <USB_WritePacket>
 8002912:	e76e      	b.n	80027f2 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002914:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002918:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800291a:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800291e:	b280      	uxth	r0, r0
 8002920:	4285      	cmp	r5, r0
 8002922:	d9ef      	bls.n	8002904 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002924:	69a0      	ldr	r0, [r4, #24]
 8002926:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 800292a:	e7ea      	b.n	8002902 <USB_HC_StartXfer+0x132>
 800292c:	20001d98 	.word	0x20001d98
 8002930:	1ff80000 	.word	0x1ff80000

08002934 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002934:	6883      	ldr	r3, [r0, #8]
 8002936:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800293a:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800293c:	2110      	movs	r1, #16
{
 800293e:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002940:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002942:	f7ff fd31 	bl	80023a8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002946:	4620      	mov	r0, r4
 8002948:	f7ff fd40 	bl	80023cc <USB_FlushRxFifo>
 800294c:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8002950:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8002954:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002956:	6811      	ldr	r1, [r2, #0]
 8002958:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800295c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8002960:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8002964:	4290      	cmp	r0, r2
 8002966:	d1f6      	bne.n	8002956 <USB_StopHost+0x22>
 8002968:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800296a:	6819      	ldr	r1, [r3, #0]
 800296c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002970:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8002974:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8002976:	3001      	adds	r0, #1
 8002978:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800297c:	d802      	bhi.n	8002984 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	2900      	cmp	r1, #0
 8002982:	dbf8      	blt.n	8002976 <USB_StopHost+0x42>
 8002984:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8002986:	429a      	cmp	r2, r3
 8002988:	d1ef      	bne.n	800296a <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002992:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002994:	68a3      	ldr	r3, [r4, #8]
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800299c:	2000      	movs	r0, #0
 800299e:	bd10      	pop	{r4, pc}

080029a0 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 80029a0:	2000      	movs	r0, #0
 80029a2:	4770      	bx	lr

080029a4 <USBH_CDC_InterfaceDeInit>:
{
 80029a4:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80029a6:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80029aa:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 80029ac:	7821      	ldrb	r1, [r4, #0]
{
 80029ae:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 80029b0:	b139      	cbz	r1, 80029c2 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80029b2:	f000 fe17 	bl	80035e4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80029b6:	7821      	ldrb	r1, [r4, #0]
 80029b8:	4628      	mov	r0, r5
 80029ba:	f000 fe2f 	bl	800361c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80029be:	2300      	movs	r3, #0
 80029c0:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 80029c2:	7b21      	ldrb	r1, [r4, #12]
 80029c4:	b141      	cbz	r1, 80029d8 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80029c6:	4628      	mov	r0, r5
 80029c8:	f000 fe0c 	bl	80035e4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80029cc:	7b21      	ldrb	r1, [r4, #12]
 80029ce:	4628      	mov	r0, r5
 80029d0:	f000 fe24 	bl	800361c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80029d4:	2300      	movs	r3, #0
 80029d6:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 80029d8:	7b61      	ldrb	r1, [r4, #13]
 80029da:	b141      	cbz	r1, 80029ee <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80029dc:	4628      	mov	r0, r5
 80029de:	f000 fe01 	bl	80035e4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80029e2:	7b61      	ldrb	r1, [r4, #13]
 80029e4:	4628      	mov	r0, r5
 80029e6:	f000 fe19 	bl	800361c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80029ea:	2300      	movs	r3, #0
 80029ec:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 80029ee:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 80029f2:	69d8      	ldr	r0, [r3, #28]
 80029f4:	b128      	cbz	r0, 8002a02 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 80029f6:	f007 fd67 	bl	800a4c8 <free>
    phost->pActiveClass->pData = 0U;
 80029fa:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]
}
 8002a02:	2000      	movs	r0, #0
 8002a04:	bd38      	pop	{r3, r4, r5, pc}

08002a06 <USBH_CDC_InterfaceInit>:
{
 8002a06:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8002a08:	2202      	movs	r2, #2
{
 8002a0a:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	4611      	mov	r1, r2
{
 8002a10:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 8002a12:	f000 f9b2 	bl	8002d7a <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8002a16:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8002a18:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8002a1a:	d102      	bne.n	8002a22 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8002a1c:	2002      	movs	r0, #2
}
 8002a1e:	b005      	add	sp, #20
 8002a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8002a22:	4601      	mov	r1, r0
 8002a24:	4628      	mov	r0, r5
 8002a26:	f000 f99f 	bl	8002d68 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002a2a:	2050      	movs	r0, #80	; 0x50
 8002a2c:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8002a30:	f007 fd42 	bl	800a4b8 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002a34:	231a      	movs	r3, #26
 8002a36:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002a3a:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002a3c:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 8002a40:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002a42:	bf42      	ittt	mi
 8002a44:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002a46:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8002a4a:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002a4c:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8002a4e:	7841      	ldrb	r1, [r0, #1]
 8002a50:	4628      	mov	r0, r5
 8002a52:	f000 fdcc 	bl	80035ee <USBH_AllocPipe>
 8002a56:	4601      	mov	r1, r0
 8002a58:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8002a5a:	8960      	ldrh	r0, [r4, #10]
 8002a5c:	9002      	str	r0, [sp, #8]
 8002a5e:	2003      	movs	r0, #3
 8002a60:	9001      	str	r0, [sp, #4]
 8002a62:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002a66:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002a6a:	7862      	ldrb	r2, [r4, #1]
 8002a6c:	9000      	str	r0, [sp, #0]
 8002a6e:	4628      	mov	r0, r5
 8002a70:	f000 fda9 	bl	80035c6 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8002a74:	2200      	movs	r2, #0
 8002a76:	7821      	ldrb	r1, [r4, #0]
 8002a78:	4628      	mov	r0, r5
 8002a7a:	f007 fcb4 	bl	800a3e6 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8002a7e:	2300      	movs	r3, #0
 8002a80:	461a      	mov	r2, r3
 8002a82:	210a      	movs	r1, #10
 8002a84:	4628      	mov	r0, r5
 8002a86:	f000 f978 	bl	8002d7a <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 8002a8a:	28ff      	cmp	r0, #255	; 0xff
 8002a8c:	d0c6      	beq.n	8002a1c <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002a8e:	231a      	movs	r3, #26
 8002a90:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002a94:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002a98:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002a9c:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 8002aa0:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002aa4:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002aa8:	bf0d      	iteet	eq
 8002aaa:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002aac:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002aae:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002ab0:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002ab2:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002ab6:	bf08      	it	eq
 8002ab8:	73a3      	strbeq	r3, [r4, #14]
 8002aba:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002abe:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002ac0:	bf18      	it	ne
 8002ac2:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002ac4:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8002ac6:	bf14      	ite	ne
 8002ac8:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8002aca:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002acc:	f000 fd8f 	bl	80035ee <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8002ad0:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002ad2:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	f000 fd8a 	bl	80035ee <USBH_AllocPipe>
 8002ada:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8002adc:	8b20      	ldrh	r0, [r4, #24]
 8002ade:	9002      	str	r0, [sp, #8]
 8002ae0:	2602      	movs	r6, #2
 8002ae2:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002ae6:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002aea:	7ba2      	ldrb	r2, [r4, #14]
 8002aec:	7b61      	ldrb	r1, [r4, #13]
 8002aee:	9601      	str	r6, [sp, #4]
 8002af0:	9000      	str	r0, [sp, #0]
 8002af2:	4628      	mov	r0, r5
 8002af4:	f000 fd67 	bl	80035c6 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8002af8:	8b60      	ldrh	r0, [r4, #26]
 8002afa:	9002      	str	r0, [sp, #8]
 8002afc:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002b00:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002b04:	7be2      	ldrb	r2, [r4, #15]
 8002b06:	7b21      	ldrb	r1, [r4, #12]
 8002b08:	9601      	str	r6, [sp, #4]
 8002b0a:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8002b0c:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8002b0e:	4628      	mov	r0, r5
 8002b10:	f000 fd59 	bl	80035c6 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8002b14:	4632      	mov	r2, r6
 8002b16:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8002b18:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f007 fc62 	bl	800a3e6 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8002b22:	4632      	mov	r2, r6
 8002b24:	7b21      	ldrb	r1, [r4, #12]
 8002b26:	4628      	mov	r0, r5
 8002b28:	f007 fc5d 	bl	800a3e6 <USBH_LL_SetToggle>
      status = USBH_OK;
 8002b2c:	4630      	mov	r0, r6
 8002b2e:	e776      	b.n	8002a1e <USBH_CDC_InterfaceInit+0x18>

08002b30 <USBH_CDC_ClassRequest>:
{
 8002b30:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002b32:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8002b36:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8002b38:	23a1      	movs	r3, #161	; 0xa1
 8002b3a:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8002b3c:	2321      	movs	r3, #33	; 0x21
 8002b3e:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002b40:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8002b46:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002b48:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002b4a:	3140      	adds	r1, #64	; 0x40
{
 8002b4c:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002b4e:	f000 fac9 	bl	80030e4 <USBH_CtlReq>
  if(status == USBH_OK)
 8002b52:	4605      	mov	r5, r0
 8002b54:	b920      	cbnz	r0, 8002b60 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8002b56:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	4798      	blx	r3
}
 8002b60:	4628      	mov	r0, r5
 8002b62:	bd38      	pop	{r3, r4, r5, pc}

08002b64 <USBH_CDC_TransmitCallback>:
 8002b64:	4770      	bx	lr

08002b66 <USBH_CDC_ReceiveCallback>:
 8002b66:	4770      	bx	lr

08002b68 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8002b68:	4770      	bx	lr

08002b6a <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002b6a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8002b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002b70:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8002b72:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8002b76:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d83d      	bhi.n	8002bf8 <USBH_CDC_Process+0x8e>
 8002b7c:	e8df f003 	tbb	[pc, r3]
 8002b80:	42170603 	.word	0x42170603
 8002b84:	a6          	.byte	0xa6
 8002b85:	00          	.byte	0x00
    status = USBH_OK;
 8002b86:	2000      	movs	r0, #0
}
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8002b8c:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8002b8e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8002b90:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8002b92:	2320      	movs	r3, #32
 8002b94:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002b96:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8002b9c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002b9e:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002ba0:	f000 faa0 	bl	80030e4 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002ba4:	bb50      	cbnz	r0, 8002bfc <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8002ba6:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 8002ba8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8002bac:	e024      	b.n	8002bf8 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8002bae:	23a1      	movs	r3, #161	; 0xa1
 8002bb0:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8002bb2:	2321      	movs	r3, #33	; 0x21
 8002bb4:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002bb6:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8002bbc:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002bbe:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002bc0:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8002bc4:	f000 fa8e 	bl	80030e4 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002bc8:	b9c0      	cbnz	r0, 8002bfc <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8002bca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002bcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 8002bce:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8002bd2:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8002bdc:	4291      	cmp	r1, r2
 8002bde:	d10b      	bne.n	8002bf8 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8002be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002be4:	795a      	ldrb	r2, [r3, #5]
 8002be6:	4291      	cmp	r1, r2
 8002be8:	d106      	bne.n	8002bf8 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8002bea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d102      	bne.n	8002bf8 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	f7ff ffb8 	bl	8002b68 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	e7c5      	b.n	8002b88 <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8002bfc:	2801      	cmp	r0, #1
 8002bfe:	d0fb      	beq.n	8002bf8 <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 8002c00:	2304      	movs	r3, #4
 8002c02:	e7d1      	b.n	8002ba8 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 8002c04:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8002c08:	2901      	cmp	r1, #1
 8002c0a:	d021      	beq.n	8002c50 <USBH_CDC_Process+0xe6>
 8002c0c:	2902      	cmp	r1, #2
 8002c0e:	d02e      	beq.n	8002c6e <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002c10:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8002c14:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8002c16:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d045      	beq.n	8002caa <USBH_CDC_Process+0x140>
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d1ea      	bne.n	8002bf8 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8002c22:	7b31      	ldrb	r1, [r6, #12]
 8002c24:	4628      	mov	r0, r5
 8002c26:	f007 fbcd 	bl	800a3c4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8002c2a:	2801      	cmp	r0, #1
 8002c2c:	d1e4      	bne.n	8002bf8 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8002c2e:	7b31      	ldrb	r1, [r6, #12]
 8002c30:	4628      	mov	r0, r5
 8002c32:	f007 fb83 	bl	800a33c <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8002c36:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002c38:	4298      	cmp	r0, r3
 8002c3a:	d040      	beq.n	8002cbe <USBH_CDC_Process+0x154>
 8002c3c:	8b72      	ldrh	r2, [r6, #26]
 8002c3e:	4290      	cmp	r0, r2
 8002c40:	d93d      	bls.n	8002cbe <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 8002c42:	1a1b      	subs	r3, r3, r0
 8002c44:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8002c46:	6a33      	ldr	r3, [r6, #32]
 8002c48:	4418      	add	r0, r3
 8002c4a:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e033      	b.n	8002cb8 <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002c50:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c52:	8b22      	ldrh	r2, [r4, #24]
 8002c54:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 8002c56:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002c58:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 8002c5a:	bf98      	it	ls
 8002c5c:	b282      	uxthls	r2, r0
 8002c5e:	69e1      	ldr	r1, [r4, #28]
 8002c60:	4628      	mov	r0, r5
 8002c62:	f000 fc89 	bl	8003578 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8002c66:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8002c68:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8002c6c:	e7d0      	b.n	8002c10 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8002c6e:	7b61      	ldrb	r1, [r4, #13]
 8002c70:	f007 fba8 	bl	800a3c4 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8002c74:	2801      	cmp	r0, #1
 8002c76:	d115      	bne.n	8002ca4 <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c7a:	8b22      	ldrh	r2, [r4, #24]
 8002c7c:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8002c7e:	bf83      	ittte	hi
 8002c80:	1a9b      	subhi	r3, r3, r2
 8002c82:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002c84:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 8002c86:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002c88:	bf8a      	itet	hi
 8002c8a:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 8002c8c:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002c8e:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 8002c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c92:	b10b      	cbz	r3, 8002c98 <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e7e7      	b.n	8002c68 <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8002c98:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	f7ff ff61 	bl	8002b64 <USBH_CDC_TransmitCallback>
 8002ca2:	e7b5      	b.n	8002c10 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 8002ca4:	2802      	cmp	r0, #2
 8002ca6:	d1b3      	bne.n	8002c10 <USBH_CDC_Process+0xa6>
 8002ca8:	e7f4      	b.n	8002c94 <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 8002caa:	7b33      	ldrb	r3, [r6, #12]
 8002cac:	8b72      	ldrh	r2, [r6, #26]
 8002cae:	6a31      	ldr	r1, [r6, #32]
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	f000 fc78 	bl	80035a6 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8002cb6:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8002cb8:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8002cbc:	e79c      	b.n	8002bf8 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	f7ff ff4e 	bl	8002b66 <USBH_CDC_ReceiveCallback>
 8002cca:	e795      	b.n	8002bf8 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 8002ccc:	2100      	movs	r1, #0
 8002cce:	f000 fc0d 	bl	80034ec <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d190      	bne.n	8002bf8 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8002cd6:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8002cda:	e78d      	b.n	8002bf8 <USBH_CDC_Process+0x8e>

08002cdc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8002cdc:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8002ce0:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d1fb      	bne.n	8002ce6 <DeInitStateMachine+0xa>
 8002cee:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8002cf2:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8002cfc:	4291      	cmp	r1, r2
 8002cfe:	d1fb      	bne.n	8002cf8 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8002d00:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8002d02:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8002d04:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8002d06:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8002d08:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8002d0a:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 8002d0e:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8002d10:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 8002d12:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8002d14:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8002d18:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	4770      	bx	lr

08002d20 <USBH_Init>:
{
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	460d      	mov	r5, r1
  if(phost == NULL)
 8002d24:	4604      	mov	r4, r0
 8002d26:	b180      	cbz	r0, 8002d4a <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8002d28:	2300      	movs	r3, #0
  phost->id = id;
 8002d2a:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8002d2e:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8002d32:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 8002d36:	f7ff ffd1 	bl	8002cdc <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8002d3a:	b10d      	cbz	r5, 8002d40 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8002d3c:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 8002d40:	4620      	mov	r0, r4
 8002d42:	f007 fa9d 	bl	800a280 <USBH_LL_Init>
  return USBH_OK;
 8002d46:	2000      	movs	r0, #0
 8002d48:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 8002d4a:	2002      	movs	r0, #2
}
 8002d4c:	bd38      	pop	{r3, r4, r5, pc}

08002d4e <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8002d4e:	b149      	cbz	r1, 8002d64 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8002d50:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8002d54:	b933      	cbnz	r3, 8002d64 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8002d56:	2201      	movs	r2, #1
 8002d58:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 8002d5c:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 8002d60:	4618      	mov	r0, r3
 8002d62:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8002d64:	2002      	movs	r0, #2
  }

  return status;
}
 8002d66:	4770      	bx	lr

08002d68 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8002d68:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 8002d6c:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8002d6e:	bf86      	itte	hi
 8002d70:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8002d74:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8002d76:	2002      	movls	r0, #2
  }
  return status;
}
 8002d78:	4770      	bx	lr

08002d7a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8002d7a:	b570      	push	{r4, r5, r6, lr}
 8002d7c:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8002d7e:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8002d82:	428e      	cmp	r6, r1
 8002d84:	b2e5      	uxtb	r5, r4
 8002d86:	d001      	beq.n	8002d8c <USBH_FindInterface+0x12>
 8002d88:	29ff      	cmp	r1, #255	; 0xff
 8002d8a:	d10b      	bne.n	8002da4 <USBH_FindInterface+0x2a>
 8002d8c:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8002d90:	4296      	cmp	r6, r2
 8002d92:	d001      	beq.n	8002d98 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8002d94:	2aff      	cmp	r2, #255	; 0xff
 8002d96:	d105      	bne.n	8002da4 <USBH_FindInterface+0x2a>
 8002d98:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 8002d9c:	429e      	cmp	r6, r3
 8002d9e:	d007      	beq.n	8002db0 <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8002da0:	2bff      	cmp	r3, #255	; 0xff
 8002da2:	d005      	beq.n	8002db0 <USBH_FindInterface+0x36>
 8002da4:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8002da6:	2c02      	cmp	r4, #2
 8002da8:	f100 001a 	add.w	r0, r0, #26
 8002dac:	d1e7      	bne.n	8002d7e <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8002dae:	25ff      	movs	r5, #255	; 0xff
}
 8002db0:	4628      	mov	r0, r5
 8002db2:	bd70      	pop	{r4, r5, r6, pc}

08002db4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8002db4:	b510      	push	{r4, lr}
 8002db6:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8002db8:	f007 fa88 	bl	800a2cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f007 fb04 	bl	800a3cc <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	bd10      	pop	{r4, pc}

08002dc8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8002dc8:	b530      	push	{r4, r5, lr}
 8002dca:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 8002dd2:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 8002dd6:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8002dd8:	b933      	cbnz	r3, 8002de8 <USBH_Process+0x20>
 8002dda:	7802      	ldrb	r2, [r0, #0]
 8002ddc:	b122      	cbz	r2, 8002de8 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8002dde:	7802      	ldrb	r2, [r0, #0]
 8002de0:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 8002de2:	bf1c      	itt	ne
 8002de4:	2203      	movne	r2, #3
 8002de6:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 8002de8:	7822      	ldrb	r2, [r4, #0]
 8002dea:	2a0b      	cmp	r2, #11
 8002dec:	d818      	bhi.n	8002e20 <USBH_Process+0x58>
 8002dee:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002df2:	000c      	.short	0x000c
 8002df4:	001f001a 	.word	0x001f001a
 8002df8:	00170121 	.word	0x00170121
 8002dfc:	0107004f 	.word	0x0107004f
 8002e00:	00d000c6 	.word	0x00d000c6
 8002e04:	00e700da 	.word	0x00e700da
 8002e08:	0118      	.short	0x0118
    if (phost->device.is_connected)
 8002e0a:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8002e0e:	b13b      	cbz	r3, 8002e20 <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8002e10:	2301      	movs	r3, #1
      USBH_Delay(200U);
 8002e12:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8002e14:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 8002e16:	f007 faf5 	bl	800a404 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f007 fa80 	bl	800a320 <USBH_LL_ResetPort>
}
 8002e20:	2000      	movs	r0, #0
 8002e22:	b007      	add	sp, #28
 8002e24:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d1fa      	bne.n	8002e20 <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 8002e2a:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 8002e2c:	7023      	strb	r3, [r4, #0]
 8002e2e:	e7f7      	b.n	8002e20 <USBH_Process+0x58>
    USBH_Delay(100U);
 8002e30:	2064      	movs	r0, #100	; 0x64
 8002e32:	f007 fae7 	bl	800a404 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8002e36:	4620      	mov	r0, r4
 8002e38:	f007 fa64 	bl	800a304 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8002e3c:	2305      	movs	r3, #5
 8002e3e:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8002e40:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8002e44:	2100      	movs	r1, #0
 8002e46:	4620      	mov	r0, r4
 8002e48:	f000 fbd1 	bl	80035ee <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8002e4c:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8002e4e:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8002e50:	4620      	mov	r0, r4
 8002e52:	f000 fbcc 	bl	80035ee <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8002e56:	79a2      	ldrb	r2, [r4, #6]
 8002e58:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8002e5c:	7120      	strb	r0, [r4, #4]
 8002e5e:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8002e60:	9202      	str	r2, [sp, #8]
 8002e62:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 8002e64:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8002e68:	9200      	str	r2, [sp, #0]
 8002e6a:	9501      	str	r5, [sp, #4]
 8002e6c:	2280      	movs	r2, #128	; 0x80
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f000 fba9 	bl	80035c6 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8002e74:	79a2      	ldrb	r2, [r4, #6]
 8002e76:	9202      	str	r2, [sp, #8]
 8002e78:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8002e7c:	9200      	str	r2, [sp, #0]
 8002e7e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8002e82:	7961      	ldrb	r1, [r4, #5]
 8002e84:	9501      	str	r5, [sp, #4]
 8002e86:	462a      	mov	r2, r5
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f000 fb9c 	bl	80035c6 <USBH_OpenPipe>
 8002e8e:	e7c7      	b.n	8002e20 <USBH_Process+0x58>
  switch (phost->EnumState)
 8002e90:	7863      	ldrb	r3, [r4, #1]
 8002e92:	2b07      	cmp	r3, #7
 8002e94:	d8c4      	bhi.n	8002e20 <USBH_Process+0x58>
 8002e96:	e8df f003 	tbb	[pc, r3]
 8002e9a:	1504      	.short	0x1504
 8002e9c:	4138301e 	.word	0x4138301e
 8002ea0:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8002ea2:	2108      	movs	r1, #8
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f000 f9fa 	bl	800329e <USBH_Get_DevDesc>
 8002eaa:	4605      	mov	r5, r0
 8002eac:	2800      	cmp	r0, #0
 8002eae:	d1b7      	bne.n	8002e20 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8002eb0:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8002eb2:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8002eb6:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8002eb8:	7921      	ldrb	r1, [r4, #4]
 8002eba:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8002ebe:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8002ec0:	9202      	str	r2, [sp, #8]
 8002ec2:	e7cf      	b.n	8002e64 <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8002ec4:	2112      	movs	r1, #18
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	f000 f9e9 	bl	800329e <USBH_Get_DevDesc>
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	d1a7      	bne.n	8002e20 <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 8002ed0:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8002ed2:	7063      	strb	r3, [r4, #1]
 8002ed4:	e7a4      	b.n	8002e20 <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f000 fadd 	bl	8003498 <USBH_SetAddress>
 8002ede:	4605      	mov	r5, r0
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	d19d      	bne.n	8002e20 <USBH_Process+0x58>
      USBH_Delay(2U);
 8002ee4:	2002      	movs	r0, #2
 8002ee6:	f007 fa8d 	bl	800a404 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8002eea:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8002eec:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 8002eee:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8002ef0:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8002ef4:	7921      	ldrb	r1, [r4, #4]
 8002ef6:	79a2      	ldrb	r2, [r4, #6]
 8002ef8:	e7e2      	b.n	8002ec0 <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 8002efa:	2109      	movs	r1, #9
 8002efc:	4620      	mov	r0, r4
 8002efe:	f000 fa16 	bl	800332e <USBH_Get_CfgDesc>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d18c      	bne.n	8002e20 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8002f06:	2304      	movs	r3, #4
 8002f08:	e7e3      	b.n	8002ed2 <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 8002f0a:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f000 fa0d 	bl	800332e <USBH_Get_CfgDesc>
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d183      	bne.n	8002e20 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8002f18:	2305      	movs	r3, #5
 8002f1a:	e7da      	b.n	8002ed2 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8002f1c:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8002f20:	b141      	cbz	r1, 8002f34 <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 8002f22:	23ff      	movs	r3, #255	; 0xff
 8002f24:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f000 fa8e 	bl	800344a <USBH_Get_StringDesc>
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	f47f af76 	bne.w	8002e20 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8002f34:	2306      	movs	r3, #6
 8002f36:	e7cc      	b.n	8002ed2 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 8002f38:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 8002f3c:	b141      	cbz	r1, 8002f50 <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 8002f3e:	23ff      	movs	r3, #255	; 0xff
 8002f40:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8002f44:	4620      	mov	r0, r4
 8002f46:	f000 fa80 	bl	800344a <USBH_Get_StringDesc>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	f47f af68 	bne.w	8002e20 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8002f50:	2307      	movs	r3, #7
 8002f52:	e7be      	b.n	8002ed2 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8002f54:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 8002f58:	b141      	cbz	r1, 8002f6c <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 8002f5a:	23ff      	movs	r3, #255	; 0xff
 8002f5c:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8002f60:	4620      	mov	r0, r4
 8002f62:	f000 fa72 	bl	800344a <USBH_Get_StringDesc>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	f47f af5a 	bne.w	8002e20 <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8002f72:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d009      	beq.n	8002f8e <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 8002f7a:	2307      	movs	r3, #7
 8002f7c:	e756      	b.n	8002e2c <USBH_Process+0x64>
      if(phost->pUser != NULL)
 8002f7e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f43f af4c 	beq.w	8002e20 <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8002f88:	2101      	movs	r1, #1
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 8002f8e:	2308      	movs	r3, #8
 8002f90:	e74c      	b.n	8002e2c <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8002f92:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 8002f96:	4620      	mov	r0, r4
 8002f98:	f000 fa8c 	bl	80034b4 <USBH_SetCfg>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	f47f af3f 	bne.w	8002e20 <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8002fa2:	2309      	movs	r3, #9
 8002fa4:	e742      	b.n	8002e2c <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8002fa6:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 8002faa:	069b      	lsls	r3, r3, #26
 8002fac:	d506      	bpl.n	8002fbc <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f000 fa8d 	bl	80034d0 <USBH_SetFeature>
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	f47f af32 	bne.w	8002e20 <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 8002fbc:	230a      	movs	r3, #10
 8002fbe:	e735      	b.n	8002e2c <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 8002fc0:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f43f af2b 	beq.w	8002e20 <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8002fd0:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8002fd4:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 8002fd8:	7919      	ldrb	r1, [r3, #4]
 8002fda:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8002fdc:	bf08      	it	eq
 8002fde:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 8002fe2:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8002fe6:	b1d3      	cbz	r3, 800301e <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	4620      	mov	r0, r4
 8002fec:	4798      	blx	r3
 8002fee:	b9b0      	cbnz	r0, 800301e <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 8002ff0:	2306      	movs	r3, #6
 8002ff2:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8002ff4:	2103      	movs	r1, #3
 8002ff6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	4798      	blx	r3
 8002ffe:	e70f      	b.n	8002e20 <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 8003000:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003004:	b15b      	cbz	r3, 800301e <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	4620      	mov	r0, r4
 800300a:	4798      	blx	r3
 800300c:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8003010:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f47f af03 	bne.w	8002e20 <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 800301a:	230b      	movs	r3, #11
 800301c:	e706      	b.n	8002e2c <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 800301e:	230d      	movs	r3, #13
 8003020:	e704      	b.n	8002e2c <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 8003022:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003026:	2b00      	cmp	r3, #0
 8003028:	f43f aefa 	beq.w	8002e20 <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	4620      	mov	r0, r4
 8003030:	4798      	blx	r3
 8003032:	e6f5      	b.n	8002e20 <USBH_Process+0x58>
    DeInitStateMachine(phost);
 8003034:	4620      	mov	r0, r4
 8003036:	f7ff fe51 	bl	8002cdc <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 800303a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800303e:	2b00      	cmp	r3, #0
 8003040:	f43f aeee 	beq.w	8002e20 <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	4620      	mov	r0, r4
 8003048:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 8003050:	e6e6      	b.n	8002e20 <USBH_Process+0x58>

08003052 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8003052:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 8003056:	4770      	bx	lr

08003058 <USBH_LL_IncTimer>:
  phost->Timer ++;
 8003058:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 800305c:	3201      	adds	r2, #1
 800305e:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8003062:	7802      	ldrb	r2, [r0, #0]
 8003064:	2a0b      	cmp	r2, #11
 8003066:	d104      	bne.n	8003072 <USBH_LL_IncTimer+0x1a>
 8003068:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800306c:	b10b      	cbz	r3, 8003072 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	4718      	bx	r3
 8003072:	4770      	bx	lr

08003074 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 8003074:	2301      	movs	r3, #1
 8003076:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 800307a:	4770      	bx	lr

0800307c <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 8003082:	4770      	bx	lr

08003084 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8003084:	7802      	ldrb	r2, [r0, #0]
{
 8003086:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8003088:	b94a      	cbnz	r2, 800309e <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 800308a:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 800308e:	2201      	movs	r2, #1
 8003090:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8003094:	b10b      	cbz	r3, 800309a <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8003096:	2104      	movs	r1, #4
 8003098:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800309a:	2000      	movs	r0, #0
 800309c:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 800309e:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 80030a2:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 80030a4:	bf04      	itt	eq
 80030a6:	2202      	moveq	r2, #2
 80030a8:	7002      	strbeq	r2, [r0, #0]
 80030aa:	e7f6      	b.n	800309a <USBH_LL_Connect+0x16>

080030ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80030ac:	b510      	push	{r4, lr}
 80030ae:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 80030b0:	f007 f91a 	bl	800a2e8 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80030b4:	7921      	ldrb	r1, [r4, #4]
 80030b6:	4620      	mov	r0, r4
 80030b8:	f000 fab0 	bl	800361c <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80030bc:	7961      	ldrb	r1, [r4, #5]
 80030be:	4620      	mov	r0, r4
 80030c0:	f000 faac 	bl	800361c <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 80030ca:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80030ce:	b113      	cbz	r3, 80030d6 <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80030d0:	2105      	movs	r1, #5
 80030d2:	4620      	mov	r0, r4
 80030d4:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80030d6:	4620      	mov	r0, r4
 80030d8:	f007 f8f8 	bl	800a2cc <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80030dc:	2303      	movs	r3, #3
 80030de:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80030e0:	2000      	movs	r0, #0
 80030e2:	bd10      	pop	{r4, pc}

080030e4 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80030e4:	b513      	push	{r0, r1, r4, lr}
 80030e6:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 80030e8:	7880      	ldrb	r0, [r0, #2]
 80030ea:	2801      	cmp	r0, #1
 80030ec:	d003      	beq.n	80030f6 <USBH_CtlReq+0x12>
 80030ee:	2802      	cmp	r0, #2
 80030f0:	d008      	beq.n	8003104 <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 80030f2:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 80030f4:	e004      	b.n	8003100 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 80030f6:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 80030f8:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 80030fa:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 80030fc:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 80030fe:	70a3      	strb	r3, [r4, #2]
}
 8003100:	b002      	add	sp, #8
 8003102:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8003104:	7e23      	ldrb	r3, [r4, #24]
 8003106:	3b01      	subs	r3, #1
 8003108:	2101      	movs	r1, #1
 800310a:	2b0a      	cmp	r3, #10
 800310c:	d8f1      	bhi.n	80030f2 <USBH_CtlReq+0xe>
 800310e:	e8df f003 	tbb	[pc, r3]
 8003112:	0f06      	.short	0x0f06
 8003114:	4c40362b 	.word	0x4c40362b
 8003118:	8c806f64 	.word	0x8c806f64
 800311c:	95          	.byte	0x95
 800311d:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800311e:	7962      	ldrb	r2, [r4, #5]
 8003120:	f104 0110 	add.w	r1, r4, #16
 8003124:	4620      	mov	r0, r4
 8003126:	f000 f9ef 	bl	8003508 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800312a:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800312c:	7623      	strb	r3, [r4, #24]
 800312e:	e7e0      	b.n	80030f2 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8003130:	7961      	ldrb	r1, [r4, #5]
 8003132:	4620      	mov	r0, r4
 8003134:	f007 f946 	bl	800a3c4 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003138:	2801      	cmp	r0, #1
 800313a:	d10f      	bne.n	800315c <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 800313c:	8ae2      	ldrh	r2, [r4, #22]
 800313e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8003142:	b12a      	cbz	r2, 8003150 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8003144:	2b00      	cmp	r3, #0
 8003146:	da01      	bge.n	800314c <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8003148:	2303      	movs	r3, #3
 800314a:	e7ef      	b.n	800312c <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800314c:	2305      	movs	r3, #5
 800314e:	e7ed      	b.n	800312c <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8003150:	2b00      	cmp	r3, #0
 8003152:	da01      	bge.n	8003158 <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8003154:	2309      	movs	r3, #9
 8003156:	e7e9      	b.n	800312c <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 8003158:	2307      	movs	r3, #7
 800315a:	e7e7      	b.n	800312c <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800315c:	2804      	cmp	r0, #4
 800315e:	d001      	beq.n	8003164 <USBH_CtlReq+0x80>
 8003160:	2802      	cmp	r0, #2
 8003162:	d1c6      	bne.n	80030f2 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8003164:	230b      	movs	r3, #11
 8003166:	e7e1      	b.n	800312c <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 8003168:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800316c:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 800316e:	89a2      	ldrh	r2, [r4, #12]
 8003170:	7923      	ldrb	r3, [r4, #4]
 8003172:	68a1      	ldr	r1, [r4, #8]
 8003174:	4620      	mov	r0, r4
 8003176:	f000 f9ef 	bl	8003558 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800317a:	2304      	movs	r3, #4
 800317c:	e7d6      	b.n	800312c <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800317e:	7921      	ldrb	r1, [r4, #4]
 8003180:	4620      	mov	r0, r4
 8003182:	f007 f91f 	bl	800a3c4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003186:	2801      	cmp	r0, #1
 8003188:	d0e4      	beq.n	8003154 <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800318a:	2805      	cmp	r0, #5
 800318c:	d015      	beq.n	80031ba <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 800318e:	2804      	cmp	r0, #4
 8003190:	e7e7      	b.n	8003162 <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 8003192:	7963      	ldrb	r3, [r4, #5]
 8003194:	9100      	str	r1, [sp, #0]
 8003196:	89a2      	ldrh	r2, [r4, #12]
 8003198:	68a1      	ldr	r1, [r4, #8]
 800319a:	4620      	mov	r0, r4
 800319c:	f000 f9c5 	bl	800352a <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80031a0:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80031a4:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80031a6:	2306      	movs	r3, #6
 80031a8:	e7c0      	b.n	800312c <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80031aa:	7961      	ldrb	r1, [r4, #5]
 80031ac:	4620      	mov	r0, r4
 80031ae:	f007 f909 	bl	800a3c4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80031b2:	2801      	cmp	r0, #1
 80031b4:	d0d0      	beq.n	8003158 <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 80031b6:	2805      	cmp	r0, #5
 80031b8:	d105      	bne.n	80031c6 <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 80031ba:	2301      	movs	r3, #1
 80031bc:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 80031be:	2300      	movs	r3, #0
 80031c0:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 80031c2:	2003      	movs	r0, #3
 80031c4:	e79c      	b.n	8003100 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80031c6:	2802      	cmp	r0, #2
 80031c8:	d0c0      	beq.n	800314c <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 80031ca:	2804      	cmp	r0, #4
 80031cc:	d191      	bne.n	80030f2 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 80031ce:	230b      	movs	r3, #11
 80031d0:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 80031d2:	2301      	movs	r3, #1
 80031d4:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 80031d6:	2002      	movs	r0, #2
 80031d8:	e792      	b.n	8003100 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 80031da:	2200      	movs	r2, #0
 80031dc:	7923      	ldrb	r3, [r4, #4]
 80031de:	4611      	mov	r1, r2
 80031e0:	4620      	mov	r0, r4
 80031e2:	f000 f9b9 	bl	8003558 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 80031e6:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80031ea:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80031ec:	2308      	movs	r3, #8
 80031ee:	e79d      	b.n	800312c <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80031f0:	7921      	ldrb	r1, [r4, #4]
 80031f2:	4620      	mov	r0, r4
 80031f4:	f007 f8e6 	bl	800a3c4 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 80031f8:	2801      	cmp	r0, #1
 80031fa:	d104      	bne.n	8003206 <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 80031fc:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 80031fe:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8003200:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8003202:	7620      	strb	r0, [r4, #24]
 8003204:	e77c      	b.n	8003100 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8003206:	2804      	cmp	r0, #4
 8003208:	d0ac      	beq.n	8003164 <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 800320a:	2805      	cmp	r0, #5
 800320c:	f47f af71 	bne.w	80030f2 <USBH_CtlReq+0xe>
 8003210:	e7d3      	b.n	80031ba <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 8003212:	2200      	movs	r2, #0
 8003214:	7963      	ldrb	r3, [r4, #5]
 8003216:	9100      	str	r1, [sp, #0]
 8003218:	4620      	mov	r0, r4
 800321a:	4611      	mov	r1, r2
 800321c:	f000 f985 	bl	800352a <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8003220:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003224:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8003226:	230a      	movs	r3, #10
 8003228:	e780      	b.n	800312c <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800322a:	7961      	ldrb	r1, [r4, #5]
 800322c:	4620      	mov	r0, r4
 800322e:	f007 f8c9 	bl	800a3c4 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003232:	2801      	cmp	r0, #1
 8003234:	d0e2      	beq.n	80031fc <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003236:	2802      	cmp	r0, #2
 8003238:	d1a9      	bne.n	800318e <USBH_CtlReq+0xaa>
 800323a:	e78b      	b.n	8003154 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800323c:	7e63      	ldrb	r3, [r4, #25]
 800323e:	3301      	adds	r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	7663      	strb	r3, [r4, #25]
 8003246:	d806      	bhi.n	8003256 <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8003248:	4620      	mov	r0, r4
 800324a:	f007 f84d 	bl	800a2e8 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800324e:	2301      	movs	r3, #1
 8003250:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8003252:	70a3      	strb	r3, [r4, #2]
 8003254:	e74d      	b.n	80030f2 <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8003256:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800325a:	2106      	movs	r1, #6
 800325c:	4620      	mov	r0, r4
 800325e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	7663      	strb	r3, [r4, #25]
 8003264:	e7b5      	b.n	80031d2 <USBH_CtlReq+0xee>

08003266 <USBH_GetDescriptor>:
{
 8003266:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8003268:	7884      	ldrb	r4, [r0, #2]
{
 800326a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 800326e:	2c01      	cmp	r4, #1
 8003270:	d110      	bne.n	8003294 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8003272:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8003276:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8003278:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 800327c:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8003280:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003282:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8003286:	bf0c      	ite	eq
 8003288:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 800328c:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800328e:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8003290:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8003292:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8003294:	462a      	mov	r2, r5
 8003296:	4619      	mov	r1, r3
}
 8003298:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 800329a:	f7ff bf23 	b.w	80030e4 <USBH_CtlReq>

0800329e <USBH_Get_DevDesc>:
{
 800329e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 80032a0:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 80032a4:	460d      	mov	r5, r1
 80032a6:	9100      	str	r1, [sp, #0]
 80032a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032ac:	2100      	movs	r1, #0
{
 80032ae:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80032b0:	f7ff ffd9 	bl	8003266 <USBH_GetDescriptor>
 80032b4:	bbc8      	cbnz	r0, 800332a <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80032b6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80032ba:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80032be:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 80032c2:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80032c6:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 80032ca:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80032ce:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 80032d2:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80032d6:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 80032da:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80032de:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 80032e2:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 80032e6:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80032e8:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 80032ec:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 80032f0:	d91b      	bls.n	800332a <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 80032f2:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 80032f6:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 80032fa:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 80032fe:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8003302:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8003306:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800330a:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 800330e:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8003312:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8003316:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800331a:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800331e:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8003322:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8003326:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 800332a:	b003      	add	sp, #12
 800332c:	bd30      	pop	{r4, r5, pc}

0800332e <USBH_Get_CfgDesc>:
{
 800332e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8003332:	f100 051c 	add.w	r5, r0, #28
{
 8003336:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8003338:	9100      	str	r1, [sp, #0]
 800333a:	462b      	mov	r3, r5
 800333c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003340:	2100      	movs	r1, #0
{
 8003342:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003344:	f7ff ff8f 	bl	8003266 <USBH_GetDescriptor>
 8003348:	bb48      	cbnz	r0, 800339e <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800334a:	7f23      	ldrb	r3, [r4, #28]
 800334c:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8003350:	7f63      	ldrb	r3, [r4, #29]
 8003352:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8003356:	f894 3020 	ldrb.w	r3, [r4, #32]
 800335a:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800335e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003362:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8003366:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800336a:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800336e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003372:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8003376:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800337a:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800337c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003380:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8003384:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8003388:	d909      	bls.n	800339e <USBH_Get_CfgDesc+0x70>
 800338a:	4627      	mov	r7, r4
 800338c:	462b      	mov	r3, r5
 800338e:	4606      	mov	r6, r0
 8003390:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003392:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8003396:	2e02      	cmp	r6, #2
 8003398:	d001      	beq.n	800339e <USBH_Get_CfgDesc+0x70>
 800339a:	4596      	cmp	lr, r2
 800339c:	d802      	bhi.n	80033a4 <USBH_Get_CfgDesc+0x76>
}
 800339e:	b003      	add	sp, #12
 80033a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80033a4:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80033a6:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80033a8:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80033aa:	7859      	ldrb	r1, [r3, #1]
 80033ac:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80033ae:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80033b0:	d1f1      	bne.n	8003396 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80033b2:	7819      	ldrb	r1, [r3, #0]
 80033b4:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80033b8:	7859      	ldrb	r1, [r3, #1]
 80033ba:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80033be:	7899      	ldrb	r1, [r3, #2]
 80033c0:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80033c4:	78d9      	ldrb	r1, [r3, #3]
 80033c6:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80033ca:	7919      	ldrb	r1, [r3, #4]
 80033cc:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80033d0:	7959      	ldrb	r1, [r3, #5]
 80033d2:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80033d6:	7999      	ldrb	r1, [r3, #6]
 80033d8:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80033dc:	79d9      	ldrb	r1, [r3, #7]
 80033de:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80033e2:	7a19      	ldrb	r1, [r3, #8]
 80033e4:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80033e8:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 80033ec:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80033ee:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 80033f2:	428d      	cmp	r5, r1
 80033f4:	d802      	bhi.n	80033fc <USBH_Get_CfgDesc+0xce>
 80033f6:	3601      	adds	r6, #1
 80033f8:	371a      	adds	r7, #26
 80033fa:	e7cc      	b.n	8003396 <USBH_Get_CfgDesc+0x68>
 80033fc:	4596      	cmp	lr, r2
 80033fe:	d9fa      	bls.n	80033f6 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003400:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8003402:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003404:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8003406:	785d      	ldrb	r5, [r3, #1]
 8003408:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800340a:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800340c:	d1ef      	bne.n	80033ee <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800340e:	1c4d      	adds	r5, r1, #1
 8003410:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8003414:	4421      	add	r1, r4
 8003416:	f893 9000 	ldrb.w	r9, [r3]
 800341a:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800341e:	f893 9001 	ldrb.w	r9, [r3, #1]
 8003422:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8003426:	f893 9002 	ldrb.w	r9, [r3, #2]
 800342a:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800342e:	f893 9003 	ldrb.w	r9, [r3, #3]
 8003432:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8003436:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800343a:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800343e:	f893 9006 	ldrb.w	r9, [r3, #6]
 8003442:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8003446:	b2e9      	uxtb	r1, r5
 8003448:	e7d1      	b.n	80033ee <USBH_Get_CfgDesc+0xc0>

0800344a <USBH_Get_StringDesc>:
{
 800344a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 800344c:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8003450:	4614      	mov	r4, r2
 8003452:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 800345a:	462b      	mov	r3, r5
 800345c:	2100      	movs	r1, #0
{
 800345e:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8003460:	f7ff ff01 	bl	8003266 <USBH_GetDescriptor>
 8003464:	b978      	cbnz	r0, 8003486 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8003466:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 800346a:	2b03      	cmp	r3, #3
 800346c:	d10b      	bne.n	8003486 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800346e:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8003472:	3b02      	subs	r3, #2
 8003474:	42bb      	cmp	r3, r7
 8003476:	bf28      	it	cs
 8003478:	463b      	movcs	r3, r7
 800347a:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 800347c:	4602      	mov	r2, r0
 800347e:	4293      	cmp	r3, r2
 8003480:	d803      	bhi.n	800348a <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8003482:	2300      	movs	r3, #0
 8003484:	7023      	strb	r3, [r4, #0]
}
 8003486:	b003      	add	sp, #12
 8003488:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 800348a:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 800348c:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 800348e:	7889      	ldrb	r1, [r1, #2]
 8003490:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8003494:	b292      	uxth	r2, r2
 8003496:	e7f2      	b.n	800347e <USBH_Get_StringDesc+0x34>

08003498 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8003498:	7883      	ldrb	r3, [r0, #2]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d106      	bne.n	80034ac <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800349e:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80034a0:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80034a2:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80034a4:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80034a6:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80034a8:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80034aa:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 80034ac:	2200      	movs	r2, #0
 80034ae:	4611      	mov	r1, r2
 80034b0:	f7ff be18 	b.w	80030e4 <USBH_CtlReq>

080034b4 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 80034b4:	7883      	ldrb	r3, [r0, #2]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d106      	bne.n	80034c8 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80034ba:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80034bc:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80034be:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80034c0:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80034c2:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80034c4:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80034c6:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 80034c8:	2200      	movs	r2, #0
 80034ca:	4611      	mov	r1, r2
 80034cc:	f7ff be0a 	b.w	80030e4 <USBH_CtlReq>

080034d0 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 80034d0:	7883      	ldrb	r3, [r0, #2]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d106      	bne.n	80034e4 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80034d6:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80034d8:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80034da:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80034dc:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80034de:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80034e0:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80034e2:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 80034e4:	2200      	movs	r2, #0
 80034e6:	4611      	mov	r1, r2
 80034e8:	f7ff bdfc 	b.w	80030e4 <USBH_CtlReq>

080034ec <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 80034ec:	7883      	ldrb	r3, [r0, #2]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d106      	bne.n	8003500 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80034f2:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80034f4:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80034f6:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80034f8:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80034fa:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80034fc:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80034fe:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003500:	2200      	movs	r2, #0
 8003502:	4611      	mov	r1, r2
 8003504:	f7ff bdee 	b.w	80030e4 <USBH_CtlReq>

08003508 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8003508:	b530      	push	{r4, r5, lr}
 800350a:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800350c:	2400      	movs	r4, #0
{
 800350e:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003510:	2308      	movs	r3, #8
 8003512:	9302      	str	r3, [sp, #8]
 8003514:	9101      	str	r1, [sp, #4]
 8003516:	9403      	str	r4, [sp, #12]
 8003518:	9400      	str	r4, [sp, #0]
 800351a:	4623      	mov	r3, r4
 800351c:	4622      	mov	r2, r4
 800351e:	4629      	mov	r1, r5
 8003520:	f006 ff36 	bl	800a390 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8003524:	4620      	mov	r0, r4
 8003526:	b005      	add	sp, #20
 8003528:	bd30      	pop	{r4, r5, pc}

0800352a <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800352a:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800352c:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003530:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003532:	2d00      	cmp	r5, #0
{
 8003534:	461c      	mov	r4, r3
 8003536:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800353a:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 800353c:	bf18      	it	ne
 800353e:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003540:	9303      	str	r3, [sp, #12]
 8003542:	2301      	movs	r3, #1
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2300      	movs	r3, #0
 8003548:	9101      	str	r1, [sp, #4]
 800354a:	461a      	mov	r2, r3
 800354c:	4621      	mov	r1, r4
 800354e:	f006 ff1f 	bl	800a390 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8003552:	2000      	movs	r0, #0
 8003554:	b005      	add	sp, #20
 8003556:	bd30      	pop	{r4, r5, pc}

08003558 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003558:	b530      	push	{r4, r5, lr}
 800355a:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800355c:	2400      	movs	r4, #0
{
 800355e:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003560:	9202      	str	r2, [sp, #8]
 8003562:	2201      	movs	r2, #1
 8003564:	9101      	str	r1, [sp, #4]
 8003566:	9403      	str	r4, [sp, #12]
 8003568:	9200      	str	r2, [sp, #0]
 800356a:	4623      	mov	r3, r4
 800356c:	4629      	mov	r1, r5
 800356e:	f006 ff0f 	bl	800a390 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8003572:	4620      	mov	r0, r4
 8003574:	b005      	add	sp, #20
 8003576:	bd30      	pop	{r4, r5, pc}

08003578 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8003578:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800357a:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800357e:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003580:	2d00      	cmp	r5, #0
{
 8003582:	461c      	mov	r4, r3
 8003584:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003588:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 800358a:	bf18      	it	ne
 800358c:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800358e:	9303      	str	r3, [sp, #12]
 8003590:	2301      	movs	r3, #1
 8003592:	9101      	str	r1, [sp, #4]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2200      	movs	r2, #0
 8003598:	2302      	movs	r3, #2
 800359a:	4621      	mov	r1, r4
 800359c:	f006 fef8 	bl	800a390 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 80035a0:	2000      	movs	r0, #0
 80035a2:	b005      	add	sp, #20
 80035a4:	bd30      	pop	{r4, r5, pc}

080035a6 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80035a6:	b530      	push	{r4, r5, lr}
 80035a8:	b085      	sub	sp, #20
 80035aa:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80035ac:	2400      	movs	r4, #0
 80035ae:	9202      	str	r2, [sp, #8]
 80035b0:	2201      	movs	r2, #1
 80035b2:	9101      	str	r1, [sp, #4]
 80035b4:	9403      	str	r4, [sp, #12]
 80035b6:	9200      	str	r2, [sp, #0]
 80035b8:	2302      	movs	r3, #2
 80035ba:	4629      	mov	r1, r5
 80035bc:	f006 fee8 	bl	800a390 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 80035c0:	4620      	mov	r0, r4
 80035c2:	b005      	add	sp, #20
 80035c4:	bd30      	pop	{r4, r5, pc}

080035c6 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80035c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 80035c8:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80035cc:	9402      	str	r4, [sp, #8]
 80035ce:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80035d2:	9401      	str	r4, [sp, #4]
 80035d4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80035d8:	9400      	str	r4, [sp, #0]
 80035da:	f006 feb3 	bl	800a344 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 80035de:	2000      	movs	r0, #0
 80035e0:	b004      	add	sp, #16
 80035e2:	bd10      	pop	{r4, pc}

080035e4 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80035e4:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 80035e6:	f006 fec5 	bl	800a374 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 80035ea:	2000      	movs	r0, #0
 80035ec:	bd08      	pop	{r3, pc}

080035ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80035ee:	b530      	push	{r4, r5, lr}
 80035f0:	2300      	movs	r3, #0
 80035f2:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80035f6:	f854 5b04 	ldr.w	r5, [r4], #4
 80035fa:	042d      	lsls	r5, r5, #16
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	d407      	bmi.n	8003610 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8003600:	33e0      	adds	r3, #224	; 0xe0
 8003602:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003606:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 800360a:	b292      	uxth	r2, r2
}
 800360c:	b2d0      	uxtb	r0, r2
 800360e:	bd30      	pop	{r4, r5, pc}
 8003610:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8003612:	2b0b      	cmp	r3, #11
 8003614:	d1ef      	bne.n	80035f6 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8003616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800361a:	e7f7      	b.n	800360c <USBH_AllocPipe+0x1e>

0800361c <USBH_FreePipe>:
   if(idx < 11U)
 800361c:	290a      	cmp	r1, #10
 800361e:	bf9f      	itttt	ls
 8003620:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8003624:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8003628:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 800362c:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8003630:	2000      	movs	r0, #0
 8003632:	4770      	bx	lr

08003634 <fs_open_custom>:
};

 unsigned long engine_js_size = 4837;

int fs_open_custom(struct fs_file *file, const char *name)
{
 8003634:	b538      	push	{r3, r4, r5, lr}
 8003636:	460d      	mov	r5, r1
	int len = 0;
	file->flags = 0;
 8003638:	2300      	movs	r3, #0
{
 800363a:	4604      	mov	r4, r0
	file->flags = 0;
 800363c:	7403      	strb	r3, [r0, #16]

	if ( strcmp( name, "/favicon.ico" ) == 0 )
 800363e:	490d      	ldr	r1, [pc, #52]	; (8003674 <fs_open_custom+0x40>)
 8003640:	4628      	mov	r0, r5
 8003642:	f7fc fdc5 	bl	80001d0 <strcmp>
 8003646:	b940      	cbnz	r0, 800365a <fs_open_custom+0x26>
	{
		len = img_favicon_size;
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <fs_open_custom+0x44>)
 800364a:	6818      	ldr	r0, [r3, #0]
		file->data = ( const char * )img_favicon;
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <fs_open_custom+0x48>)
//		len = strlen( ok );
//	}
	else
	{
		len = index_html_size;
		file->data = ( const char * )index_html;
 800364e:	6023      	str	r3, [r4, #0]
	}

	file->len = len;
	file->index = len;
	file->pextension = 0;
 8003650:	2300      	movs	r3, #0
	file->len = len;
 8003652:	6060      	str	r0, [r4, #4]
	file->index = len;
 8003654:	60a0      	str	r0, [r4, #8]
	file->pextension = 0;
 8003656:	60e3      	str	r3, [r4, #12]
	return len;
}
 8003658:	bd38      	pop	{r3, r4, r5, pc}
	else if ( strcmp( name, "/engine.js" ) == 0 )
 800365a:	4909      	ldr	r1, [pc, #36]	; (8003680 <fs_open_custom+0x4c>)
 800365c:	4628      	mov	r0, r5
 800365e:	f7fc fdb7 	bl	80001d0 <strcmp>
 8003662:	b918      	cbnz	r0, 800366c <fs_open_custom+0x38>
		len = engine_js_size;
 8003664:	4b07      	ldr	r3, [pc, #28]	; (8003684 <fs_open_custom+0x50>)
 8003666:	6818      	ldr	r0, [r3, #0]
		file->data = ( const char * )engine_js;
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <fs_open_custom+0x54>)
 800366a:	e7f0      	b.n	800364e <fs_open_custom+0x1a>
		len = index_html_size;
 800366c:	4b07      	ldr	r3, [pc, #28]	; (800368c <fs_open_custom+0x58>)
 800366e:	6818      	ldr	r0, [r3, #0]
		file->data = ( const char * )index_html;
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <fs_open_custom+0x5c>)
 8003672:	e7ec      	b.n	800364e <fs_open_custom+0x1a>
 8003674:	0800b890 	.word	0x0800b890
 8003678:	20001894 	.word	0x20001894
 800367c:	20001314 	.word	0x20001314
 8003680:	0800b89d 	.word	0x0800b89d
 8003684:	20001310 	.word	0x20001310
 8003688:	20000028 	.word	0x20000028
 800368c:	20001b9c 	.word	0x20001b9c
 8003690:	20001898 	.word	0x20001898

08003694 <fs_close_custom>:

/*-----------------------------------------------------------------------------*/
void fs_close_custom(struct fs_file *file)
{
 8003694:	b510      	push	{r4, lr}
	if ( file->flags & 0x04 )
 8003696:	7c03      	ldrb	r3, [r0, #16]
 8003698:	075b      	lsls	r3, r3, #29
{
 800369a:	4604      	mov	r4, r0
	if ( file->flags & 0x04 )
 800369c:	d502      	bpl.n	80036a4 <fs_close_custom+0x10>
	{
		free( ( char * )file->data );
 800369e:	6800      	ldr	r0, [r0, #0]
 80036a0:	f006 ff12 	bl	800a4c8 <free>
	}

	file->data = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	6023      	str	r3, [r4, #0]
	file->len = 0;
 80036a8:	6063      	str	r3, [r4, #4]
 80036aa:	bd10      	pop	{r4, pc}

080036ac <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80036ac:	b510      	push	{r4, lr}
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80036ae:	4604      	mov	r4, r0
 80036b0:	b158      	cbz	r0, 80036ca <fs_open+0x1e>
 80036b2:	b151      	cbz	r1, 80036ca <fs_open+0x1e>
     return ERR_ARG;
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 80036b4:	f7ff ffbe 	bl	8003634 <fs_open_custom>
 80036b8:	b118      	cbz	r0, 80036c2 <fs_open+0x16>
    file->is_custom_file = 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	7463      	strb	r3, [r4, #17]
    return ERR_OK;
 80036be:	2000      	movs	r0, #0
 80036c0:	bd10      	pop	{r4, pc}
  }
  file->is_custom_file = 0;
 80036c2:	7460      	strb	r0, [r4, #17]
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 80036c4:	f06f 0005 	mvn.w	r0, #5
 80036c8:	bd10      	pop	{r4, pc}
     return ERR_ARG;
 80036ca:	f06f 000f 	mvn.w	r0, #15
}
 80036ce:	bd10      	pop	{r4, pc}

080036d0 <fs_close>:
/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 80036d0:	7c43      	ldrb	r3, [r0, #17]
 80036d2:	b10b      	cbz	r3, 80036d8 <fs_close+0x8>
    fs_close_custom(file);
 80036d4:	f7ff bfde 	b.w	8003694 <fs_close_custom>
 80036d8:	4770      	bx	lr

080036da <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 80036da:	6842      	ldr	r2, [r0, #4]
 80036dc:	6880      	ldr	r0, [r0, #8]
}
 80036de:	1a10      	subs	r0, r2, r0
 80036e0:	4770      	bx	lr
	...

080036e4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 80036e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e8:	4605      	mov	r5, r0
 80036ea:	460f      	mov	r7, r1
 80036ec:	4698      	mov	r8, r3
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80036ee:	4616      	mov	r6, r2
 80036f0:	b932      	cbnz	r2, 8003700 <http_write+0x1c>
 80036f2:	4b18      	ldr	r3, [pc, #96]	; (8003754 <http_write+0x70>)
 80036f4:	4918      	ldr	r1, [pc, #96]	; (8003758 <http_write+0x74>)
 80036f6:	4819      	ldr	r0, [pc, #100]	; (800375c <http_write+0x78>)
 80036f8:	f44f 7204 	mov.w	r2, #528	; 0x210
 80036fc:	f006 ffba 	bl	800a674 <iprintf>
  len = *length;
 8003700:	8830      	ldrh	r0, [r6, #0]
  if (len == 0) {
 8003702:	b328      	cbz	r0, 8003750 <http_write+0x6c>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003704:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 8003706:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800370a:	0064      	lsls	r4, r4, #1
 800370c:	b2a4      	uxth	r4, r4
 800370e:	429c      	cmp	r4, r3
 8003710:	bf28      	it	cs
 8003712:	461c      	movcs	r4, r3
 8003714:	4284      	cmp	r4, r0
 8003716:	bf28      	it	cs
 8003718:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800371a:	4643      	mov	r3, r8
 800371c:	4622      	mov	r2, r4
 800371e:	4639      	mov	r1, r7
 8003720:	4628      	mov	r0, r5
 8003722:	f004 ff33 	bl	800858c <tcp_write>
    if (err == ERR_MEM) {
 8003726:	1c43      	adds	r3, r0, #1
 8003728:	d10d      	bne.n	8003746 <http_write+0x62>
      if ((tcp_sndbuf(pcb) == 0) ||
 800372a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800372e:	b133      	cbz	r3, 800373e <http_write+0x5a>
 8003730:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8003734:	2b08      	cmp	r3, #8
 8003736:	d802      	bhi.n	800373e <http_write+0x5a>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
          /* no need to try smaller sizes */
          len = 1;
      } else {
        len /= 2;
 8003738:	0864      	lsrs	r4, r4, #1
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800373a:	2c01      	cmp	r4, #1
 800373c:	d8ed      	bhi.n	800371a <http_write+0x36>
  if (err == ERR_OK) {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	8033      	strh	r3, [r6, #0]
 8003742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (err == ERR_OK) {
 8003746:	2800      	cmp	r0, #0
 8003748:	d1f9      	bne.n	800373e <http_write+0x5a>
    *length = len;
 800374a:	8034      	strh	r4, [r6, #0]
 800374c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
}
 8003750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003754:	0800bb47 	.word	0x0800bb47
 8003758:	0800bb7e 	.word	0x0800bb7e
 800375c:	0800bb8d 	.word	0x0800bb8d

08003760 <http_state_eof>:
{
 8003760:	b510      	push	{r4, lr}
 8003762:	4604      	mov	r4, r0
  if(hs->handle) {
 8003764:	6940      	ldr	r0, [r0, #20]
 8003766:	b118      	cbz	r0, 8003770 <http_state_eof+0x10>
    fs_close(hs->handle);
 8003768:	f7ff ffb2 	bl	80036d0 <fs_close>
    hs->handle = NULL;
 800376c:	2300      	movs	r3, #0
 800376e:	6163      	str	r3, [r4, #20]
  if (hs->req) {
 8003770:	6a20      	ldr	r0, [r4, #32]
 8003772:	b118      	cbz	r0, 800377c <http_state_eof+0x1c>
    pbuf_free(hs->req);
 8003774:	f002 f9a6 	bl	8005ac4 <pbuf_free>
    hs->req = NULL;
 8003778:	2300      	movs	r3, #0
 800377a:	6223      	str	r3, [r4, #32]
 800377c:	bd10      	pop	{r4, pc}
	...

08003780 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8003784:	490a      	ldr	r1, [pc, #40]	; (80037b0 <http_get_404_file+0x30>)
 8003786:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8003788:	4604      	mov	r4, r0
 800378a:	f7ff ff8f 	bl	80036ac <fs_open>
  if (err != ERR_OK) {
 800378e:	b168      	cbz	r0, 80037ac <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8003790:	4908      	ldr	r1, [pc, #32]	; (80037b4 <http_get_404_file+0x34>)
 8003792:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8003794:	4620      	mov	r0, r4
 8003796:	f7ff ff89 	bl	80036ac <fs_open>
    if (err != ERR_OK) {
 800379a:	b138      	cbz	r0, 80037ac <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800379c:	4906      	ldr	r1, [pc, #24]	; (80037b8 <http_get_404_file+0x38>)
 800379e:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff ff83 	bl	80036ac <fs_open>
      if (err != ERR_OK) {
 80037a6:	b108      	cbz	r0, 80037ac <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80037a8:	2400      	movs	r4, #0
 80037aa:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 80037ac:	4620      	mov	r0, r4
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	0800b9a7 	.word	0x0800b9a7
 80037b4:	0800b9b1 	.word	0x0800b9b1
 80037b8:	0800b9ba 	.word	0x0800b9ba

080037bc <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80037c0:	4615      	mov	r5, r2
 80037c2:	bb42      	cbnz	r2, 8003816 <http_accept+0x5a>
 80037c4:	b339      	cbz	r1, 8003816 <http_accept+0x5a>
    return ERR_VAL;
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 80037c6:	2101      	movs	r1, #1
 80037c8:	4620      	mov	r0, r4
 80037ca:	f002 fdd3 	bl	8006374 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80037ce:	2050      	movs	r0, #80	; 0x50
 80037d0:	f001 ff16 	bl	8005600 <mem_malloc>
  if (ret != NULL) {
 80037d4:	4606      	mov	r6, r0
 80037d6:	b308      	cbz	r0, 800381c <http_accept+0x60>
  memset(hs, 0, sizeof(struct http_state));
 80037d8:	2250      	movs	r2, #80	; 0x50
 80037da:	4629      	mov	r1, r5
 80037dc:	f006 fe96 	bl	800a50c <memset>
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 80037e0:	2305      	movs	r3, #5
 80037e2:	f8a6 304e 	strh.w	r3, [r6, #78]	; 0x4e
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 80037e6:	4631      	mov	r1, r6
 80037e8:	4620      	mov	r0, r4
  hs->pcb = pcb;
 80037ea:	61f4      	str	r4, [r6, #28]
  tcp_arg(pcb, hs);
 80037ec:	f002 fdda 	bl	80063a4 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 80037f0:	490c      	ldr	r1, [pc, #48]	; (8003824 <http_accept+0x68>)
 80037f2:	4620      	mov	r0, r4
 80037f4:	f002 fdda 	bl	80063ac <tcp_recv>
  tcp_err(pcb, http_err);
 80037f8:	490b      	ldr	r1, [pc, #44]	; (8003828 <http_accept+0x6c>)
 80037fa:	4620      	mov	r0, r4
 80037fc:	f002 fe04 	bl	8006408 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003800:	490a      	ldr	r1, [pc, #40]	; (800382c <http_accept+0x70>)
 8003802:	4620      	mov	r0, r4
 8003804:	2204      	movs	r2, #4
 8003806:	f002 fe1d 	bl	8006444 <tcp_poll>
  tcp_sent(pcb, http_sent);
 800380a:	4909      	ldr	r1, [pc, #36]	; (8003830 <http_accept+0x74>)
 800380c:	4620      	mov	r0, r4
 800380e:	f002 fde5 	bl	80063dc <tcp_sent>

  return ERR_OK;
}
 8003812:	4628      	mov	r0, r5
 8003814:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8003816:	f06f 0505 	mvn.w	r5, #5
 800381a:	e7fa      	b.n	8003812 <http_accept+0x56>
    return ERR_MEM;
 800381c:	f04f 35ff 	mov.w	r5, #4294967295
 8003820:	e7f7      	b.n	8003812 <http_accept+0x56>
 8003822:	bf00      	nop
 8003824:	08003a85 	.word	0x08003a85
 8003828:	08003ead 	.word	0x08003ead
 800382c:	08003a49 	.word	0x08003a49
 8003830:	08003a31 	.word	0x08003a31

08003834 <http_close_conn>:
{
 8003834:	b538      	push	{r3, r4, r5, lr}
 8003836:	4604      	mov	r4, r0
 8003838:	460d      	mov	r5, r1
  tcp_arg(pcb, NULL);
 800383a:	2100      	movs	r1, #0
 800383c:	f002 fdb2 	bl	80063a4 <tcp_arg>
  tcp_recv(pcb, NULL);
 8003840:	2100      	movs	r1, #0
 8003842:	4620      	mov	r0, r4
 8003844:	f002 fdb2 	bl	80063ac <tcp_recv>
  tcp_err(pcb, NULL);
 8003848:	2100      	movs	r1, #0
 800384a:	4620      	mov	r0, r4
 800384c:	f002 fddc 	bl	8006408 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 8003850:	2200      	movs	r2, #0
 8003852:	4611      	mov	r1, r2
 8003854:	4620      	mov	r0, r4
 8003856:	f002 fdf5 	bl	8006444 <tcp_poll>
  tcp_sent(pcb, NULL);
 800385a:	2100      	movs	r1, #0
 800385c:	4620      	mov	r0, r4
 800385e:	f002 fdbd 	bl	80063dc <tcp_sent>
  if (hs != NULL) {
 8003862:	b12d      	cbz	r5, 8003870 <http_close_conn+0x3c>
    http_state_eof(hs);
 8003864:	4628      	mov	r0, r5
 8003866:	f7ff ff7b 	bl	8003760 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 800386a:	4628      	mov	r0, r5
 800386c:	f001 fda8 	bl	80053c0 <mem_free>
  err = tcp_close(pcb);
 8003870:	4620      	mov	r0, r4
 8003872:	f003 f8f7 	bl	8006a64 <tcp_close>
  if (err != ERR_OK) {
 8003876:	4605      	mov	r5, r0
 8003878:	b120      	cbz	r0, 8003884 <http_close_conn+0x50>
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800387a:	2204      	movs	r2, #4
 800387c:	4902      	ldr	r1, [pc, #8]	; (8003888 <http_close_conn+0x54>)
 800387e:	4620      	mov	r0, r4
 8003880:	f002 fde0 	bl	8006444 <tcp_poll>
}
 8003884:	4628      	mov	r0, r5
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	08003a49 	.word	0x08003a49

0800388c <http_check_eof>:
{
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4605      	mov	r5, r0
  if (hs->handle == NULL) {
 8003890:	6948      	ldr	r0, [r1, #20]
{
 8003892:	460c      	mov	r4, r1
  if (hs->handle == NULL) {
 8003894:	b928      	cbnz	r0, 80038a2 <http_check_eof+0x16>
    http_close_conn(pcb, hs);
 8003896:	4621      	mov	r1, r4
 8003898:	4628      	mov	r0, r5
 800389a:	f7ff ffcb 	bl	8003834 <http_close_conn>
    return 0;
 800389e:	2000      	movs	r0, #0
 80038a0:	bd38      	pop	{r3, r4, r5, pc}
  bytes_left = fs_bytes_left(hs->handle);
 80038a2:	f7ff ff1a 	bl	80036da <fs_bytes_left>
  if (bytes_left <= 0) {
 80038a6:	2800      	cmp	r0, #0
 80038a8:	ddf5      	ble.n	8003896 <http_check_eof+0xa>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <http_check_eof+0x30>)
 80038ac:	4904      	ldr	r1, [pc, #16]	; (80038c0 <http_check_eof+0x34>)
 80038ae:	4805      	ldr	r0, [pc, #20]	; (80038c4 <http_check_eof+0x38>)
 80038b0:	f240 4283 	movw	r2, #1155	; 0x483
 80038b4:	f006 fede 	bl	800a674 <iprintf>
  return 1;
 80038b8:	2001      	movs	r0, #1
}
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	0800bb47 	.word	0x0800bb47
 80038c0:	0800b970 	.word	0x0800b970
 80038c4:	0800bb8d 	.word	0x0800bb8d

080038c8 <http_send>:
{
 80038c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038cc:	4605      	mov	r5, r0
  if (hs == NULL) {
 80038ce:	460c      	mov	r4, r1
 80038d0:	b921      	cbnz	r1, 80038dc <http_send+0x14>
    return 0;
 80038d2:	2600      	movs	r6, #0
}
 80038d4:	4630      	mov	r0, r6
 80038d6:	b003      	add	sp, #12
 80038d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 80038dc:	f8b1 304e 	ldrh.w	r3, [r1, #78]	; 0x4e
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d81d      	bhi.n	8003920 <http_send+0x58>
  sendlen = len;
 80038e4:	af02      	add	r7, sp, #8
  len = tcp_sndbuf(pcb);
 80038e6:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  sendlen = len;
 80038ea:	f827 6d02 	strh.w	r6, [r7, #-2]!
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 80038ee:	f04f 0800 	mov.w	r8, #0
 80038f2:	f8b4 a04e 	ldrh.w	sl, [r4, #78]	; 0x4e
  while(len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 80038f6:	b12e      	cbz	r6, 8003904 <http_send+0x3c>
 80038f8:	f1ba 0f04 	cmp.w	sl, #4
 80038fc:	d802      	bhi.n	8003904 <http_send+0x3c>
 80038fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003902:	b9fb      	cbnz	r3, 8003944 <http_send+0x7c>
  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 8003904:	f1ba 0f04 	cmp.w	sl, #4
 8003908:	d905      	bls.n	8003916 <http_send+0x4e>
 800390a:	69a3      	ldr	r3, [r4, #24]
 800390c:	b91b      	cbnz	r3, 8003916 <http_send+0x4e>
    if(http_check_eof(pcb, hs)) {
 800390e:	4621      	mov	r1, r4
 8003910:	4628      	mov	r0, r5
 8003912:	f7ff ffbb 	bl	800388c <http_check_eof>
  if((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 8003916:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800391a:	2b04      	cmp	r3, #4
 800391c:	f240 8086 	bls.w	8003a2c <http_send+0x164>
  if (hs->left == 0) {
 8003920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d051      	beq.n	80039ca <http_send+0x102>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003926:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003928:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800392c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003930:	428a      	cmp	r2, r1
 8003932:	bf98      	it	ls
 8003934:	4613      	movls	r3, r2
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003936:	69a1      	ldr	r1, [r4, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003938:	f8ad 3006 	strh.w	r3, [sp, #6]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800393c:	2900      	cmp	r1, #0
 800393e:	d14b      	bne.n	80039d8 <http_send+0x110>
 8003940:	2301      	movs	r3, #1
 8003942:	e053      	b.n	80039ec <http_send+0x124>
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 8003944:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 8003948:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 800394c:	4658      	mov	r0, fp
 800394e:	f7fc fc49 	bl	80001e4 <strlen>
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8003952:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 8003956:	fa1f f980 	uxth.w	r9, r0
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800395a:	4648      	mov	r0, r9
 800395c:	1a40      	subs	r0, r0, r1
 800395e:	42b0      	cmp	r0, r6
 8003960:	bfa8      	it	ge
 8003962:	4630      	movge	r0, r6
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 8003964:	f1ba 0f03 	cmp.w	sl, #3
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8003968:	f8ad 0006 	strh.w	r0, [sp, #6]
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800396c:	4459      	add	r1, fp
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800396e:	d02a      	beq.n	80039c6 <http_send+0xfe>
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8003970:	f1ba 0f04 	cmp.w	sl, #4
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 8003974:	f04f 0300 	mov.w	r3, #0
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8003978:	d001      	beq.n	800397e <http_send+0xb6>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800397a:	f043 0302 	orr.w	r3, r3, #2
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800397e:	463a      	mov	r2, r7
 8003980:	4628      	mov	r0, r5
 8003982:	f7ff feaf 	bl	80036e4 <http_write>
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 8003986:	b108      	cbz	r0, 800398c <http_send+0xc4>
      sendlen = 0;
 8003988:	f8ad 8006 	strh.w	r8, [sp, #6]
    hs->hdr_pos += sendlen;
 800398c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003990:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8003994:	4413      	add	r3, r2
 8003996:	b29b      	uxth	r3, r3
    len -= sendlen;
 8003998:	1ab6      	subs	r6, r6, r2
    if(hs->hdr_pos == hdrlen) {
 800399a:	4599      	cmp	r9, r3
    hs->hdr_pos += sendlen;
 800399c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    len -= sendlen;
 80039a0:	b2b6      	uxth	r6, r6
    if(hs->hdr_pos == hdrlen) {
 80039a2:	d1a6      	bne.n	80038f2 <http_send+0x2a>
      hs->hdr_index++;
 80039a4:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
        hs->hdr_index++;
 80039a8:	3301      	adds	r3, #1
 80039aa:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80039ae:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d804      	bhi.n	80039c0 <http_send+0xf8>
         (hs->hdrs[hs->hdr_index] == NULL)) {
 80039b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80039ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039bc:	2a00      	cmp	r2, #0
 80039be:	d0f3      	beq.n	80039a8 <http_send+0xe0>
      hs->hdr_pos = 0;
 80039c0:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
 80039c4:	e795      	b.n	80038f2 <http_send+0x2a>
      apiflags |= TCP_WRITE_FLAG_COPY;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e7d7      	b.n	800397a <http_send+0xb2>
    if (!http_check_eof(pcb, hs)) {
 80039ca:	4621      	mov	r1, r4
 80039cc:	4628      	mov	r0, r5
 80039ce:	f7ff ff5d 	bl	800388c <http_check_eof>
 80039d2:	2800      	cmp	r0, #0
 80039d4:	d1a7      	bne.n	8003926 <http_send+0x5e>
 80039d6:	e77c      	b.n	80038d2 <http_send+0xa>
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80039d8:	6960      	ldr	r0, [r4, #20]
 80039da:	2800      	cmp	r0, #0
 80039dc:	d0b0      	beq.n	8003940 <http_send+0x78>
 80039de:	6843      	ldr	r3, [r0, #4]
 80039e0:	1a9a      	subs	r2, r3, r2
 80039e2:	6803      	ldr	r3, [r0, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	1acb      	subs	r3, r1, r3
 80039e8:	bf18      	it	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	f10d 0206 	add.w	r2, sp, #6
 80039f0:	4628      	mov	r0, r5
 80039f2:	f7ff fe77 	bl	80036e4 <http_write>
  if (err == ERR_OK) {
 80039f6:	b9b8      	cbnz	r0, 8003a28 <http_send+0x160>
    hs->file += len;
 80039f8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80039fc:	69a2      	ldr	r2, [r4, #24]
    hs->left -= len;
 80039fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hs->file += len;
 8003a00:	440a      	add	r2, r1
    hs->left -= len;
 8003a02:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8003a04:	61a2      	str	r2, [r4, #24]
    hs->left -= len;
 8003a06:	6263      	str	r3, [r4, #36]	; 0x24
    data_to_send = 1;
 8003a08:	2601      	movs	r6, #1
  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8003a0a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003a0c:	2f00      	cmp	r7, #0
 8003a0e:	f47f af61 	bne.w	80038d4 <http_send+0xc>
 8003a12:	6960      	ldr	r0, [r4, #20]
 8003a14:	f7ff fe61 	bl	80036da <fs_bytes_left>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	f73f af5b 	bgt.w	80038d4 <http_send+0xc>
    http_close_conn(pcb, hs);
 8003a1e:	4621      	mov	r1, r4
 8003a20:	4628      	mov	r0, r5
 8003a22:	f7ff ff07 	bl	8003834 <http_close_conn>
 8003a26:	e754      	b.n	80038d2 <http_send+0xa>
  u8_t data_to_send = 0;
 8003a28:	2600      	movs	r6, #0
 8003a2a:	e7ee      	b.n	8003a0a <http_send+0x142>
 8003a2c:	2602      	movs	r6, #2
 8003a2e:	e751      	b.n	80038d4 <http_send+0xc>

08003a30 <http_sent>:
{
 8003a30:	b508      	push	{r3, lr}
 8003a32:	460b      	mov	r3, r1
  if (hs == NULL) {
 8003a34:	4601      	mov	r1, r0
 8003a36:	b128      	cbz	r0, 8003a44 <http_sent+0x14>
  hs->retries = 0;
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ff42 	bl	80038c8 <http_send>
}
 8003a44:	2000      	movs	r0, #0
 8003a46:	bd08      	pop	{r3, pc}

08003a48 <http_poll>:
{
 8003a48:	b510      	push	{r4, lr}
 8003a4a:	460c      	mov	r4, r1
  if (hs == NULL) {
 8003a4c:	4601      	mov	r1, r0
 8003a4e:	b920      	cbnz	r0, 8003a5a <http_poll+0x12>
      http_close_conn(pcb, hs);
 8003a50:	4620      	mov	r0, r4
 8003a52:	f7ff feef 	bl	8003834 <http_close_conn>
}
 8003a56:	2000      	movs	r0, #0
 8003a58:	bd10      	pop	{r4, pc}
    hs->retries++;
 8003a5a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8003a5e:	3301      	adds	r3, #1
 8003a60:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8003a62:	2b04      	cmp	r3, #4
    hs->retries++;
 8003a64:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8003a68:	d0f2      	beq.n	8003a50 <http_poll+0x8>
    if(hs && (hs->handle)) {
 8003a6a:	6943      	ldr	r3, [r0, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f2      	beq.n	8003a56 <http_poll+0xe>
      if(http_send(pcb, hs)) {
 8003a70:	4620      	mov	r0, r4
 8003a72:	f7ff ff29 	bl	80038c8 <http_send>
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d0ed      	beq.n	8003a56 <http_poll+0xe>
        tcp_output(pcb);
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f005 f90c 	bl	8008c98 <tcp_output>
 8003a80:	e7e9      	b.n	8003a56 <http_poll+0xe>
	...

08003a84 <http_recv>:
{
 8003a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a88:	b087      	sub	sp, #28
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	9101      	str	r1, [sp, #4]
 8003a8e:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8003a90:	469a      	mov	sl, r3
 8003a92:	b94b      	cbnz	r3, 8003aa8 <http_recv+0x24>
 8003a94:	b152      	cbz	r2, 8003aac <http_recv+0x28>
 8003a96:	b988      	cbnz	r0, 8003abc <http_recv+0x38>
      tcp_recved(pcb, p->tot_len);
 8003a98:	9801      	ldr	r0, [sp, #4]
 8003a9a:	8929      	ldrh	r1, [r5, #8]
 8003a9c:	f002 fc16 	bl	80062cc <tcp_recved>
      pbuf_free(p);
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	f002 f80f 	bl	8005ac4 <pbuf_free>
 8003aa6:	e001      	b.n	8003aac <http_recv+0x28>
    if (p != NULL) {
 8003aa8:	2a00      	cmp	r2, #0
 8003aaa:	d1f5      	bne.n	8003a98 <http_recv+0x14>
    http_close_conn(pcb, hs);
 8003aac:	4621      	mov	r1, r4
 8003aae:	9801      	ldr	r0, [sp, #4]
 8003ab0:	f7ff fec0 	bl	8003834 <http_close_conn>
}
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	b007      	add	sp, #28
 8003ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_recved(pcb, p->tot_len);
 8003abc:	8911      	ldrh	r1, [r2, #8]
 8003abe:	9801      	ldr	r0, [sp, #4]
 8003ac0:	f002 fc04 	bl	80062cc <tcp_recved>
    if (hs->handle == NULL) {
 8003ac4:	6963      	ldr	r3, [r4, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 81c6 	bne.w	8003e58 <http_recv+0x3d4>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8003acc:	69a3      	ldr	r3, [r4, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 81e1 	bne.w	8003e96 <http_recv+0x412>
  if (hs->req == NULL) {
 8003ad4:	6a20      	ldr	r0, [r4, #32]
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	f040 808f 	bne.w	8003bfa <http_recv+0x176>
    hs->req = p;
 8003adc:	6225      	str	r5, [r4, #32]
  pbuf_ref(p);
 8003ade:	4628      	mov	r0, r5
 8003ae0:	f002 f9aa 	bl	8005e38 <pbuf_ref>
  if (hs->req->next != NULL) {
 8003ae4:	6a20      	ldr	r0, [r4, #32]
 8003ae6:	6803      	ldr	r3, [r0, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 808a 	beq.w	8003c02 <http_recv+0x17e>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003aee:	f8b0 9008 	ldrh.w	r9, [r0, #8]
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8003af2:	49ad      	ldr	r1, [pc, #692]	; (8003da8 <http_recv+0x324>)
    data = httpd_req_buf;
 8003af4:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 8003da8 <http_recv+0x324>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003af8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003afc:	4599      	cmp	r9, r3
 8003afe:	bf28      	it	cs
 8003b00:	4699      	movcs	r9, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8003b02:	464a      	mov	r2, r9
 8003b04:	2300      	movs	r3, #0
 8003b06:	f002 fa6f 	bl	8005fe8 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8003b0a:	f1b9 0f06 	cmp.w	r9, #6
 8003b0e:	f240 818f 	bls.w	8003e30 <http_recv+0x3ac>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8003b12:	464a      	mov	r2, r9
 8003b14:	49a5      	ldr	r1, [pc, #660]	; (8003dac <http_recv+0x328>)
 8003b16:	4640      	mov	r0, r8
 8003b18:	f000 fa19 	bl	8003f4e <lwip_strnstr>
    if (crlf != NULL) {
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	f000 8187 	beq.w	8003e30 <http_recv+0x3ac>
      if (!strncmp(data, "GET ", 4)) {
 8003b22:	2204      	movs	r2, #4
 8003b24:	49a2      	ldr	r1, [pc, #648]	; (8003db0 <http_recv+0x32c>)
 8003b26:	4640      	mov	r0, r8
 8003b28:	f006 fdfe 	bl	800a728 <strncmp>
 8003b2c:	9002      	str	r0, [sp, #8]
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d16c      	bne.n	8003c0c <http_recv+0x188>
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8003b32:	f1a9 0304 	sub.w	r3, r9, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8003b36:	b29b      	uxth	r3, r3
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8003b38:	f108 0604 	add.w	r6, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	499d      	ldr	r1, [pc, #628]	; (8003db4 <http_recv+0x330>)
 8003b40:	9303      	str	r3, [sp, #12]
 8003b42:	4630      	mov	r0, r6
 8003b44:	f000 fa03 	bl	8003f4e <lwip_strnstr>
        sp1 = data + 3;
 8003b48:	f108 0b03 	add.w	fp, r8, #3
      if (sp2 == NULL) {
 8003b4c:	4607      	mov	r7, r0
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	b950      	cbnz	r0, 8003b68 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8003b52:	461a      	mov	r2, r3
 8003b54:	4995      	ldr	r1, [pc, #596]	; (8003dac <http_recv+0x328>)
 8003b56:	4630      	mov	r0, r6
 8003b58:	f000 f9f9 	bl	8003f4e <lwip_strnstr>
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003b5c:	4607      	mov	r7, r0
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	f000 8166 	beq.w	8003e30 <http_recv+0x3ac>
        is_09 = 1;
 8003b64:	2301      	movs	r3, #1
 8003b66:	9302      	str	r3, [sp, #8]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003b68:	45bb      	cmp	fp, r7
 8003b6a:	f080 8161 	bcs.w	8003e30 <http_recv+0x3ac>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8003b6e:	464a      	mov	r2, r9
 8003b70:	4991      	ldr	r1, [pc, #580]	; (8003db8 <http_recv+0x334>)
 8003b72:	4640      	mov	r0, r8
 8003b74:	f000 f9eb 	bl	8003f4e <lwip_strnstr>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	f000 8159 	beq.w	8003e30 <http_recv+0x3ac>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8003b7e:	1bbf      	subs	r7, r7, r6
          uri[uri_len] = 0;
 8003b80:	b2bf      	uxth	r7, r7
          *sp1 = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f888 3003 	strb.w	r3, [r8, #3]
  size_t uri_len = strlen(uri);
 8003b88:	4630      	mov	r0, r6
          uri[uri_len] = 0;
 8003b8a:	55f3      	strb	r3, [r6, r7]
 8003b8c:	9605      	str	r6, [sp, #20]
  size_t uri_len = strlen(uri);
 8003b8e:	f7fc fb29 	bl	80001e4 <strlen>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8003b92:	2800      	cmp	r0, #0
 8003b94:	f000 80a5 	beq.w	8003ce2 <http_recv+0x25e>
 8003b98:	1e47      	subs	r7, r0, #1
 8003b9a:	5df3      	ldrb	r3, [r6, r7]
 8003b9c:	2b2f      	cmp	r3, #47	; 0x2f
 8003b9e:	f040 80a0 	bne.w	8003ce2 <http_recv+0x25e>
 8003ba2:	4b86      	ldr	r3, [pc, #536]	; (8003dbc <http_recv+0x338>)
 8003ba4:	429e      	cmp	r6, r3
 8003ba6:	469b      	mov	fp, r3
 8003ba8:	d102      	bne.n	8003bb0 <http_recv+0x12c>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8003baa:	2801      	cmp	r0, #1
 8003bac:	f040 8099 	bne.w	8003ce2 <http_recv+0x25e>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8003bb0:	2f3f      	cmp	r7, #63	; 0x3f
 8003bb2:	bf28      	it	cs
 8003bb4:	273f      	movcs	r7, #63	; 0x3f
    if (copy_len > 0) {
 8003bb6:	b13f      	cbz	r7, 8003bc8 <http_recv+0x144>
      MEMCPY(http_uri_buf, uri, copy_len);
 8003bb8:	463a      	mov	r2, r7
 8003bba:	4631      	mov	r1, r6
 8003bbc:	487f      	ldr	r0, [pc, #508]	; (8003dbc <http_recv+0x338>)
 8003bbe:	f006 fc9a 	bl	800a4f6 <memcpy>
      http_uri_buf[copy_len] = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f80b 3007 	strb.w	r3, [fp, r7]
        file_name = g_psDefaultFilenames[loop].name;
 8003bc8:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8003df4 <http_recv+0x370>
        is_09 = 1;
 8003bcc:	f04f 0800 	mov.w	r8, #0
      if (copy_len > 0) {
 8003bd0:	b317      	cbz	r7, 8003c18 <http_recv+0x194>
        if (len_left > 0) {
 8003bd2:	f1d7 023f 	rsbs	r2, r7, #63	; 0x3f
 8003bd6:	d00e      	beq.n	8003bf6 <http_recv+0x172>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 8003bd8:	f859 6038 	ldr.w	r6, [r9, r8, lsl #3]
 8003bdc:	9203      	str	r2, [sp, #12]
 8003bde:	4630      	mov	r0, r6
 8003be0:	f7fc fb00 	bl	80001e4 <strlen>
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 8003be4:	9a03      	ldr	r2, [sp, #12]
 8003be6:	4282      	cmp	r2, r0
 8003be8:	bf28      	it	cs
 8003bea:	4602      	movcs	r2, r0
 8003bec:	4631      	mov	r1, r6
 8003bee:	eb0b 0007 	add.w	r0, fp, r7
 8003bf2:	f006 fc80 	bl	800a4f6 <memcpy>
        file_name = http_uri_buf;
 8003bf6:	4a71      	ldr	r2, [pc, #452]	; (8003dbc <http_recv+0x338>)
 8003bf8:	e010      	b.n	8003c1c <http_recv+0x198>
    pbuf_cat(hs->req, p);
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	f002 f930 	bl	8005e60 <pbuf_cat>
 8003c00:	e76d      	b.n	8003ade <http_recv+0x5a>
    data = (char *)p->payload;
 8003c02:	f8d5 8004 	ldr.w	r8, [r5, #4]
    data_len = p->len;
 8003c06:	f8b5 900a 	ldrh.w	r9, [r5, #10]
 8003c0a:	e77e      	b.n	8003b0a <http_recv+0x86>
        data[4] = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f888 3004 	strb.w	r3, [r8, #4]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8003c12:	f06f 0a0f 	mvn.w	sl, #15
 8003c16:	e04c      	b.n	8003cb2 <http_recv+0x22e>
        file_name = g_psDefaultFilenames[loop].name;
 8003c18:	f859 2038 	ldr.w	r2, [r9, r8, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 8003c1c:	9203      	str	r2, [sp, #12]
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7ff fd43 	bl	80036ac <fs_open>
 8003c26:	4626      	mov	r6, r4
      if(err == ERR_OK) {
 8003c28:	9a03      	ldr	r2, [sp, #12]
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d153      	bne.n	8003cd6 <http_recv+0x252>
        uri = file_name;
 8003c2e:	9205      	str	r2, [sp, #20]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8003c30:	9f05      	ldr	r7, [sp, #20]
    hs->handle = file;
 8003c32:	6166      	str	r6, [r4, #20]
  if (file != NULL) {
 8003c34:	2e00      	cmp	r6, #0
 8003c36:	d071      	beq.n	8003d1c <http_recv+0x298>
    hs->file = file->data;
 8003c38:	6833      	ldr	r3, [r6, #0]
 8003c3a:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8003c3c:	6873      	ldr	r3, [r6, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	da06      	bge.n	8003c50 <http_recv+0x1cc>
 8003c42:	4b5f      	ldr	r3, [pc, #380]	; (8003dc0 <http_recv+0x33c>)
 8003c44:	495f      	ldr	r1, [pc, #380]	; (8003dc4 <http_recv+0x340>)
 8003c46:	4860      	ldr	r0, [pc, #384]	; (8003dc8 <http_recv+0x344>)
 8003c48:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8003c4c:	f006 fd12 	bl	800a674 <iprintf>
    if (file->is_custom_file && (file->data == NULL)) {
 8003c50:	7c73      	ldrb	r3, [r6, #17]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d060      	beq.n	8003d18 <http_recv+0x294>
 8003c56:	6833      	ldr	r3, [r6, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d15d      	bne.n	8003d18 <http_recv+0x294>
      hs->left = file->len;
 8003c5c:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8003c64:	9b02      	ldr	r3, [sp, #8]
 8003c66:	b183      	cbz	r3, 8003c8a <http_recv+0x206>
 8003c68:	6963      	ldr	r3, [r4, #20]
 8003c6a:	7c1b      	ldrb	r3, [r3, #16]
 8003c6c:	07da      	lsls	r2, r3, #31
 8003c6e:	d50c      	bpl.n	8003c8a <http_recv+0x206>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8003c70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c72:	4951      	ldr	r1, [pc, #324]	; (8003db8 <http_recv+0x334>)
 8003c74:	69a0      	ldr	r0, [r4, #24]
 8003c76:	f000 f96a 	bl	8003f4e <lwip_strnstr>
      if (file_start != NULL) {
 8003c7a:	b130      	cbz	r0, 8003c8a <http_recv+0x206>
        size_t diff = file_start + 4 - hs->file;
 8003c7c:	69a3      	ldr	r3, [r4, #24]
 8003c7e:	3004      	adds	r0, #4
 8003c80:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 8003c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 8003c84:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 8003c8a:	6963      	ldr	r3, [r4, #20]
 8003c8c:	b113      	cbz	r3, 8003c94 <http_recv+0x210>
 8003c8e:	7c1b      	ldrb	r3, [r3, #16]
 8003c90:	07db      	lsls	r3, r3, #31
 8003c92:	d40e      	bmi.n	8003cb2 <http_recv+0x22e>
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 8003c94:	4b4d      	ldr	r3, [pc, #308]	; (8003dcc <http_recv+0x348>)
 8003c96:	6323      	str	r3, [r4, #48]	; 0x30
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6363      	str	r3, [r4, #52]	; 0x34
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 8003c9c:	63a3      	str	r3, [r4, #56]	; 0x38
  if (uri == NULL) {
 8003c9e:	2f00      	cmp	r7, #0
 8003ca0:	d141      	bne.n	8003d26 <http_recv+0x2a2>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8003ca2:	4b4b      	ldr	r3, [pc, #300]	; (8003dd0 <http_recv+0x34c>)
 8003ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <http_recv+0x350>)
 8003ca8:	63e3      	str	r3, [r4, #60]	; 0x3c
    hs->hdr_index = 0;
 8003caa:	f8a4 704e 	strh.w	r7, [r4, #78]	; 0x4e
    hs->hdr_pos = 0;
 8003cae:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
        if (hs->req != NULL) {
 8003cb2:	6a20      	ldr	r0, [r4, #32]
 8003cb4:	b118      	cbz	r0, 8003cbe <http_recv+0x23a>
          pbuf_free(hs->req);
 8003cb6:	f001 ff05 	bl	8005ac4 <pbuf_free>
          hs->req = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	6223      	str	r3, [r4, #32]
      pbuf_free(p);
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f001 ff00 	bl	8005ac4 <pbuf_free>
      if (parsed == ERR_OK) {
 8003cc4:	f1ba 0f00 	cmp.w	sl, #0
 8003cc8:	f040 80c1 	bne.w	8003e4e <http_recv+0x3ca>
          http_send(pcb, hs);
 8003ccc:	4621      	mov	r1, r4
 8003cce:	9801      	ldr	r0, [sp, #4]
 8003cd0:	f7ff fdfa 	bl	80038c8 <http_send>
 8003cd4:	e6ee      	b.n	8003ab4 <http_recv+0x30>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8003cd6:	f108 0801 	add.w	r8, r8, #1
 8003cda:	f1b8 0f05 	cmp.w	r8, #5
 8003cde:	f47f af77 	bne.w	8003bd0 <http_recv+0x14c>
    params = (char *)strchr(uri, '?');
 8003ce2:	213f      	movs	r1, #63	; 0x3f
 8003ce4:	9805      	ldr	r0, [sp, #20]
 8003ce6:	f006 fd11 	bl	800a70c <strchr>
    if (params != NULL) {
 8003cea:	b108      	cbz	r0, 8003cf0 <http_recv+0x26c>
      *params = '\0';
 8003cec:	2300      	movs	r3, #0
 8003cee:	7003      	strb	r3, [r0, #0]
    err = fs_open(&hs->file_handle, uri);
 8003cf0:	9905      	ldr	r1, [sp, #20]
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	4626      	mov	r6, r4
 8003cf6:	f7ff fcd9 	bl	80036ac <fs_open>
    if (err == ERR_OK) {
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d098      	beq.n	8003c30 <http_recv+0x1ac>
      file = http_get_404_file(hs, &uri);
 8003cfe:	a905      	add	r1, sp, #20
 8003d00:	4620      	mov	r0, r4
 8003d02:	f7ff fd3d 	bl	8003780 <http_get_404_file>
  if (file == NULL) {
 8003d06:	4606      	mov	r6, r0
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d191      	bne.n	8003c30 <http_recv+0x1ac>
    file = http_get_404_file(hs, &uri);
 8003d0c:	a905      	add	r1, sp, #20
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f7ff fd36 	bl	8003780 <http_get_404_file>
 8003d14:	4606      	mov	r6, r0
 8003d16:	e78b      	b.n	8003c30 <http_recv+0x1ac>
      hs->left = file->len;
 8003d18:	6873      	ldr	r3, [r6, #4]
 8003d1a:	e79f      	b.n	8003c5c <http_recv+0x1d8>
    hs->file = NULL;
 8003d1c:	61a6      	str	r6, [r4, #24]
    hs->left = 0;
 8003d1e:	6266      	str	r6, [r4, #36]	; 0x24
    hs->retries = 0;
 8003d20:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
 8003d24:	e7b1      	b.n	8003c8a <http_recv+0x206>
  if (strstr(uri, "404")) {
 8003d26:	492c      	ldr	r1, [pc, #176]	; (8003dd8 <http_recv+0x354>)
 8003d28:	4638      	mov	r0, r7
 8003d2a:	f006 fd0f 	bl	800a74c <strstr>
 8003d2e:	b320      	cbz	r0, 8003d7a <http_recv+0x2f6>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <http_recv+0x34c>)
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 8003d32:	62e3      	str	r3, [r4, #44]	; 0x2c
  vars = strchr(uri, '?');
 8003d34:	213f      	movs	r1, #63	; 0x3f
 8003d36:	4638      	mov	r0, r7
 8003d38:	f006 fce8 	bl	800a70c <strchr>
  if(vars) {
 8003d3c:	4680      	mov	r8, r0
 8003d3e:	b108      	cbz	r0, 8003d44 <http_recv+0x2c0>
    *vars = '\0';
 8003d40:	2300      	movs	r3, #0
 8003d42:	7003      	strb	r3, [r0, #0]
  tmp = strchr(uri, '.');
 8003d44:	4638      	mov	r0, r7
 8003d46:	212e      	movs	r1, #46	; 0x2e
 8003d48:	f006 fce0 	bl	800a70c <strchr>
  ext = NULL;
 8003d4c:	2700      	movs	r7, #0
  while (tmp) {
 8003d4e:	bb20      	cbnz	r0, 8003d9a <http_recv+0x316>
  if (ext != NULL) {
 8003d50:	b167      	cbz	r7, 8003d6c <http_recv+0x2e8>
      if(!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 8003d52:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8003df8 <http_recv+0x374>
  if (ext != NULL) {
 8003d56:	4606      	mov	r6, r0
      if(!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 8003d58:	4639      	mov	r1, r7
 8003d5a:	f859 0036 	ldr.w	r0, [r9, r6, lsl #3]
 8003d5e:	f000 f914 	bl	8003f8a <lwip_stricmp>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d07c      	beq.n	8003e60 <http_recv+0x3dc>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8003d66:	3601      	adds	r6, #1
 8003d68:	2e14      	cmp	r6, #20
 8003d6a:	d1f5      	bne.n	8003d58 <http_recv+0x2d4>
  if (vars) {
 8003d6c:	f1b8 0f00 	cmp.w	r8, #0
 8003d70:	d144      	bne.n	8003dfc <http_recv+0x378>
  } else if (!ext) {
 8003d72:	2f00      	cmp	r7, #0
 8003d74:	d15a      	bne.n	8003e2c <http_recv+0x3a8>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 8003d76:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <http_recv+0x358>)
 8003d78:	e04a      	b.n	8003e10 <http_recv+0x38c>
  } else if (strstr(uri, "400")) {
 8003d7a:	4919      	ldr	r1, [pc, #100]	; (8003de0 <http_recv+0x35c>)
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	f006 fce5 	bl	800a74c <strstr>
 8003d82:	b108      	cbz	r0, 8003d88 <http_recv+0x304>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 8003d84:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <http_recv+0x360>)
 8003d86:	e7d4      	b.n	8003d32 <http_recv+0x2ae>
  } else if (strstr(uri, "501")) {
 8003d88:	4917      	ldr	r1, [pc, #92]	; (8003de8 <http_recv+0x364>)
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	f006 fcde 	bl	800a74c <strstr>
 8003d90:	b108      	cbz	r0, 8003d96 <http_recv+0x312>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 8003d92:	4b16      	ldr	r3, [pc, #88]	; (8003dec <http_recv+0x368>)
 8003d94:	e7cd      	b.n	8003d32 <http_recv+0x2ae>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 8003d96:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <http_recv+0x36c>)
 8003d98:	e7cb      	b.n	8003d32 <http_recv+0x2ae>
    ext = tmp + 1;
 8003d9a:	1c47      	adds	r7, r0, #1
    tmp = strchr(ext, '.');
 8003d9c:	212e      	movs	r1, #46	; 0x2e
 8003d9e:	4638      	mov	r0, r7
 8003da0:	f006 fcb4 	bl	800a70c <strchr>
 8003da4:	e7d3      	b.n	8003d4e <http_recv+0x2ca>
 8003da6:	bf00      	nop
 8003da8:	20001ddc 	.word	0x20001ddc
 8003dac:	0800bcb4 	.word	0x0800bcb4
 8003db0:	0800b9c5 	.word	0x0800b9c5
 8003db4:	0800d662 	.word	0x0800d662
 8003db8:	0800bcb2 	.word	0x0800bcb2
 8003dbc:	20001d9c 	.word	0x20001d9c
 8003dc0:	0800bb47 	.word	0x0800bb47
 8003dc4:	0800b9ca 	.word	0x0800b9ca
 8003dc8:	0800bb8d 	.word	0x0800bb8d
 8003dcc:	0800b9e8 	.word	0x0800b9e8
 8003dd0:	0800ba28 	.word	0x0800ba28
 8003dd4:	0800ba46 	.word	0x0800ba46
 8003dd8:	0800ba96 	.word	0x0800ba96
 8003ddc:	0800baee 	.word	0x0800baee
 8003de0:	0800ba9a 	.word	0x0800ba9a
 8003de4:	0800ba9e 	.word	0x0800ba9e
 8003de8:	0800bab9 	.word	0x0800bab9
 8003dec:	0800babd 	.word	0x0800babd
 8003df0:	0800badc 	.word	0x0800badc
 8003df4:	0800b8a8 	.word	0x0800b8a8
 8003df8:	0800b8d0 	.word	0x0800b8d0
  if (vars) {
 8003dfc:	2614      	movs	r6, #20
    *vars = '?';
 8003dfe:	233f      	movs	r3, #63	; 0x3f
  if(content_type < NUM_HTTP_HEADERS) {
 8003e00:	2e14      	cmp	r6, #20
    *vars = '?';
 8003e02:	f888 3000 	strb.w	r3, [r8]
  if(content_type < NUM_HTTP_HEADERS) {
 8003e06:	d0b4      	beq.n	8003d72 <http_recv+0x2ee>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 8003e08:	4824      	ldr	r0, [pc, #144]	; (8003e9c <http_recv+0x418>)
 8003e0a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8003e0e:	6873      	ldr	r3, [r6, #4]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 8003e10:	63e3      	str	r3, [r4, #60]	; 0x3c
  if ((hs->handle == NULL) ||
 8003e12:	6963      	ldr	r3, [r4, #20]
 8003e14:	b123      	cbz	r3, 8003e20 <http_recv+0x39c>
 8003e16:	7c1a      	ldrb	r2, [r3, #16]
 8003e18:	f002 0203 	and.w	r2, r2, #3
 8003e1c:	2a01      	cmp	r2, #1
 8003e1e:	d123      	bne.n	8003e68 <http_recv+0x3e4>
  hs->hdr_index = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  hs->hdr_pos = 0;
 8003e26:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8003e2a:	e742      	b.n	8003cb2 <http_recv+0x22e>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 8003e2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <http_recv+0x41c>)
 8003e2e:	e7ef      	b.n	8003e10 <http_recv+0x38c>
  clen = pbuf_clen(hs->req);
 8003e30:	6a20      	ldr	r0, [r4, #32]
 8003e32:	f001 fff9 	bl	8005e28 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8003e36:	6a23      	ldr	r3, [r4, #32]
 8003e38:	891b      	ldrh	r3, [r3, #8]
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3e:	f4bf aee8 	bcs.w	8003c12 <http_recv+0x18e>
 8003e42:	2805      	cmp	r0, #5
 8003e44:	f63f aee5 	bhi.w	8003c12 <http_recv+0x18e>
 8003e48:	f06f 0a04 	mvn.w	sl, #4
 8003e4c:	e737      	b.n	8003cbe <http_recv+0x23a>
      } else if (parsed == ERR_ARG) {
 8003e4e:	f11a 0f10 	cmn.w	sl, #16
 8003e52:	f47f ae2f 	bne.w	8003ab4 <http_recv+0x30>
 8003e56:	e629      	b.n	8003aac <http_recv+0x28>
      pbuf_free(p);
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f001 fe33 	bl	8005ac4 <pbuf_free>
 8003e5e:	e629      	b.n	8003ab4 <http_recv+0x30>
  if (vars) {
 8003e60:	f1b8 0f00 	cmp.w	r8, #0
 8003e64:	d1cb      	bne.n	8003dfe <http_recv+0x37a>
 8003e66:	e7cf      	b.n	8003e08 <http_recv+0x384>
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8003e68:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	210c      	movs	r1, #12
 8003e70:	4630      	mov	r0, r6
 8003e72:	f000 f8a1 	bl	8003fb8 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 8003e76:	4630      	mov	r0, r6
 8003e78:	f7fc f9b4 	bl	80001e4 <strlen>
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 8003e7c:	2809      	cmp	r0, #9
 8003e7e:	d8cf      	bhi.n	8003e20 <http_recv+0x39c>
      SMEMCPY(&hs->hdr_content_len[len], CRLF "\0", 3);
 8003e80:	3040      	adds	r0, #64	; 0x40
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <http_recv+0x420>)
 8003e84:	1822      	adds	r2, r4, r0
 8003e86:	8819      	ldrh	r1, [r3, #0]
 8003e88:	789b      	ldrb	r3, [r3, #2]
 8003e8a:	5221      	strh	r1, [r4, r0]
 8003e8c:	7093      	strb	r3, [r2, #2]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <http_recv+0x424>)
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 8003e90:	63a6      	str	r6, [r4, #56]	; 0x38
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 8003e92:	6363      	str	r3, [r4, #52]	; 0x34
 8003e94:	e7c4      	b.n	8003e20 <http_recv+0x39c>
    return ERR_USE;
 8003e96:	f06f 0a07 	mvn.w	sl, #7
 8003e9a:	e70a      	b.n	8003cb2 <http_recv+0x22e>
 8003e9c:	0800b8d0 	.word	0x0800b8d0
 8003ea0:	0800bb19 	.word	0x0800bb19
 8003ea4:	0800b888 	.word	0x0800b888
 8003ea8:	0800bb36 	.word	0x0800bb36

08003eac <http_err>:
{
 8003eac:	b510      	push	{r4, lr}
  if (hs != NULL) {
 8003eae:	4604      	mov	r4, r0
 8003eb0:	b130      	cbz	r0, 8003ec0 <http_err+0x14>
    http_state_eof(hs);
 8003eb2:	f7ff fc55 	bl	8003760 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8003eb6:	4620      	mov	r0, r4
}
 8003eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8003ebc:	f001 ba80 	b.w	80053c0 <mem_free>
 8003ec0:	bd10      	pop	{r4, pc}
	...

08003ec4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8003ec4:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 8003ec6:	202e      	movs	r0, #46	; 0x2e
 8003ec8:	f002 ffb4 	bl	8006e34 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8003ecc:	4604      	mov	r4, r0
 8003ece:	b930      	cbnz	r0, 8003ede <httpd_init+0x1a>
 8003ed0:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <httpd_init+0x64>)
 8003ed2:	4916      	ldr	r1, [pc, #88]	; (8003f2c <httpd_init+0x68>)
 8003ed4:	4816      	ldr	r0, [pc, #88]	; (8003f30 <httpd_init+0x6c>)
 8003ed6:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8003eda:	f006 fbcb 	bl	800a674 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8003ede:	2101      	movs	r1, #1
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f002 fa47 	bl	8006374 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 8003ee6:	2250      	movs	r2, #80	; 0x50
 8003ee8:	4912      	ldr	r1, [pc, #72]	; (8003f34 <httpd_init+0x70>)
 8003eea:	4620      	mov	r0, r4
 8003eec:	f002 f91c 	bl	8006128 <tcp_bind>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8003ef0:	b130      	cbz	r0, 8003f00 <httpd_init+0x3c>
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <httpd_init+0x64>)
 8003ef4:	4910      	ldr	r1, [pc, #64]	; (8003f38 <httpd_init+0x74>)
 8003ef6:	480e      	ldr	r0, [pc, #56]	; (8003f30 <httpd_init+0x6c>)
 8003ef8:	f640 2215 	movw	r2, #2581	; 0xa15
 8003efc:	f006 fbba 	bl	800a674 <iprintf>
  pcb = tcp_listen(pcb);
 8003f00:	4620      	mov	r0, r4
 8003f02:	21ff      	movs	r1, #255	; 0xff
 8003f04:	f002 f9b2 	bl	800626c <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8003f08:	4604      	mov	r4, r0
 8003f0a:	b930      	cbnz	r0, 8003f1a <httpd_init+0x56>
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <httpd_init+0x64>)
 8003f0e:	490b      	ldr	r1, [pc, #44]	; (8003f3c <httpd_init+0x78>)
 8003f10:	4807      	ldr	r0, [pc, #28]	; (8003f30 <httpd_init+0x6c>)
 8003f12:	f640 2217 	movw	r2, #2583	; 0xa17
 8003f16:	f006 fbad 	bl	800a674 <iprintf>
  tcp_accept(pcb, http_accept);
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	4908      	ldr	r1, [pc, #32]	; (8003f40 <httpd_init+0x7c>)
}
 8003f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 8003f22:	f002 ba89 	b.w	8006438 <tcp_accept>
 8003f26:	bf00      	nop
 8003f28:	0800bb47 	.word	0x0800bb47
 8003f2c:	0800bbb5 	.word	0x0800bbb5
 8003f30:	0800bb8d 	.word	0x0800bb8d
 8003f34:	0800c178 	.word	0x0800c178
 8003f38:	0800bbd0 	.word	0x0800bbd0
 8003f3c:	0800bbec 	.word	0x0800bbec
 8003f40:	080037bd 	.word	0x080037bd

08003f44 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8003f44:	ba40      	rev16	r0, r0
}
 8003f46:	b280      	uxth	r0, r0
 8003f48:	4770      	bx	lr

08003f4a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8003f4a:	ba00      	rev	r0, r0
 8003f4c:	4770      	bx	lr

08003f4e <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 8003f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f50:	4604      	mov	r4, r0
  const char* p;
  size_t tokenlen = strlen(token);
 8003f52:	4608      	mov	r0, r1
{
 8003f54:	460f      	mov	r7, r1
 8003f56:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 8003f58:	f7fc f944 	bl	80001e4 <strlen>
  if (tokenlen == 0) {
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	b190      	cbz	r0, 8003f86 <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8003f60:	4425      	add	r5, r4
 8003f62:	7820      	ldrb	r0, [r4, #0]
 8003f64:	b180      	cbz	r0, 8003f88 <lwip_strnstr+0x3a>
 8003f66:	19a3      	adds	r3, r4, r6
 8003f68:	429d      	cmp	r5, r3
 8003f6a:	d201      	bcs.n	8003f70 <lwip_strnstr+0x22>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8003f70:	783b      	ldrb	r3, [r7, #0]
 8003f72:	4283      	cmp	r3, r0
 8003f74:	d105      	bne.n	8003f82 <lwip_strnstr+0x34>
 8003f76:	4632      	mov	r2, r6
 8003f78:	4639      	mov	r1, r7
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f006 fbd4 	bl	800a728 <strncmp>
 8003f80:	b108      	cbz	r0, 8003f86 <lwip_strnstr+0x38>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8003f82:	3401      	adds	r4, #1
 8003f84:	e7ed      	b.n	8003f62 <lwip_strnstr+0x14>
 8003f86:	4620      	mov	r0, r4
}
 8003f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f8a <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 8003f8a:	b530      	push	{r4, r5, lr}
  char c1, c2;

  do {
    c1 = *str1++;
 8003f8c:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8003f90:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d009      	beq.n	8003fac <lwip_stricmp+0x22>
      char c1_upc = c1 | 0x20;
 8003f98:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8003f9c:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8003fa0:	2d19      	cmp	r5, #25
 8003fa2:	d807      	bhi.n	8003fb4 <lwip_stricmp+0x2a>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8003fa4:	f042 0220 	orr.w	r2, r2, #32
 8003fa8:	4294      	cmp	r4, r2
 8003faa:	d103      	bne.n	8003fb4 <lwip_stricmp+0x2a>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ed      	bne.n	8003f8c <lwip_stricmp+0x2>
  return 0;
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd30      	pop	{r4, r5, pc}
        return 1;
 8003fb4:	2001      	movs	r0, #1
}
 8003fb6:	bd30      	pop	{r4, r5, pc}

08003fb8 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
 8003fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
    number /= base;
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 8003fba:	4e13      	ldr	r6, [pc, #76]	; (8004008 <lwip_itoa+0x50>)
  char* ptr = result, *ptr1 = result, tmp_char;
 8003fbc:	4601      	mov	r1, r0
    number /= base;
 8003fbe:	f04f 0e0a 	mov.w	lr, #10
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 8003fc2:	f06f 0709 	mvn.w	r7, #9
    number /= base;
 8003fc6:	fb92 f4fe 	sdiv	r4, r2, lr
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 8003fca:	fb07 6504 	mla	r5, r7, r4, r6
 8003fce:	4415      	add	r5, r2
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 8003fd6:	f803 5b01 	strb.w	r5, [r3], #1
  } while(number);
 8003fda:	b954      	cbnz	r4, 8003ff2 <lwip_itoa+0x3a>

   /* Apply negative sign */
  if (tmp_value < 0) {
 8003fdc:	2a00      	cmp	r2, #0
     *ptr++ = '-';
 8003fde:	bfbe      	ittt	lt
 8003fe0:	222d      	movlt	r2, #45	; 0x2d
 8003fe2:	701a      	strblt	r2, [r3, #0]
 8003fe4:	1c8b      	addlt	r3, r1, #2
  }
  *ptr-- = '\0';
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	7019      	strb	r1, [r3, #0]
  while(ptr1 < ptr) {
 8003fec:	4282      	cmp	r2, r0
 8003fee:	d803      	bhi.n	8003ff8 <lwip_itoa+0x40>
    tmp_char = *ptr;
    *ptr--= *ptr1;
    *ptr1++ = tmp_char;
  }
}
 8003ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	e7e6      	b.n	8003fc6 <lwip_itoa+0xe>
    tmp_char = *ptr;
 8003ff8:	7813      	ldrb	r3, [r2, #0]
    *ptr--= *ptr1;
 8003ffa:	7801      	ldrb	r1, [r0, #0]
 8003ffc:	f802 1901 	strb.w	r1, [r2], #-1
    *ptr1++ = tmp_char;
 8004000:	f800 3b01 	strb.w	r3, [r0], #1
 8004004:	e7f2      	b.n	8003fec <lwip_itoa+0x34>
 8004006:	bf00      	nop
 8004008:	0800be4e 	.word	0x0800be4e

0800400c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800400c:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800400e:	f001 f9b7 	bl	8005380 <mem_init>
  memp_init();
 8004012:	f001 fbc9 	bl	80057a8 <memp_init>
  pbuf_init();
  netif_init();
 8004016:	f001 fc14 	bl	8005842 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800401a:	f005 f9ed 	bl	80093f8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800401e:	f002 f881 	bl	8006124 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8004022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8004026:	f005 b98d 	b.w	8009344 <sys_timeouts_init>
	...

0800402c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800402c:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800402e:	2618      	movs	r6, #24
 8004030:	4c07      	ldr	r4, [pc, #28]	; (8004050 <etharp_free_entry+0x24>)
 8004032:	4346      	muls	r6, r0
{
 8004034:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8004036:	59a0      	ldr	r0, [r4, r6]
 8004038:	b118      	cbz	r0, 8004042 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800403a:	f001 fd43 	bl	8005ac4 <pbuf_free>
    arp_table[i].q = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8004042:	2318      	movs	r3, #24
 8004044:	fb03 4405 	mla	r4, r3, r5, r4
 8004048:	2300      	movs	r3, #0
 800404a:	7523      	strb	r3, [r4, #20]
 800404c:	bd70      	pop	{r4, r5, r6, pc}
 800404e:	bf00      	nop
 8004050:	200021dc 	.word	0x200021dc

08004054 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8004054:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004058:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800405a:	4689      	mov	r9, r1
 800405c:	4692      	mov	sl, r2
 800405e:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004060:	4607      	mov	r7, r0
 8004062:	b930      	cbnz	r0, 8004072 <etharp_raw+0x1e>
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <etharp_raw+0xc4>)
 8004066:	492d      	ldr	r1, [pc, #180]	; (800411c <etharp_raw+0xc8>)
 8004068:	482d      	ldr	r0, [pc, #180]	; (8004120 <etharp_raw+0xcc>)
 800406a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800406e:	f006 fb01 	bl	800a674 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8004072:	2200      	movs	r2, #0
 8004074:	211c      	movs	r1, #28
 8004076:	2002      	movs	r0, #2
 8004078:	f001 fd86 	bl	8005b88 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800407c:	4606      	mov	r6, r0
 800407e:	2800      	cmp	r0, #0
 8004080:	d047      	beq.n	8004112 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8004082:	8943      	ldrh	r3, [r0, #10]
 8004084:	2b1b      	cmp	r3, #27
 8004086:	d806      	bhi.n	8004096 <etharp_raw+0x42>
 8004088:	4b23      	ldr	r3, [pc, #140]	; (8004118 <etharp_raw+0xc4>)
 800408a:	4926      	ldr	r1, [pc, #152]	; (8004124 <etharp_raw+0xd0>)
 800408c:	4824      	ldr	r0, [pc, #144]	; (8004120 <etharp_raw+0xcc>)
 800408e:	f240 4264 	movw	r2, #1124	; 0x464
 8004092:	f006 faef 	bl	800a674 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8004096:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 800409a:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 800409c:	f7ff ff52 	bl	8003f44 <lwip_htons>
 80040a0:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80040a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040a6:	2b06      	cmp	r3, #6
 80040a8:	d006      	beq.n	80040b8 <etharp_raw+0x64>
 80040aa:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <etharp_raw+0xc4>)
 80040ac:	491e      	ldr	r1, [pc, #120]	; (8004128 <etharp_raw+0xd4>)
 80040ae:	481c      	ldr	r0, [pc, #112]	; (8004120 <etharp_raw+0xcc>)
 80040b0:	f240 426b 	movw	r2, #1131	; 0x46b
 80040b4:	f006 fade 	bl	800a674 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80040b8:	f8d8 3000 	ldr.w	r3, [r8]
 80040bc:	60a3      	str	r3, [r4, #8]
 80040be:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80040c2:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	f8c4 3012 	str.w	r3, [r4, #18]
 80040ca:	88ab      	ldrh	r3, [r5, #4]
 80040cc:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80040ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80040d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80040dc:	2301      	movs	r3, #1
 80040de:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80040e0:	2308      	movs	r3, #8
 80040e2:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80040e4:	2306      	movs	r3, #6
 80040e6:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80040e8:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80040ea:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 80040ec:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80040ee:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80040f2:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80040f4:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80040f6:	464a      	mov	r2, r9
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	4631      	mov	r1, r6
 80040fc:	4653      	mov	r3, sl
 80040fe:	4638      	mov	r0, r7
 8004100:	f005 fa76 	bl	80095f0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8004104:	4630      	mov	r0, r6
 8004106:	f001 fcdd 	bl	8005ac4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800410a:	4628      	mov	r0, r5
}
 800410c:	b002      	add	sp, #8
 800410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8004112:	f04f 30ff 	mov.w	r0, #4294967295
 8004116:	e7f9      	b.n	800410c <etharp_raw+0xb8>
 8004118:	0800bf8b 	.word	0x0800bf8b
 800411c:	0800bfc2 	.word	0x0800bfc2
 8004120:	0800bb8d 	.word	0x0800bb8d
 8004124:	0800bfd0 	.word	0x0800bfd0
 8004128:	0800c001 	.word	0x0800c001

0800412c <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800412c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004130:	4b3e      	ldr	r3, [pc, #248]	; (800422c <etharp_find_entry.isra.0+0x100>)
 8004132:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 8004134:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8004136:	4605      	mov	r5, r0
 8004138:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800413a:	4694      	mov	ip, r2
 800413c:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800413e:	4681      	mov	r9, r0
 8004140:	4680      	mov	r8, r0
 8004142:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 8004144:	4696      	mov	lr, r2
 8004146:	461e      	mov	r6, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004148:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 800414c:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800414e:	d112      	bne.n	8004176 <etharp_find_entry.isra.0+0x4a>
 8004150:	b99f      	cbnz	r7, 800417a <etharp_find_entry.isra.0+0x4e>
      empty = i;
 8004152:	fa4f fe80 	sxtb.w	lr, r0
 8004156:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004158:	280a      	cmp	r0, #10
 800415a:	f103 0318 	add.w	r3, r3, #24
 800415e:	d1f3      	bne.n	8004148 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8004160:	9b01      	ldr	r3, [sp, #4]
 8004162:	0799      	lsls	r1, r3, #30
 8004164:	d404      	bmi.n	8004170 <etharp_find_entry.isra.0+0x44>
 8004166:	f1be 0f0a 	cmp.w	lr, #10
 800416a:	d11c      	bne.n	80041a6 <etharp_find_entry.isra.0+0x7a>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800416c:	07db      	lsls	r3, r3, #31
 800416e:	d435      	bmi.n	80041dc <etharp_find_entry.isra.0+0xb0>
    return (s8_t)ERR_MEM;
 8004170:	f04f 30ff 	mov.w	r0, #4294967295
 8004174:	e009      	b.n	800418a <etharp_find_entry.isra.0+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 8004176:	2f00      	cmp	r7, #0
 8004178:	d0ed      	beq.n	8004156 <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800417a:	2d00      	cmp	r5, #0
 800417c:	d04a      	beq.n	8004214 <etharp_find_entry.isra.0+0xe8>
 800417e:	6829      	ldr	r1, [r5, #0]
 8004180:	468a      	mov	sl, r1
 8004182:	6859      	ldr	r1, [r3, #4]
 8004184:	458a      	cmp	sl, r1
 8004186:	d145      	bne.n	8004214 <etharp_find_entry.isra.0+0xe8>
        return i;
 8004188:	b240      	sxtb	r0, r0
}
 800418a:	b003      	add	sp, #12
 800418c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8004190:	45c2      	cmp	sl, r8
 8004192:	d3e0      	bcc.n	8004156 <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 8004194:	fa4f fc80 	sxtb.w	ip, r0
 8004198:	46d0      	mov	r8, sl
 800419a:	e7dc      	b.n	8004156 <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 800419c:	45ca      	cmp	sl, r9
            old_stable = i;
 800419e:	bf24      	itt	cs
 80041a0:	b244      	sxtbcs	r4, r0
 80041a2:	46d1      	movcs	r9, sl
 80041a4:	e7d7      	b.n	8004156 <etharp_find_entry.isra.0+0x2a>
    i = empty;
 80041a6:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80041aa:	2318      	movs	r3, #24
 80041ac:	fb03 6307 	mla	r3, r3, r7, r6
 80041b0:	7d1b      	ldrb	r3, [r3, #20]
 80041b2:	b133      	cbz	r3, 80041c2 <etharp_find_entry.isra.0+0x96>
 80041b4:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <etharp_find_entry.isra.0+0x104>)
 80041b6:	491f      	ldr	r1, [pc, #124]	; (8004234 <etharp_find_entry.isra.0+0x108>)
 80041b8:	481f      	ldr	r0, [pc, #124]	; (8004238 <etharp_find_entry.isra.0+0x10c>)
 80041ba:	f240 1287 	movw	r2, #391	; 0x187
 80041be:	f006 fa59 	bl	800a674 <iprintf>
  if (ipaddr != NULL) {
 80041c2:	b125      	cbz	r5, 80041ce <etharp_find_entry.isra.0+0xa2>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80041c4:	2318      	movs	r3, #24
 80041c6:	fb03 6307 	mla	r3, r3, r7, r6
 80041ca:	682a      	ldr	r2, [r5, #0]
 80041cc:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 80041ce:	2318      	movs	r3, #24
 80041d0:	fb03 6607 	mla	r6, r3, r7, r6
 80041d4:	2300      	movs	r3, #0
 80041d6:	8273      	strh	r3, [r6, #18]
  return (err_t)i;
 80041d8:	b278      	sxtb	r0, r7
 80041da:	e7d6      	b.n	800418a <etharp_find_entry.isra.0+0x5e>
    if (old_stable < ARP_TABLE_SIZE) {
 80041dc:	2c0a      	cmp	r4, #10
 80041de:	d00f      	beq.n	8004200 <etharp_find_entry.isra.0+0xd4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80041e0:	2318      	movs	r3, #24
      i = old_stable;
 80041e2:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80041e4:	435c      	muls	r4, r3
 80041e6:	5933      	ldr	r3, [r6, r4]
 80041e8:	b133      	cbz	r3, 80041f8 <etharp_find_entry.isra.0+0xcc>
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <etharp_find_entry.isra.0+0x104>)
 80041ec:	4913      	ldr	r1, [pc, #76]	; (800423c <etharp_find_entry.isra.0+0x110>)
 80041ee:	4812      	ldr	r0, [pc, #72]	; (8004238 <etharp_find_entry.isra.0+0x10c>)
 80041f0:	f240 126f 	movw	r2, #367	; 0x16f
 80041f4:	f006 fa3e 	bl	800a674 <iprintf>
    etharp_free_entry(i);
 80041f8:	4638      	mov	r0, r7
 80041fa:	f7ff ff17 	bl	800402c <etharp_free_entry>
 80041fe:	e7d4      	b.n	80041aa <etharp_find_entry.isra.0+0x7e>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8004200:	f1bc 0f0a 	cmp.w	ip, #10
 8004204:	d002      	beq.n	800420c <etharp_find_entry.isra.0+0xe0>
      i = old_pending;
 8004206:	fa5f f78c 	uxtb.w	r7, ip
 800420a:	e7f5      	b.n	80041f8 <etharp_find_entry.isra.0+0xcc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800420c:	2a0a      	cmp	r2, #10
 800420e:	d0af      	beq.n	8004170 <etharp_find_entry.isra.0+0x44>
      i = old_queue;
 8004210:	b2d7      	uxtb	r7, r2
 8004212:	e7f1      	b.n	80041f8 <etharp_find_entry.isra.0+0xcc>
      if (state == ETHARP_STATE_PENDING) {
 8004214:	2f01      	cmp	r7, #1
 8004216:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 800421a:	d1bf      	bne.n	800419c <etharp_find_entry.isra.0+0x70>
        if (arp_table[i].q != NULL) {
 800421c:	681f      	ldr	r7, [r3, #0]
 800421e:	2f00      	cmp	r7, #0
 8004220:	d0b6      	beq.n	8004190 <etharp_find_entry.isra.0+0x64>
          if (arp_table[i].ctime >= age_queue) {
 8004222:	45da      	cmp	sl, fp
 8004224:	d397      	bcc.n	8004156 <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 8004226:	b242      	sxtb	r2, r0
 8004228:	46d3      	mov	fp, sl
 800422a:	e794      	b.n	8004156 <etharp_find_entry.isra.0+0x2a>
 800422c:	200021dc 	.word	0x200021dc
 8004230:	0800bf8b 	.word	0x0800bf8b
 8004234:	0800bead 	.word	0x0800bead
 8004238:	0800bb8d 	.word	0x0800bb8d
 800423c:	0800be96 	.word	0x0800be96

08004240 <etharp_cleanup_netif>:
{
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	4d08      	ldr	r5, [pc, #32]	; (8004264 <etharp_cleanup_netif+0x24>)
 8004244:	4606      	mov	r6, r0
 8004246:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8004248:	7d2b      	ldrb	r3, [r5, #20]
 800424a:	b12b      	cbz	r3, 8004258 <etharp_cleanup_netif+0x18>
 800424c:	68ab      	ldr	r3, [r5, #8]
 800424e:	42b3      	cmp	r3, r6
 8004250:	d102      	bne.n	8004258 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8004252:	4620      	mov	r0, r4
 8004254:	f7ff feea 	bl	800402c <etharp_free_entry>
 8004258:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800425a:	2c0a      	cmp	r4, #10
 800425c:	f105 0518 	add.w	r5, r5, #24
 8004260:	d1f2      	bne.n	8004248 <etharp_cleanup_netif+0x8>
}
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	200021dc 	.word	0x200021dc

08004268 <etharp_input>:
{
 8004268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800426c:	4680      	mov	r8, r0
 800426e:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004270:	460c      	mov	r4, r1
 8004272:	b949      	cbnz	r1, 8004288 <etharp_input+0x20>
 8004274:	4b46      	ldr	r3, [pc, #280]	; (8004390 <etharp_input+0x128>)
 8004276:	4947      	ldr	r1, [pc, #284]	; (8004394 <etharp_input+0x12c>)
 8004278:	4847      	ldr	r0, [pc, #284]	; (8004398 <etharp_input+0x130>)
 800427a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800427e:	f006 f9f9 	bl	800a674 <iprintf>
}
 8004282:	b006      	add	sp, #24
 8004284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8004288:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800428a:	882b      	ldrh	r3, [r5, #0]
 800428c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004290:	d108      	bne.n	80042a4 <etharp_input+0x3c>
 8004292:	792b      	ldrb	r3, [r5, #4]
 8004294:	2b06      	cmp	r3, #6
 8004296:	d105      	bne.n	80042a4 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8004298:	796b      	ldrb	r3, [r5, #5]
 800429a:	2b04      	cmp	r3, #4
 800429c:	d102      	bne.n	80042a4 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800429e:	886b      	ldrh	r3, [r5, #2]
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d003      	beq.n	80042ac <etharp_input+0x44>
  pbuf_free(p);
 80042a4:	4640      	mov	r0, r8
 80042a6:	f001 fc0d 	bl	8005ac4 <pbuf_free>
 80042aa:	e7ea      	b.n	8004282 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80042ac:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80042ae:	f8d5 300e 	ldr.w	r3, [r5, #14]
 80042b2:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80042b4:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80042b6:	b116      	cbz	r6, 80042be <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80042b8:	1b9b      	subs	r3, r3, r6
 80042ba:	425e      	negs	r6, r3
 80042bc:	415e      	adcs	r6, r3
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80042be:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80042c2:	2e00      	cmp	r6, #0
 80042c4:	bf14      	ite	ne
 80042c6:	f04f 0901 	movne.w	r9, #1
 80042ca:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80042ce:	2b06      	cmp	r3, #6
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80042d0:	f105 0708 	add.w	r7, r5, #8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80042d4:	d006      	beq.n	80042e4 <etharp_input+0x7c>
 80042d6:	4b2e      	ldr	r3, [pc, #184]	; (8004390 <etharp_input+0x128>)
 80042d8:	4930      	ldr	r1, [pc, #192]	; (800439c <etharp_input+0x134>)
 80042da:	482f      	ldr	r0, [pc, #188]	; (8004398 <etharp_input+0x130>)
 80042dc:	f240 12ab 	movw	r2, #427	; 0x1ab
 80042e0:	f006 f9c8 	bl	800a674 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 80042e4:	9805      	ldr	r0, [sp, #20]
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d03c      	beq.n	8004364 <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80042ea:	4621      	mov	r1, r4
 80042ec:	f000 fc95 	bl	8004c1a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80042f0:	4682      	mov	sl, r0
 80042f2:	bbb8      	cbnz	r0, 8004364 <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 80042f4:	9b05      	ldr	r3, [sp, #20]
 80042f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80042fa:	2be0      	cmp	r3, #224	; 0xe0
 80042fc:	d032      	beq.n	8004364 <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 80042fe:	4649      	mov	r1, r9
 8004300:	a805      	add	r0, sp, #20
 8004302:	f7ff ff13 	bl	800412c <etharp_find_entry.isra.0>
  if (i < 0) {
 8004306:	2800      	cmp	r0, #0
 8004308:	db2c      	blt.n	8004364 <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800430a:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <etharp_input+0x138>)
 800430c:	2218      	movs	r2, #24
 800430e:	fb02 f100 	mul.w	r1, r2, r0
 8004312:	eb03 0e01 	add.w	lr, r3, r1
 8004316:	f04f 0c02 	mov.w	ip, #2
 800431a:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800431e:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 8004322:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8004326:	fb12 c200 	smlabb	r2, r2, r0, ip
 800432a:	6838      	ldr	r0, [r7, #0]
 800432c:	5098      	str	r0, [r3, r2]
 800432e:	eb03 0c02 	add.w	ip, r3, r2
 8004332:	88ba      	ldrh	r2, [r7, #4]
 8004334:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8004338:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 800433c:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8004340:	f1b9 0f00 	cmp.w	r9, #0
 8004344:	d00e      	beq.n	8004364 <etharp_input+0xfc>
    arp_table[i].q = NULL;
 8004346:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800434a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8004354:	463b      	mov	r3, r7
 8004356:	4649      	mov	r1, r9
 8004358:	4620      	mov	r0, r4
 800435a:	f005 f949 	bl	80095f0 <ethernet_output>
    pbuf_free(p);
 800435e:	4648      	mov	r0, r9
 8004360:	f001 fbb0 	bl	8005ac4 <pbuf_free>
  switch (hdr->opcode) {
 8004364:	88eb      	ldrh	r3, [r5, #6]
 8004366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436a:	d19b      	bne.n	80042a4 <etharp_input+0x3c>
    if (for_us) {
 800436c:	2e00      	cmp	r6, #0
 800436e:	d099      	beq.n	80042a4 <etharp_input+0x3c>
      etharp_raw(netif,
 8004370:	2202      	movs	r2, #2
 8004372:	9203      	str	r2, [sp, #12]
 8004374:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8004376:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 800437a:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800437c:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 800437e:	9200      	str	r2, [sp, #0]
 8004380:	9701      	str	r7, [sp, #4]
 8004382:	463a      	mov	r2, r7
 8004384:	4619      	mov	r1, r3
 8004386:	4620      	mov	r0, r4
 8004388:	f7ff fe64 	bl	8004054 <etharp_raw>
 800438c:	e78a      	b.n	80042a4 <etharp_input+0x3c>
 800438e:	bf00      	nop
 8004390:	0800bf8b 	.word	0x0800bf8b
 8004394:	0800bfc2 	.word	0x0800bfc2
 8004398:	0800bb8d 	.word	0x0800bb8d
 800439c:	0800bef5 	.word	0x0800bef5
 80043a0:	200021dc 	.word	0x200021dc

080043a4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80043a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043a6:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80043a8:	f100 0325 	add.w	r3, r0, #37	; 0x25
 80043ac:	9102      	str	r1, [sp, #8]
 80043ae:	2401      	movs	r4, #1
 80043b0:	4905      	ldr	r1, [pc, #20]	; (80043c8 <etharp_request+0x24>)
 80043b2:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80043b4:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80043b6:	9200      	str	r2, [sp, #0]
 80043b8:	9403      	str	r4, [sp, #12]
 80043ba:	4a04      	ldr	r2, [pc, #16]	; (80043cc <etharp_request+0x28>)
 80043bc:	4619      	mov	r1, r3
 80043be:	f7ff fe49 	bl	8004054 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 80043c2:	b004      	add	sp, #16
 80043c4:	bd10      	pop	{r4, pc}
 80043c6:	bf00      	nop
 80043c8:	0800d5a0 	.word	0x0800d5a0
 80043cc:	0800d534 	.word	0x0800d534

080043d0 <etharp_tmr>:
{
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	4c13      	ldr	r4, [pc, #76]	; (8004420 <etharp_tmr+0x50>)
 80043d4:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 80043d6:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80043d8:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 80043da:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 80043dc:	b16a      	cbz	r2, 80043fa <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 80043de:	89e3      	ldrh	r3, [r4, #14]
 80043e0:	3301      	adds	r3, #1
 80043e2:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80043e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80043e8:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80043ea:	d203      	bcs.n	80043f4 <etharp_tmr+0x24>
 80043ec:	2a01      	cmp	r2, #1
 80043ee:	d10a      	bne.n	8004406 <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d90c      	bls.n	800440e <etharp_tmr+0x3e>
        etharp_free_entry(i);
 80043f4:	4628      	mov	r0, r5
 80043f6:	f7ff fe19 	bl	800402c <etharp_free_entry>
 80043fa:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80043fc:	2d0a      	cmp	r5, #10
 80043fe:	f104 0418 	add.w	r4, r4, #24
 8004402:	d1ea      	bne.n	80043da <etharp_tmr+0xa>
 8004404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8004406:	2a03      	cmp	r2, #3
 8004408:	d106      	bne.n	8004418 <etharp_tmr+0x48>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800440a:	7427      	strb	r7, [r4, #16]
 800440c:	e7f5      	b.n	80043fa <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800440e:	4621      	mov	r1, r4
 8004410:	6860      	ldr	r0, [r4, #4]
 8004412:	f7ff ffc7 	bl	80043a4 <etharp_request>
 8004416:	e7f0      	b.n	80043fa <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8004418:	2a04      	cmp	r2, #4
 800441a:	d1ee      	bne.n	80043fa <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800441c:	7426      	strb	r6, [r4, #16]
 800441e:	e7ec      	b.n	80043fa <etharp_tmr+0x2a>
 8004420:	200021e0 	.word	0x200021e0

08004424 <etharp_output_to_arp_index>:
{
 8004424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004428:	4d27      	ldr	r5, [pc, #156]	; (80044c8 <etharp_output_to_arp_index+0xa4>)
{
 800442a:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800442c:	2218      	movs	r2, #24
 800442e:	fb02 5204 	mla	r2, r2, r4, r5
{
 8004432:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004434:	7d12      	ldrb	r2, [r2, #20]
 8004436:	2a01      	cmp	r2, #1
{
 8004438:	4606      	mov	r6, r0
 800443a:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800443c:	d806      	bhi.n	800444c <etharp_output_to_arp_index+0x28>
 800443e:	4b23      	ldr	r3, [pc, #140]	; (80044cc <etharp_output_to_arp_index+0xa8>)
 8004440:	4923      	ldr	r1, [pc, #140]	; (80044d0 <etharp_output_to_arp_index+0xac>)
 8004442:	4824      	ldr	r0, [pc, #144]	; (80044d4 <etharp_output_to_arp_index+0xb0>)
 8004444:	f240 22ed 	movw	r2, #749	; 0x2ed
 8004448:	f006 f914 	bl	800a674 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800444c:	2118      	movs	r1, #24
 800444e:	fb01 5904 	mla	r9, r1, r4, r5
 8004452:	f106 0725 	add.w	r7, r6, #37	; 0x25
 8004456:	f899 3014 	ldrb.w	r3, [r9, #20]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d10d      	bne.n	800447a <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800445e:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8004462:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8004466:	d917      	bls.n	8004498 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8004468:	4649      	mov	r1, r9
 800446a:	3104      	adds	r1, #4
 800446c:	4630      	mov	r0, r6
 800446e:	f7ff ff99 	bl	80043a4 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8004472:	b910      	cbnz	r0, 800447a <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8004474:	2303      	movs	r3, #3
 8004476:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800447a:	2318      	movs	r3, #24
 800447c:	fb03 5304 	mla	r3, r3, r4, r5
 8004480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004484:	9200      	str	r2, [sp, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	463a      	mov	r2, r7
 800448a:	4641      	mov	r1, r8
 800448c:	4630      	mov	r0, r6
 800448e:	f005 f8af 	bl	80095f0 <ethernet_output>
}
 8004492:	b005      	add	sp, #20
 8004494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8004498:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800449c:	d3ed      	bcc.n	800447a <etharp_output_to_arp_index+0x56>
 800449e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80044a2:	00db      	lsls	r3, r3, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80044a4:	f103 020c 	add.w	r2, r3, #12
 80044a8:	3304      	adds	r3, #4
 80044aa:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80044ac:	9302      	str	r3, [sp, #8]
 80044ae:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <etharp_output_to_arp_index+0xb4>)
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	2101      	movs	r1, #1
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80044b4:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80044b6:	9103      	str	r1, [sp, #12]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	442a      	add	r2, r5
 80044bc:	463b      	mov	r3, r7
 80044be:	4639      	mov	r1, r7
 80044c0:	4630      	mov	r0, r6
 80044c2:	f7ff fdc7 	bl	8004054 <etharp_raw>
 80044c6:	e7d4      	b.n	8004472 <etharp_output_to_arp_index+0x4e>
 80044c8:	200021dc 	.word	0x200021dc
 80044cc:	0800bf8b 	.word	0x0800bf8b
 80044d0:	0800bf19 	.word	0x0800bf19
 80044d4:	0800bb8d 	.word	0x0800bb8d
 80044d8:	0800d5a0 	.word	0x0800d5a0

080044dc <etharp_query>:
{
 80044dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80044e0:	4689      	mov	r9, r1
 80044e2:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80044e4:	4601      	mov	r1, r0
 80044e6:	f8d9 0000 	ldr.w	r0, [r9]
{
 80044ea:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80044ec:	f000 fb95 	bl	8004c1a <ip4_addr_isbroadcast_u32>
 80044f0:	4604      	mov	r4, r0
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d15e      	bne.n	80045b4 <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 80044f6:	f8d9 3000 	ldr.w	r3, [r9]
 80044fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80044fe:	2ae0      	cmp	r2, #224	; 0xe0
 8004500:	d058      	beq.n	80045b4 <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 8004502:	2b00      	cmp	r3, #0
 8004504:	d056      	beq.n	80045b4 <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8004506:	2101      	movs	r1, #1
 8004508:	4648      	mov	r0, r9
 800450a:	f7ff fe0f 	bl	800412c <etharp_find_entry.isra.0>
  if (i < 0) {
 800450e:	1e05      	subs	r5, r0, #0
 8004510:	db53      	blt.n	80045ba <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8004512:	4f40      	ldr	r7, [pc, #256]	; (8004614 <etharp_query+0x138>)
 8004514:	2318      	movs	r3, #24
 8004516:	fb03 7305 	mla	r3, r3, r5, r7
 800451a:	7d1a      	ldrb	r2, [r3, #20]
 800451c:	b91a      	cbnz	r2, 8004526 <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800451e:	2401      	movs	r4, #1
 8004520:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 8004522:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8004526:	2318      	movs	r3, #24
 8004528:	fb03 7305 	mla	r3, r3, r5, r7
 800452c:	7d1b      	ldrb	r3, [r3, #20]
 800452e:	b933      	cbnz	r3, 800453e <etharp_query+0x62>
 8004530:	4b39      	ldr	r3, [pc, #228]	; (8004618 <etharp_query+0x13c>)
 8004532:	493a      	ldr	r1, [pc, #232]	; (800461c <etharp_query+0x140>)
 8004534:	483a      	ldr	r0, [pc, #232]	; (8004620 <etharp_query+0x144>)
 8004536:	f240 32c9 	movw	r2, #969	; 0x3c9
 800453a:	f006 f89b 	bl	800a674 <iprintf>
  if (is_new_entry || (q == NULL)) {
 800453e:	b90c      	cbnz	r4, 8004544 <etharp_query+0x68>
 8004540:	2e00      	cmp	r6, #0
 8004542:	d13c      	bne.n	80045be <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 8004544:	4649      	mov	r1, r9
 8004546:	4640      	mov	r0, r8
 8004548:	f7ff ff2c 	bl	80043a4 <etharp_request>
    if (q == NULL) {
 800454c:	2e00      	cmp	r6, #0
 800454e:	d138      	bne.n	80045c2 <etharp_query+0xe6>
}
 8004550:	b002      	add	sp, #8
 8004552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8004556:	d1fb      	bne.n	8004550 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8004558:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004618 <etharp_query+0x13c>
 800455c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8004628 <etharp_query+0x14c>
 8004560:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004620 <etharp_query+0x144>
 8004564:	4634      	mov	r4, r6
    while (p) {
 8004566:	b99c      	cbnz	r4, 8004590 <etharp_query+0xb4>
      pbuf_ref(p);
 8004568:	4630      	mov	r0, r6
 800456a:	f001 fc65 	bl	8005e38 <pbuf_ref>
    if (p != NULL) {
 800456e:	2e00      	cmp	r6, #0
 8004570:	d04c      	beq.n	800460c <etharp_query+0x130>
 8004572:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8004574:	2318      	movs	r3, #24
 8004576:	fb03 f205 	mul.w	r2, r3, r5
 800457a:	461c      	mov	r4, r3
 800457c:	58b8      	ldr	r0, [r7, r2]
 800457e:	b108      	cbz	r0, 8004584 <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8004580:	f001 faa0 	bl	8005ac4 <pbuf_free>
      arp_table[i].q = p;
 8004584:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8004588:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800458a:	f847 8003 	str.w	r8, [r7, r3]
 800458e:	e7df      	b.n	8004550 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8004590:	8962      	ldrh	r2, [r4, #10]
 8004592:	8923      	ldrh	r3, [r4, #8]
 8004594:	429a      	cmp	r2, r3
 8004596:	d108      	bne.n	80045aa <etharp_query+0xce>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	b133      	cbz	r3, 80045aa <etharp_query+0xce>
 800459c:	4643      	mov	r3, r8
 800459e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80045a2:	4649      	mov	r1, r9
 80045a4:	4650      	mov	r0, sl
 80045a6:	f006 f865 	bl	800a674 <iprintf>
      if (p->type != PBUF_ROM) {
 80045aa:	7b23      	ldrb	r3, [r4, #12]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d11e      	bne.n	80045ee <etharp_query+0x112>
      p = p->next;
 80045b0:	6824      	ldr	r4, [r4, #0]
 80045b2:	e7d8      	b.n	8004566 <etharp_query+0x8a>
    return ERR_ARG;
 80045b4:	f06f 000f 	mvn.w	r0, #15
 80045b8:	e7ca      	b.n	8004550 <etharp_query+0x74>
 80045ba:	4628      	mov	r0, r5
 80045bc:	e7c8      	b.n	8004550 <etharp_query+0x74>
  err_t result = ERR_MEM;
 80045be:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80045c2:	2318      	movs	r3, #24
 80045c4:	fb03 7205 	mla	r2, r3, r5, r7
 80045c8:	7d12      	ldrb	r2, [r2, #20]
 80045ca:	2a01      	cmp	r2, #1
 80045cc:	d9c3      	bls.n	8004556 <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 80045ce:	4a15      	ldr	r2, [pc, #84]	; (8004624 <etharp_query+0x148>)
 80045d0:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80045d2:	220c      	movs	r2, #12
 80045d4:	fb13 2305 	smlabb	r3, r3, r5, r2
 80045d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045dc:	9200      	str	r2, [sp, #0]
 80045de:	443b      	add	r3, r7
 80045e0:	f108 0225 	add.w	r2, r8, #37	; 0x25
 80045e4:	4631      	mov	r1, r6
 80045e6:	4640      	mov	r0, r8
 80045e8:	f005 f802 	bl	80095f0 <ethernet_output>
 80045ec:	e7b0      	b.n	8004550 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80045ee:	2200      	movs	r2, #0
 80045f0:	8921      	ldrh	r1, [r4, #8]
 80045f2:	2002      	movs	r0, #2
 80045f4:	f001 fac8 	bl	8005b88 <pbuf_alloc>
      if (p != NULL) {
 80045f8:	4680      	mov	r8, r0
 80045fa:	b138      	cbz	r0, 800460c <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 80045fc:	4631      	mov	r1, r6
 80045fe:	f001 fc69 	bl	8005ed4 <pbuf_copy>
 8004602:	2800      	cmp	r0, #0
 8004604:	d0b6      	beq.n	8004574 <etharp_query+0x98>
          pbuf_free(p);
 8004606:	4640      	mov	r0, r8
 8004608:	f001 fa5c 	bl	8005ac4 <pbuf_free>
      result = ERR_MEM;
 800460c:	f04f 30ff 	mov.w	r0, #4294967295
 8004610:	e79e      	b.n	8004550 <etharp_query+0x74>
 8004612:	bf00      	nop
 8004614:	200021dc 	.word	0x200021dc
 8004618:	0800bf8b 	.word	0x0800bf8b
 800461c:	0800bf49 	.word	0x0800bf49
 8004620:	0800bb8d 	.word	0x0800bb8d
 8004624:	200022cc 	.word	0x200022cc
 8004628:	0800bf71 	.word	0x0800bf71

0800462c <etharp_output>:
{
 800462c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462e:	460e      	mov	r6, r1
 8004630:	b085      	sub	sp, #20
 8004632:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004634:	4604      	mov	r4, r0
 8004636:	b930      	cbnz	r0, 8004646 <etharp_output+0x1a>
 8004638:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <etharp_output+0x108>)
 800463a:	493f      	ldr	r1, [pc, #252]	; (8004738 <etharp_output+0x10c>)
 800463c:	483f      	ldr	r0, [pc, #252]	; (800473c <etharp_output+0x110>)
 800463e:	f240 321b 	movw	r2, #795	; 0x31b
 8004642:	f006 f817 	bl	800a674 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8004646:	b936      	cbnz	r6, 8004656 <etharp_output+0x2a>
 8004648:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <etharp_output+0x108>)
 800464a:	493d      	ldr	r1, [pc, #244]	; (8004740 <etharp_output+0x114>)
 800464c:	483b      	ldr	r0, [pc, #236]	; (800473c <etharp_output+0x110>)
 800464e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8004652:	f006 f80f 	bl	800a674 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8004656:	b935      	cbnz	r5, 8004666 <etharp_output+0x3a>
 8004658:	4b36      	ldr	r3, [pc, #216]	; (8004734 <etharp_output+0x108>)
 800465a:	493a      	ldr	r1, [pc, #232]	; (8004744 <etharp_output+0x118>)
 800465c:	4837      	ldr	r0, [pc, #220]	; (800473c <etharp_output+0x110>)
 800465e:	f240 321d 	movw	r2, #797	; 0x31d
 8004662:	f006 f807 	bl	800a674 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8004666:	4621      	mov	r1, r4
 8004668:	6828      	ldr	r0, [r5, #0]
 800466a:	f000 fad6 	bl	8004c1a <ip4_addr_isbroadcast_u32>
 800466e:	2800      	cmp	r0, #0
 8004670:	d15b      	bne.n	800472a <etharp_output+0xfe>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8004672:	682b      	ldr	r3, [r5, #0]
 8004674:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004678:	2ae0      	cmp	r2, #224	; 0xe0
 800467a:	d11d      	bne.n	80046b8 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800467c:	2301      	movs	r3, #1
 800467e:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8004682:	235e      	movs	r3, #94	; 0x5e
 8004684:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8004688:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800468a:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800468e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004692:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8004696:	78ab      	ldrb	r3, [r5, #2]
 8004698:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800469c:	78eb      	ldrb	r3, [r5, #3]
 800469e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 80046a2:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80046a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046a8:	9200      	str	r2, [sp, #0]
 80046aa:	4631      	mov	r1, r6
 80046ac:	f104 0225 	add.w	r2, r4, #37	; 0x25
 80046b0:	4620      	mov	r0, r4
 80046b2:	f004 ff9d 	bl	80095f0 <ethernet_output>
 80046b6:	e01f      	b.n	80046f8 <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80046b8:	6862      	ldr	r2, [r4, #4]
 80046ba:	68a1      	ldr	r1, [r4, #8]
 80046bc:	405a      	eors	r2, r3
 80046be:	420a      	tst	r2, r1
 80046c0:	d008      	beq.n	80046d4 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 80046c2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80046c4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80046cc:	68e3      	ldr	r3, [r4, #12]
 80046ce:	b373      	cbz	r3, 800472e <etharp_output+0x102>
            dst_addr = netif_ip4_gw(netif);
 80046d0:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80046d4:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <etharp_output+0x11c>)
 80046d6:	491d      	ldr	r1, [pc, #116]	; (800474c <etharp_output+0x120>)
 80046d8:	781a      	ldrb	r2, [r3, #0]
 80046da:	2018      	movs	r0, #24
 80046dc:	fb00 1002 	mla	r0, r0, r2, r1
 80046e0:	7d01      	ldrb	r1, [r0, #20]
 80046e2:	2901      	cmp	r1, #1
 80046e4:	4619      	mov	r1, r3
 80046e6:	d909      	bls.n	80046fc <etharp_output+0xd0>
 80046e8:	682f      	ldr	r7, [r5, #0]
 80046ea:	6843      	ldr	r3, [r0, #4]
 80046ec:	429f      	cmp	r7, r3
 80046ee:	d105      	bne.n	80046fc <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 80046f0:	4631      	mov	r1, r6
 80046f2:	4620      	mov	r0, r4
 80046f4:	f7ff fe96 	bl	8004424 <etharp_output_to_arp_index>
}
 80046f8:	b005      	add	sp, #20
 80046fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046fc:	4b13      	ldr	r3, [pc, #76]	; (800474c <etharp_output+0x120>)
{
 80046fe:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8004700:	7d18      	ldrb	r0, [r3, #20]
 8004702:	2801      	cmp	r0, #1
 8004704:	d906      	bls.n	8004714 <etharp_output+0xe8>
 8004706:	682f      	ldr	r7, [r5, #0]
 8004708:	6858      	ldr	r0, [r3, #4]
 800470a:	4287      	cmp	r7, r0
 800470c:	d102      	bne.n	8004714 <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	700a      	strb	r2, [r1, #0]
 8004712:	e7ed      	b.n	80046f0 <etharp_output+0xc4>
 8004714:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8004716:	2a0a      	cmp	r2, #10
 8004718:	f103 0318 	add.w	r3, r3, #24
 800471c:	d1f0      	bne.n	8004700 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 800471e:	4632      	mov	r2, r6
 8004720:	4629      	mov	r1, r5
 8004722:	4620      	mov	r0, r4
 8004724:	f7ff feda 	bl	80044dc <etharp_query>
 8004728:	e7e6      	b.n	80046f8 <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 800472a:	4b09      	ldr	r3, [pc, #36]	; (8004750 <etharp_output+0x124>)
 800472c:	e7ba      	b.n	80046a4 <etharp_output+0x78>
            return ERR_RTE;
 800472e:	f06f 0003 	mvn.w	r0, #3
 8004732:	e7e1      	b.n	80046f8 <etharp_output+0xcc>
 8004734:	0800bf8b 	.word	0x0800bf8b
 8004738:	0800bfc2 	.word	0x0800bfc2
 800473c:	0800bb8d 	.word	0x0800bb8d
 8004740:	0800c96f 	.word	0x0800c96f
 8004744:	0800bed6 	.word	0x0800bed6
 8004748:	200022cc 	.word	0x200022cc
 800474c:	200021dc 	.word	0x200021dc
 8004750:	0800d534 	.word	0x0800d534

08004754 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8004754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004756:	4604      	mov	r4, r0
 8004758:	b087      	sub	sp, #28
 800475a:	460f      	mov	r7, r1
 800475c:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800475e:	2124      	movs	r1, #36	; 0x24
 8004760:	2200      	movs	r2, #0
 8004762:	2001      	movs	r0, #1
 8004764:	f001 fa10 	bl	8005b88 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8004768:	4605      	mov	r5, r0
 800476a:	b3a0      	cbz	r0, 80047d6 <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800476c:	8943      	ldrh	r3, [r0, #10]
 800476e:	2b23      	cmp	r3, #35	; 0x23
 8004770:	d806      	bhi.n	8004780 <icmp_send_response.isra.0+0x2c>
 8004772:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <icmp_send_response.isra.0+0x88>)
 8004774:	491a      	ldr	r1, [pc, #104]	; (80047e0 <icmp_send_response.isra.0+0x8c>)
 8004776:	481b      	ldr	r0, [pc, #108]	; (80047e4 <icmp_send_response.isra.0+0x90>)
 8004778:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800477c:	f005 ff7a 	bl	800a674 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8004780:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8004782:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	7123      	strb	r3, [r4, #4]
 8004788:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800478a:	71a3      	strb	r3, [r4, #6]
 800478c:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 800478e:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8004790:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004792:	4613      	mov	r3, r2
 8004794:	f104 0108 	add.w	r1, r4, #8
 8004798:	f102 001c 	add.w	r0, r2, #28
 800479c:	f853 6b04 	ldr.w	r6, [r3], #4
 80047a0:	f841 6b04 	str.w	r6, [r1], #4
 80047a4:	4283      	cmp	r3, r0
 80047a6:	d1f9      	bne.n	800479c <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80047a8:	ae06      	add	r6, sp, #24
 80047aa:	68d3      	ldr	r3, [r2, #12]
 80047ac:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80047b0:	4630      	mov	r0, r6
 80047b2:	f000 f8bb 	bl	800492c <ip4_route>
#endif
  if (netif != NULL) {
 80047b6:	b158      	cbz	r0, 80047d0 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80047b8:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80047ba:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 80047bc:	70a1      	strb	r1, [r4, #2]
 80047be:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80047c0:	4632      	mov	r2, r6
 80047c2:	9002      	str	r0, [sp, #8]
 80047c4:	e88d 000a 	stmia.w	sp, {r1, r3}
 80047c8:	4628      	mov	r0, r5
 80047ca:	23ff      	movs	r3, #255	; 0xff
 80047cc:	f000 fa14 	bl	8004bf8 <ip4_output_if>
  }
  pbuf_free(q);
 80047d0:	4628      	mov	r0, r5
 80047d2:	f001 f977 	bl	8005ac4 <pbuf_free>
}
 80047d6:	b007      	add	sp, #28
 80047d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047da:	bf00      	nop
 80047dc:	0800c0a9 	.word	0x0800c0a9
 80047e0:	0800c0de 	.word	0x0800c0de
 80047e4:	0800bb8d 	.word	0x0800bb8d

080047e8 <icmp_input>:
{
 80047e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 80047ec:	4b44      	ldr	r3, [pc, #272]	; (8004900 <icmp_input+0x118>)
 80047ee:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 80047f2:	f899 5000 	ldrb.w	r5, [r9]
 80047f6:	f005 050f 	and.w	r5, r5, #15
 80047fa:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80047fc:	2d13      	cmp	r5, #19
{
 80047fe:	b085      	sub	sp, #20
 8004800:	4604      	mov	r4, r0
 8004802:	4688      	mov	r8, r1
 8004804:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 8004806:	d92a      	bls.n	800485e <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 8004808:	8942      	ldrh	r2, [r0, #10]
 800480a:	2a03      	cmp	r2, #3
 800480c:	d927      	bls.n	800485e <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 800480e:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8004810:	7812      	ldrb	r2, [r2, #0]
 8004812:	2a08      	cmp	r2, #8
 8004814:	d123      	bne.n	800485e <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004816:	6958      	ldr	r0, [r3, #20]
 8004818:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800481c:	2ae0      	cmp	r2, #224	; 0xe0
 800481e:	d01e      	beq.n	800485e <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8004820:	6819      	ldr	r1, [r3, #0]
 8004822:	f000 f9fa 	bl	8004c1a <ip4_addr_isbroadcast_u32>
 8004826:	4606      	mov	r6, r0
 8004828:	b9c8      	cbnz	r0, 800485e <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800482a:	8923      	ldrh	r3, [r4, #8]
 800482c:	2b07      	cmp	r3, #7
 800482e:	d916      	bls.n	800485e <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8004830:	f105 010e 	add.w	r1, r5, #14
 8004834:	4620      	mov	r0, r4
 8004836:	f001 f93f 	bl	8005ab8 <pbuf_header>
 800483a:	2800      	cmp	r0, #0
 800483c:	d04f      	beq.n	80048de <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800483e:	8921      	ldrh	r1, [r4, #8]
 8004840:	4429      	add	r1, r5
 8004842:	4632      	mov	r2, r6
 8004844:	b289      	uxth	r1, r1
 8004846:	2002      	movs	r0, #2
 8004848:	f001 f99e 	bl	8005b88 <pbuf_alloc>
      if (r == NULL) {
 800484c:	4606      	mov	r6, r0
 800484e:	b130      	cbz	r0, 800485e <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8004850:	8942      	ldrh	r2, [r0, #10]
 8004852:	f105 0308 	add.w	r3, r5, #8
 8004856:	429a      	cmp	r2, r3
 8004858:	d207      	bcs.n	800486a <icmp_input+0x82>
        pbuf_free(r);
 800485a:	f001 f933 	bl	8005ac4 <pbuf_free>
  pbuf_free(p);
 800485e:	4620      	mov	r0, r4
}
 8004860:	b005      	add	sp, #20
 8004862:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8004866:	f001 b92d 	b.w	8005ac4 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 800486a:	4649      	mov	r1, r9
 800486c:	462a      	mov	r2, r5
 800486e:	6840      	ldr	r0, [r0, #4]
 8004870:	f005 fe41 	bl	800a4f6 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8004874:	4269      	negs	r1, r5
 8004876:	4630      	mov	r0, r6
 8004878:	f001 f91e 	bl	8005ab8 <pbuf_header>
 800487c:	b138      	cbz	r0, 800488e <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800487e:	4b21      	ldr	r3, [pc, #132]	; (8004904 <icmp_input+0x11c>)
 8004880:	4921      	ldr	r1, [pc, #132]	; (8004908 <icmp_input+0x120>)
 8004882:	4822      	ldr	r0, [pc, #136]	; (800490c <icmp_input+0x124>)
 8004884:	22af      	movs	r2, #175	; 0xaf
 8004886:	f005 fef5 	bl	800a674 <iprintf>
        pbuf_free(r);
 800488a:	4630      	mov	r0, r6
 800488c:	e7e5      	b.n	800485a <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 800488e:	4621      	mov	r1, r4
 8004890:	4630      	mov	r0, r6
 8004892:	f001 fb1f 	bl	8005ed4 <pbuf_copy>
 8004896:	2800      	cmp	r0, #0
 8004898:	d1f7      	bne.n	800488a <icmp_input+0xa2>
      pbuf_free(p);
 800489a:	4620      	mov	r0, r4
 800489c:	f001 f912 	bl	8005ac4 <pbuf_free>
 80048a0:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 80048a2:	4629      	mov	r1, r5
 80048a4:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 80048a6:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 80048a8:	f001 f906 	bl	8005ab8 <pbuf_header>
 80048ac:	4602      	mov	r2, r0
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d1d5      	bne.n	800485e <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80048b2:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80048bc:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80048be:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 80048c0:	70b0      	strb	r0, [r6, #2]
 80048c2:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80048c4:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80048c6:	7288      	strb	r0, [r1, #10]
 80048c8:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80048ca:	2101      	movs	r1, #1
 80048cc:	9101      	str	r1, [sp, #4]
 80048ce:	9000      	str	r0, [sp, #0]
 80048d0:	f8cd 8008 	str.w	r8, [sp, #8]
 80048d4:	490e      	ldr	r1, [pc, #56]	; (8004910 <icmp_input+0x128>)
 80048d6:	4620      	mov	r0, r4
 80048d8:	f000 f98e 	bl	8004bf8 <ip4_output_if>
 80048dc:	e7bf      	b.n	800485e <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80048de:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 80048e2:	31f2      	adds	r1, #242	; 0xf2
 80048e4:	b209      	sxth	r1, r1
 80048e6:	4620      	mov	r0, r4
 80048e8:	f001 f8e6 	bl	8005ab8 <pbuf_header>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d0d8      	beq.n	80048a2 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80048f0:	4b04      	ldr	r3, [pc, #16]	; (8004904 <icmp_input+0x11c>)
 80048f2:	4908      	ldr	r1, [pc, #32]	; (8004914 <icmp_input+0x12c>)
 80048f4:	4805      	ldr	r0, [pc, #20]	; (800490c <icmp_input+0x124>)
 80048f6:	22c0      	movs	r2, #192	; 0xc0
 80048f8:	f005 febc 	bl	800a674 <iprintf>
        goto icmperr;
 80048fc:	e7af      	b.n	800485e <icmp_input+0x76>
 80048fe:	bf00      	nop
 8004900:	20002368 	.word	0x20002368
 8004904:	0800c0a9 	.word	0x0800c0a9
 8004908:	0800c042 	.word	0x0800c042
 800490c:	0800bb8d 	.word	0x0800bb8d
 8004910:	2000237c 	.word	0x2000237c
 8004914:	0800c077 	.word	0x0800c077

08004918 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8004918:	460a      	mov	r2, r1
 800491a:	3004      	adds	r0, #4
 800491c:	2103      	movs	r1, #3
 800491e:	f7ff bf19 	b.w	8004754 <icmp_send_response.isra.0>

08004922 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8004922:	460a      	mov	r2, r1
 8004924:	3004      	adds	r0, #4
 8004926:	210b      	movs	r1, #11
 8004928:	f7ff bf14 	b.w	8004754 <icmp_send_response.isra.0>

0800492c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800492c:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800492e:	4b13      	ldr	r3, [pc, #76]	; (800497c <ip4_route+0x50>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	b96b      	cbnz	r3, 8004950 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8004934:	4a12      	ldr	r2, [pc, #72]	; (8004980 <ip4_route+0x54>)
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	b1ea      	cbz	r2, 8004976 <ip4_route+0x4a>
 800493a:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 800493e:	f001 0105 	and.w	r1, r1, #5
 8004942:	2905      	cmp	r1, #5
 8004944:	d117      	bne.n	8004976 <ip4_route+0x4a>
 8004946:	6851      	ldr	r1, [r2, #4]
 8004948:	2900      	cmp	r1, #0
 800494a:	bf18      	it	ne
 800494c:	4613      	movne	r3, r2
 800494e:	e012      	b.n	8004976 <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004950:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8004954:	f004 0205 	and.w	r2, r4, #5
 8004958:	2a05      	cmp	r2, #5
 800495a:	d1e9      	bne.n	8004930 <ip4_route+0x4>
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	2a00      	cmp	r2, #0
 8004960:	d0e6      	beq.n	8004930 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8004962:	6801      	ldr	r1, [r0, #0]
 8004964:	689d      	ldr	r5, [r3, #8]
 8004966:	404a      	eors	r2, r1
 8004968:	422a      	tst	r2, r5
 800496a:	d004      	beq.n	8004976 <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800496c:	07a2      	lsls	r2, r4, #30
 800496e:	d4df      	bmi.n	8004930 <ip4_route+0x4>
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	4291      	cmp	r1, r2
 8004974:	d1dc      	bne.n	8004930 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8004976:	4618      	mov	r0, r3
 8004978:	bd30      	pop	{r4, r5, pc}
 800497a:	bf00      	nop
 800497c:	20005880 	.word	0x20005880
 8004980:	20005884 	.word	0x20005884

08004984 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8004984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8004988:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800498a:	f897 9000 	ldrb.w	r9, [r7]
 800498e:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8004992:	2b04      	cmp	r3, #4
{
 8004994:	4605      	mov	r5, r0
 8004996:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 8004998:	d005      	beq.n	80049a6 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800499a:	4628      	mov	r0, r5
 800499c:	f001 f892 	bl	8005ac4 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 80049a0:	2000      	movs	r0, #0
 80049a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80049a6:	8878      	ldrh	r0, [r7, #2]
 80049a8:	f7ff facc 	bl	8003f44 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 80049ac:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 80049ae:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 80049b2:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 80049b4:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80049b8:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 80049ba:	d903      	bls.n	80049c4 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 80049bc:	4601      	mov	r1, r0
 80049be:	4628      	mov	r0, r5
 80049c0:	f001 f9c2 	bl	8005d48 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80049c4:	896b      	ldrh	r3, [r5, #10]
 80049c6:	454b      	cmp	r3, r9
 80049c8:	d3e7      	bcc.n	800499a <ip4_input+0x16>
 80049ca:	892b      	ldrh	r3, [r5, #8]
 80049cc:	42a3      	cmp	r3, r4
 80049ce:	d3e4      	bcc.n	800499a <ip4_input+0x16>
 80049d0:	f1b9 0f13 	cmp.w	r9, #19
 80049d4:	d9e1      	bls.n	800499a <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4c49      	ldr	r4, [pc, #292]	; (8004b00 <ip4_input+0x17c>)
 80049da:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80049dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80049e4:	2be0      	cmp	r3, #224	; 0xe0
 80049e6:	d139      	bne.n	8004a5c <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80049e8:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 80049ec:	07da      	lsls	r2, r3, #31
 80049ee:	d503      	bpl.n	80049f8 <ip4_input+0x74>
 80049f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d158      	bne.n	8004aaa <ip4_input+0x126>
      netif = NULL;
 80049f8:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80049fa:	4641      	mov	r1, r8
 80049fc:	6920      	ldr	r0, [r4, #16]
 80049fe:	f000 f90c 	bl	8004c1a <ip4_addr_isbroadcast_u32>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d1c9      	bne.n	800499a <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8004a06:	6923      	ldr	r3, [r4, #16]
 8004a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8004a0c:	2be0      	cmp	r3, #224	; 0xe0
 8004a0e:	d0c4      	beq.n	800499a <ip4_input+0x16>
  if (netif == NULL) {
 8004a10:	2e00      	cmp	r6, #0
 8004a12:	d0c2      	beq.n	800499a <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a1a:	b133      	cbz	r3, 8004a2a <ip4_input+0xa6>
    p = ip4_reass(p);
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f000 fa2b 	bl	8004e78 <ip4_reass>
    if (p == NULL) {
 8004a22:	4605      	mov	r5, r0
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d0bb      	beq.n	80049a0 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 8004a28:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8004a2a:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 8004a2c:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8004a30:	783b      	ldrb	r3, [r7, #0]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8004a38:	f1c9 0100 	rsb	r1, r9, #0
 8004a3c:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8004a3e:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8004a40:	f001 f83a 	bl	8005ab8 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8004a44:	7a7b      	ldrb	r3, [r7, #9]
 8004a46:	2b06      	cmp	r3, #6
 8004a48:	d03d      	beq.n	8004ac6 <ip4_input+0x142>
 8004a4a:	2b11      	cmp	r3, #17
 8004a4c:	d02f      	beq.n	8004aae <ip4_input+0x12a>
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d13e      	bne.n	8004ad0 <ip4_input+0x14c>
      icmp_input(p, inp);
 8004a52:	4641      	mov	r1, r8
 8004a54:	4628      	mov	r0, r5
 8004a56:	f7ff fec7 	bl	80047e8 <icmp_input>
      break;
 8004a5a:	e02c      	b.n	8004ab6 <ip4_input+0x132>
        netif = netif_list;
 8004a5c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8004b04 <ip4_input+0x180>
 8004a60:	4646      	mov	r6, r8
 8004a62:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8004a66:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 8004a6a:	07db      	lsls	r3, r3, #31
 8004a6c:	d404      	bmi.n	8004a78 <ip4_input+0xf4>
      if (first) {
 8004a6e:	f1ba 0f00 	cmp.w	sl, #0
 8004a72:	d10d      	bne.n	8004a90 <ip4_input+0x10c>
        netif = netif->next;
 8004a74:	6836      	ldr	r6, [r6, #0]
 8004a76:	e010      	b.n	8004a9a <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8004a78:	6873      	ldr	r3, [r6, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f7      	beq.n	8004a6e <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004a7e:	6960      	ldr	r0, [r4, #20]
 8004a80:	4283      	cmp	r3, r0
 8004a82:	d0ba      	beq.n	80049fa <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8004a84:	4631      	mov	r1, r6
 8004a86:	f000 f8c8 	bl	8004c1a <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d0ef      	beq.n	8004a6e <ip4_input+0xea>
 8004a8e:	e7b4      	b.n	80049fa <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8004a90:	7d23      	ldrb	r3, [r4, #20]
 8004a92:	2b7f      	cmp	r3, #127	; 0x7f
 8004a94:	d0b0      	beq.n	80049f8 <ip4_input+0x74>
        netif = netif_list;
 8004a96:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 8004a9a:	4546      	cmp	r6, r8
        netif = netif->next;
 8004a9c:	bf08      	it	eq
 8004a9e:	6836      	ldreq	r6, [r6, #0]
 8004aa0:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 8004aa4:	2e00      	cmp	r6, #0
 8004aa6:	d1de      	bne.n	8004a66 <ip4_input+0xe2>
 8004aa8:	e7a6      	b.n	80049f8 <ip4_input+0x74>
 8004aaa:	4646      	mov	r6, r8
 8004aac:	e7a5      	b.n	80049fa <ip4_input+0x76>
      udp_input(p, inp);
 8004aae:	4641      	mov	r1, r8
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f004 fca3 	bl	80093fc <udp_input>
  ip_data.current_netif = NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8004aba:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8004abc:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8004abe:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8004ac0:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8004ac2:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8004ac4:	e76c      	b.n	80049a0 <ip4_input+0x1c>
      tcp_input(p, inp);
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	4628      	mov	r0, r5
 8004aca:	f002 ff7b 	bl	80079c4 <tcp_input>
      break;
 8004ace:	e7f2      	b.n	8004ab6 <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	6960      	ldr	r0, [r4, #20]
 8004ad4:	f000 f8a1 	bl	8004c1a <ip4_addr_isbroadcast_u32>
 8004ad8:	b968      	cbnz	r0, 8004af6 <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004ada:	6963      	ldr	r3, [r4, #20]
 8004adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8004ae0:	2be0      	cmp	r3, #224	; 0xe0
 8004ae2:	d008      	beq.n	8004af6 <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 ffe9 	bl	8005abe <pbuf_header_force>
        p->payload = iphdr;
 8004aec:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8004aee:	2102      	movs	r1, #2
 8004af0:	4628      	mov	r0, r5
 8004af2:	f7ff ff11 	bl	8004918 <icmp_dest_unreach>
      pbuf_free(p);
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 ffe4 	bl	8005ac4 <pbuf_free>
 8004afc:	e7db      	b.n	8004ab6 <ip4_input+0x132>
 8004afe:	bf00      	nop
 8004b00:	20002368 	.word	0x20002368
 8004b04:	20005880 	.word	0x20005880

08004b08 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8004b08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8004b0e:	89c3      	ldrh	r3, [r0, #14]
{
 8004b10:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8004b14:	2b01      	cmp	r3, #1
{
 8004b16:	4605      	mov	r5, r0
 8004b18:	468a      	mov	sl, r1
 8004b1a:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8004b1c:	d006      	beq.n	8004b2c <ip4_output_if_src+0x24>
 8004b1e:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <ip4_output_if_src+0xd8>)
 8004b20:	4930      	ldr	r1, [pc, #192]	; (8004be4 <ip4_output_if_src+0xdc>)
 8004b22:	4831      	ldr	r0, [pc, #196]	; (8004be8 <ip4_output_if_src+0xe0>)
 8004b24:	f240 3233 	movw	r2, #819	; 0x333
 8004b28:	f005 fda4 	bl	800a674 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8004b2c:	2e00      	cmp	r6, #0
 8004b2e:	d047      	beq.n	8004bc0 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8004b30:	2114      	movs	r1, #20
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 ffc0 	bl	8005ab8 <pbuf_header>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d14e      	bne.n	8004bda <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004b3c:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8004b3e:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004b40:	2b13      	cmp	r3, #19
 8004b42:	d806      	bhi.n	8004b52 <ip4_output_if_src+0x4a>
 8004b44:	4b26      	ldr	r3, [pc, #152]	; (8004be0 <ip4_output_if_src+0xd8>)
 8004b46:	4929      	ldr	r1, [pc, #164]	; (8004bec <ip4_output_if_src+0xe4>)
 8004b48:	4827      	ldr	r0, [pc, #156]	; (8004be8 <ip4_output_if_src+0xe0>)
 8004b4a:	f240 3261 	movw	r2, #865	; 0x361
 8004b4e:	f005 fd91 	bl	800a674 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8004b52:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8004b56:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8004b58:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8004b5a:	6833      	ldr	r3, [r6, #0]
 8004b5c:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8004b5e:	2345      	movs	r3, #69	; 0x45
 8004b60:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8004b62:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004b66:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004b68:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004b6a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004bf4 <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004b6e:	f7ff f9e9 	bl	8003f44 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8004b72:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004b74:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8004b76:	71a7      	strb	r7, [r4, #6]
 8004b78:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004b7a:	f8b9 0000 	ldrh.w	r0, [r9]
 8004b7e:	f7ff f9e1 	bl	8003f44 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8004b82:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004b86:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8004b8e:	f1ba 0f00 	cmp.w	sl, #0
 8004b92:	d112      	bne.n	8004bba <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8004b94:	4b16      	ldr	r3, [pc, #88]	; (8004bf0 <ip4_output_if_src+0xe8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8004b98:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8004b9a:	72a7      	strb	r7, [r4, #10]
 8004b9c:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8004b9e:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8004ba2:	b19b      	cbz	r3, 8004bcc <ip4_output_if_src+0xc4>
 8004ba4:	892a      	ldrh	r2, [r5, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d910      	bls.n	8004bcc <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 8004baa:	4632      	mov	r2, r6
 8004bac:	4641      	mov	r1, r8
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f000 fb0c 	bl	80051cc <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8004bb4:	b002      	add	sp, #8
 8004bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 8004bba:	f8da 3000 	ldr.w	r3, [sl]
 8004bbe:	e7eb      	b.n	8004b98 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8004bc0:	686b      	ldr	r3, [r5, #4]
 8004bc2:	ae02      	add	r6, sp, #8
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f846 3d04 	str.w	r3, [r6, #-4]!
 8004bca:	e7e8      	b.n	8004b9e <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 8004bcc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004bd0:	4632      	mov	r2, r6
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	4798      	blx	r3
 8004bd8:	e7ec      	b.n	8004bb4 <ip4_output_if_src+0xac>
      return ERR_BUF;
 8004bda:	f06f 0001 	mvn.w	r0, #1
 8004bde:	e7e9      	b.n	8004bb4 <ip4_output_if_src+0xac>
 8004be0:	0800c10a 	.word	0x0800c10a
 8004be4:	0800c13e 	.word	0x0800c13e
 8004be8:	0800bb8d 	.word	0x0800bb8d
 8004bec:	0800c14a 	.word	0x0800c14a
 8004bf0:	0800c178 	.word	0x0800c178
 8004bf4:	200022ce 	.word	0x200022ce

08004bf8 <ip4_output_if>:
{
 8004bf8:	b4f0      	push	{r4, r5, r6, r7}
 8004bfa:	9c06      	ldr	r4, [sp, #24]
 8004bfc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8004c00:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8004c04:	b11a      	cbz	r2, 8004c0e <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8004c06:	b109      	cbz	r1, 8004c0c <ip4_output_if+0x14>
 8004c08:	680f      	ldr	r7, [r1, #0]
 8004c0a:	b907      	cbnz	r7, 8004c0e <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8004c0c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8004c0e:	9406      	str	r4, [sp, #24]
 8004c10:	9605      	str	r6, [sp, #20]
 8004c12:	9504      	str	r5, [sp, #16]
}
 8004c14:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8004c16:	f7ff bf77 	b.w	8004b08 <ip4_output_if_src>

08004c1a <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8004c1a:	1e43      	subs	r3, r0, #1
 8004c1c:	3303      	adds	r3, #3
 8004c1e:	d811      	bhi.n	8004c44 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8004c20:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8004c24:	f013 0302 	ands.w	r3, r3, #2
 8004c28:	d00e      	beq.n	8004c48 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8004c2a:	684a      	ldr	r2, [r1, #4]
 8004c2c:	4290      	cmp	r0, r2
 8004c2e:	d00b      	beq.n	8004c48 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8004c30:	688b      	ldr	r3, [r1, #8]
 8004c32:	4042      	eors	r2, r0
 8004c34:	421a      	tst	r2, r3
 8004c36:	d107      	bne.n	8004c48 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	4383      	bics	r3, r0
    return 1;
 8004c3c:	bf0c      	ite	eq
 8004c3e:	2001      	moveq	r0, #1
 8004c40:	2000      	movne	r0, #0
 8004c42:	4770      	bx	lr
 8004c44:	2001      	movs	r0, #1
 8004c46:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8004c48:	2000      	movs	r0, #0
  }
}
 8004c4a:	4770      	bx	lr

08004c4c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8004c4c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <ip_reass_dequeue_datagram+0x34>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4282      	cmp	r2, r0
{
 8004c54:	4604      	mov	r4, r0
 8004c56:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8004c58:	d107      	bne.n	8004c6a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8004c5a:	6802      	ldr	r2, [r0, #0]
 8004c5c:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8004c5e:	4621      	mov	r1, r4
 8004c60:	2004      	movs	r0, #4
}
 8004c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8004c66:	f000 bdc9 	b.w	80057fc <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8004c6a:	b931      	cbnz	r1, 8004c7a <ip_reass_dequeue_datagram+0x2e>
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <ip_reass_dequeue_datagram+0x38>)
 8004c6e:	4906      	ldr	r1, [pc, #24]	; (8004c88 <ip_reass_dequeue_datagram+0x3c>)
 8004c70:	4806      	ldr	r0, [pc, #24]	; (8004c8c <ip_reass_dequeue_datagram+0x40>)
 8004c72:	f240 1245 	movw	r2, #325	; 0x145
 8004c76:	f005 fcfd 	bl	800a674 <iprintf>
    prev->next = ipr->next;
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	602b      	str	r3, [r5, #0]
 8004c7e:	e7ee      	b.n	8004c5e <ip_reass_dequeue_datagram+0x12>
 8004c80:	200022d4 	.word	0x200022d4
 8004c84:	0800c261 	.word	0x0800c261
 8004c88:	0800c29a 	.word	0x0800c29a
 8004c8c:	0800bb8d 	.word	0x0800bb8d

08004c90 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8004c90:	4281      	cmp	r1, r0
{
 8004c92:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c96:	4605      	mov	r5, r0
 8004c98:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8004c9a:	d105      	bne.n	8004ca8 <ip_reass_free_complete_datagram+0x18>
 8004c9c:	4b2f      	ldr	r3, [pc, #188]	; (8004d5c <ip_reass_free_complete_datagram+0xcc>)
 8004c9e:	4930      	ldr	r1, [pc, #192]	; (8004d60 <ip_reass_free_complete_datagram+0xd0>)
 8004ca0:	4830      	ldr	r0, [pc, #192]	; (8004d64 <ip_reass_free_complete_datagram+0xd4>)
 8004ca2:	22ab      	movs	r2, #171	; 0xab
 8004ca4:	f005 fce6 	bl	800a674 <iprintf>
  if (prev != NULL) {
 8004ca8:	b147      	cbz	r7, 8004cbc <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	429d      	cmp	r5, r3
 8004cae:	d005      	beq.n	8004cbc <ip_reass_free_complete_datagram+0x2c>
 8004cb0:	4b2a      	ldr	r3, [pc, #168]	; (8004d5c <ip_reass_free_complete_datagram+0xcc>)
 8004cb2:	492d      	ldr	r1, [pc, #180]	; (8004d68 <ip_reass_free_complete_datagram+0xd8>)
 8004cb4:	482b      	ldr	r0, [pc, #172]	; (8004d64 <ip_reass_free_complete_datagram+0xd4>)
 8004cb6:	22ad      	movs	r2, #173	; 0xad
 8004cb8:	f005 fcdc 	bl	800a674 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8004cbc:	686e      	ldr	r6, [r5, #4]
 8004cbe:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8004cc0:	889a      	ldrh	r2, [r3, #4]
 8004cc2:	bb92      	cbnz	r2, 8004d2a <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8004cc8:	f105 011c 	add.w	r1, r5, #28
 8004ccc:	f105 0208 	add.w	r2, r5, #8
 8004cd0:	f852 0b04 	ldr.w	r0, [r2], #4
 8004cd4:	f843 0b04 	str.w	r0, [r3], #4
 8004cd8:	428a      	cmp	r2, r1
 8004cda:	d1f9      	bne.n	8004cd0 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8004cdc:	2101      	movs	r1, #1
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f7ff fe1f 	bl	8004922 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f001 f89f 	bl	8005e28 <pbuf_clen>
 8004cea:	4604      	mov	r4, r0
    pbuf_free(p);
 8004cec:	4630      	mov	r0, r6
 8004cee:	f000 fee9 	bl	8005ac4 <pbuf_free>
  p = ipr->p;
 8004cf2:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8004cf4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8004d5c <ip_reass_free_complete_datagram+0xcc>
 8004cf8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004d74 <ip_reass_free_complete_datagram+0xe4>
 8004cfc:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004d64 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8004d00:	b9ae      	cbnz	r6, 8004d2e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8004d02:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8004d04:	4d19      	ldr	r5, [pc, #100]	; (8004d6c <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8004d06:	4639      	mov	r1, r7
 8004d08:	f7ff ffa0 	bl	8004c4c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8004d0c:	882b      	ldrh	r3, [r5, #0]
 8004d0e:	42a3      	cmp	r3, r4
 8004d10:	d205      	bcs.n	8004d1e <ip_reass_free_complete_datagram+0x8e>
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <ip_reass_free_complete_datagram+0xcc>)
 8004d14:	4916      	ldr	r1, [pc, #88]	; (8004d70 <ip_reass_free_complete_datagram+0xe0>)
 8004d16:	4813      	ldr	r0, [pc, #76]	; (8004d64 <ip_reass_free_complete_datagram+0xd4>)
 8004d18:	22d2      	movs	r2, #210	; 0xd2
 8004d1a:	f005 fcab 	bl	800a674 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8004d1e:	882b      	ldrh	r3, [r5, #0]
 8004d20:	1b1b      	subs	r3, r3, r4
 8004d22:	802b      	strh	r3, [r5, #0]
}
 8004d24:	4620      	mov	r0, r4
 8004d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8004d2a:	2400      	movs	r4, #0
 8004d2c:	e7e1      	b.n	8004cf2 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8004d2e:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8004d30:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8004d32:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8004d36:	f001 f877 	bl	8005e28 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8004d3a:	4404      	add	r4, r0
 8004d3c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8004d40:	db05      	blt.n	8004d4e <ip_reass_free_complete_datagram+0xbe>
 8004d42:	4643      	mov	r3, r8
 8004d44:	22cc      	movs	r2, #204	; 0xcc
 8004d46:	4649      	mov	r1, r9
 8004d48:	4650      	mov	r0, sl
 8004d4a:	f005 fc93 	bl	800a674 <iprintf>
    pbuf_free(pcur);
 8004d4e:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8004d50:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8004d52:	f000 feb7 	bl	8005ac4 <pbuf_free>
    p = iprh->next_pbuf;
 8004d56:	465e      	mov	r6, fp
 8004d58:	e7d2      	b.n	8004d00 <ip_reass_free_complete_datagram+0x70>
 8004d5a:	bf00      	nop
 8004d5c:	0800c261 	.word	0x0800c261
 8004d60:	0800c2b3 	.word	0x0800c2b3
 8004d64:	0800bb8d 	.word	0x0800bb8d
 8004d68:	0800c2bf 	.word	0x0800c2bf
 8004d6c:	200022d0 	.word	0x200022d0
 8004d70:	0800c2ee 	.word	0x0800c2ee
 8004d74:	0800c2d1 	.word	0x0800c2d1

08004d78 <ip_reass_remove_oldest_datagram>:
{
 8004d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 8004d7c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8004dec <ip_reass_remove_oldest_datagram+0x74>
{
 8004d80:	4606      	mov	r6, r0
 8004d82:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8004d84:	2500      	movs	r5, #0
    other_datagrams = 0;
 8004d86:	2400      	movs	r4, #0
    r = reassdatagrams;
 8004d88:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8004d8c:	4621      	mov	r1, r4
    prev = NULL;
 8004d8e:	46a6      	mov	lr, r4
    oldest = NULL;
 8004d90:	4620      	mov	r0, r4
    while (r != NULL) {
 8004d92:	b953      	cbnz	r3, 8004daa <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8004d94:	b110      	cbz	r0, 8004d9c <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8004d96:	f7ff ff7b 	bl	8004c90 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8004d9a:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8004d9c:	42bd      	cmp	r5, r7
 8004d9e:	da01      	bge.n	8004da4 <ip_reass_remove_oldest_datagram+0x2c>
 8004da0:	2c01      	cmp	r4, #1
 8004da2:	dcf0      	bgt.n	8004d86 <ip_reass_remove_oldest_datagram+0xe>
}
 8004da4:	4628      	mov	r0, r5
 8004da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8004daa:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	4562      	cmp	r2, ip
 8004db2:	d109      	bne.n	8004dc8 <ip_reass_remove_oldest_datagram+0x50>
 8004db4:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	4562      	cmp	r2, ip
 8004dbc:	d104      	bne.n	8004dc8 <ip_reass_remove_oldest_datagram+0x50>
 8004dbe:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8004dc2:	88b2      	ldrh	r2, [r6, #4]
 8004dc4:	4594      	cmp	ip, r2
 8004dc6:	d008      	beq.n	8004dda <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8004dc8:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8004dca:	b160      	cbz	r0, 8004de6 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8004dcc:	7fc2      	ldrb	r2, [r0, #31]
 8004dce:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8004dd2:	4594      	cmp	ip, r2
 8004dd4:	bf9c      	itt	ls
 8004dd6:	4671      	movls	r1, lr
 8004dd8:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	2a00      	cmp	r2, #0
 8004dde:	bf18      	it	ne
 8004de0:	469e      	movne	lr, r3
 8004de2:	4613      	mov	r3, r2
 8004de4:	e7d5      	b.n	8004d92 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8004de6:	4671      	mov	r1, lr
 8004de8:	4618      	mov	r0, r3
 8004dea:	e7f6      	b.n	8004dda <ip_reass_remove_oldest_datagram+0x62>
 8004dec:	200022d4 	.word	0x200022d4

08004df0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8004df0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8004df2:	4604      	mov	r4, r0
 8004df4:	b930      	cbnz	r0, 8004e04 <ip_frag_free_pbuf_custom_ref+0x14>
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <ip_frag_free_pbuf_custom_ref+0x20>)
 8004df8:	4906      	ldr	r1, [pc, #24]	; (8004e14 <ip_frag_free_pbuf_custom_ref+0x24>)
 8004dfa:	4807      	ldr	r0, [pc, #28]	; (8004e18 <ip_frag_free_pbuf_custom_ref+0x28>)
 8004dfc:	f240 22ae 	movw	r2, #686	; 0x2ae
 8004e00:	f005 fc38 	bl	800a674 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8004e04:	4621      	mov	r1, r4
 8004e06:	2005      	movs	r0, #5
}
 8004e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8004e0c:	f000 bcf6 	b.w	80057fc <memp_free>
 8004e10:	0800c261 	.word	0x0800c261
 8004e14:	0800c92b 	.word	0x0800c92b
 8004e18:	0800bb8d 	.word	0x0800bb8d

08004e1c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8004e1c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8004e1e:	4604      	mov	r4, r0
 8004e20:	b930      	cbnz	r0, 8004e30 <ipfrag_free_pbuf_custom+0x14>
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <ipfrag_free_pbuf_custom+0x28>)
 8004e24:	4908      	ldr	r1, [pc, #32]	; (8004e48 <ipfrag_free_pbuf_custom+0x2c>)
 8004e26:	4809      	ldr	r0, [pc, #36]	; (8004e4c <ipfrag_free_pbuf_custom+0x30>)
 8004e28:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8004e2c:	f005 fc22 	bl	800a674 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8004e30:	6960      	ldr	r0, [r4, #20]
 8004e32:	b108      	cbz	r0, 8004e38 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8004e34:	f000 fe46 	bl	8005ac4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8004e38:	4620      	mov	r0, r4
}
 8004e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8004e3e:	f7ff bfd7 	b.w	8004df0 <ip_frag_free_pbuf_custom_ref>
 8004e42:	bf00      	nop
 8004e44:	0800c261 	.word	0x0800c261
 8004e48:	0800c309 	.word	0x0800c309
 8004e4c:	0800bb8d 	.word	0x0800bb8d

08004e50 <ip_reass_tmr>:
{
 8004e50:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8004e52:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <ip_reass_tmr+0x24>)
 8004e54:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8004e56:	2400      	movs	r4, #0
  while (r != NULL) {
 8004e58:	b900      	cbnz	r0, 8004e5c <ip_reass_tmr+0xc>
}
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8004e5c:	7fc3      	ldrb	r3, [r0, #31]
 8004e5e:	6805      	ldr	r5, [r0, #0]
 8004e60:	b123      	cbz	r3, 8004e6c <ip_reass_tmr+0x1c>
      r->timer--;
 8004e62:	3b01      	subs	r3, #1
 8004e64:	77c3      	strb	r3, [r0, #31]
 8004e66:	4604      	mov	r4, r0
      r = r->next;
 8004e68:	4628      	mov	r0, r5
 8004e6a:	e7f5      	b.n	8004e58 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	f7ff ff0f 	bl	8004c90 <ip_reass_free_complete_datagram>
 8004e72:	e7f9      	b.n	8004e68 <ip_reass_tmr+0x18>
 8004e74:	200022d4 	.word	0x200022d4

08004e78 <ip4_reass>:
{
 8004e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8004e7c:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8004e7e:	782b      	ldrb	r3, [r5, #0]
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	2b05      	cmp	r3, #5
{
 8004e86:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8004e88:	f040 808c 	bne.w	8004fa4 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004e8c:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8004e8e:	4cb4      	ldr	r4, [pc, #720]	; (8005160 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004e90:	f7ff f858 	bl	8003f44 <lwip_htons>
 8004e94:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8004e98:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004e9c:	8868      	ldrh	r0, [r5, #2]
 8004e9e:	f7ff f851 	bl	8003f44 <lwip_htons>
 8004ea2:	782b      	ldrb	r3, [r5, #0]
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8004eac:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8004eae:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004eb0:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8004eb2:	f000 ffb9 	bl	8005e28 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8004eb6:	8823      	ldrh	r3, [r4, #0]
 8004eb8:	4403      	add	r3, r0
 8004eba:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 8004ebc:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8004ebe:	dc68      	bgt.n	8004f92 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8004ec0:	4ea8      	ldr	r6, [pc, #672]	; (8005164 <ip4_reass+0x2ec>)
 8004ec2:	6834      	ldr	r4, [r6, #0]
 8004ec4:	2c00      	cmp	r4, #0
 8004ec6:	d172      	bne.n	8004fae <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8004ec8:	2004      	movs	r0, #4
 8004eca:	f000 fc7b 	bl	80057c4 <memp_malloc>
  if (ipr == NULL) {
 8004ece:	4604      	mov	r4, r0
 8004ed0:	b958      	cbnz	r0, 8004eea <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f7ff ff4f 	bl	8004d78 <ip_reass_remove_oldest_datagram>
 8004eda:	4582      	cmp	sl, r0
 8004edc:	dc62      	bgt.n	8004fa4 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8004ede:	2004      	movs	r0, #4
 8004ee0:	f000 fc70 	bl	80057c4 <memp_malloc>
    if (ipr == NULL)
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d05c      	beq.n	8004fa4 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8004eea:	2220      	movs	r2, #32
 8004eec:	2100      	movs	r1, #0
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f005 fb0c 	bl	800a50c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8004ef8:	6833      	ldr	r3, [r6, #0]
 8004efa:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 8004efc:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8004efe:	462b      	mov	r3, r5
 8004f00:	f104 0208 	add.w	r2, r4, #8
 8004f04:	f105 0114 	add.w	r1, r5, #20
 8004f08:	f853 0b04 	ldr.w	r0, [r3], #4
 8004f0c:	f842 0b04 	str.w	r0, [r2], #4
 8004f10:	428b      	cmp	r3, r1
 8004f12:	d1f9      	bne.n	8004f08 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8004f14:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8004f18:	f01b 0b20 	ands.w	fp, fp, #32
 8004f1c:	d108      	bne.n	8004f30 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8004f1e:	9b01      	ldr	r3, [sp, #4]
 8004f20:	444b      	add	r3, r9
 8004f22:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8004f24:	4599      	cmp	r9, r3
 8004f26:	d83d      	bhi.n	8004fa4 <ip4_reass+0x12c>
 8004f28:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d839      	bhi.n	8004fa4 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8004f30:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004f32:	8868      	ldrh	r0, [r5, #2]
 8004f34:	f7ff f806 	bl	8003f44 <lwip_htons>
 8004f38:	f895 8000 	ldrb.w	r8, [r5]
 8004f3c:	f008 080f 	and.w	r8, r8, #15
 8004f40:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004f44:	88e8      	ldrh	r0, [r5, #6]
 8004f46:	f7fe fffd 	bl	8003f44 <lwip_htons>
 8004f4a:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004f4e:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004f52:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8004f54:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 8004f56:	f8d4 e004 	ldr.w	lr, [r4, #4]
  iprh->start = offset;
 8004f5a:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8004f5c:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 8004f60:	2500      	movs	r5, #0
  iprh->end = offset + len;
 8004f62:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8004f64:	7035      	strb	r5, [r6, #0]
 8004f66:	7075      	strb	r5, [r6, #1]
 8004f68:	70b5      	strb	r5, [r6, #2]
 8004f6a:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 8004f6c:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8004f6e:	4672      	mov	r2, lr
  int valid = 1;
 8004f70:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 8004f74:	bb52      	cbnz	r2, 8004fcc <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 8004f76:	2d00      	cmp	r5, #0
 8004f78:	f040 8092 	bne.w	80050a0 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8004f7c:	f1be 0f00 	cmp.w	lr, #0
 8004f80:	d07d      	beq.n	800507e <ip4_reass+0x206>
 8004f82:	4b79      	ldr	r3, [pc, #484]	; (8005168 <ip4_reass+0x2f0>)
 8004f84:	4979      	ldr	r1, [pc, #484]	; (800516c <ip4_reass+0x2f4>)
 8004f86:	487a      	ldr	r0, [pc, #488]	; (8005170 <ip4_reass+0x2f8>)
 8004f88:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8004f8c:	f005 fb72 	bl	800a674 <iprintf>
 8004f90:	e075      	b.n	800507e <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8004f92:	4601      	mov	r1, r0
 8004f94:	4628      	mov	r0, r5
 8004f96:	f7ff feef 	bl	8004d78 <ip_reass_remove_oldest_datagram>
 8004f9a:	b118      	cbz	r0, 8004fa4 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8004f9c:	8823      	ldrh	r3, [r4, #0]
 8004f9e:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8004fa0:	2b0a      	cmp	r3, #10
 8004fa2:	dd8d      	ble.n	8004ec0 <ip4_reass+0x48>
  pbuf_free(p);
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	f000 fd8d 	bl	8005ac4 <pbuf_free>
  return NULL;
 8004faa:	2500      	movs	r5, #0
 8004fac:	e0d4      	b.n	8005158 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8004fae:	68eb      	ldr	r3, [r5, #12]
 8004fb0:	6962      	ldr	r2, [r4, #20]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d108      	bne.n	8004fc8 <ip4_reass+0x150>
 8004fb6:	692b      	ldr	r3, [r5, #16]
 8004fb8:	69a2      	ldr	r2, [r4, #24]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d104      	bne.n	8004fc8 <ip4_reass+0x150>
 8004fbe:	89a2      	ldrh	r2, [r4, #12]
 8004fc0:	88ab      	ldrh	r3, [r5, #4]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	f000 80dc 	beq.w	8005180 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8004fc8:	6824      	ldr	r4, [r4, #0]
 8004fca:	e77b      	b.n	8004ec4 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8004fcc:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8004fd0:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8004fd4:	4288      	cmp	r0, r1
 8004fd6:	d254      	bcs.n	8005082 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8004fd8:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8004fda:	2d00      	cmp	r5, #0
 8004fdc:	d04d      	beq.n	800507a <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8004fde:	88ea      	ldrh	r2, [r5, #6]
 8004fe0:	4290      	cmp	r0, r2
 8004fe2:	f0c0 8091 	bcc.w	8005108 <ip4_reass+0x290>
 8004fe6:	428b      	cmp	r3, r1
 8004fe8:	f200 808e 	bhi.w	8005108 <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 8004fec:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 8004fee:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 8004ff0:	f040 80e4 	bne.w	80051bc <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8004ff4:	f1bb 0f00 	cmp.w	fp, #0
 8004ff8:	d004      	beq.n	8005004 <ip4_reass+0x18c>
 8004ffa:	7fa3      	ldrb	r3, [r4, #30]
 8004ffc:	f013 0301 	ands.w	r3, r3, #1
 8005000:	f000 80da 	beq.w	80051b8 <ip4_reass+0x340>
    if (valid) {
 8005004:	f1b8 0f00 	cmp.w	r8, #0
 8005008:	d159      	bne.n	80050be <ip4_reass+0x246>
          q = iprh->next_pbuf;
 800500a:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800500e:	4e54      	ldr	r6, [pc, #336]	; (8005160 <ip4_reass+0x2e8>)
 8005010:	8833      	ldrh	r3, [r6, #0]
 8005012:	449a      	add	sl, r3
 8005014:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8005018:	f1bb 0f00 	cmp.w	fp, #0
 800501c:	d107      	bne.n	800502e <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 800501e:	9b01      	ldr	r3, [sp, #4]
 8005020:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8005022:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8005024:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8005028:	f043 0301 	orr.w	r3, r3, #1
 800502c:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800502e:	f1b8 0f01 	cmp.w	r8, #1
 8005032:	d1ba      	bne.n	8004faa <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 8005034:	8ba3      	ldrh	r3, [r4, #28]
 8005036:	3314      	adds	r3, #20
 8005038:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800503a:	6863      	ldr	r3, [r4, #4]
 800503c:	685d      	ldr	r5, [r3, #4]
 800503e:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8005040:	f104 0308 	add.w	r3, r4, #8
 8005044:	462a      	mov	r2, r5
 8005046:	f104 011c 	add.w	r1, r4, #28
 800504a:	f853 0b04 	ldr.w	r0, [r3], #4
 800504e:	f842 0b04 	str.w	r0, [r2], #4
 8005052:	428b      	cmp	r3, r1
 8005054:	d1f9      	bne.n	800504a <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8005056:	8ba0      	ldrh	r0, [r4, #28]
 8005058:	f7fe ff74 	bl	8003f44 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800505c:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800505e:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8005060:	71ab      	strb	r3, [r5, #6]
 8005062:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8005064:	72ab      	strb	r3, [r5, #10]
 8005066:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8005068:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800506a:	2f00      	cmp	r7, #0
 800506c:	d157      	bne.n	800511e <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 800506e:	4b3d      	ldr	r3, [pc, #244]	; (8005164 <ip4_reass+0x2ec>)
 8005070:	6819      	ldr	r1, [r3, #0]
 8005072:	428c      	cmp	r4, r1
 8005074:	d165      	bne.n	8005142 <ip4_reass+0x2ca>
      ipr_prev = NULL;
 8005076:	4639      	mov	r1, r7
 8005078:	e065      	b.n	8005146 <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 800507a:	428b      	cmp	r3, r1
 800507c:	d844      	bhi.n	8005108 <ip4_reass+0x290>
      ipr->p = new_p;
 800507e:	6067      	str	r7, [r4, #4]
 8005080:	e7b8      	b.n	8004ff4 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 8005082:	d041      	beq.n	8005108 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 8005084:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8005088:	4282      	cmp	r2, r0
 800508a:	d83d      	bhi.n	8005108 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 800508c:	b125      	cbz	r5, 8005098 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 800508e:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8005090:	428a      	cmp	r2, r1
 8005092:	bf18      	it	ne
 8005094:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8005098:	f8dc 2000 	ldr.w	r2, [ip]
 800509c:	4665      	mov	r5, ip
 800509e:	e769      	b.n	8004f74 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80050a0:	88eb      	ldrh	r3, [r5, #6]
 80050a2:	4283      	cmp	r3, r0
 80050a4:	d906      	bls.n	80050b4 <ip4_reass+0x23c>
 80050a6:	4b30      	ldr	r3, [pc, #192]	; (8005168 <ip4_reass+0x2f0>)
 80050a8:	4932      	ldr	r1, [pc, #200]	; (8005174 <ip4_reass+0x2fc>)
 80050aa:	4831      	ldr	r0, [pc, #196]	; (8005170 <ip4_reass+0x2f8>)
 80050ac:	f240 12ab 	movw	r2, #427	; 0x1ab
 80050b0:	f005 fae0 	bl	800a674 <iprintf>
      iprh_prev->next_pbuf = new_p;
 80050b4:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 80050b6:	88ea      	ldrh	r2, [r5, #6]
 80050b8:	88b3      	ldrh	r3, [r6, #4]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	e798      	b.n	8004ff0 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80050be:	6863      	ldr	r3, [r4, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0a2      	beq.n	800500a <ip4_reass+0x192>
 80050c4:	6859      	ldr	r1, [r3, #4]
 80050c6:	888b      	ldrh	r3, [r1, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d19e      	bne.n	800500a <ip4_reass+0x192>
        q = iprh->next_pbuf;
 80050cc:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 80050ce:	b99b      	cbnz	r3, 80050f8 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 80050d0:	42b1      	cmp	r1, r6
 80050d2:	d106      	bne.n	80050e2 <ip4_reass+0x26a>
 80050d4:	4b24      	ldr	r3, [pc, #144]	; (8005168 <ip4_reass+0x2f0>)
 80050d6:	4928      	ldr	r1, [pc, #160]	; (8005178 <ip4_reass+0x300>)
 80050d8:	4825      	ldr	r0, [pc, #148]	; (8005170 <ip4_reass+0x2f8>)
 80050da:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80050de:	f005 fac9 	bl	800a674 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80050e2:	6833      	ldr	r3, [r6, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d092      	beq.n	800500e <ip4_reass+0x196>
 80050e8:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <ip4_reass+0x2f0>)
 80050ea:	4924      	ldr	r1, [pc, #144]	; (800517c <ip4_reass+0x304>)
 80050ec:	4820      	ldr	r0, [pc, #128]	; (8005170 <ip4_reass+0x2f8>)
 80050ee:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80050f2:	f005 fabf 	bl	800a674 <iprintf>
 80050f6:	e78a      	b.n	800500e <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 80050f8:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80050fa:	88f0      	ldrh	r0, [r6, #6]
 80050fc:	8893      	ldrh	r3, [r2, #4]
 80050fe:	4298      	cmp	r0, r3
 8005100:	d183      	bne.n	800500a <ip4_reass+0x192>
          q = iprh->next_pbuf;
 8005102:	6813      	ldr	r3, [r2, #0]
 8005104:	4616      	mov	r6, r2
 8005106:	e7e2      	b.n	80050ce <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8005108:	4638      	mov	r0, r7
 800510a:	f000 fe8d 	bl	8005e28 <pbuf_clen>
 800510e:	4a14      	ldr	r2, [pc, #80]	; (8005160 <ip4_reass+0x2e8>)
 8005110:	8813      	ldrh	r3, [r2, #0]
 8005112:	1a18      	subs	r0, r3, r0
 8005114:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8005116:	4638      	mov	r0, r7
 8005118:	f000 fcd4 	bl	8005ac4 <pbuf_free>
 800511c:	e742      	b.n	8004fa4 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 800511e:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 8005122:	f06f 0113 	mvn.w	r1, #19
 8005126:	4638      	mov	r0, r7
 8005128:	f000 fcc6 	bl	8005ab8 <pbuf_header>
      pbuf_cat(p, r);
 800512c:	4639      	mov	r1, r7
 800512e:	4628      	mov	r0, r5
 8005130:	f000 fe96 	bl	8005e60 <pbuf_cat>
      r = iprh->next_pbuf;
 8005134:	f8d8 7000 	ldr.w	r7, [r8]
 8005138:	e797      	b.n	800506a <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 800513a:	680b      	ldr	r3, [r1, #0]
 800513c:	429c      	cmp	r4, r3
 800513e:	d002      	beq.n	8005146 <ip4_reass+0x2ce>
 8005140:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8005142:	2900      	cmp	r1, #0
 8005144:	d1f9      	bne.n	800513a <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8005146:	4620      	mov	r0, r4
 8005148:	f7ff fd80 	bl	8004c4c <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800514c:	4628      	mov	r0, r5
 800514e:	f000 fe6b 	bl	8005e28 <pbuf_clen>
 8005152:	8833      	ldrh	r3, [r6, #0]
 8005154:	1a18      	subs	r0, r3, r0
 8005156:	8030      	strh	r0, [r6, #0]
}
 8005158:	4628      	mov	r0, r5
 800515a:	b003      	add	sp, #12
 800515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005160:	200022d0 	.word	0x200022d0
 8005164:	200022d4 	.word	0x200022d4
 8005168:	0800c261 	.word	0x0800c261
 800516c:	0800c1fb 	.word	0x0800c1fb
 8005170:	0800bb8d 	.word	0x0800bb8d
 8005174:	0800c1dd 	.word	0x0800c1dd
 8005178:	0800c232 	.word	0x0800c232
 800517c:	0800c23f 	.word	0x0800c23f
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8005180:	88e8      	ldrh	r0, [r5, #6]
 8005182:	f7fe fedf 	bl	8003f44 <lwip_htons>
 8005186:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800518a:	2800      	cmp	r0, #0
 800518c:	f47f aec2 	bne.w	8004f14 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8005190:	89e0      	ldrh	r0, [r4, #14]
 8005192:	f7fe fed7 	bl	8003f44 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8005196:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800519a:	2800      	cmp	r0, #0
 800519c:	f43f aeba 	beq.w	8004f14 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80051a0:	462b      	mov	r3, r5
 80051a2:	f104 0208 	add.w	r2, r4, #8
 80051a6:	f105 0114 	add.w	r1, r5, #20
 80051aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80051ae:	f842 0b04 	str.w	r0, [r2], #4
 80051b2:	428b      	cmp	r3, r1
 80051b4:	d1f9      	bne.n	80051aa <ip4_reass+0x332>
 80051b6:	e6ad      	b.n	8004f14 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80051b8:	4698      	mov	r8, r3
 80051ba:	e728      	b.n	800500e <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80051bc:	f1bb 0f00 	cmp.w	fp, #0
 80051c0:	f43f af23 	beq.w	800500a <ip4_reass+0x192>
 80051c4:	f04f 0800 	mov.w	r8, #0
 80051c8:	e717      	b.n	8004ffa <ip4_reass+0x182>
 80051ca:	bf00      	nop

080051cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80051cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80051d0:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
{
 80051d4:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80051d6:	2308      	movs	r3, #8
 80051d8:	f1a8 0814 	sub.w	r8, r8, #20
 80051dc:	fb98 f8f3 	sdiv	r8, r8, r3
 80051e0:	fa1f f388 	uxth.w	r3, r8
 80051e4:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80051e6:	6843      	ldr	r3, [r0, #4]
{
 80051e8:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80051ea:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 80051ec:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80051ee:	f006 060f 	and.w	r6, r6, #15
 80051f2:	00b6      	lsls	r6, r6, #2
 80051f4:	2e14      	cmp	r6, #20
{
 80051f6:	4607      	mov	r7, r0
 80051f8:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80051fa:	d00b      	beq.n	8005214 <ip4_frag+0x48>
 80051fc:	4b5a      	ldr	r3, [pc, #360]	; (8005368 <ip4_frag+0x19c>)
 80051fe:	495b      	ldr	r1, [pc, #364]	; (800536c <ip4_frag+0x1a0>)
 8005200:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8005204:	485a      	ldr	r0, [pc, #360]	; (8005370 <ip4_frag+0x1a4>)
 8005206:	f005 fa35 	bl	800a674 <iprintf>
 800520a:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800520e:	b00b      	add	sp, #44	; 0x2c
 8005210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8005214:	9b02      	ldr	r3, [sp, #8]
 8005216:	88d8      	ldrh	r0, [r3, #6]
 8005218:	f7fe fe94 	bl	8003f44 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800521c:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8005220:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8005224:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8005226:	d004      	beq.n	8005232 <ip4_frag+0x66>
 8005228:	4b4f      	ldr	r3, [pc, #316]	; (8005368 <ip4_frag+0x19c>)
 800522a:	4952      	ldr	r1, [pc, #328]	; (8005374 <ip4_frag+0x1a8>)
 800522c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8005230:	e7e8      	b.n	8005204 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 8005232:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8005234:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8005238:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 800523a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800523e:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8005240:	9307      	str	r3, [sp, #28]
  while (left) {
 8005242:	b90d      	cbnz	r5, 8005248 <ip4_frag+0x7c>
  return ERR_OK;
 8005244:	4628      	mov	r0, r5
 8005246:	e7e2      	b.n	800520e <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8005248:	9b07      	ldr	r3, [sp, #28]
 800524a:	42ab      	cmp	r3, r5
 800524c:	bfa8      	it	ge
 800524e:	462b      	movge	r3, r5
 8005250:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8005252:	2200      	movs	r2, #0
 8005254:	2114      	movs	r1, #20
 8005256:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8005258:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800525a:	f000 fc95 	bl	8005b88 <pbuf_alloc>
    if (rambuf == NULL) {
 800525e:	4680      	mov	r8, r0
 8005260:	b370      	cbz	r0, 80052c0 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8005262:	897b      	ldrh	r3, [r7, #10]
 8005264:	2b13      	cmp	r3, #19
 8005266:	d806      	bhi.n	8005276 <ip4_frag+0xaa>
 8005268:	4b3f      	ldr	r3, [pc, #252]	; (8005368 <ip4_frag+0x19c>)
 800526a:	4943      	ldr	r1, [pc, #268]	; (8005378 <ip4_frag+0x1ac>)
 800526c:	4840      	ldr	r0, [pc, #256]	; (8005370 <ip4_frag+0x1a4>)
 800526e:	f240 3209 	movw	r2, #777	; 0x309
 8005272:	f005 f9ff 	bl	800a674 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8005276:	9b02      	ldr	r3, [sp, #8]
 8005278:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800527c:	4619      	mov	r1, r3
 800527e:	3114      	adds	r1, #20
 8005280:	f853 0b04 	ldr.w	r0, [r3], #4
 8005284:	f842 0b04 	str.w	r0, [r2], #4
 8005288:	428b      	cmp	r3, r1
 800528a:	d1f9      	bne.n	8005280 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800528c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8005290:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8005294:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8005296:	f1b9 0f00 	cmp.w	r9, #0
 800529a:	d037      	beq.n	800530c <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 800529c:	897c      	ldrh	r4, [r7, #10]
 800529e:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80052a0:	b2a4      	uxth	r4, r4
 80052a2:	454c      	cmp	r4, r9
 80052a4:	bf28      	it	cs
 80052a6:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 80052a8:	b914      	cbnz	r4, 80052b0 <ip4_frag+0xe4>
        p = p->next;
 80052aa:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 80052ac:	2600      	movs	r6, #0
 80052ae:	e7f2      	b.n	8005296 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80052b0:	2005      	movs	r0, #5
 80052b2:	f000 fa87 	bl	80057c4 <memp_malloc>
      if (pcr == NULL) {
 80052b6:	4682      	mov	sl, r0
 80052b8:	b928      	cbnz	r0, 80052c6 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 80052ba:	4640      	mov	r0, r8
 80052bc:	f000 fc02 	bl	8005ac4 <pbuf_free>
  return ERR_MEM;
 80052c0:	f04f 30ff 	mov.w	r0, #4294967295
 80052c4:	e7a3      	b.n	800520e <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80052c6:	9401      	str	r4, [sp, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4433      	add	r3, r6
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	2202      	movs	r2, #2
 80052d0:	4603      	mov	r3, r0
 80052d2:	4621      	mov	r1, r4
 80052d4:	2004      	movs	r0, #4
 80052d6:	f000 fbb7 	bl	8005a48 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80052da:	b918      	cbnz	r0, 80052e4 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 80052dc:	4650      	mov	r0, sl
 80052de:	f7ff fd87 	bl	8004df0 <ip_frag_free_pbuf_custom_ref>
 80052e2:	e7ea      	b.n	80052ba <ip4_frag+0xee>
 80052e4:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 80052e6:	4638      	mov	r0, r7
 80052e8:	f000 fda6 	bl	8005e38 <pbuf_ref>
      left_to_copy -= newpbuflen;
 80052ec:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80052f0:	4b22      	ldr	r3, [pc, #136]	; (800537c <ip4_frag+0x1b0>)
      pcr->original = p;
 80052f2:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80052f6:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 80052fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052fc:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 80052fe:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8005302:	f000 fdad 	bl	8005e60 <pbuf_cat>
      if (left_to_copy) {
 8005306:	f1b9 0f00 	cmp.w	r9, #0
 800530a:	d1ce      	bne.n	80052aa <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 800530c:	9b04      	ldr	r3, [sp, #16]
 800530e:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8005312:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 8005316:	3b13      	subs	r3, #19
    if (!last) {
 8005318:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 800531a:	bfa8      	it	ge
 800531c:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8005320:	f7fe fe10 	bl	8003f44 <lwip_htons>
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8005328:	9b05      	ldr	r3, [sp, #20]
 800532a:	f103 0014 	add.w	r0, r3, #20
 800532e:	b280      	uxth	r0, r0
 8005330:	f7fe fe08 	bl	8003f44 <lwip_htons>
 8005334:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8005336:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8005338:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800533a:	2300      	movs	r3, #0
 800533c:	7293      	strb	r3, [r2, #10]
 800533e:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8005340:	4641      	mov	r1, r8
 8005342:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005346:	9a08      	ldr	r2, [sp, #32]
 8005348:	4658      	mov	r0, fp
 800534a:	4798      	blx	r3
    pbuf_free(rambuf);
 800534c:	4640      	mov	r0, r8
 800534e:	f000 fbb9 	bl	8005ac4 <pbuf_free>
    left -= fragsize;
 8005352:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8005354:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 8005356:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 8005358:	9b04      	ldr	r3, [sp, #16]
 800535a:	4413      	add	r3, r2
    poff += newpbuflen;
 800535c:	4426      	add	r6, r4
    ofo += nfb;
 800535e:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 8005360:	b2b6      	uxth	r6, r6
    left -= fragsize;
 8005362:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8005364:	9304      	str	r3, [sp, #16]
 8005366:	e76c      	b.n	8005242 <ip4_frag+0x76>
 8005368:	0800c261 	.word	0x0800c261
 800536c:	0800c17c 	.word	0x0800c17c
 8005370:	0800bb8d 	.word	0x0800bb8d
 8005374:	0800c1a3 	.word	0x0800c1a3
 8005378:	0800c1bd 	.word	0x0800c1bd
 800537c:	08004e1d 	.word	0x08004e1d

08005380 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005380:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <mem_init+0x30>)
 8005382:	4a0c      	ldr	r2, [pc, #48]	; (80053b4 <mem_init+0x34>)
 8005384:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8005388:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800538a:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 800538c:	8059      	strh	r1, [r3, #2]
  mem->next = MEM_SIZE_ALIGNED;
 800538e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->used = 0;
 8005392:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8005394:	4908      	ldr	r1, [pc, #32]	; (80053b8 <mem_init+0x38>)
  mem->next = MEM_SIZE_ALIGNED;
 8005396:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8005398:	1898      	adds	r0, r3, r2
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 800539a:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 800539e:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80053a2:	4a06      	ldr	r2, [pc, #24]	; (80053bc <mem_init+0x3c>)
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80053a4:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 80053a6:	2101      	movs	r1, #1
 80053a8:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4770      	bx	lr
 80053b0:	20002383 	.word	0x20002383
 80053b4:	200022dc 	.word	0x200022dc
 80053b8:	200022e0 	.word	0x200022e0
 80053bc:	200022d8 	.word	0x200022d8

080053c0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80053c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80053c4:	4604      	mov	r4, r0
 80053c6:	2800      	cmp	r0, #0
 80053c8:	f000 8088 	beq.w	80054dc <mem_free+0x11c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80053cc:	0783      	lsls	r3, r0, #30
 80053ce:	d006      	beq.n	80053de <mem_free+0x1e>
 80053d0:	4b43      	ldr	r3, [pc, #268]	; (80054e0 <mem_free+0x120>)
 80053d2:	4944      	ldr	r1, [pc, #272]	; (80054e4 <mem_free+0x124>)
 80053d4:	4844      	ldr	r0, [pc, #272]	; (80054e8 <mem_free+0x128>)
 80053d6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80053da:	f005 f94b 	bl	800a674 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80053de:	4f43      	ldr	r7, [pc, #268]	; (80054ec <mem_free+0x12c>)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	429c      	cmp	r4, r3
 80053e4:	d303      	bcc.n	80053ee <mem_free+0x2e>
 80053e6:	4b42      	ldr	r3, [pc, #264]	; (80054f0 <mem_free+0x130>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	429c      	cmp	r4, r3
 80053ec:	d306      	bcc.n	80053fc <mem_free+0x3c>
 80053ee:	4b3c      	ldr	r3, [pc, #240]	; (80054e0 <mem_free+0x120>)
 80053f0:	4940      	ldr	r1, [pc, #256]	; (80054f4 <mem_free+0x134>)
 80053f2:	483d      	ldr	r0, [pc, #244]	; (80054e8 <mem_free+0x128>)
 80053f4:	f240 12af 	movw	r2, #431	; 0x1af
 80053f8:	f005 f93c 	bl	800a674 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	429c      	cmp	r4, r3
 8005400:	d36c      	bcc.n	80054dc <mem_free+0x11c>
 8005402:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <mem_free+0x130>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4294      	cmp	r4, r2
 8005408:	4698      	mov	r8, r3
 800540a:	d267      	bcs.n	80054dc <mem_free+0x11c>
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800540c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005410:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8005414:	b933      	cbnz	r3, 8005424 <mem_free+0x64>
 8005416:	4b32      	ldr	r3, [pc, #200]	; (80054e0 <mem_free+0x120>)
 8005418:	4937      	ldr	r1, [pc, #220]	; (80054f8 <mem_free+0x138>)
 800541a:	4833      	ldr	r0, [pc, #204]	; (80054e8 <mem_free+0x128>)
 800541c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8005420:	f005 f928 	bl	800a674 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
 8005424:	4e35      	ldr	r6, [pc, #212]	; (80054fc <mem_free+0x13c>)
  mem->used = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800542c:	6833      	ldr	r3, [r6, #0]
 800542e:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005430:	683b      	ldr	r3, [r7, #0]
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005432:	bf38      	it	cc
 8005434:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005436:	429d      	cmp	r5, r3
 8005438:	d206      	bcs.n	8005448 <mem_free+0x88>
 800543a:	4b29      	ldr	r3, [pc, #164]	; (80054e0 <mem_free+0x120>)
 800543c:	4930      	ldr	r1, [pc, #192]	; (8005500 <mem_free+0x140>)
 800543e:	482a      	ldr	r0, [pc, #168]	; (80054e8 <mem_free+0x128>)
 8005440:	f240 125d 	movw	r2, #349	; 0x15d
 8005444:	f005 f916 	bl	800a674 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005448:	f8d8 3000 	ldr.w	r3, [r8]
 800544c:	429d      	cmp	r5, r3
 800544e:	d306      	bcc.n	800545e <mem_free+0x9e>
 8005450:	4b23      	ldr	r3, [pc, #140]	; (80054e0 <mem_free+0x120>)
 8005452:	492c      	ldr	r1, [pc, #176]	; (8005504 <mem_free+0x144>)
 8005454:	4824      	ldr	r0, [pc, #144]	; (80054e8 <mem_free+0x128>)
 8005456:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800545a:	f005 f90b 	bl	800a674 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800545e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8005462:	b133      	cbz	r3, 8005472 <mem_free+0xb2>
 8005464:	4b1e      	ldr	r3, [pc, #120]	; (80054e0 <mem_free+0x120>)
 8005466:	4928      	ldr	r1, [pc, #160]	; (8005508 <mem_free+0x148>)
 8005468:	481f      	ldr	r0, [pc, #124]	; (80054e8 <mem_free+0x128>)
 800546a:	f240 125f 	movw	r2, #351	; 0x15f
 800546e:	f005 f901 	bl	800a674 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005472:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8005476:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800547a:	d906      	bls.n	800548a <mem_free+0xca>
 800547c:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <mem_free+0x120>)
 800547e:	4923      	ldr	r1, [pc, #140]	; (800550c <mem_free+0x14c>)
 8005480:	4819      	ldr	r0, [pc, #100]	; (80054e8 <mem_free+0x128>)
 8005482:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005486:	f005 f8f5 	bl	800a674 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005490:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005492:	4295      	cmp	r5, r2
 8005494:	d010      	beq.n	80054b8 <mem_free+0xf8>
 8005496:	7910      	ldrb	r0, [r2, #4]
 8005498:	b970      	cbnz	r0, 80054b8 <mem_free+0xf8>
 800549a:	f8d8 0000 	ldr.w	r0, [r8]
 800549e:	4282      	cmp	r2, r0
 80054a0:	d00a      	beq.n	80054b8 <mem_free+0xf8>
    if (lfree == nmem) {
 80054a2:	6830      	ldr	r0, [r6, #0]
 80054a4:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 80054a6:	5a5a      	ldrh	r2, [r3, r1]
 80054a8:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80054ac:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 80054ae:	bf08      	it	eq
 80054b0:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80054b2:	441a      	add	r2, r3
 80054b4:	1ae9      	subs	r1, r5, r3
 80054b6:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80054b8:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 80054bc:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 80054be:	428d      	cmp	r5, r1
 80054c0:	d00c      	beq.n	80054dc <mem_free+0x11c>
 80054c2:	7908      	ldrb	r0, [r1, #4]
 80054c4:	b950      	cbnz	r0, 80054dc <mem_free+0x11c>
    if (lfree == mem) {
 80054c6:	6830      	ldr	r0, [r6, #0]
 80054c8:	4285      	cmp	r5, r0
      lfree = pmem;
 80054ca:	bf08      	it	eq
 80054cc:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 80054ce:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80054d2:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80054d4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80054d8:	440b      	add	r3, r1
 80054da:	805a      	strh	r2, [r3, #2]
 80054dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e0:	0800c315 	.word	0x0800c315
 80054e4:	0800c344 	.word	0x0800c344
 80054e8:	0800bb8d 	.word	0x0800bb8d
 80054ec:	200022dc 	.word	0x200022dc
 80054f0:	200022e0 	.word	0x200022e0
 80054f4:	0800c365 	.word	0x0800c365
 80054f8:	0800c37c 	.word	0x0800c37c
 80054fc:	200022d8 	.word	0x200022d8
 8005500:	0800c390 	.word	0x0800c390
 8005504:	0800c3a7 	.word	0x0800c3a7
 8005508:	0800c3c1 	.word	0x0800c3c1
 800550c:	0800c3dc 	.word	0x0800c3dc

08005510 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8005510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8005512:	3103      	adds	r1, #3
 8005514:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8005518:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 800551a:	2d0b      	cmp	r5, #11
{
 800551c:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 800551e:	d904      	bls.n	800552a <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8005520:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8005524:	d902      	bls.n	800552c <mem_trim+0x1c>
    return NULL;
 8005526:	2400      	movs	r4, #0
 8005528:	e059      	b.n	80055de <mem_trim+0xce>
    newsize = MIN_SIZE_ALIGNED;
 800552a:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800552c:	4e2d      	ldr	r6, [pc, #180]	; (80055e4 <mem_trim+0xd4>)
 800552e:	6832      	ldr	r2, [r6, #0]
 8005530:	42a2      	cmp	r2, r4
 8005532:	d803      	bhi.n	800553c <mem_trim+0x2c>
 8005534:	4b2c      	ldr	r3, [pc, #176]	; (80055e8 <mem_trim+0xd8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	429c      	cmp	r4, r3
 800553a:	d306      	bcc.n	800554a <mem_trim+0x3a>
 800553c:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <mem_trim+0xdc>)
 800553e:	492c      	ldr	r1, [pc, #176]	; (80055f0 <mem_trim+0xe0>)
 8005540:	482c      	ldr	r0, [pc, #176]	; (80055f4 <mem_trim+0xe4>)
 8005542:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005546:	f005 f895 	bl	800a674 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800554a:	6833      	ldr	r3, [r6, #0]
 800554c:	429c      	cmp	r4, r3
 800554e:	d346      	bcc.n	80055de <mem_trim+0xce>
 8005550:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <mem_trim+0xd8>)
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	4294      	cmp	r4, r2
 8005556:	d242      	bcs.n	80055de <mem_trim+0xce>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005558:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800555c:	f834 0c08 	ldrh.w	r0, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8005560:	1ad2      	subs	r2, r2, r3
 8005562:	b292      	uxth	r2, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005564:	f1a0 0108 	sub.w	r1, r0, #8
 8005568:	1a89      	subs	r1, r1, r2
 800556a:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800556c:	42a9      	cmp	r1, r5
 800556e:	d219      	bcs.n	80055a4 <mem_trim+0x94>
 8005570:	4b1e      	ldr	r3, [pc, #120]	; (80055ec <mem_trim+0xdc>)
 8005572:	4921      	ldr	r1, [pc, #132]	; (80055f8 <mem_trim+0xe8>)
 8005574:	481f      	ldr	r0, [pc, #124]	; (80055f4 <mem_trim+0xe4>)
 8005576:	f240 2206 	movw	r2, #518	; 0x206
 800557a:	f005 f87b 	bl	800a674 <iprintf>
 800557e:	e7d2      	b.n	8005526 <mem_trim+0x16>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005580:	f105 0614 	add.w	r6, r5, #20
 8005584:	428e      	cmp	r6, r1
 8005586:	d82a      	bhi.n	80055de <mem_trim+0xce>
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 8005588:	4e1c      	ldr	r6, [pc, #112]	; (80055fc <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800558a:	f102 0108 	add.w	r1, r2, #8
 800558e:	440d      	add	r5, r1
    if (mem2 < lfree) {
 8005590:	6837      	ldr	r7, [r6, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005592:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005594:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8005596:	42b9      	cmp	r1, r7
      lfree = mem2;
 8005598:	bf38      	it	cc
 800559a:	6031      	strcc	r1, [r6, #0]
    }
    mem2->used = 0;
 800559c:	2600      	movs	r6, #0
 800559e:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 80055a0:	5358      	strh	r0, [r3, r5]
 80055a2:	e013      	b.n	80055cc <mem_trim+0xbc>
  if (newsize == size) {
 80055a4:	d01b      	beq.n	80055de <mem_trim+0xce>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 80055a6:	181e      	adds	r6, r3, r0
  if (mem2->used == 0) {
 80055a8:	7937      	ldrb	r7, [r6, #4]
 80055aa:	2f00      	cmp	r7, #0
 80055ac:	d1e8      	bne.n	8005580 <mem_trim+0x70>
    next = mem2->next;
 80055ae:	5a1f      	ldrh	r7, [r3, r0]
    if (lfree == mem2) {
 80055b0:	4812      	ldr	r0, [pc, #72]	; (80055fc <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80055b2:	f102 0108 	add.w	r1, r2, #8
 80055b6:	440d      	add	r5, r1
    if (lfree == mem2) {
 80055b8:	6801      	ldr	r1, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80055ba:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 80055bc:	428e      	cmp	r6, r1
 80055be:	eb03 0105 	add.w	r1, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 80055c2:	bf08      	it	eq
 80055c4:	6001      	streq	r1, [r0, #0]
    mem2->used = 0;
 80055c6:	2000      	movs	r0, #0
 80055c8:	7108      	strb	r0, [r1, #4]
    mem2->next = next;
 80055ca:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 80055cc:	804a      	strh	r2, [r1, #2]
    mem->next = ptr2;
 80055ce:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80055d2:	5b5a      	ldrh	r2, [r3, r5]
 80055d4:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 80055d8:	d001      	beq.n	80055de <mem_trim+0xce>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80055da:	4413      	add	r3, r2
 80055dc:	805d      	strh	r5, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80055de:	4620      	mov	r0, r4
 80055e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055e2:	bf00      	nop
 80055e4:	200022dc 	.word	0x200022dc
 80055e8:	200022e0 	.word	0x200022e0
 80055ec:	0800c315 	.word	0x0800c315
 80055f0:	0800c4a1 	.word	0x0800c4a1
 80055f4:	0800bb8d 	.word	0x0800bb8d
 80055f8:	0800c4b8 	.word	0x0800c4b8
 80055fc:	200022d8 	.word	0x200022d8

08005600 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8005600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8005604:	b148      	cbz	r0, 800561a <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8005606:	3003      	adds	r0, #3
 8005608:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 800560c:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 800560e:	2d0b      	cmp	r5, #11
 8005610:	d905      	bls.n	800561e <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8005612:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8005616:	d903      	bls.n	8005620 <mem_malloc+0x20>
    return NULL;
 8005618:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 800561a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 800561e:	250c      	movs	r5, #12
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005620:	4837      	ldr	r0, [pc, #220]	; (8005700 <mem_malloc+0x100>)
 8005622:	4e38      	ldr	r6, [pc, #224]	; (8005704 <mem_malloc+0x104>)
 8005624:	6807      	ldr	r7, [r0, #0]
 8005626:	6831      	ldr	r1, [r6, #0]
 8005628:	1a7b      	subs	r3, r7, r1
 800562a:	b29b      	uxth	r3, r3
 800562c:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005630:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005634:	4543      	cmp	r3, r8
 8005636:	d2ef      	bcs.n	8005618 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 8005638:	18cc      	adds	r4, r1, r3
 800563a:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 800563e:	f894 c004 	ldrb.w	ip, [r4, #4]
 8005642:	f1bc 0f00 	cmp.w	ip, #0
 8005646:	d158      	bne.n	80056fa <mem_malloc+0xfa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005648:	eba9 0203 	sub.w	r2, r9, r3
 800564c:	4472      	add	r2, lr
      if ((!mem->used) &&
 800564e:	4295      	cmp	r5, r2
 8005650:	d853      	bhi.n	80056fa <mem_malloc+0xfa>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005652:	f105 0814 	add.w	r8, r5, #20
 8005656:	4542      	cmp	r2, r8
 8005658:	d349      	bcc.n	80056ee <mem_malloc+0xee>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800565a:	f105 0208 	add.w	r2, r5, #8
 800565e:	441a      	add	r2, r3
 8005660:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8005662:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 8005666:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 800566a:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 800566e:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 8005672:	2301      	movs	r3, #1
          mem->next = ptr2;
 8005674:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8005676:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005678:	5a8b      	ldrh	r3, [r1, r2]
 800567a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800567e:	d001      	beq.n	8005684 <mem_malloc+0x84>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005680:	4419      	add	r1, r3
 8005682:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 8005684:	42a7      	cmp	r7, r4
 8005686:	4f20      	ldr	r7, [pc, #128]	; (8005708 <mem_malloc+0x108>)
 8005688:	d111      	bne.n	80056ae <mem_malloc+0xae>
          while (cur->used && cur != ram_end) {
 800568a:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 800568c:	6836      	ldr	r6, [r6, #0]
 800568e:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 8005690:	791a      	ldrb	r2, [r3, #4]
 8005692:	b10a      	cbz	r2, 8005698 <mem_malloc+0x98>
 8005694:	428b      	cmp	r3, r1
 8005696:	d12d      	bne.n	80056f4 <mem_malloc+0xf4>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005698:	428b      	cmp	r3, r1
          lfree = cur;
 800569a:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800569c:	d007      	beq.n	80056ae <mem_malloc+0xae>
 800569e:	b132      	cbz	r2, 80056ae <mem_malloc+0xae>
 80056a0:	4b1a      	ldr	r3, [pc, #104]	; (800570c <mem_malloc+0x10c>)
 80056a2:	491b      	ldr	r1, [pc, #108]	; (8005710 <mem_malloc+0x110>)
 80056a4:	481b      	ldr	r0, [pc, #108]	; (8005714 <mem_malloc+0x114>)
 80056a6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80056aa:	f004 ffe3 	bl	800a674 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80056ae:	3508      	adds	r5, #8
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4425      	add	r5, r4
 80056b4:	42ab      	cmp	r3, r5
 80056b6:	d206      	bcs.n	80056c6 <mem_malloc+0xc6>
 80056b8:	4b14      	ldr	r3, [pc, #80]	; (800570c <mem_malloc+0x10c>)
 80056ba:	4917      	ldr	r1, [pc, #92]	; (8005718 <mem_malloc+0x118>)
 80056bc:	4815      	ldr	r0, [pc, #84]	; (8005714 <mem_malloc+0x114>)
 80056be:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80056c2:	f004 ffd7 	bl	800a674 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80056c6:	07a3      	lsls	r3, r4, #30
 80056c8:	d00d      	beq.n	80056e6 <mem_malloc+0xe6>
 80056ca:	4b10      	ldr	r3, [pc, #64]	; (800570c <mem_malloc+0x10c>)
 80056cc:	4913      	ldr	r1, [pc, #76]	; (800571c <mem_malloc+0x11c>)
 80056ce:	4811      	ldr	r0, [pc, #68]	; (8005714 <mem_malloc+0x114>)
 80056d0:	f240 22d6 	movw	r2, #726	; 0x2d6
 80056d4:	f004 ffce 	bl	800a674 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80056d8:	4b0c      	ldr	r3, [pc, #48]	; (800570c <mem_malloc+0x10c>)
 80056da:	4911      	ldr	r1, [pc, #68]	; (8005720 <mem_malloc+0x120>)
 80056dc:	480d      	ldr	r0, [pc, #52]	; (8005714 <mem_malloc+0x114>)
 80056de:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 80056e2:	f004 ffc7 	bl	800a674 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80056e6:	f104 0008 	add.w	r0, r4, #8
 80056ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 80056ee:	2301      	movs	r3, #1
 80056f0:	7123      	strb	r3, [r4, #4]
 80056f2:	e7c7      	b.n	8005684 <mem_malloc+0x84>
            cur = (struct mem *)(void *)&ram[cur->next];
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	4433      	add	r3, r6
 80056f8:	e7ca      	b.n	8005690 <mem_malloc+0x90>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80056fa:	4673      	mov	r3, lr
 80056fc:	e79a      	b.n	8005634 <mem_malloc+0x34>
 80056fe:	bf00      	nop
 8005700:	200022d8 	.word	0x200022d8
 8005704:	200022dc 	.word	0x200022dc
 8005708:	200022e0 	.word	0x200022e0
 800570c:	0800c315 	.word	0x0800c315
 8005710:	0800c406 	.word	0x0800c406
 8005714:	0800bb8d 	.word	0x0800bb8d
 8005718:	0800c41f 	.word	0x0800c41f
 800571c:	0800c44f 	.word	0x0800c44f
 8005720:	0800c47e 	.word	0x0800c47e

08005724 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8005724:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005726:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005728:	b154      	cbz	r4, 8005740 <do_memp_malloc_pool.isra.0+0x1c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800572e:	07a3      	lsls	r3, r4, #30
 8005730:	d006      	beq.n	8005740 <do_memp_malloc_pool.isra.0+0x1c>
 8005732:	4b04      	ldr	r3, [pc, #16]	; (8005744 <do_memp_malloc_pool.isra.0+0x20>)
 8005734:	4904      	ldr	r1, [pc, #16]	; (8005748 <do_memp_malloc_pool.isra.0+0x24>)
 8005736:	4805      	ldr	r0, [pc, #20]	; (800574c <do_memp_malloc_pool.isra.0+0x28>)
 8005738:	f240 1249 	movw	r2, #329	; 0x149
 800573c:	f004 ff9a 	bl	800a674 <iprintf>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 8005740:	4620      	mov	r0, r4
 8005742:	bd10      	pop	{r4, pc}
 8005744:	0800c4f8 	.word	0x0800c4f8
 8005748:	0800c528 	.word	0x0800c528
 800574c:	0800bb8d 	.word	0x0800bb8d

08005750 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8005750:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005752:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8005754:	4605      	mov	r5, r0
 8005756:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8005758:	d006      	beq.n	8005768 <do_memp_free_pool.isra.1+0x18>
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <do_memp_free_pool.isra.1+0x24>)
 800575c:	4906      	ldr	r1, [pc, #24]	; (8005778 <do_memp_free_pool.isra.1+0x28>)
 800575e:	4807      	ldr	r0, [pc, #28]	; (800577c <do_memp_free_pool.isra.1+0x2c>)
 8005760:	f240 129d 	movw	r2, #413	; 0x19d
 8005764:	f004 ff86 	bl	800a674 <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800576e:	601c      	str	r4, [r3, #0]
 8005770:	bd38      	pop	{r3, r4, r5, pc}
 8005772:	bf00      	nop
 8005774:	0800c4f8 	.word	0x0800c4f8
 8005778:	0800c4d8 	.word	0x0800c4d8
 800577c:	0800bb8d 	.word	0x0800bb8d

08005780 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005780:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8005782:	6881      	ldr	r1, [r0, #8]
{
 8005784:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 8005786:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005788:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 800578a:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800578c:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800578e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8005792:	42a2      	cmp	r2, r4
 8005794:	db00      	blt.n	8005798 <memp_init_pool+0x18>
}
 8005796:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8005798:	680d      	ldr	r5, [r1, #0]
 800579a:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800579c:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800579e:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 80057a0:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80057a2:	442b      	add	r3, r5
 80057a4:	e7f5      	b.n	8005792 <memp_init_pool+0x12>
	...

080057a8 <memp_init>:
{
 80057a8:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 80057aa:	4d05      	ldr	r5, [pc, #20]	; (80057c0 <memp_init+0x18>)
{
 80057ac:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 80057ae:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80057b2:	3401      	adds	r4, #1
 80057b4:	f7ff ffe4 	bl	8005780 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80057b8:	2c09      	cmp	r4, #9
 80057ba:	d1f8      	bne.n	80057ae <memp_init+0x6>
}
 80057bc:	bd38      	pop	{r3, r4, r5, pc}
 80057be:	bf00      	nop
 80057c0:	0800c5f0 	.word	0x0800c5f0

080057c4 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80057c4:	2808      	cmp	r0, #8
{
 80057c6:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80057c8:	d807      	bhi.n	80057da <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 80057ca:	4b08      	ldr	r3, [pc, #32]	; (80057ec <memp_malloc+0x28>)
 80057cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80057d0:	6898      	ldr	r0, [r3, #8]
}
 80057d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80057d6:	f7ff bfa5 	b.w	8005724 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <memp_malloc+0x2c>)
 80057dc:	4905      	ldr	r1, [pc, #20]	; (80057f4 <memp_malloc+0x30>)
 80057de:	4806      	ldr	r0, [pc, #24]	; (80057f8 <memp_malloc+0x34>)
 80057e0:	f240 1287 	movw	r2, #391	; 0x187
 80057e4:	f004 ff46 	bl	800a674 <iprintf>
}
 80057e8:	2000      	movs	r0, #0
 80057ea:	bd08      	pop	{r3, pc}
 80057ec:	0800c5f0 	.word	0x0800c5f0
 80057f0:	0800c4f8 	.word	0x0800c4f8
 80057f4:	0800c5d3 	.word	0x0800c5d3
 80057f8:	0800bb8d 	.word	0x0800bb8d

080057fc <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80057fc:	2808      	cmp	r0, #8
 80057fe:	d906      	bls.n	800580e <memp_free+0x12>
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <memp_free+0x24>)
 8005802:	4908      	ldr	r1, [pc, #32]	; (8005824 <memp_free+0x28>)
 8005804:	4808      	ldr	r0, [pc, #32]	; (8005828 <memp_free+0x2c>)
 8005806:	f240 12db 	movw	r2, #475	; 0x1db
 800580a:	f004 bf33 	b.w	800a674 <iprintf>

  if (mem == NULL) {
 800580e:	b129      	cbz	r1, 800581c <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005810:	4b06      	ldr	r3, [pc, #24]	; (800582c <memp_free+0x30>)
 8005812:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005816:	3008      	adds	r0, #8
 8005818:	f7ff bf9a 	b.w	8005750 <do_memp_free_pool.isra.1>
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	0800c4f8 	.word	0x0800c4f8
 8005824:	0800c5b8 	.word	0x0800c5b8
 8005828:	0800bb8d 	.word	0x0800bb8d
 800582c:	0800c5f0 	.word	0x0800c5f0

08005830 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005830:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8005834:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 8005836:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005838:	d502      	bpl.n	8005840 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 800583a:	3104      	adds	r1, #4
 800583c:	f7fe bdb2 	b.w	80043a4 <etharp_request>
 8005840:	4770      	bx	lr

08005842 <netif_init>:
{
 8005842:	4770      	bx	lr

08005844 <netif_set_ipaddr>:
{
 8005844:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005846:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005848:	460c      	mov	r4, r1
 800584a:	b1b9      	cbz	r1, 800587c <netif_set_ipaddr+0x38>
 800584c:	680b      	ldr	r3, [r1, #0]
 800584e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8005850:	9a01      	ldr	r2, [sp, #4]
 8005852:	686b      	ldr	r3, [r5, #4]
 8005854:	429a      	cmp	r2, r3
 8005856:	d00f      	beq.n	8005878 <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005858:	1d2e      	adds	r6, r5, #4
 800585a:	a901      	add	r1, sp, #4
 800585c:	4630      	mov	r0, r6
 800585e:	f001 fb09 	bl	8006e74 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005862:	a901      	add	r1, sp, #4
 8005864:	4630      	mov	r0, r6
 8005866:	f003 fe61 	bl	800952c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800586a:	b104      	cbz	r4, 800586e <netif_set_ipaddr+0x2a>
 800586c:	6824      	ldr	r4, [r4, #0]
 800586e:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005870:	b114      	cbz	r4, 8005878 <netif_set_ipaddr+0x34>
 8005872:	4628      	mov	r0, r5
 8005874:	f7ff ffdc 	bl	8005830 <netif_issue_reports.part.0>
}
 8005878:	b002      	add	sp, #8
 800587a:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800587c:	4b01      	ldr	r3, [pc, #4]	; (8005884 <netif_set_ipaddr+0x40>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	e7e5      	b.n	800584e <netif_set_ipaddr+0xa>
 8005882:	bf00      	nop
 8005884:	0800c178 	.word	0x0800c178

08005888 <netif_set_addr>:
{
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	4606      	mov	r6, r0
 800588c:	4615      	mov	r5, r2
 800588e:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8005890:	b109      	cbz	r1, 8005896 <netif_set_addr+0xe>
 8005892:	680b      	ldr	r3, [r1, #0]
 8005894:	b94b      	cbnz	r3, 80058aa <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8005896:	4630      	mov	r0, r6
 8005898:	f7ff ffd4 	bl	8005844 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800589c:	b105      	cbz	r5, 80058a0 <netif_set_addr+0x18>
 800589e:	682d      	ldr	r5, [r5, #0]
 80058a0:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80058a2:	b104      	cbz	r4, 80058a6 <netif_set_addr+0x1e>
 80058a4:	6824      	ldr	r4, [r4, #0]
 80058a6:	60f4      	str	r4, [r6, #12]
 80058a8:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80058aa:	b102      	cbz	r2, 80058ae <netif_set_addr+0x26>
 80058ac:	6815      	ldr	r5, [r2, #0]
 80058ae:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80058b0:	b104      	cbz	r4, 80058b4 <netif_set_addr+0x2c>
 80058b2:	6824      	ldr	r4, [r4, #0]
 80058b4:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 80058b6:	4630      	mov	r0, r6
}
 80058b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 80058bc:	f7ff bfc2 	b.w	8005844 <netif_set_ipaddr>

080058c0 <netif_add>:
{
 80058c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80058c6:	4604      	mov	r4, r0
 80058c8:	460f      	mov	r7, r1
 80058ca:	4690      	mov	r8, r2
 80058cc:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 80058ce:	b92e      	cbnz	r6, 80058dc <netif_add+0x1c>
 80058d0:	4b15      	ldr	r3, [pc, #84]	; (8005928 <netif_add+0x68>)
 80058d2:	4916      	ldr	r1, [pc, #88]	; (800592c <netif_add+0x6c>)
 80058d4:	4816      	ldr	r0, [pc, #88]	; (8005930 <netif_add+0x70>)
 80058d6:	22fb      	movs	r2, #251	; 0xfb
 80058d8:	f004 fecc 	bl	800a674 <iprintf>
  netif->num = netif_num++;
 80058dc:	4a15      	ldr	r2, [pc, #84]	; (8005934 <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80058de:	2303      	movs	r3, #3
 80058e0:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80058e4:	9b08      	ldr	r3, [sp, #32]
 80058e6:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80058e8:	7813      	ldrb	r3, [r2, #0]
 80058ea:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80058ee:	2500      	movs	r5, #0
  netif->num = netif_num++;
 80058f0:	1c59      	adds	r1, r3, #1
  netif->input = input;
 80058f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 80058f4:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 80058f6:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80058f8:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80058fa:	6065      	str	r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80058fc:	60a5      	str	r5, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80058fe:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 8005900:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005904:	464b      	mov	r3, r9
 8005906:	4642      	mov	r2, r8
 8005908:	4639      	mov	r1, r7
 800590a:	f7ff ffbd 	bl	8005888 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800590e:	4620      	mov	r0, r4
 8005910:	47b0      	blx	r6
 8005912:	b930      	cbnz	r0, 8005922 <netif_add+0x62>
  netif->next = netif_list;
 8005914:	4b08      	ldr	r3, [pc, #32]	; (8005938 <netif_add+0x78>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 800591a:	601c      	str	r4, [r3, #0]
}
 800591c:	4620      	mov	r0, r4
 800591e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8005922:	462c      	mov	r4, r5
 8005924:	e7fa      	b.n	800591c <netif_add+0x5c>
 8005926:	bf00      	nop
 8005928:	0800c614 	.word	0x0800c614
 800592c:	0800c645 	.word	0x0800c645
 8005930:	0800bb8d 	.word	0x0800bb8d
 8005934:	20002308 	.word	0x20002308
 8005938:	20005880 	.word	0x20005880

0800593c <netif_set_default>:
  netif_default = netif;
 800593c:	4b01      	ldr	r3, [pc, #4]	; (8005944 <netif_set_default+0x8>)
 800593e:	6018      	str	r0, [r3, #0]
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20005884 	.word	0x20005884

08005948 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005948:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 800594c:	07d1      	lsls	r1, r2, #31
 800594e:	d409      	bmi.n	8005964 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8005950:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005954:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8005956:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800595a:	d503      	bpl.n	8005964 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800595c:	6843      	ldr	r3, [r0, #4]
 800595e:	b10b      	cbz	r3, 8005964 <netif_set_up+0x1c>
 8005960:	f7ff bf66 	b.w	8005830 <netif_issue_reports.part.0>
 8005964:	4770      	bx	lr

08005966 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8005966:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800596a:	07d9      	lsls	r1, r3, #31
 800596c:	d507      	bpl.n	800597e <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 800596e:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005972:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8005974:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005978:	d501      	bpl.n	800597e <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 800597a:	f7fe bc61 	b.w	8004240 <etharp_cleanup_netif>
 800597e:	4770      	bx	lr

08005980 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005980:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005982:	4604      	mov	r4, r0
 8005984:	2800      	cmp	r0, #0
 8005986:	d12f      	bne.n	80059e8 <pbuf_header_impl+0x68>
 8005988:	4b1f      	ldr	r3, [pc, #124]	; (8005a08 <pbuf_header_impl+0x88>)
 800598a:	4920      	ldr	r1, [pc, #128]	; (8005a0c <pbuf_header_impl+0x8c>)
 800598c:	4820      	ldr	r0, [pc, #128]	; (8005a10 <pbuf_header_impl+0x90>)
 800598e:	f240 223f 	movw	r2, #575	; 0x23f
 8005992:	f004 fe6f 	bl	800a674 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8005996:	2000      	movs	r0, #0
 8005998:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 800599a:	b288      	uxth	r0, r1
  type = p->type;
 800599c:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 800599e:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80059a0:	b10d      	cbz	r5, 80059a6 <pbuf_header_impl+0x26>
 80059a2:	2d03      	cmp	r5, #3
 80059a4:	d106      	bne.n	80059b4 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 80059a6:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80059a8:	f104 0210 	add.w	r2, r4, #16
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d20a      	bcs.n	80059c6 <pbuf_header_impl+0x46>
      return 1;
 80059b0:	2001      	movs	r0, #1
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80059b4:	3d01      	subs	r5, #1
 80059b6:	2d01      	cmp	r5, #1
 80059b8:	d811      	bhi.n	80059de <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80059ba:	2900      	cmp	r1, #0
 80059bc:	da0c      	bge.n	80059d8 <pbuf_header_impl+0x58>
 80059be:	8962      	ldrh	r2, [r4, #10]
 80059c0:	4282      	cmp	r2, r0
 80059c2:	d3f5      	bcc.n	80059b0 <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80059c4:	1a5b      	subs	r3, r3, r1
  p->tot_len += header_size_increment;
 80059c6:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 80059c8:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 80059ca:	8963      	ldrh	r3, [r4, #10]
 80059cc:	b289      	uxth	r1, r1
 80059ce:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 80059d0:	4401      	add	r1, r0
  p->len += header_size_increment;
 80059d2:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 80059d4:	8121      	strh	r1, [r4, #8]
 80059d6:	e7de      	b.n	8005996 <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 80059d8:	2a00      	cmp	r2, #0
 80059da:	d1f3      	bne.n	80059c4 <pbuf_header_impl+0x44>
 80059dc:	e7e8      	b.n	80059b0 <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 80059de:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <pbuf_header_impl+0x88>)
 80059e0:	490c      	ldr	r1, [pc, #48]	; (8005a14 <pbuf_header_impl+0x94>)
 80059e2:	f240 2277 	movw	r2, #631	; 0x277
 80059e6:	e00b      	b.n	8005a00 <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 80059e8:	2900      	cmp	r1, #0
 80059ea:	d0d4      	beq.n	8005996 <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 80059ec:	dad5      	bge.n	800599a <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 80059ee:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80059f0:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 80059f2:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80059f4:	4283      	cmp	r3, r0
 80059f6:	d2d1      	bcs.n	800599c <pbuf_header_impl+0x1c>
 80059f8:	4b03      	ldr	r3, [pc, #12]	; (8005a08 <pbuf_header_impl+0x88>)
 80059fa:	4907      	ldr	r1, [pc, #28]	; (8005a18 <pbuf_header_impl+0x98>)
 80059fc:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 8005a00:	4803      	ldr	r0, [pc, #12]	; (8005a10 <pbuf_header_impl+0x90>)
 8005a02:	f004 fe37 	bl	800a674 <iprintf>
 8005a06:	e7d3      	b.n	80059b0 <pbuf_header_impl+0x30>
 8005a08:	0800c8c1 	.word	0x0800c8c1
 8005a0c:	0800c92b 	.word	0x0800c92b
 8005a10:	0800bb8d 	.word	0x0800bb8d
 8005a14:	0800c90f 	.word	0x0800c90f
 8005a18:	0800c8f1 	.word	0x0800c8f1

08005a1c <pbuf_free_ooseq>:
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005a1c:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <pbuf_free_ooseq+0x24>)
 8005a1e:	2200      	movs	r2, #0
{
 8005a20:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005a22:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a24:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <pbuf_free_ooseq+0x28>)
 8005a26:	681c      	ldr	r4, [r3, #0]
 8005a28:	b904      	cbnz	r4, 8005a2c <pbuf_free_ooseq+0x10>
 8005a2a:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 8005a2c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005a2e:	b120      	cbz	r0, 8005a3a <pbuf_free_ooseq+0x1e>
      tcp_segs_free(pcb->ooseq);
 8005a30:	f000 fc98 	bl	8006364 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 8005a38:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a3a:	68e4      	ldr	r4, [r4, #12]
 8005a3c:	e7f4      	b.n	8005a28 <pbuf_free_ooseq+0xc>
 8005a3e:	bf00      	nop
 8005a40:	20005888 	.word	0x20005888
 8005a44:	20005890 	.word	0x20005890

08005a48 <pbuf_alloced_custom>:
{
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8005a4c:	2804      	cmp	r0, #4
 8005a4e:	d81e      	bhi.n	8005a8e <pbuf_alloced_custom+0x46>
 8005a50:	e8df f000 	tbb	[pc, r0]
 8005a54:	1b280326 	.word	0x1b280326
 8005a58:	1b          	.byte	0x1b
 8005a59:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005a5a:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005a5c:	3403      	adds	r4, #3
 8005a5e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8005a62:	f024 0403 	bic.w	r4, r4, #3
 8005a66:	190e      	adds	r6, r1, r4
 8005a68:	4286      	cmp	r6, r0
 8005a6a:	f04f 0000 	mov.w	r0, #0
 8005a6e:	d80b      	bhi.n	8005a88 <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 8005a70:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8005a72:	b1cd      	cbz	r5, 8005aa8 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005a74:	442c      	add	r4, r5
 8005a76:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005a78:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8005a7a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005a7c:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005a7e:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8005a80:	8119      	strh	r1, [r3, #8]
 8005a82:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8005a84:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8005a86:	4618      	mov	r0, r3
}
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 8005a8a:	2400      	movs	r4, #0
    break;
 8005a8c:	e7e6      	b.n	8005a5c <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8005a8e:	4b07      	ldr	r3, [pc, #28]	; (8005aac <pbuf_alloced_custom+0x64>)
 8005a90:	4907      	ldr	r1, [pc, #28]	; (8005ab0 <pbuf_alloced_custom+0x68>)
 8005a92:	4808      	ldr	r0, [pc, #32]	; (8005ab4 <pbuf_alloced_custom+0x6c>)
 8005a94:	f240 12c5 	movw	r2, #453	; 0x1c5
 8005a98:	f004 fdec 	bl	800a674 <iprintf>
    return NULL;
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005aa0:	2436      	movs	r4, #54	; 0x36
 8005aa2:	e7db      	b.n	8005a5c <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005aa4:	240e      	movs	r4, #14
 8005aa6:	e7d9      	b.n	8005a5c <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8005aa8:	605d      	str	r5, [r3, #4]
 8005aaa:	e7e5      	b.n	8005a78 <pbuf_alloced_custom+0x30>
 8005aac:	0800c8c1 	.word	0x0800c8c1
 8005ab0:	0800c704 	.word	0x0800c704
 8005ab4:	0800bb8d 	.word	0x0800bb8d

08005ab8 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f7ff bf61 	b.w	8005980 <pbuf_header_impl>

08005abe <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f7ff bf5e 	b.w	8005980 <pbuf_header_impl>

08005ac4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005ac8:	4604      	mov	r4, r0
 8005aca:	b950      	cbnz	r0, 8005ae2 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005acc:	4b28      	ldr	r3, [pc, #160]	; (8005b70 <pbuf_free+0xac>)
 8005ace:	4929      	ldr	r1, [pc, #164]	; (8005b74 <pbuf_free+0xb0>)
 8005ad0:	4829      	ldr	r0, [pc, #164]	; (8005b78 <pbuf_free+0xb4>)
 8005ad2:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005ad6:	f004 fdcd 	bl	800a674 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005ada:	4626      	mov	r6, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8005adc:	4630      	mov	r0, r6
 8005ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8005ae2:	7b03      	ldrb	r3, [r0, #12]
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d906      	bls.n	8005af6 <pbuf_free+0x32>
 8005ae8:	4b21      	ldr	r3, [pc, #132]	; (8005b70 <pbuf_free+0xac>)
 8005aea:	4924      	ldr	r1, [pc, #144]	; (8005b7c <pbuf_free+0xb8>)
 8005aec:	4822      	ldr	r0, [pc, #136]	; (8005b78 <pbuf_free+0xb4>)
 8005aee:	f240 22de 	movw	r2, #734	; 0x2de
 8005af2:	f004 fdbf 	bl	800a674 <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005af6:	4f1e      	ldr	r7, [pc, #120]	; (8005b70 <pbuf_free+0xac>)
 8005af8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005b84 <pbuf_free+0xc0>
 8005afc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8005b78 <pbuf_free+0xb4>
{
 8005b00:	2500      	movs	r5, #0
 8005b02:	b2ee      	uxtb	r6, r5
  while (p != NULL) {
 8005b04:	2c00      	cmp	r4, #0
 8005b06:	d0e9      	beq.n	8005adc <pbuf_free+0x18>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005b08:	89e3      	ldrh	r3, [r4, #14]
 8005b0a:	b933      	cbnz	r3, 8005b1a <pbuf_free+0x56>
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	f240 22eb 	movw	r2, #747	; 0x2eb
 8005b12:	4649      	mov	r1, r9
 8005b14:	4640      	mov	r0, r8
 8005b16:	f004 fdad 	bl	800a674 <iprintf>
    ref = --(p->ref);
 8005b1a:	89e3      	ldrh	r3, [r4, #14]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1da      	bne.n	8005adc <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005b26:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8005b28:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005b2a:	079b      	lsls	r3, r3, #30
 8005b2c:	d50e      	bpl.n	8005b4c <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	b933      	cbnz	r3, 8005b40 <pbuf_free+0x7c>
 8005b32:	463b      	mov	r3, r7
 8005b34:	f240 22f9 	movw	r2, #761	; 0x2f9
 8005b38:	4911      	ldr	r1, [pc, #68]	; (8005b80 <pbuf_free+0xbc>)
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	f004 fd9a 	bl	800a674 <iprintf>
        pc->custom_free_function(p);
 8005b40:	6923      	ldr	r3, [r4, #16]
 8005b42:	4620      	mov	r0, r4
 8005b44:	4798      	blx	r3
 8005b46:	3501      	adds	r5, #1
      p = q;
 8005b48:	4634      	mov	r4, r6
 8005b4a:	e7da      	b.n	8005b02 <pbuf_free+0x3e>
      type = p->type;
 8005b4c:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d104      	bne.n	8005b5c <pbuf_free+0x98>
          memp_free(MEMP_PBUF_POOL, p);
 8005b52:	4621      	mov	r1, r4
 8005b54:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 8005b56:	f7ff fe51 	bl	80057fc <memp_free>
 8005b5a:	e7f4      	b.n	8005b46 <pbuf_free+0x82>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d802      	bhi.n	8005b68 <pbuf_free+0xa4>
          memp_free(MEMP_PBUF, p);
 8005b62:	4621      	mov	r1, r4
 8005b64:	2007      	movs	r0, #7
 8005b66:	e7f6      	b.n	8005b56 <pbuf_free+0x92>
          mem_free(p);
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f7ff fc29 	bl	80053c0 <mem_free>
 8005b6e:	e7ea      	b.n	8005b46 <pbuf_free+0x82>
 8005b70:	0800c8c1 	.word	0x0800c8c1
 8005b74:	0800c92b 	.word	0x0800c92b
 8005b78:	0800bb8d 	.word	0x0800bb8d
 8005b7c:	0800c875 	.word	0x0800c875
 8005b80:	0800c8a0 	.word	0x0800c8a0
 8005b84:	0800c88a 	.word	0x0800c88a

08005b88 <pbuf_alloc>:
{
 8005b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8c:	460e      	mov	r6, r1
 8005b8e:	4617      	mov	r7, r2
  switch (layer) {
 8005b90:	2804      	cmp	r0, #4
 8005b92:	d80e      	bhi.n	8005bb2 <pbuf_alloc+0x2a>
 8005b94:	e8df f000 	tbb	[pc, r0]
 8005b98:	0b170315 	.word	0x0b170315
 8005b9c:	0b          	.byte	0x0b
 8005b9d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005b9e:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8005ba0:	2f03      	cmp	r7, #3
 8005ba2:	f200 80bc 	bhi.w	8005d1e <pbuf_alloc+0x196>
 8005ba6:	e8df f007 	tbb	[pc, r7]
 8005baa:	ad92      	.short	0xad92
 8005bac:	10ad      	.short	0x10ad
    offset = 0;
 8005bae:	2500      	movs	r5, #0
    break;
 8005bb0:	e7f6      	b.n	8005ba0 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8005bb2:	4b5d      	ldr	r3, [pc, #372]	; (8005d28 <pbuf_alloc+0x1a0>)
 8005bb4:	495d      	ldr	r1, [pc, #372]	; (8005d2c <pbuf_alloc+0x1a4>)
 8005bb6:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005bba:	485d      	ldr	r0, [pc, #372]	; (8005d30 <pbuf_alloc+0x1a8>)
 8005bbc:	f004 fd5a 	bl	800a674 <iprintf>
 8005bc0:	e04b      	b.n	8005c5a <pbuf_alloc+0xd2>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005bc2:	2536      	movs	r5, #54	; 0x36
 8005bc4:	e7ec      	b.n	8005ba0 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005bc6:	250e      	movs	r5, #14
 8005bc8:	e7ea      	b.n	8005ba0 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005bca:	2008      	movs	r0, #8
 8005bcc:	f7ff fdfa 	bl	80057c4 <memp_malloc>
    if (p == NULL) {
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	b928      	cbnz	r0, 8005be0 <pbuf_alloc+0x58>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005bd4:	4b57      	ldr	r3, [pc, #348]	; (8005d34 <pbuf_alloc+0x1ac>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	701a      	strb	r2, [r3, #0]
}
 8005bda:	4620      	mov	r0, r4
 8005bdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 8005be0:	2303      	movs	r3, #3
 8005be2:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005be8:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005bea:	3503      	adds	r5, #3
 8005bec:	f025 0503 	bic.w	r5, r5, #3
 8005bf0:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 8005bf4:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005bf6:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005bfa:	bf28      	it	cs
 8005bfc:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005bfe:	f023 0303 	bic.w	r3, r3, #3
 8005c02:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005c04:	f500 7718 	add.w	r7, r0, #608	; 0x260
 8005c08:	442b      	add	r3, r5
 8005c0a:	429f      	cmp	r7, r3
    p->tot_len = length;
 8005c0c:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005c0e:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005c10:	d206      	bcs.n	8005c20 <pbuf_alloc+0x98>
 8005c12:	4b45      	ldr	r3, [pc, #276]	; (8005d28 <pbuf_alloc+0x1a0>)
 8005c14:	4948      	ldr	r1, [pc, #288]	; (8005d38 <pbuf_alloc+0x1b0>)
 8005c16:	4846      	ldr	r0, [pc, #280]	; (8005d30 <pbuf_alloc+0x1a8>)
 8005c18:	f44f 7298 	mov.w	r2, #304	; 0x130
 8005c1c:	f004 fd2a 	bl	800a674 <iprintf>
    p->ref = 1;
 8005c20:	2301      	movs	r3, #1
 8005c22:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8005c24:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005c26:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8005d28 <pbuf_alloc+0x1a0>
 8005c2a:	f8df a118 	ldr.w	sl, [pc, #280]	; 8005d44 <pbuf_alloc+0x1bc>
 8005c2e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005d30 <pbuf_alloc+0x1a8>
    rem_len = length - p->len;
 8005c32:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 8005c34:	46a3      	mov	fp, r4
 8005c36:	2e00      	cmp	r6, #0
 8005c38:	dc04      	bgt.n	8005c44 <pbuf_alloc+0xbc>
  p->ref = 1;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	7363      	strb	r3, [r4, #13]
  return p;
 8005c42:	e7ca      	b.n	8005bda <pbuf_alloc+0x52>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005c44:	2008      	movs	r0, #8
 8005c46:	f7ff fdbd 	bl	80057c4 <memp_malloc>
      if (q == NULL) {
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	b938      	cbnz	r0, 8005c5e <pbuf_alloc+0xd6>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005c4e:	4b39      	ldr	r3, [pc, #228]	; (8005d34 <pbuf_alloc+0x1ac>)
 8005c50:	2201      	movs	r2, #1
        pbuf_free(p);
 8005c52:	4620      	mov	r0, r4
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005c54:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 8005c56:	f7ff ff35 	bl	8005ac4 <pbuf_free>
    return NULL;
 8005c5a:	2400      	movs	r4, #0
 8005c5c:	e7bd      	b.n	8005bda <pbuf_alloc+0x52>
      q->type = type;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	7303      	strb	r3, [r0, #12]
      q->flags = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8005c66:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c6c:	429e      	cmp	r6, r3
      r->next = q;
 8005c6e:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005c72:	d106      	bne.n	8005c82 <pbuf_alloc+0xfa>
 8005c74:	4643      	mov	r3, r8
 8005c76:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8005c7a:	4651      	mov	r1, sl
 8005c7c:	4648      	mov	r0, r9
 8005c7e:	f004 fcf9 	bl	800a674 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8005c82:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8005c84:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 8005c88:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8005c8a:	bf28      	it	cs
 8005c8c:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8005c90:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8005c92:	f105 0310 	add.w	r3, r5, #16
 8005c96:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005c98:	079b      	lsls	r3, r3, #30
 8005c9a:	d006      	beq.n	8005caa <pbuf_alloc+0x122>
 8005c9c:	4643      	mov	r3, r8
 8005c9e:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8005ca2:	4926      	ldr	r1, [pc, #152]	; (8005d3c <pbuf_alloc+0x1b4>)
 8005ca4:	4648      	mov	r0, r9
 8005ca6:	f004 fce5 	bl	800a674 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005caa:	8962      	ldrh	r2, [r4, #10]
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	4413      	add	r3, r2
 8005cb0:	429f      	cmp	r7, r3
 8005cb2:	d206      	bcs.n	8005cc2 <pbuf_alloc+0x13a>
 8005cb4:	4643      	mov	r3, r8
 8005cb6:	f240 1255 	movw	r2, #341	; 0x155
 8005cba:	491f      	ldr	r1, [pc, #124]	; (8005d38 <pbuf_alloc+0x1b0>)
 8005cbc:	4648      	mov	r0, r9
 8005cbe:	f004 fcd9 	bl	800a674 <iprintf>
      q->ref = 1;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 8005cc6:	896b      	ldrh	r3, [r5, #10]
 8005cc8:	46ab      	mov	fp, r5
 8005cca:	1af6      	subs	r6, r6, r3
 8005ccc:	e7b3      	b.n	8005c36 <pbuf_alloc+0xae>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8005cce:	f105 0013 	add.w	r0, r5, #19
 8005cd2:	1cf3      	adds	r3, r6, #3
 8005cd4:	f023 0303 	bic.w	r3, r3, #3
 8005cd8:	f020 0003 	bic.w	r0, r0, #3
 8005cdc:	4418      	add	r0, r3
 8005cde:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8005ce0:	4298      	cmp	r0, r3
 8005ce2:	d3ba      	bcc.n	8005c5a <pbuf_alloc+0xd2>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8005ce4:	f7ff fc8c 	bl	8005600 <mem_malloc>
    if (p == NULL) {
 8005ce8:	4604      	mov	r4, r0
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d0b5      	beq.n	8005c5a <pbuf_alloc+0xd2>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005cee:	4405      	add	r5, r0
 8005cf0:	3513      	adds	r5, #19
    p->next = NULL;
 8005cf2:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005cf4:	f025 0503 	bic.w	r5, r5, #3
 8005cf8:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 8005cfa:	8106      	strh	r6, [r0, #8]
 8005cfc:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8005cfe:	6003      	str	r3, [r0, #0]
    p->type = type;
 8005d00:	7303      	strb	r3, [r0, #12]
 8005d02:	e79a      	b.n	8005c3a <pbuf_alloc+0xb2>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005d04:	2007      	movs	r0, #7
 8005d06:	f7ff fd5d 	bl	80057c4 <memp_malloc>
    if (p == NULL) {
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d0a4      	beq.n	8005c5a <pbuf_alloc+0xd2>
    p->payload = NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8005d14:	8106      	strh	r6, [r0, #8]
 8005d16:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8005d18:	6003      	str	r3, [r0, #0]
    p->type = type;
 8005d1a:	7307      	strb	r7, [r0, #12]
    break;
 8005d1c:	e78d      	b.n	8005c3a <pbuf_alloc+0xb2>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005d1e:	4b02      	ldr	r3, [pc, #8]	; (8005d28 <pbuf_alloc+0x1a0>)
 8005d20:	4907      	ldr	r1, [pc, #28]	; (8005d40 <pbuf_alloc+0x1b8>)
 8005d22:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8005d26:	e748      	b.n	8005bba <pbuf_alloc+0x32>
 8005d28:	0800c8c1 	.word	0x0800c8c1
 8005d2c:	0800c65c 	.word	0x0800c65c
 8005d30:	0800bb8d 	.word	0x0800bb8d
 8005d34:	20005888 	.word	0x20005888
 8005d38:	0800c677 	.word	0x0800c677
 8005d3c:	0800c6bc 	.word	0x0800c6bc
 8005d40:	0800c6e9 	.word	0x0800c6e9
 8005d44:	0800c6a8 	.word	0x0800c6a8

08005d48 <pbuf_realloc>:
{
 8005d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d4c:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005d4e:	4604      	mov	r4, r0
 8005d50:	b930      	cbnz	r0, 8005d60 <pbuf_realloc+0x18>
 8005d52:	4b2e      	ldr	r3, [pc, #184]	; (8005e0c <pbuf_realloc+0xc4>)
 8005d54:	492e      	ldr	r1, [pc, #184]	; (8005e10 <pbuf_realloc+0xc8>)
 8005d56:	482f      	ldr	r0, [pc, #188]	; (8005e14 <pbuf_realloc+0xcc>)
 8005d58:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005d5c:	f004 fc8a 	bl	800a674 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8005d60:	7b23      	ldrb	r3, [r4, #12]
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d906      	bls.n	8005d74 <pbuf_realloc+0x2c>
 8005d66:	4b29      	ldr	r3, [pc, #164]	; (8005e0c <pbuf_realloc+0xc4>)
 8005d68:	492b      	ldr	r1, [pc, #172]	; (8005e18 <pbuf_realloc+0xd0>)
 8005d6a:	482a      	ldr	r0, [pc, #168]	; (8005e14 <pbuf_realloc+0xcc>)
 8005d6c:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005d70:	f004 fc80 	bl	800a674 <iprintf>
  if (new_len >= p->tot_len) {
 8005d74:	8926      	ldrh	r6, [r4, #8]
 8005d76:	42ae      	cmp	r6, r5
 8005d78:	d945      	bls.n	8005e06 <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005d7a:	4f24      	ldr	r7, [pc, #144]	; (8005e0c <pbuf_realloc+0xc4>)
 8005d7c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8005e24 <pbuf_realloc+0xdc>
 8005d80:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8005e14 <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 8005d84:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 8005d86:	8963      	ldrh	r3, [r4, #10]
 8005d88:	429d      	cmp	r5, r3
 8005d8a:	d819      	bhi.n	8005dc0 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8005d8c:	7b22      	ldrb	r2, [r4, #12]
 8005d8e:	2a00      	cmp	r2, #0
 8005d90:	d131      	bne.n	8005df6 <pbuf_realloc+0xae>
 8005d92:	429d      	cmp	r5, r3
 8005d94:	d02f      	beq.n	8005df6 <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005d96:	7b63      	ldrb	r3, [r4, #13]
 8005d98:	079b      	lsls	r3, r3, #30
 8005d9a:	d42c      	bmi.n	8005df6 <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8005d9c:	6861      	ldr	r1, [r4, #4]
 8005d9e:	1b09      	subs	r1, r1, r4
 8005da0:	4429      	add	r1, r5
 8005da2:	4620      	mov	r0, r4
 8005da4:	b289      	uxth	r1, r1
 8005da6:	f7ff fbb3 	bl	8005510 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005daa:	4604      	mov	r4, r0
 8005dac:	bb18      	cbnz	r0, 8005df6 <pbuf_realloc+0xae>
 8005dae:	4b17      	ldr	r3, [pc, #92]	; (8005e0c <pbuf_realloc+0xc4>)
 8005db0:	491a      	ldr	r1, [pc, #104]	; (8005e1c <pbuf_realloc+0xd4>)
 8005db2:	4818      	ldr	r0, [pc, #96]	; (8005e14 <pbuf_realloc+0xcc>)
 8005db4:	f240 221d 	movw	r2, #541	; 0x21d
 8005db8:	f004 fc5c 	bl	800a674 <iprintf>
  q->len = rem_len;
 8005dbc:	8164      	strh	r4, [r4, #10]
 8005dbe:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 8005dc0:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005dc2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005dc6:	429e      	cmp	r6, r3
    rem_len -= q->len;
 8005dc8:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005dca:	dd06      	ble.n	8005dda <pbuf_realloc+0x92>
 8005dcc:	463b      	mov	r3, r7
 8005dce:	f240 220b 	movw	r2, #523	; 0x20b
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	f004 fc4d 	bl	800a674 <iprintf>
    q->tot_len += (u16_t)grow;
 8005dda:	8923      	ldrh	r3, [r4, #8]
 8005ddc:	4433      	add	r3, r6
 8005dde:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8005de0:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005de2:	2c00      	cmp	r4, #0
 8005de4:	d1cf      	bne.n	8005d86 <pbuf_realloc+0x3e>
 8005de6:	463b      	mov	r3, r7
 8005de8:	f240 220f 	movw	r2, #527	; 0x20f
 8005dec:	490c      	ldr	r1, [pc, #48]	; (8005e20 <pbuf_realloc+0xd8>)
 8005dee:	4640      	mov	r0, r8
 8005df0:	f004 fc40 	bl	800a674 <iprintf>
 8005df4:	e7c7      	b.n	8005d86 <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 8005df6:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8005df8:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8005dfa:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8005dfc:	b108      	cbz	r0, 8005e02 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 8005dfe:	f7ff fe61 	bl	8005ac4 <pbuf_free>
  q->next = NULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e0a:	bf00      	nop
 8005e0c:	0800c8c1 	.word	0x0800c8c1
 8005e10:	0800c91d 	.word	0x0800c91d
 8005e14:	0800bb8d 	.word	0x0800bb8d
 8005e18:	0800c935 	.word	0x0800c935
 8005e1c:	0800c979 	.word	0x0800c979
 8005e20:	0800c961 	.word	0x0800c961
 8005e24:	0800c950 	.word	0x0800c950

08005e28 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005e28:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	b290      	uxth	r0, r2
 8005e2e:	3201      	adds	r2, #1
 8005e30:	b903      	cbnz	r3, 8005e34 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8005e32:	4770      	bx	lr
    p = p->next;
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	e7f9      	b.n	8005e2c <pbuf_clen+0x4>

08005e38 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8005e38:	b158      	cbz	r0, 8005e52 <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 8005e3a:	89c3      	ldrh	r3, [r0, #14]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005e42:	b933      	cbnz	r3, 8005e52 <pbuf_ref+0x1a>
 8005e44:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <pbuf_ref+0x1c>)
 8005e46:	4904      	ldr	r1, [pc, #16]	; (8005e58 <pbuf_ref+0x20>)
 8005e48:	4804      	ldr	r0, [pc, #16]	; (8005e5c <pbuf_ref+0x24>)
 8005e4a:	f240 3239 	movw	r2, #825	; 0x339
 8005e4e:	f004 bc11 	b.w	800a674 <iprintf>
 8005e52:	4770      	bx	lr
 8005e54:	0800c8c1 	.word	0x0800c8c1
 8005e58:	0800c995 	.word	0x0800c995
 8005e5c:	0800bb8d 	.word	0x0800bb8d

08005e60 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005e64:	4604      	mov	r4, r0
 8005e66:	b100      	cbz	r0, 8005e6a <pbuf_cat+0xa>
 8005e68:	b969      	cbnz	r1, 8005e86 <pbuf_cat+0x26>
 8005e6a:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <pbuf_cat+0x60>)
 8005e6c:	4915      	ldr	r1, [pc, #84]	; (8005ec4 <pbuf_cat+0x64>)
 8005e6e:	4816      	ldr	r0, [pc, #88]	; (8005ec8 <pbuf_cat+0x68>)
 8005e70:	f240 324d 	movw	r2, #845	; 0x34d
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005e78:	f004 bbfc 	b.w	800a674 <iprintf>
    p->tot_len += t->tot_len;
 8005e7c:	8923      	ldrh	r3, [r4, #8]
 8005e7e:	8929      	ldrh	r1, [r5, #8]
 8005e80:	440b      	add	r3, r1
 8005e82:	8123      	strh	r3, [r4, #8]
 8005e84:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8005e86:	6822      	ldr	r2, [r4, #0]
 8005e88:	2a00      	cmp	r2, #0
 8005e8a:	d1f7      	bne.n	8005e7c <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005e8c:	8922      	ldrh	r2, [r4, #8]
 8005e8e:	8963      	ldrh	r3, [r4, #10]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d006      	beq.n	8005ea2 <pbuf_cat+0x42>
 8005e94:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <pbuf_cat+0x60>)
 8005e96:	490d      	ldr	r1, [pc, #52]	; (8005ecc <pbuf_cat+0x6c>)
 8005e98:	480b      	ldr	r0, [pc, #44]	; (8005ec8 <pbuf_cat+0x68>)
 8005e9a:	f240 3255 	movw	r2, #853	; 0x355
 8005e9e:	f004 fbe9 	bl	800a674 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	b133      	cbz	r3, 8005eb4 <pbuf_cat+0x54>
 8005ea6:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <pbuf_cat+0x60>)
 8005ea8:	4909      	ldr	r1, [pc, #36]	; (8005ed0 <pbuf_cat+0x70>)
 8005eaa:	4807      	ldr	r0, [pc, #28]	; (8005ec8 <pbuf_cat+0x68>)
 8005eac:	f240 3256 	movw	r2, #854	; 0x356
 8005eb0:	f004 fbe0 	bl	800a674 <iprintf>
  p->tot_len += t->tot_len;
 8005eb4:	892a      	ldrh	r2, [r5, #8]
 8005eb6:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8005eb8:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 8005eba:	4413      	add	r3, r2
 8005ebc:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	0800c8c1 	.word	0x0800c8c1
 8005ec4:	0800c728 	.word	0x0800c728
 8005ec8:	0800bb8d 	.word	0x0800bb8d
 8005ecc:	0800c75d 	.word	0x0800c75d
 8005ed0:	0800c78a 	.word	0x0800c78a

08005ed4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed8:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005eda:	4605      	mov	r5, r0
 8005edc:	b120      	cbz	r0, 8005ee8 <pbuf_copy+0x14>
 8005ede:	b119      	cbz	r1, 8005ee8 <pbuf_copy+0x14>
 8005ee0:	8902      	ldrh	r2, [r0, #8]
 8005ee2:	890b      	ldrh	r3, [r1, #8]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d20a      	bcs.n	8005efe <pbuf_copy+0x2a>
 8005ee8:	4b38      	ldr	r3, [pc, #224]	; (8005fcc <pbuf_copy+0xf8>)
 8005eea:	4939      	ldr	r1, [pc, #228]	; (8005fd0 <pbuf_copy+0xfc>)
 8005eec:	f240 32bd 	movw	r2, #957	; 0x3bd
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005ef0:	4838      	ldr	r0, [pc, #224]	; (8005fd4 <pbuf_copy+0x100>)
 8005ef2:	f004 fbbf 	bl	800a674 <iprintf>
 8005ef6:	f06f 000f 	mvn.w	r0, #15
 8005efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005f02:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8005fcc <pbuf_copy+0xf8>
 8005f06:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8005fe4 <pbuf_copy+0x110>
 8005f0a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8005fd4 <pbuf_copy+0x100>
 8005f0e:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005f10:	896e      	ldrh	r6, [r5, #10]
 8005f12:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005f14:	6868      	ldr	r0, [r5, #4]
 8005f16:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005f18:	1bf6      	subs	r6, r6, r7
 8005f1a:	eba3 030b 	sub.w	r3, r3, fp
 8005f1e:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 8005f20:	bfac      	ite	ge
 8005f22:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8005f24:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005f26:	4632      	mov	r2, r6
 8005f28:	4459      	add	r1, fp
 8005f2a:	4438      	add	r0, r7
 8005f2c:	f004 fae3 	bl	800a4f6 <memcpy>
    offset_to += len;
 8005f30:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005f32:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8005f34:	b2bf      	uxth	r7, r7
    offset_from += len;
 8005f36:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005f38:	42bb      	cmp	r3, r7
    offset_from += len;
 8005f3a:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005f3e:	d206      	bcs.n	8005f4e <pbuf_copy+0x7a>
 8005f40:	4643      	mov	r3, r8
 8005f42:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005f46:	4651      	mov	r1, sl
 8005f48:	4648      	mov	r0, r9
 8005f4a:	f004 fb93 	bl	800a674 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005f4e:	8963      	ldrh	r3, [r4, #10]
 8005f50:	455b      	cmp	r3, fp
 8005f52:	d206      	bcs.n	8005f62 <pbuf_copy+0x8e>
 8005f54:	4643      	mov	r3, r8
 8005f56:	f240 32ce 	movw	r2, #974	; 0x3ce
 8005f5a:	491f      	ldr	r1, [pc, #124]	; (8005fd8 <pbuf_copy+0x104>)
 8005f5c:	4648      	mov	r0, r9
 8005f5e:	f004 fb89 	bl	800a674 <iprintf>
    if (offset_from >= p_from->len) {
 8005f62:	8963      	ldrh	r3, [r4, #10]
 8005f64:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 8005f66:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8005f68:	bf9c      	itt	ls
 8005f6a:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8005f6c:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8005f70:	42bb      	cmp	r3, r7
 8005f72:	d11e      	bne.n	8005fb2 <pbuf_copy+0xde>
      p_to = p_to->next;
 8005f74:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005f76:	b9dd      	cbnz	r5, 8005fb0 <pbuf_copy+0xdc>
 8005f78:	b1bc      	cbz	r4, 8005faa <pbuf_copy+0xd6>
 8005f7a:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <pbuf_copy+0xf8>)
 8005f7c:	4917      	ldr	r1, [pc, #92]	; (8005fdc <pbuf_copy+0x108>)
 8005f7e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005f82:	e7b5      	b.n	8005ef0 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005f84:	8962      	ldrh	r2, [r4, #10]
 8005f86:	8923      	ldrh	r3, [r4, #8]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d114      	bne.n	8005fb6 <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	b193      	cbz	r3, 8005fb6 <pbuf_copy+0xe2>
 8005f90:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <pbuf_copy+0xf8>)
 8005f92:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005f96:	4912      	ldr	r1, [pc, #72]	; (8005fe0 <pbuf_copy+0x10c>)
 8005f98:	480e      	ldr	r0, [pc, #56]	; (8005fd4 <pbuf_copy+0x100>)
 8005f9a:	f004 fb6b 	bl	800a674 <iprintf>
 8005f9e:	f06f 0005 	mvn.w	r0, #5
 8005fa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005fa6:	2c00      	cmp	r4, #0
 8005fa8:	d1b2      	bne.n	8005f10 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005faa:	4620      	mov	r0, r4
 8005fac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8005fb0:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005fb2:	2c00      	cmp	r4, #0
 8005fb4:	d1e6      	bne.n	8005f84 <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005fb6:	896a      	ldrh	r2, [r5, #10]
 8005fb8:	892b      	ldrh	r3, [r5, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d1f3      	bne.n	8005fa6 <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005fbe:	682b      	ldr	r3, [r5, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f0      	beq.n	8005fa6 <pbuf_copy+0xd2>
 8005fc4:	4b01      	ldr	r3, [pc, #4]	; (8005fcc <pbuf_copy+0xf8>)
 8005fc6:	f240 32e3 	movw	r2, #995	; 0x3e3
 8005fca:	e7e4      	b.n	8005f96 <pbuf_copy+0xc2>
 8005fcc:	0800c8c1 	.word	0x0800c8c1
 8005fd0:	0800c79a 	.word	0x0800c79a
 8005fd4:	0800bb8d 	.word	0x0800bb8d
 8005fd8:	0800c7e1 	.word	0x0800c7e1
 8005fdc:	0800c7fc 	.word	0x0800c7fc
 8005fe0:	0800c809 	.word	0x0800c809
 8005fe4:	0800c7ca 	.word	0x0800c7ca

08005fe8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fec:	460f      	mov	r7, r1
 8005fee:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005ff0:	4606      	mov	r6, r0
 8005ff2:	b950      	cbnz	r0, 800600a <pbuf_copy_partial+0x22>
 8005ff4:	4b1b      	ldr	r3, [pc, #108]	; (8006064 <pbuf_copy_partial+0x7c>)
 8005ff6:	491c      	ldr	r1, [pc, #112]	; (8006068 <pbuf_copy_partial+0x80>)
 8005ff8:	481c      	ldr	r0, [pc, #112]	; (800606c <pbuf_copy_partial+0x84>)
 8005ffa:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005ffe:	f004 fb39 	bl	800a674 <iprintf>
 8006002:	4635      	mov	r5, r6
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8006004:	4628      	mov	r0, r5
 8006006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800600a:	b169      	cbz	r1, 8006028 <pbuf_copy_partial+0x40>
 800600c:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800600e:	f1b8 0f00 	cmp.w	r8, #0
 8006012:	d0f7      	beq.n	8006004 <pbuf_copy_partial+0x1c>
 8006014:	2e00      	cmp	r6, #0
 8006016:	d0f5      	beq.n	8006004 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8006018:	b17b      	cbz	r3, 800603a <pbuf_copy_partial+0x52>
 800601a:	8971      	ldrh	r1, [r6, #10]
 800601c:	428b      	cmp	r3, r1
 800601e:	d30c      	bcc.n	800603a <pbuf_copy_partial+0x52>
      offset -= p->len;
 8006020:	1a5b      	subs	r3, r3, r1
 8006022:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006024:	6836      	ldr	r6, [r6, #0]
 8006026:	e7f2      	b.n	800600e <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006028:	4b0e      	ldr	r3, [pc, #56]	; (8006064 <pbuf_copy_partial+0x7c>)
 800602a:	4911      	ldr	r1, [pc, #68]	; (8006070 <pbuf_copy_partial+0x88>)
 800602c:	480f      	ldr	r0, [pc, #60]	; (800606c <pbuf_copy_partial+0x84>)
 800602e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006032:	f004 fb1f 	bl	800a674 <iprintf>
 8006036:	463d      	mov	r5, r7
 8006038:	e7e4      	b.n	8006004 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 800603a:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800603c:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 800603e:	1ae4      	subs	r4, r4, r3
 8006040:	b2a4      	uxth	r4, r4
 8006042:	4544      	cmp	r4, r8
 8006044:	bf28      	it	cs
 8006046:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8006048:	4622      	mov	r2, r4
 800604a:	4419      	add	r1, r3
 800604c:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 800604e:	4425      	add	r5, r4
      len -= buf_copy_len;
 8006050:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8006054:	f004 fa4f 	bl	800a4f6 <memcpy>
      copied_total += buf_copy_len;
 8006058:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 800605a:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	e7e0      	b.n	8006024 <pbuf_copy_partial+0x3c>
 8006062:	bf00      	nop
 8006064:	0800c8c1 	.word	0x0800c8c1
 8006068:	0800c833 	.word	0x0800c833
 800606c:	0800bb8d 	.word	0x0800bb8d
 8006070:	0800c852 	.word	0x0800c852

08006074 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006074:	4a11      	ldr	r2, [pc, #68]	; (80060bc <tcp_new_port+0x48>)
 8006076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006078:	8810      	ldrh	r0, [r2, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800607a:	4e11      	ldr	r6, [pc, #68]	; (80060c0 <tcp_new_port+0x4c>)
{
 800607c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8006080:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006084:	42a8      	cmp	r0, r5
 8006086:	bf1a      	itte	ne
 8006088:	3001      	addne	r0, #1
 800608a:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800608c:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 8006090:	2100      	movs	r1, #0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006092:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 8006096:	6824      	ldr	r4, [r4, #0]
 8006098:	b924      	cbnz	r4, 80060a4 <tcp_new_port+0x30>
 800609a:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800609c:	2904      	cmp	r1, #4
 800609e:	d1f8      	bne.n	8006092 <tcp_new_port+0x1e>
 80060a0:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 80060a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 80060a4:	8ae7      	ldrh	r7, [r4, #22]
 80060a6:	4287      	cmp	r7, r0
 80060a8:	d106      	bne.n	80060b8 <tcp_new_port+0x44>
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e8      	bne.n	8006084 <tcp_new_port+0x10>
 80060b2:	8010      	strh	r0, [r2, #0]
          return 0;
 80060b4:	4618      	mov	r0, r3
 80060b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80060b8:	68e4      	ldr	r4, [r4, #12]
 80060ba:	e7ed      	b.n	8006098 <tcp_new_port+0x24>
 80060bc:	20001ba4 	.word	0x20001ba4
 80060c0:	0800cab8 	.word	0x0800cab8

080060c4 <tcp_close_shutdown_fin>:
{
 80060c4:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80060c6:	4604      	mov	r4, r0
 80060c8:	b930      	cbnz	r0, 80060d8 <tcp_close_shutdown_fin+0x14>
 80060ca:	4b13      	ldr	r3, [pc, #76]	; (8006118 <tcp_close_shutdown_fin+0x54>)
 80060cc:	4913      	ldr	r1, [pc, #76]	; (800611c <tcp_close_shutdown_fin+0x58>)
 80060ce:	4814      	ldr	r0, [pc, #80]	; (8006120 <tcp_close_shutdown_fin+0x5c>)
 80060d0:	f240 124d 	movw	r2, #333	; 0x14d
 80060d4:	f004 face 	bl	800a674 <iprintf>
  switch (pcb->state) {
 80060d8:	7d23      	ldrb	r3, [r4, #20]
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d003      	beq.n	80060e6 <tcp_close_shutdown_fin+0x22>
 80060de:	2b07      	cmp	r3, #7
 80060e0:	d00c      	beq.n	80060fc <tcp_close_shutdown_fin+0x38>
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d108      	bne.n	80060f8 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 80060e6:	4620      	mov	r0, r4
 80060e8:	f002 fd7e 	bl	8008be8 <tcp_send_fin>
    if (err == ERR_OK) {
 80060ec:	b988      	cbnz	r0, 8006112 <tcp_close_shutdown_fin+0x4e>
      pcb->state = FIN_WAIT_1;
 80060ee:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 80060f0:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80060f2:	4620      	mov	r0, r4
 80060f4:	f002 fdd0 	bl	8008c98 <tcp_output>
 80060f8:	2000      	movs	r0, #0
 80060fa:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 80060fc:	4620      	mov	r0, r4
 80060fe:	f002 fd73 	bl	8008be8 <tcp_send_fin>
    if (err == ERR_OK) {
 8006102:	b930      	cbnz	r0, 8006112 <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 8006104:	2309      	movs	r3, #9
 8006106:	e7f3      	b.n	80060f0 <tcp_close_shutdown_fin+0x2c>
    pcb->flags |= TF_CLOSEPEND;
 8006108:	7ea3      	ldrb	r3, [r4, #26]
 800610a:	f043 0308 	orr.w	r3, r3, #8
 800610e:	76a3      	strb	r3, [r4, #26]
 8006110:	e7f2      	b.n	80060f8 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	d0f8      	beq.n	8006108 <tcp_close_shutdown_fin+0x44>
}
 8006116:	bd10      	pop	{r4, pc}
 8006118:	0800ca26 	.word	0x0800ca26
 800611c:	0800ca55 	.word	0x0800ca55
 8006120:	0800bb8d 	.word	0x0800bb8d

08006124 <tcp_init>:
{
 8006124:	4770      	bx	lr
	...

08006128 <tcp_bind>:
{
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800612a:	4d1e      	ldr	r5, [pc, #120]	; (80061a4 <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800612c:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800612e:	2900      	cmp	r1, #0
 8006130:	bf18      	it	ne
 8006132:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8006134:	b140      	cbz	r0, 8006148 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006136:	7d03      	ldrb	r3, [r0, #20]
 8006138:	b14b      	cbz	r3, 800614e <tcp_bind+0x26>
 800613a:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <tcp_bind+0x80>)
 800613c:	491b      	ldr	r1, [pc, #108]	; (80061ac <tcp_bind+0x84>)
 800613e:	481c      	ldr	r0, [pc, #112]	; (80061b0 <tcp_bind+0x88>)
 8006140:	f44f 7211 	mov.w	r2, #580	; 0x244
 8006144:	f004 fa96 	bl	800a674 <iprintf>
    return ERR_VAL;
 8006148:	f06f 0005 	mvn.w	r0, #5
}
 800614c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 800614e:	b932      	cbnz	r2, 800615e <tcp_bind+0x36>
    port = tcp_new_port();
 8006150:	f7ff ff90 	bl	8006074 <tcp_new_port>
    if (port == 0) {
 8006154:	4602      	mov	r2, r0
 8006156:	b950      	cbnz	r0, 800616e <tcp_bind+0x46>
      return ERR_BUF;
 8006158:	f06f 0001 	mvn.w	r0, #1
 800615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800615e:	4f15      	ldr	r7, [pc, #84]	; (80061b4 <tcp_bind+0x8c>)
 8006160:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8006164:	6808      	ldr	r0, [r1, #0]
 8006166:	b970      	cbnz	r0, 8006186 <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 8006168:	3301      	adds	r3, #1
 800616a:	2b04      	cmp	r3, #4
 800616c:	d1f8      	bne.n	8006160 <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 800616e:	682b      	ldr	r3, [r5, #0]
 8006170:	b103      	cbz	r3, 8006174 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006172:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006174:	4b10      	ldr	r3, [pc, #64]	; (80061b8 <tcp_bind+0x90>)
  pcb->local_port = port;
 8006176:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	60e2      	str	r2, [r4, #12]
 800617c:	601c      	str	r4, [r3, #0]
 800617e:	f003 f8ab 	bl	80092d8 <tcp_timer_needed>
  return ERR_OK;
 8006182:	2000      	movs	r0, #0
 8006184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 8006186:	8ac1      	ldrh	r1, [r0, #22]
 8006188:	4291      	cmp	r1, r2
 800618a:	d105      	bne.n	8006198 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 800618c:	6806      	ldr	r6, [r0, #0]
 800618e:	b12e      	cbz	r6, 800619c <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 8006190:	6829      	ldr	r1, [r5, #0]
 8006192:	b119      	cbz	r1, 800619c <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006194:	428e      	cmp	r6, r1
 8006196:	d001      	beq.n	800619c <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006198:	68c0      	ldr	r0, [r0, #12]
 800619a:	e7e4      	b.n	8006166 <tcp_bind+0x3e>
              return ERR_USE;
 800619c:	f06f 0007 	mvn.w	r0, #7
 80061a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a2:	bf00      	nop
 80061a4:	0800c178 	.word	0x0800c178
 80061a8:	0800ca26 	.word	0x0800ca26
 80061ac:	0800c9e5 	.word	0x0800c9e5
 80061b0:	0800bb8d 	.word	0x0800bb8d
 80061b4:	0800cab8 	.word	0x0800cab8
 80061b8:	2000589c 	.word	0x2000589c

080061bc <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80061bc:	7d03      	ldrb	r3, [r0, #20]
{
 80061be:	b570      	push	{r4, r5, r6, lr}
 80061c0:	4605      	mov	r5, r0
 80061c2:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80061c4:	b16b      	cbz	r3, 80061e2 <tcp_listen_with_backlog_and_err+0x26>
 80061c6:	4b23      	ldr	r3, [pc, #140]	; (8006254 <tcp_listen_with_backlog_and_err+0x98>)
 80061c8:	4923      	ldr	r1, [pc, #140]	; (8006258 <tcp_listen_with_backlog_and_err+0x9c>)
 80061ca:	4824      	ldr	r0, [pc, #144]	; (800625c <tcp_listen_with_backlog_and_err+0xa0>)
 80061cc:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80061d0:	f004 fa50 	bl	800a674 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 80061d4:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80061d6:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 80061da:	b106      	cbz	r6, 80061de <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 80061dc:	7033      	strb	r3, [r6, #0]
}
 80061de:	4620      	mov	r0, r4
 80061e0:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80061e2:	2002      	movs	r0, #2
 80061e4:	f7ff faee 	bl	80057c4 <memp_malloc>
  if (lpcb == NULL) {
 80061e8:	4604      	mov	r4, r0
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d02f      	beq.n	800624e <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
 80061ee:	692b      	ldr	r3, [r5, #16]
 80061f0:	6103      	str	r3, [r0, #16]
  lpcb->state = LISTEN;
 80061f2:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 80061f4:	8aeb      	ldrh	r3, [r5, #22]
 80061f6:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 80061f8:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 80061fa:	7d6a      	ldrb	r2, [r5, #21]
 80061fc:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 80061fe:	7a2a      	ldrb	r2, [r5, #8]
 8006200:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8006202:	7aaa      	ldrb	r2, [r5, #10]
 8006204:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 8006206:	7a6a      	ldrb	r2, [r5, #9]
 8006208:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800620a:	682a      	ldr	r2, [r5, #0]
 800620c:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800620e:	b13b      	cbz	r3, 8006220 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006210:	4a13      	ldr	r2, [pc, #76]	; (8006260 <tcp_listen_with_backlog_and_err+0xa4>)
 8006212:	6813      	ldr	r3, [r2, #0]
 8006214:	429d      	cmp	r5, r3
 8006216:	d112      	bne.n	800623e <tcp_listen_with_backlog_and_err+0x82>
 8006218:	68eb      	ldr	r3, [r5, #12]
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	2300      	movs	r3, #0
 800621e:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8006220:	4629      	mov	r1, r5
 8006222:	2001      	movs	r0, #1
 8006224:	f7ff faea 	bl	80057fc <memp_free>
  lpcb->accept = tcp_accept_null;
 8006228:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <tcp_listen_with_backlog_and_err+0xa8>)
 800622a:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800622c:	4b0e      	ldr	r3, [pc, #56]	; (8006268 <tcp_listen_with_backlog_and_err+0xac>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	60e2      	str	r2, [r4, #12]
 8006232:	601c      	str	r4, [r3, #0]
 8006234:	f003 f850 	bl	80092d8 <tcp_timer_needed>
  res = ERR_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	e7ce      	b.n	80061da <tcp_listen_with_backlog_and_err+0x1e>
 800623c:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0ec      	beq.n	800621c <tcp_listen_with_backlog_and_err+0x60>
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	4295      	cmp	r5, r2
 8006246:	d1f9      	bne.n	800623c <tcp_listen_with_backlog_and_err+0x80>
 8006248:	68ea      	ldr	r2, [r5, #12]
 800624a:	60da      	str	r2, [r3, #12]
 800624c:	e7e6      	b.n	800621c <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 800624e:	f04f 33ff 	mov.w	r3, #4294967295
 8006252:	e7c2      	b.n	80061da <tcp_listen_with_backlog_and_err+0x1e>
 8006254:	0800ca26 	.word	0x0800ca26
 8006258:	0800ca95 	.word	0x0800ca95
 800625c:	0800bb8d 	.word	0x0800bb8d
 8006260:	2000589c 	.word	0x2000589c
 8006264:	08006c9b 	.word	0x08006c9b
 8006268:	20005898 	.word	0x20005898

0800626c <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800626c:	2200      	movs	r2, #0
 800626e:	f7ff bfa5 	b.w	80061bc <tcp_listen_with_backlog_and_err>
	...

08006274 <tcp_update_rcv_ann_wnd>:
{
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006278:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800627a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800627c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800627e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006280:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006282:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006286:	4428      	add	r0, r5
 8006288:	bf94      	ite	ls
 800628a:	1a82      	subls	r2, r0, r2
 800628c:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 8006290:	2a00      	cmp	r2, #0
 8006292:	db01      	blt.n	8006298 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006294:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006296:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006298:	1aea      	subs	r2, r5, r3
 800629a:	2a00      	cmp	r2, #0
 800629c:	dd02      	ble.n	80062a4 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 800629e:	2000      	movs	r0, #0
 80062a0:	8560      	strh	r0, [r4, #42]	; 0x2a
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80062a4:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80062a6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80062aa:	d306      	bcc.n	80062ba <tcp_update_rcv_ann_wnd+0x46>
 80062ac:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <tcp_update_rcv_ann_wnd+0x4c>)
 80062ae:	4905      	ldr	r1, [pc, #20]	; (80062c4 <tcp_update_rcv_ann_wnd+0x50>)
 80062b0:	4805      	ldr	r0, [pc, #20]	; (80062c8 <tcp_update_rcv_ann_wnd+0x54>)
 80062b2:	f44f 7242 	mov.w	r2, #776	; 0x308
 80062b6:	f004 f9dd 	bl	800a674 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80062ba:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 80062bc:	2000      	movs	r0, #0
}
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	0800ca26 	.word	0x0800ca26
 80062c4:	0800cd1c 	.word	0x0800cd1c
 80062c8:	0800bb8d 	.word	0x0800bb8d

080062cc <tcp_recved>:
{
 80062cc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80062ce:	7d03      	ldrb	r3, [r0, #20]
 80062d0:	2b01      	cmp	r3, #1
{
 80062d2:	4604      	mov	r4, r0
 80062d4:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80062d6:	d106      	bne.n	80062e6 <tcp_recved+0x1a>
 80062d8:	4b17      	ldr	r3, [pc, #92]	; (8006338 <tcp_recved+0x6c>)
 80062da:	4918      	ldr	r1, [pc, #96]	; (800633c <tcp_recved+0x70>)
 80062dc:	4818      	ldr	r0, [pc, #96]	; (8006340 <tcp_recved+0x74>)
 80062de:	f44f 7248 	mov.w	r2, #800	; 0x320
 80062e2:	f004 f9c7 	bl	800a674 <iprintf>
  pcb->rcv_wnd += len;
 80062e6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80062e8:	4429      	add	r1, r5
 80062ea:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80062ec:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 80062f0:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80062f2:	d911      	bls.n	8006318 <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80062f4:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80062f8:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80062fa:	4620      	mov	r0, r4
 80062fc:	f7ff ffba 	bl	8006274 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006300:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8006304:	db17      	blt.n	8006336 <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 8006306:	7ea3      	ldrb	r3, [r4, #26]
 8006308:	f043 0302 	orr.w	r3, r3, #2
 800630c:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800630e:	4620      	mov	r0, r4
}
 8006310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8006314:	f002 bcc0 	b.w	8008c98 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 8006318:	2900      	cmp	r1, #0
 800631a:	d1ee      	bne.n	80062fa <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800631c:	7d23      	ldrb	r3, [r4, #20]
 800631e:	2b07      	cmp	r3, #7
 8006320:	d0e8      	beq.n	80062f4 <tcp_recved+0x28>
 8006322:	2b09      	cmp	r3, #9
 8006324:	d0e6      	beq.n	80062f4 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8006326:	4b04      	ldr	r3, [pc, #16]	; (8006338 <tcp_recved+0x6c>)
 8006328:	4906      	ldr	r1, [pc, #24]	; (8006344 <tcp_recved+0x78>)
 800632a:	4805      	ldr	r0, [pc, #20]	; (8006340 <tcp_recved+0x74>)
 800632c:	f240 322d 	movw	r2, #813	; 0x32d
 8006330:	f004 f9a0 	bl	800a674 <iprintf>
 8006334:	e7e1      	b.n	80062fa <tcp_recved+0x2e>
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	0800ca26 	.word	0x0800ca26
 800633c:	0800cb5c 	.word	0x0800cb5c
 8006340:	0800bb8d 	.word	0x0800bb8d
 8006344:	0800cb82 	.word	0x0800cb82

08006348 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006348:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800634a:	4604      	mov	r4, r0
 800634c:	b148      	cbz	r0, 8006362 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800634e:	6840      	ldr	r0, [r0, #4]
 8006350:	b108      	cbz	r0, 8006356 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8006352:	f7ff fbb7 	bl	8005ac4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006356:	4621      	mov	r1, r4
 8006358:	2003      	movs	r0, #3
  }
}
 800635a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800635e:	f7ff ba4d 	b.w	80057fc <memp_free>
 8006362:	bd10      	pop	{r4, pc}

08006364 <tcp_segs_free>:
{
 8006364:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8006366:	b900      	cbnz	r0, 800636a <tcp_segs_free+0x6>
}
 8006368:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800636a:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800636c:	f7ff ffec 	bl	8006348 <tcp_seg_free>
    seg = next;
 8006370:	4620      	mov	r0, r4
 8006372:	e7f8      	b.n	8006366 <tcp_segs_free+0x2>

08006374 <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
 8006374:	7541      	strb	r1, [r0, #21]
 8006376:	4770      	bx	lr

08006378 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800637c:	2003      	movs	r0, #3
 800637e:	f7ff fa21 	bl	80057c4 <memp_malloc>
  if (cseg == NULL) {
 8006382:	4605      	mov	r5, r0
 8006384:	b160      	cbz	r0, 80063a0 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006386:	4620      	mov	r0, r4
 8006388:	462b      	mov	r3, r5
 800638a:	f104 0210 	add.w	r2, r4, #16
 800638e:	f850 1b04 	ldr.w	r1, [r0], #4
 8006392:	f843 1b04 	str.w	r1, [r3], #4
 8006396:	4290      	cmp	r0, r2
 8006398:	d1f9      	bne.n	800638e <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 800639a:	6868      	ldr	r0, [r5, #4]
 800639c:	f7ff fd4c 	bl	8005e38 <pbuf_ref>
  return cseg;
}
 80063a0:	4628      	mov	r0, r5
 80063a2:	bd38      	pop	{r3, r4, r5, pc}

080063a4 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80063a4:	b100      	cbz	r0, 80063a8 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80063a6:	6101      	str	r1, [r0, #16]
 80063a8:	4770      	bx	lr
	...

080063ac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	460d      	mov	r5, r1
  if (pcb != NULL) {
 80063b0:	4604      	mov	r4, r0
 80063b2:	b158      	cbz	r0, 80063cc <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80063b4:	7d03      	ldrb	r3, [r0, #20]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d106      	bne.n	80063c8 <tcp_recv+0x1c>
 80063ba:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <tcp_recv+0x24>)
 80063bc:	4905      	ldr	r1, [pc, #20]	; (80063d4 <tcp_recv+0x28>)
 80063be:	4806      	ldr	r0, [pc, #24]	; (80063d8 <tcp_recv+0x2c>)
 80063c0:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80063c4:	f004 f956 	bl	800a674 <iprintf>
    pcb->recv = recv;
 80063c8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80063cc:	bd38      	pop	{r3, r4, r5, pc}
 80063ce:	bf00      	nop
 80063d0:	0800ca26 	.word	0x0800ca26
 80063d4:	0800cb35 	.word	0x0800cb35
 80063d8:	0800bb8d 	.word	0x0800bb8d

080063dc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	460d      	mov	r5, r1
  if (pcb != NULL) {
 80063e0:	4604      	mov	r4, r0
 80063e2:	b150      	cbz	r0, 80063fa <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80063e4:	7d03      	ldrb	r3, [r0, #20]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d106      	bne.n	80063f8 <tcp_sent+0x1c>
 80063ea:	4b04      	ldr	r3, [pc, #16]	; (80063fc <tcp_sent+0x20>)
 80063ec:	4904      	ldr	r1, [pc, #16]	; (8006400 <tcp_sent+0x24>)
 80063ee:	4805      	ldr	r0, [pc, #20]	; (8006404 <tcp_sent+0x28>)
 80063f0:	f240 62cc 	movw	r2, #1740	; 0x6cc
 80063f4:	f004 f93e 	bl	800a674 <iprintf>
    pcb->sent = sent;
 80063f8:	67e5      	str	r5, [r4, #124]	; 0x7c
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	0800ca26 	.word	0x0800ca26
 8006400:	0800cba3 	.word	0x0800cba3
 8006404:	0800bb8d 	.word	0x0800bb8d

08006408 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	460d      	mov	r5, r1
  if (pcb != NULL) {
 800640c:	4604      	mov	r4, r0
 800640e:	b158      	cbz	r0, 8006428 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006410:	7d03      	ldrb	r3, [r0, #20]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d106      	bne.n	8006424 <tcp_err+0x1c>
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <tcp_err+0x24>)
 8006418:	4905      	ldr	r1, [pc, #20]	; (8006430 <tcp_err+0x28>)
 800641a:	4806      	ldr	r0, [pc, #24]	; (8006434 <tcp_err+0x2c>)
 800641c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8006420:	f004 f928 	bl	800a674 <iprintf>
    pcb->errf = err;
 8006424:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8006428:	bd38      	pop	{r3, r4, r5, pc}
 800642a:	bf00      	nop
 800642c:	0800ca26 	.word	0x0800ca26
 8006430:	0800ca61 	.word	0x0800ca61
 8006434:	0800bb8d 	.word	0x0800bb8d

08006438 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8006438:	b118      	cbz	r0, 8006442 <tcp_accept+0xa>
 800643a:	7d03      	ldrb	r3, [r0, #20]
 800643c:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 800643e:	bf08      	it	eq
 8006440:	6181      	streq	r1, [r0, #24]
 8006442:	4770      	bx	lr

08006444 <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006444:	7d03      	ldrb	r3, [r0, #20]
 8006446:	2b01      	cmp	r3, #1
{
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	4604      	mov	r4, r0
 800644c:	460e      	mov	r6, r1
 800644e:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006450:	d106      	bne.n	8006460 <tcp_poll+0x1c>
 8006452:	4b05      	ldr	r3, [pc, #20]	; (8006468 <tcp_poll+0x24>)
 8006454:	4905      	ldr	r1, [pc, #20]	; (800646c <tcp_poll+0x28>)
 8006456:	4806      	ldr	r0, [pc, #24]	; (8006470 <tcp_poll+0x2c>)
 8006458:	f240 7203 	movw	r2, #1795	; 0x703
 800645c:	f004 f90a 	bl	800a674 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006460:	7725      	strb	r5, [r4, #28]
  pcb->poll = poll;
 8006462:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	0800ca26 	.word	0x0800ca26
 800646c:	0800cb17 	.word	0x0800cb17
 8006470:	0800bb8d 	.word	0x0800bb8d

08006474 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006474:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8006476:	7d03      	ldrb	r3, [r0, #20]
 8006478:	2b01      	cmp	r3, #1
{
 800647a:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800647c:	d919      	bls.n	80064b2 <tcp_pcb_purge+0x3e>
 800647e:	2b0a      	cmp	r3, #10
 8006480:	d017      	beq.n	80064b2 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006482:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8006484:	b118      	cbz	r0, 800648e <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006486:	f7ff fb1d 	bl	8005ac4 <pbuf_free>
      pcb->refused_data = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800648e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006490:	f7ff ff68 	bl	8006364 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006494:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800649a:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800649c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 800649e:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 80064a0:	f7ff ff60 	bl	8006364 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80064a4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80064a6:	f7ff ff5d 	bl	8006364 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80064aa:	66a5      	str	r5, [r4, #104]	; 0x68
 80064ac:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80064ae:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80064b2:	bd38      	pop	{r3, r4, r5, pc}

080064b4 <tcp_slowtmr>:
{
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80064b8:	4eb0      	ldr	r6, [pc, #704]	; (800677c <tcp_slowtmr+0x2c8>)
      tcp_active_pcbs_changed = 0;
 80064ba:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 80067b0 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 80064be:	6833      	ldr	r3, [r6, #0]
 80064c0:	3301      	adds	r3, #1
 80064c2:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 80064c4:	4bae      	ldr	r3, [pc, #696]	; (8006780 <tcp_slowtmr+0x2cc>)
 80064c6:	781a      	ldrb	r2, [r3, #0]
{
 80064c8:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 80064ca:	3201      	adds	r2, #1
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 80064d0:	4fac      	ldr	r7, [pc, #688]	; (8006784 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80064d2:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 80067b4 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 80064d6:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 80064d8:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 80064dc:	b96c      	cbnz	r4, 80064fa <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 80064de:	4faa      	ldr	r7, [pc, #680]	; (8006788 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80064e0:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 80067b4 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 80064e4:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80064e6:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 80067b8 <tcp_slowtmr+0x304>
 80064ea:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8006790 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	f040 8185 	bne.w	80067fe <tcp_slowtmr+0x34a>
}
 80064f4:	b005      	add	sp, #20
 80064f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80064fa:	7d23      	ldrb	r3, [r4, #20]
 80064fc:	b933      	cbnz	r3, 800650c <tcp_slowtmr+0x58>
 80064fe:	464b      	mov	r3, r9
 8006500:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8006504:	49a1      	ldr	r1, [pc, #644]	; (800678c <tcp_slowtmr+0x2d8>)
 8006506:	48a2      	ldr	r0, [pc, #648]	; (8006790 <tcp_slowtmr+0x2dc>)
 8006508:	f004 f8b4 	bl	800a674 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800650c:	7d23      	ldrb	r3, [r4, #20]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d106      	bne.n	8006520 <tcp_slowtmr+0x6c>
 8006512:	464b      	mov	r3, r9
 8006514:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006518:	499e      	ldr	r1, [pc, #632]	; (8006794 <tcp_slowtmr+0x2e0>)
 800651a:	489d      	ldr	r0, [pc, #628]	; (8006790 <tcp_slowtmr+0x2dc>)
 800651c:	f004 f8aa 	bl	800a674 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006520:	7d23      	ldrb	r3, [r4, #20]
 8006522:	2b0a      	cmp	r3, #10
 8006524:	d106      	bne.n	8006534 <tcp_slowtmr+0x80>
 8006526:	464b      	mov	r3, r9
 8006528:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800652c:	499a      	ldr	r1, [pc, #616]	; (8006798 <tcp_slowtmr+0x2e4>)
 800652e:	4898      	ldr	r0, [pc, #608]	; (8006790 <tcp_slowtmr+0x2dc>)
 8006530:	f004 f8a0 	bl	800a674 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006534:	9b02      	ldr	r3, [sp, #8]
 8006536:	7f62      	ldrb	r2, [r4, #29]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d104      	bne.n	8006548 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 800653e:	68e5      	ldr	r5, [r4, #12]
 8006540:	4644      	mov	r4, r8
      continue;
 8006542:	46a0      	mov	r8, r4
 8006544:	462c      	mov	r4, r5
 8006546:	e7c9      	b.n	80064dc <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006548:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800654a:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800654c:	2902      	cmp	r1, #2
 800654e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8006552:	d102      	bne.n	800655a <tcp_slowtmr+0xa6>
 8006554:	2a05      	cmp	r2, #5
 8006556:	f200 80e6 	bhi.w	8006726 <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800655a:	2a0b      	cmp	r2, #11
 800655c:	f200 80e3 	bhi.w	8006726 <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 8006560:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8006564:	f1bb 0f00 	cmp.w	fp, #0
 8006568:	f000 80a6 	beq.w	80066b8 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800656c:	488b      	ldr	r0, [pc, #556]	; (800679c <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 800656e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006572:	4483      	add	fp, r0
 8006574:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8006578:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 800657a:	bf84      	itt	hi
 800657c:	3301      	addhi	r3, #1
 800657e:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8006582:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8006586:	4293      	cmp	r3, r2
 8006588:	f080 8085 	bcs.w	8006696 <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 800658c:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8006590:	7d23      	ldrb	r3, [r4, #20]
 8006592:	2b06      	cmp	r3, #6
 8006594:	d10b      	bne.n	80065ae <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 8006596:	7ea2      	ldrb	r2, [r4, #26]
 8006598:	06d2      	lsls	r2, r2, #27
 800659a:	d508      	bpl.n	80065ae <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800659c:	6832      	ldr	r2, [r6, #0]
 800659e:	6a21      	ldr	r1, [r4, #32]
 80065a0:	1a52      	subs	r2, r2, r1
 80065a2:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 80065a4:	bf84      	itt	hi
 80065a6:	f10b 0b01 	addhi.w	fp, fp, #1
 80065aa:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80065ae:	7a25      	ldrb	r5, [r4, #8]
 80065b0:	f015 0508 	ands.w	r5, r5, #8
 80065b4:	d019      	beq.n	80065ea <tcp_slowtmr+0x136>
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d002      	beq.n	80065c0 <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 80065ba:	2b07      	cmp	r3, #7
 80065bc:	f040 80c8 	bne.w	8006750 <tcp_slowtmr+0x29c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80065c0:	6831      	ldr	r1, [r6, #0]
 80065c2:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80065c4:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80065c8:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80065ca:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 80065ce:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 80065d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065d6:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80065da:	4291      	cmp	r1, r2
 80065dc:	f240 80a6 	bls.w	800672c <tcp_slowtmr+0x278>
        ++pcb_remove;
 80065e0:	f10b 0b01 	add.w	fp, fp, #1
 80065e4:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 80065e8:	2501      	movs	r5, #1
    if (pcb->ooseq != NULL &&
 80065ea:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80065ec:	b168      	cbz	r0, 800660a <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80065ee:	6833      	ldr	r3, [r6, #0]
 80065f0:	6a22      	ldr	r2, [r4, #32]
 80065f2:	1a9a      	subs	r2, r3, r2
 80065f4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80065f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 80065fc:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8006600:	d303      	bcc.n	800660a <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 8006602:	f7ff feaf 	bl	8006364 <tcp_segs_free>
      pcb->ooseq = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 800660a:	7d23      	ldrb	r3, [r4, #20]
 800660c:	2b03      	cmp	r3, #3
 800660e:	f040 80a1 	bne.w	8006754 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006612:	6833      	ldr	r3, [r6, #0]
 8006614:	6a22      	ldr	r2, [r4, #32]
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800661a:	d803      	bhi.n	8006624 <tcp_slowtmr+0x170>
    if (pcb_remove) {
 800661c:	f1bb 0f00 	cmp.w	fp, #0
 8006620:	f000 80cc 	beq.w	80067bc <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8006624:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8006626:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800662a:	f7ff ff23 	bl	8006474 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800662e:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8006630:	f1b8 0f00 	cmp.w	r8, #0
 8006634:	f000 8096 	beq.w	8006764 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006638:	429c      	cmp	r4, r3
 800663a:	d106      	bne.n	800664a <tcp_slowtmr+0x196>
 800663c:	464b      	mov	r3, r9
 800663e:	f240 4289 	movw	r2, #1161	; 0x489
 8006642:	4957      	ldr	r1, [pc, #348]	; (80067a0 <tcp_slowtmr+0x2ec>)
 8006644:	4852      	ldr	r0, [pc, #328]	; (8006790 <tcp_slowtmr+0x2dc>)
 8006646:	f004 f815 	bl	800a674 <iprintf>
        prev->next = pcb->next;
 800664a:	68e3      	ldr	r3, [r4, #12]
 800664c:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8006650:	b14d      	cbz	r5, 8006666 <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006652:	8b23      	ldrh	r3, [r4, #24]
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	8ae3      	ldrh	r3, [r4, #22]
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	4622      	mov	r2, r4
 800665c:	1d23      	adds	r3, r4, #4
 800665e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006660:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006662:	f002 fc97 	bl	8008f94 <tcp_rst>
      err_arg = pcb->callback_arg;
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800666a:	4621      	mov	r1, r4
 800666c:	2001      	movs	r0, #1
      pcb = pcb->next;
 800666e:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006670:	f7ff f8c4 	bl	80057fc <memp_free>
      tcp_active_pcbs_changed = 0;
 8006674:	2200      	movs	r2, #0
 8006676:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800667a:	f1bb 0f00 	cmp.w	fp, #0
 800667e:	d004      	beq.n	800668a <tcp_slowtmr+0x1d6>
 8006680:	9b03      	ldr	r3, [sp, #12]
 8006682:	f06f 010c 	mvn.w	r1, #12
 8006686:	4618      	mov	r0, r3
 8006688:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800668a:	f89a 3000 	ldrb.w	r3, [sl]
 800668e:	2b00      	cmp	r3, #0
 8006690:	f43f af56 	beq.w	8006540 <tcp_slowtmr+0x8c>
 8006694:	e71c      	b.n	80064d0 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8006696:	4620      	mov	r0, r4
 8006698:	f002 fd6c 	bl	8009174 <tcp_zero_window_probe>
 800669c:	2800      	cmp	r0, #0
 800669e:	f47f af75 	bne.w	800658c <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80066a2:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 80066a6:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80066aa:	2b06      	cmp	r3, #6
 80066ac:	f63f af6e 	bhi.w	800658c <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 80066b0:	3301      	adds	r3, #1
 80066b2:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80066b6:	e769      	b.n	800658c <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 80066b8:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80066bc:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 80066be:	bfa4      	itt	ge
 80066c0:	3301      	addge	r3, #1
 80066c2:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80066c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f43f af60 	beq.w	800658c <tcp_slowtmr+0xd8>
 80066cc:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80066d0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80066d4:	4298      	cmp	r0, r3
 80066d6:	f6ff af59 	blt.w	800658c <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 80066da:	2902      	cmp	r1, #2
 80066dc:	d00a      	beq.n	80066f4 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80066de:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 80066e2:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80066e6:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80066ea:	492e      	ldr	r1, [pc, #184]	; (80067a4 <tcp_slowtmr+0x2f0>)
 80066ec:	5c8a      	ldrb	r2, [r1, r2]
 80066ee:	4093      	lsls	r3, r2
 80066f0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 80066f4:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80066f6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 80066fa:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80066fc:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006700:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 8006702:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8006706:	4293      	cmp	r3, r2
 8006708:	bf28      	it	cs
 800670a:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800670c:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 800670e:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006710:	b292      	uxth	r2, r2
 8006712:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8006714:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8006718:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 800671a:	bf38      	it	cc
 800671c:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8006720:	f002 fc92 	bl	8009048 <tcp_rexmit_rto>
 8006724:	e734      	b.n	8006590 <tcp_slowtmr+0xdc>
      ++pcb_remove;
 8006726:	f04f 0b01 	mov.w	fp, #1
 800672a:	e731      	b.n	8006590 <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800672c:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8006730:	4a1d      	ldr	r2, [pc, #116]	; (80067a8 <tcp_slowtmr+0x2f4>)
 8006732:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8006736:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800673a:	4299      	cmp	r1, r3
 800673c:	d908      	bls.n	8006750 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 800673e:	4620      	mov	r0, r4
 8006740:	f002 fcee 	bl	8009120 <tcp_keepalive>
        if (err == ERR_OK) {
 8006744:	b920      	cbnz	r0, 8006750 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 8006746:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800674a:	3301      	adds	r3, #1
 800674c:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8006750:	2500      	movs	r5, #0
 8006752:	e74a      	b.n	80065ea <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 8006754:	2b09      	cmp	r3, #9
 8006756:	f47f af61 	bne.w	800661c <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800675a:	6833      	ldr	r3, [r6, #0]
 800675c:	6a22      	ldr	r2, [r4, #32]
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	2bf0      	cmp	r3, #240	; 0xf0
 8006762:	e75a      	b.n	800661a <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006764:	429c      	cmp	r4, r3
 8006766:	d006      	beq.n	8006776 <tcp_slowtmr+0x2c2>
 8006768:	464b      	mov	r3, r9
 800676a:	f240 428d 	movw	r2, #1165	; 0x48d
 800676e:	490f      	ldr	r1, [pc, #60]	; (80067ac <tcp_slowtmr+0x2f8>)
 8006770:	4807      	ldr	r0, [pc, #28]	; (8006790 <tcp_slowtmr+0x2dc>)
 8006772:	f003 ff7f 	bl	800a674 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006776:	68e3      	ldr	r3, [r4, #12]
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	e769      	b.n	8006650 <tcp_slowtmr+0x19c>
 800677c:	20005894 	.word	0x20005894
 8006780:	2000230a 	.word	0x2000230a
 8006784:	20005890 	.word	0x20005890
 8006788:	200058a0 	.word	0x200058a0
 800678c:	0800cbca 	.word	0x0800cbca
 8006790:	0800bb8d 	.word	0x0800bb8d
 8006794:	0800cbf4 	.word	0x0800cbf4
 8006798:	0800cc1e 	.word	0x0800cc1e
 800679c:	0800cb10 	.word	0x0800cb10
 80067a0:	0800cc4b 	.word	0x0800cc4b
 80067a4:	0800c9d8 	.word	0x0800c9d8
 80067a8:	000124f8 	.word	0x000124f8
 80067ac:	0800cc76 	.word	0x0800cc76
 80067b0:	2000588c 	.word	0x2000588c
 80067b4:	0800ca26 	.word	0x0800ca26
 80067b8:	0800cca0 	.word	0x0800cca0
      ++prev->polltmr;
 80067bc:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80067be:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 80067c0:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 80067c2:	3301      	adds	r3, #1
 80067c4:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 80067c6:	429a      	cmp	r2, r3
      ++prev->polltmr;
 80067c8:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80067ca:	f63f aeba 	bhi.w	8006542 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 80067ce:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 80067d2:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80067d6:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 80067da:	b173      	cbz	r3, 80067fa <tcp_slowtmr+0x346>
 80067dc:	4621      	mov	r1, r4
 80067de:	6920      	ldr	r0, [r4, #16]
 80067e0:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80067e2:	f89a 3000 	ldrb.w	r3, [sl]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f47f ae72 	bne.w	80064d0 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f47f aea8 	bne.w	8006542 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 80067f2:	4620      	mov	r0, r4
 80067f4:	f002 fa50 	bl	8008c98 <tcp_output>
 80067f8:	e6a3      	b.n	8006542 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 80067fa:	4658      	mov	r0, fp
 80067fc:	e7f1      	b.n	80067e2 <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80067fe:	7d2b      	ldrb	r3, [r5, #20]
 8006800:	2b0a      	cmp	r3, #10
 8006802:	d006      	beq.n	8006812 <tcp_slowtmr+0x35e>
 8006804:	4643      	mov	r3, r8
 8006806:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800680a:	4651      	mov	r1, sl
 800680c:	4648      	mov	r0, r9
 800680e:	f003 ff31 	bl	800a674 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006812:	6833      	ldr	r3, [r6, #0]
 8006814:	6a2a      	ldr	r2, [r5, #32]
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	2bf0      	cmp	r3, #240	; 0xf0
 800681a:	d816      	bhi.n	800684a <tcp_slowtmr+0x396>
      pcb = pcb->next;
 800681c:	462c      	mov	r4, r5
 800681e:	68ed      	ldr	r5, [r5, #12]
 8006820:	e665      	b.n	80064ee <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	429d      	cmp	r5, r3
 8006826:	d106      	bne.n	8006836 <tcp_slowtmr+0x382>
 8006828:	4643      	mov	r3, r8
 800682a:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800682e:	4910      	ldr	r1, [pc, #64]	; (8006870 <tcp_slowtmr+0x3bc>)
 8006830:	4648      	mov	r0, r9
 8006832:	f003 ff1f 	bl	800a674 <iprintf>
        prev->next = pcb->next;
 8006836:	68eb      	ldr	r3, [r5, #12]
 8006838:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800683a:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800683e:	4629      	mov	r1, r5
 8006840:	2001      	movs	r0, #1
 8006842:	f7fe ffdb 	bl	80057fc <memp_free>
      pcb = pcb->next;
 8006846:	465d      	mov	r5, fp
 8006848:	e651      	b.n	80064ee <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 800684a:	4628      	mov	r0, r5
 800684c:	f7ff fe12 	bl	8006474 <tcp_pcb_purge>
      if (prev != NULL) {
 8006850:	2c00      	cmp	r4, #0
 8006852:	d1e6      	bne.n	8006822 <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	429d      	cmp	r5, r3
 8006858:	d006      	beq.n	8006868 <tcp_slowtmr+0x3b4>
 800685a:	4643      	mov	r3, r8
 800685c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006860:	4904      	ldr	r1, [pc, #16]	; (8006874 <tcp_slowtmr+0x3c0>)
 8006862:	4648      	mov	r0, r9
 8006864:	f003 ff06 	bl	800a674 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006868:	68eb      	ldr	r3, [r5, #12]
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	e7e5      	b.n	800683a <tcp_slowtmr+0x386>
 800686e:	bf00      	nop
 8006870:	0800cccf 	.word	0x0800cccf
 8006874:	0800ccf6 	.word	0x0800ccf6

08006878 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8006878:	6803      	ldr	r3, [r0, #0]
 800687a:	428b      	cmp	r3, r1
{
 800687c:	b510      	push	{r4, lr}
 800687e:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8006880:	d137      	bne.n	80068f2 <tcp_pcb_remove+0x7a>
 8006882:	68cb      	ldr	r3, [r1, #12]
 8006884:	6003      	str	r3, [r0, #0]
 8006886:	2300      	movs	r3, #0
 8006888:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 800688a:	4620      	mov	r0, r4
 800688c:	f7ff fdf2 	bl	8006474 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006890:	7d23      	ldrb	r3, [r4, #20]
 8006892:	2b0a      	cmp	r3, #10
 8006894:	d00a      	beq.n	80068ac <tcp_pcb_remove+0x34>
 8006896:	2b01      	cmp	r3, #1
 8006898:	d008      	beq.n	80068ac <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 800689a:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 800689c:	07da      	lsls	r2, r3, #31
 800689e:	d505      	bpl.n	80068ac <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 80068a0:	f043 0302 	orr.w	r3, r3, #2
 80068a4:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80068a6:	4620      	mov	r0, r4
 80068a8:	f002 f9f6 	bl	8008c98 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80068ac:	7d23      	ldrb	r3, [r4, #20]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d01a      	beq.n	80068e8 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80068b2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80068b4:	b133      	cbz	r3, 80068c4 <tcp_pcb_remove+0x4c>
 80068b6:	4b13      	ldr	r3, [pc, #76]	; (8006904 <tcp_pcb_remove+0x8c>)
 80068b8:	4913      	ldr	r1, [pc, #76]	; (8006908 <tcp_pcb_remove+0x90>)
 80068ba:	4814      	ldr	r0, [pc, #80]	; (800690c <tcp_pcb_remove+0x94>)
 80068bc:	f240 7253 	movw	r2, #1875	; 0x753
 80068c0:	f003 fed8 	bl	800a674 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80068c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80068c6:	b133      	cbz	r3, 80068d6 <tcp_pcb_remove+0x5e>
 80068c8:	4b0e      	ldr	r3, [pc, #56]	; (8006904 <tcp_pcb_remove+0x8c>)
 80068ca:	4911      	ldr	r1, [pc, #68]	; (8006910 <tcp_pcb_remove+0x98>)
 80068cc:	480f      	ldr	r0, [pc, #60]	; (800690c <tcp_pcb_remove+0x94>)
 80068ce:	f240 7254 	movw	r2, #1876	; 0x754
 80068d2:	f003 fecf 	bl	800a674 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80068d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80068d8:	b133      	cbz	r3, 80068e8 <tcp_pcb_remove+0x70>
 80068da:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <tcp_pcb_remove+0x8c>)
 80068dc:	490d      	ldr	r1, [pc, #52]	; (8006914 <tcp_pcb_remove+0x9c>)
 80068de:	480b      	ldr	r0, [pc, #44]	; (800690c <tcp_pcb_remove+0x94>)
 80068e0:	f240 7256 	movw	r2, #1878	; 0x756
 80068e4:	f003 fec6 	bl	800a674 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80068e8:	2300      	movs	r3, #0
 80068ea:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80068ec:	82e3      	strh	r3, [r4, #22]
 80068ee:	bd10      	pop	{r4, pc}
 80068f0:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0c7      	beq.n	8006886 <tcp_pcb_remove+0xe>
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	4294      	cmp	r4, r2
 80068fa:	d1f9      	bne.n	80068f0 <tcp_pcb_remove+0x78>
 80068fc:	68e2      	ldr	r2, [r4, #12]
 80068fe:	60da      	str	r2, [r3, #12]
 8006900:	e7c1      	b.n	8006886 <tcp_pcb_remove+0xe>
 8006902:	bf00      	nop
 8006904:	0800ca26 	.word	0x0800ca26
 8006908:	0800cac8 	.word	0x0800cac8
 800690c:	0800bb8d 	.word	0x0800bb8d
 8006910:	0800cae0 	.word	0x0800cae0
 8006914:	0800caf9 	.word	0x0800caf9

08006918 <tcp_close_shutdown>:
{
 8006918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800691a:	7d03      	ldrb	r3, [r0, #20]
 800691c:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800691e:	2900      	cmp	r1, #0
 8006920:	d049      	beq.n	80069b6 <tcp_close_shutdown+0x9e>
 8006922:	2b04      	cmp	r3, #4
 8006924:	d001      	beq.n	800692a <tcp_close_shutdown+0x12>
 8006926:	2b07      	cmp	r3, #7
 8006928:	d145      	bne.n	80069b6 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800692a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800692c:	b91a      	cbnz	r2, 8006936 <tcp_close_shutdown+0x1e>
 800692e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006930:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8006934:	d03f      	beq.n	80069b6 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006936:	7ea3      	ldrb	r3, [r4, #26]
 8006938:	06db      	lsls	r3, r3, #27
 800693a:	d406      	bmi.n	800694a <tcp_close_shutdown+0x32>
 800693c:	4b3f      	ldr	r3, [pc, #252]	; (8006a3c <tcp_close_shutdown+0x124>)
 800693e:	4940      	ldr	r1, [pc, #256]	; (8006a40 <tcp_close_shutdown+0x128>)
 8006940:	4840      	ldr	r0, [pc, #256]	; (8006a44 <tcp_close_shutdown+0x12c>)
 8006942:	f240 120f 	movw	r2, #271	; 0x10f
 8006946:	f003 fe95 	bl	800a674 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800694a:	8b23      	ldrh	r3, [r4, #24]
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	8ae3      	ldrh	r3, [r4, #22]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	4622      	mov	r2, r4
 8006954:	1d23      	adds	r3, r4, #4
 8006956:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006958:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800695a:	f002 fb1b 	bl	8008f94 <tcp_rst>
      tcp_pcb_purge(pcb);
 800695e:	4620      	mov	r0, r4
 8006960:	f7ff fd88 	bl	8006474 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006964:	4a38      	ldr	r2, [pc, #224]	; (8006a48 <tcp_close_shutdown+0x130>)
 8006966:	6813      	ldr	r3, [r2, #0]
 8006968:	429c      	cmp	r4, r3
 800696a:	d115      	bne.n	8006998 <tcp_close_shutdown+0x80>
 800696c:	68e3      	ldr	r3, [r4, #12]
 800696e:	6013      	str	r3, [r2, #0]
 8006970:	2300      	movs	r3, #0
 8006972:	60e3      	str	r3, [r4, #12]
 8006974:	4b35      	ldr	r3, [pc, #212]	; (8006a4c <tcp_close_shutdown+0x134>)
 8006976:	2201      	movs	r2, #1
 8006978:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800697a:	7d23      	ldrb	r3, [r4, #20]
 800697c:	2b04      	cmp	r3, #4
 800697e:	d113      	bne.n	80069a8 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8006980:	230a      	movs	r3, #10
 8006982:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006984:	4b32      	ldr	r3, [pc, #200]	; (8006a50 <tcp_close_shutdown+0x138>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	60e2      	str	r2, [r4, #12]
 800698a:	601c      	str	r4, [r3, #0]
 800698c:	f002 fca4 	bl	80092d8 <tcp_timer_needed>
}
 8006990:	2000      	movs	r0, #0
 8006992:	b003      	add	sp, #12
 8006994:	bd30      	pop	{r4, r5, pc}
 8006996:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0e9      	beq.n	8006970 <tcp_close_shutdown+0x58>
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	4294      	cmp	r4, r2
 80069a0:	d1f9      	bne.n	8006996 <tcp_close_shutdown+0x7e>
 80069a2:	68e2      	ldr	r2, [r4, #12]
 80069a4:	60da      	str	r2, [r3, #12]
 80069a6:	e7e3      	b.n	8006970 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 80069a8:	4b2a      	ldr	r3, [pc, #168]	; (8006a54 <tcp_close_shutdown+0x13c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	429c      	cmp	r4, r3
 80069ae:	d117      	bne.n	80069e0 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 80069b0:	f001 fd06 	bl	80083c0 <tcp_trigger_input_pcb_close>
 80069b4:	e7ec      	b.n	8006990 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d020      	beq.n	80069fc <tcp_close_shutdown+0xe4>
 80069ba:	d307      	bcc.n	80069cc <tcp_close_shutdown+0xb4>
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d033      	beq.n	8006a28 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 80069c0:	4620      	mov	r0, r4
}
 80069c2:	b003      	add	sp, #12
 80069c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 80069c8:	f7ff bb7c 	b.w	80060c4 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 80069cc:	8ae3      	ldrh	r3, [r4, #22]
 80069ce:	b13b      	cbz	r3, 80069e0 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80069d0:	4a21      	ldr	r2, [pc, #132]	; (8006a58 <tcp_close_shutdown+0x140>)
 80069d2:	6813      	ldr	r3, [r2, #0]
 80069d4:	429c      	cmp	r4, r3
 80069d6:	d109      	bne.n	80069ec <tcp_close_shutdown+0xd4>
 80069d8:	68e3      	ldr	r3, [r4, #12]
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	2300      	movs	r3, #0
 80069de:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 80069e0:	4621      	mov	r1, r4
 80069e2:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 80069e4:	f7fe ff0a 	bl	80057fc <memp_free>
    break;
 80069e8:	e7d2      	b.n	8006990 <tcp_close_shutdown+0x78>
 80069ea:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0f5      	beq.n	80069dc <tcp_close_shutdown+0xc4>
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	4294      	cmp	r4, r2
 80069f4:	d1f9      	bne.n	80069ea <tcp_close_shutdown+0xd2>
 80069f6:	68e2      	ldr	r2, [r4, #12]
 80069f8:	60da      	str	r2, [r3, #12]
 80069fa:	e7ef      	b.n	80069dc <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80069fc:	4917      	ldr	r1, [pc, #92]	; (8006a5c <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 80069fe:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8006a00:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8006a04:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006a06:	b94a      	cbnz	r2, 8006a1c <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006a08:	3301      	adds	r3, #1
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d1f8      	bne.n	8006a00 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4813      	ldr	r0, [pc, #76]	; (8006a60 <tcp_close_shutdown+0x148>)
 8006a12:	f7ff ff31 	bl	8006878 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006a16:	4621      	mov	r1, r4
 8006a18:	2002      	movs	r0, #2
 8006a1a:	e7e3      	b.n	80069e4 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8006a1c:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8006a1e:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8006a20:	bf08      	it	eq
 8006a22:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006a24:	68d2      	ldr	r2, [r2, #12]
 8006a26:	e7ee      	b.n	8006a06 <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4807      	ldr	r0, [pc, #28]	; (8006a48 <tcp_close_shutdown+0x130>)
 8006a2c:	f7ff ff24 	bl	8006878 <tcp_pcb_remove>
 8006a30:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <tcp_close_shutdown+0x134>)
 8006a32:	2001      	movs	r0, #1
 8006a34:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8006a36:	4621      	mov	r1, r4
 8006a38:	e7d4      	b.n	80069e4 <tcp_close_shutdown+0xcc>
 8006a3a:	bf00      	nop
 8006a3c:	0800ca26 	.word	0x0800ca26
 8006a40:	0800ca0d 	.word	0x0800ca0d
 8006a44:	0800bb8d 	.word	0x0800bb8d
 8006a48:	20005890 	.word	0x20005890
 8006a4c:	2000588c 	.word	0x2000588c
 8006a50:	200058a0 	.word	0x200058a0
 8006a54:	200058a4 	.word	0x200058a4
 8006a58:	2000589c 	.word	0x2000589c
 8006a5c:	0800cab8 	.word	0x0800cab8
 8006a60:	20005898 	.word	0x20005898

08006a64 <tcp_close>:
  if (pcb->state != LISTEN) {
 8006a64:	7d03      	ldrb	r3, [r0, #20]
 8006a66:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8006a68:	bf1e      	ittt	ne
 8006a6a:	7e83      	ldrbne	r3, [r0, #26]
 8006a6c:	f043 0310 	orrne.w	r3, r3, #16
 8006a70:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8006a72:	2101      	movs	r1, #1
 8006a74:	f7ff bf50 	b.w	8006918 <tcp_close_shutdown>

08006a78 <tcp_recv_null>:
{
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	4608      	mov	r0, r1
  if (p != NULL) {
 8006a7c:	4614      	mov	r4, r2
 8006a7e:	b13a      	cbz	r2, 8006a90 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8006a80:	8911      	ldrh	r1, [r2, #8]
 8006a82:	f7ff fc23 	bl	80062cc <tcp_recved>
    pbuf_free(p);
 8006a86:	4620      	mov	r0, r4
 8006a88:	f7ff f81c 	bl	8005ac4 <pbuf_free>
}
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1fb      	bne.n	8006a8c <tcp_recv_null+0x14>
}
 8006a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8006a98:	f7ff bfe4 	b.w	8006a64 <tcp_close>

08006a9c <tcp_process_refused_data>:
{
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8006a9e:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006aa0:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8006aa4:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8006aa6:	2300      	movs	r3, #0
{
 8006aa8:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 8006aaa:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006aac:	b1dd      	cbz	r5, 8006ae6 <tcp_process_refused_data+0x4a>
 8006aae:	4601      	mov	r1, r0
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	6900      	ldr	r0, [r0, #16]
 8006ab4:	47a8      	blx	r5
 8006ab6:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8006ab8:	b9e0      	cbnz	r0, 8006af4 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8006aba:	06bb      	lsls	r3, r7, #26
 8006abc:	d511      	bpl.n	8006ae2 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006abe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8006ac0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006ac4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8006ac8:	bf1c      	itt	ne
 8006aca:	3301      	addne	r3, #1
 8006acc:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8006ace:	b146      	cbz	r6, 8006ae2 <tcp_process_refused_data+0x46>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	6920      	ldr	r0, [r4, #16]
 8006ad8:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8006ada:	300d      	adds	r0, #13
 8006adc:	d101      	bne.n	8006ae2 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 8006ade:	f06f 050c 	mvn.w	r5, #12
}
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006ae6:	4601      	mov	r1, r0
 8006ae8:	462b      	mov	r3, r5
 8006aea:	4632      	mov	r2, r6
 8006aec:	4628      	mov	r0, r5
 8006aee:	f7ff ffc3 	bl	8006a78 <tcp_recv_null>
 8006af2:	e7e0      	b.n	8006ab6 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8006af4:	f110 050d 	adds.w	r5, r0, #13
 8006af8:	d0f1      	beq.n	8006ade <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 8006afa:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8006afc:	f06f 0504 	mvn.w	r5, #4
 8006b00:	e7ef      	b.n	8006ae2 <tcp_process_refused_data+0x46>
	...

08006b04 <tcp_fasttmr>:
{
 8006b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8006b08:	4d1b      	ldr	r5, [pc, #108]	; (8006b78 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8006b0a:	4f1c      	ldr	r7, [pc, #112]	; (8006b7c <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8006b0c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8006b0e:	4e1c      	ldr	r6, [pc, #112]	; (8006b80 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8006b10:	3301      	adds	r3, #1
 8006b12:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8006b14:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8006b16:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8006b1a:	b90c      	cbnz	r4, 8006b20 <tcp_fasttmr+0x1c>
}
 8006b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8006b20:	782b      	ldrb	r3, [r5, #0]
 8006b22:	7f62      	ldrb	r2, [r4, #29]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d024      	beq.n	8006b72 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8006b28:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8006b2a:	7ea3      	ldrb	r3, [r4, #26]
 8006b2c:	07d9      	lsls	r1, r3, #31
 8006b2e:	d509      	bpl.n	8006b44 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8006b30:	f043 0302 	orr.w	r3, r3, #2
 8006b34:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8006b36:	4620      	mov	r0, r4
 8006b38:	f002 f8ae 	bl	8008c98 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006b3c:	7ea3      	ldrb	r3, [r4, #26]
 8006b3e:	f023 0303 	bic.w	r3, r3, #3
 8006b42:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8006b44:	7ea3      	ldrb	r3, [r4, #26]
 8006b46:	071a      	lsls	r2, r3, #28
 8006b48:	d505      	bpl.n	8006b56 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 8006b4a:	f023 0308 	bic.w	r3, r3, #8
 8006b4e:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8006b50:	4620      	mov	r0, r4
 8006b52:	f7ff fab7 	bl	80060c4 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8006b56:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8006b58:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8006b5c:	b13b      	cbz	r3, 8006b6e <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8006b5e:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8006b60:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8006b64:	f7ff ff9a 	bl	8006a9c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006b68:	7833      	ldrb	r3, [r6, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1d2      	bne.n	8006b14 <tcp_fasttmr+0x10>
{
 8006b6e:	464c      	mov	r4, r9
 8006b70:	e7d3      	b.n	8006b1a <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8006b72:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8006b76:	e7fa      	b.n	8006b6e <tcp_fasttmr+0x6a>
 8006b78:	2000230a 	.word	0x2000230a
 8006b7c:	20005890 	.word	0x20005890
 8006b80:	2000588c 	.word	0x2000588c

08006b84 <tcp_tmr>:
{
 8006b84:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8006b86:	f7ff ffbd 	bl	8006b04 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8006b8a:	4a06      	ldr	r2, [pc, #24]	; (8006ba4 <tcp_tmr+0x20>)
 8006b8c:	7813      	ldrb	r3, [r2, #0]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	7013      	strb	r3, [r2, #0]
 8006b94:	07db      	lsls	r3, r3, #31
 8006b96:	d503      	bpl.n	8006ba0 <tcp_tmr+0x1c>
}
 8006b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8006b9c:	f7ff bc8a 	b.w	80064b4 <tcp_slowtmr>
 8006ba0:	bd08      	pop	{r3, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20002309 	.word	0x20002309

08006ba8 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006ba8:	7d03      	ldrb	r3, [r0, #20]
 8006baa:	2b01      	cmp	r3, #1
{
 8006bac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006bb4:	d106      	bne.n	8006bc4 <tcp_abandon+0x1c>
 8006bb6:	4b30      	ldr	r3, [pc, #192]	; (8006c78 <tcp_abandon+0xd0>)
 8006bb8:	4930      	ldr	r1, [pc, #192]	; (8006c7c <tcp_abandon+0xd4>)
 8006bba:	4831      	ldr	r0, [pc, #196]	; (8006c80 <tcp_abandon+0xd8>)
 8006bbc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006bc0:	f003 fd58 	bl	800a674 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8006bc4:	7d23      	ldrb	r3, [r4, #20]
 8006bc6:	2b0a      	cmp	r3, #10
 8006bc8:	d10a      	bne.n	8006be0 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006bca:	4621      	mov	r1, r4
 8006bcc:	482d      	ldr	r0, [pc, #180]	; (8006c84 <tcp_abandon+0xdc>)
 8006bce:	f7ff fe53 	bl	8006878 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	2001      	movs	r0, #1
}
 8006bd6:	b002      	add	sp, #8
 8006bd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8006bdc:	f7fe be0e 	b.w	80057fc <memp_free>
    seqno = pcb->snd_nxt;
 8006be0:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8006be4:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8006be8:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8006bec:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8006bf0:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8006bf2:	b99b      	cbnz	r3, 8006c1c <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8006bf4:	b13d      	cbz	r5, 8006c06 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006bf6:	4a24      	ldr	r2, [pc, #144]	; (8006c88 <tcp_abandon+0xe0>)
 8006bf8:	6813      	ldr	r3, [r2, #0]
 8006bfa:	429c      	cmp	r4, r3
 8006bfc:	d106      	bne.n	8006c0c <tcp_abandon+0x64>
 8006bfe:	68e3      	ldr	r3, [r4, #12]
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	2500      	movs	r5, #0
 8006c04:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8006c06:	462e      	mov	r6, r5
 8006c08:	e00f      	b.n	8006c2a <tcp_abandon+0x82>
 8006c0a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0f8      	beq.n	8006c02 <tcp_abandon+0x5a>
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	4294      	cmp	r4, r2
 8006c14:	d1f9      	bne.n	8006c0a <tcp_abandon+0x62>
 8006c16:	68e2      	ldr	r2, [r4, #12]
 8006c18:	60da      	str	r2, [r3, #12]
 8006c1a:	e7f2      	b.n	8006c02 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	481b      	ldr	r0, [pc, #108]	; (8006c8c <tcp_abandon+0xe4>)
 8006c20:	f7ff fe2a 	bl	8006878 <tcp_pcb_remove>
 8006c24:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <tcp_abandon+0xe8>)
 8006c26:	2201      	movs	r2, #1
 8006c28:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8006c2a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006c2c:	b108      	cbz	r0, 8006c32 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8006c2e:	f7ff fb99 	bl	8006364 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8006c32:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006c34:	b108      	cbz	r0, 8006c3a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8006c36:	f7ff fb95 	bl	8006364 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8006c3a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006c3c:	b108      	cbz	r0, 8006c42 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 8006c3e:	f7ff fb91 	bl	8006364 <tcp_segs_free>
    if (send_rst) {
 8006c42:	b146      	cbz	r6, 8006c56 <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006c44:	8b23      	ldrh	r3, [r4, #24]
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	9500      	str	r5, [sp, #0]
 8006c4a:	1d23      	adds	r3, r4, #4
 8006c4c:	4622      	mov	r2, r4
 8006c4e:	4651      	mov	r1, sl
 8006c50:	4648      	mov	r0, r9
 8006c52:	f002 f99f 	bl	8008f94 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8006c56:	4621      	mov	r1, r4
 8006c58:	2001      	movs	r0, #1
 8006c5a:	f7fe fdcf 	bl	80057fc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006c5e:	b13f      	cbz	r7, 8006c70 <tcp_abandon+0xc8>
 8006c60:	f06f 010c 	mvn.w	r1, #12
 8006c64:	4640      	mov	r0, r8
 8006c66:	463b      	mov	r3, r7
}
 8006c68:	b002      	add	sp, #8
 8006c6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006c6e:	4718      	bx	r3
}
 8006c70:	b002      	add	sp, #8
 8006c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c76:	bf00      	nop
 8006c78:	0800ca26 	.word	0x0800ca26
 8006c7c:	0800c9a7 	.word	0x0800c9a7
 8006c80:	0800bb8d 	.word	0x0800bb8d
 8006c84:	200058a0 	.word	0x200058a0
 8006c88:	2000589c 	.word	0x2000589c
 8006c8c:	20005890 	.word	0x20005890
 8006c90:	2000588c 	.word	0x2000588c

08006c94 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8006c94:	2101      	movs	r1, #1
 8006c96:	f7ff bf87 	b.w	8006ba8 <tcp_abandon>

08006c9a <tcp_accept_null>:
{
 8006c9a:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	f7ff fff9 	bl	8006c94 <tcp_abort>
}
 8006ca2:	f06f 000c 	mvn.w	r0, #12
 8006ca6:	bd08      	pop	{r3, pc}

08006ca8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8006cac:	b901      	cbnz	r1, 8006cb0 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006cb0:	680a      	ldr	r2, [r1, #0]
 8006cb2:	682b      	ldr	r3, [r5, #0]
 8006cb4:	68cc      	ldr	r4, [r1, #12]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d102      	bne.n	8006cc0 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 8006cba:	4608      	mov	r0, r1
 8006cbc:	f7ff ffea 	bl	8006c94 <tcp_abort>
      pcb = pcb->next;
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	e7f3      	b.n	8006cac <tcp_netif_ip_addr_changed_pcblist+0x4>

08006cc4 <tcp_kill_state>:
{
 8006cc4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006cc6:	f1a0 0308 	sub.w	r3, r0, #8
 8006cca:	2b01      	cmp	r3, #1
{
 8006ccc:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006cce:	d906      	bls.n	8006cde <tcp_kill_state+0x1a>
 8006cd0:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <tcp_kill_state+0x4c>)
 8006cd2:	4910      	ldr	r1, [pc, #64]	; (8006d14 <tcp_kill_state+0x50>)
 8006cd4:	4810      	ldr	r0, [pc, #64]	; (8006d18 <tcp_kill_state+0x54>)
 8006cd6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006cda:	f003 fccb 	bl	800a674 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cde:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <tcp_kill_state+0x58>)
 8006ce0:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006ce2:	4b0f      	ldr	r3, [pc, #60]	; (8006d20 <tcp_kill_state+0x5c>)
  inactivity = 0;
 8006ce4:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006ce6:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8006ce8:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cea:	b921      	cbnz	r1, 8006cf6 <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8006cec:	b170      	cbz	r0, 8006d0c <tcp_kill_state+0x48>
}
 8006cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 8006cf2:	f7ff bf59 	b.w	8006ba8 <tcp_abandon>
    if (pcb->state == state) {
 8006cf6:	7d0b      	ldrb	r3, [r1, #20]
 8006cf8:	42a3      	cmp	r3, r4
 8006cfa:	d105      	bne.n	8006d08 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006cfc:	6a0b      	ldr	r3, [r1, #32]
 8006cfe:	1aeb      	subs	r3, r5, r3
 8006d00:	429a      	cmp	r2, r3
 8006d02:	bf9c      	itt	ls
 8006d04:	461a      	movls	r2, r3
 8006d06:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d08:	68c9      	ldr	r1, [r1, #12]
 8006d0a:	e7ee      	b.n	8006cea <tcp_kill_state+0x26>
 8006d0c:	bd38      	pop	{r3, r4, r5, pc}
 8006d0e:	bf00      	nop
 8006d10:	0800ca26 	.word	0x0800ca26
 8006d14:	0800ca87 	.word	0x0800ca87
 8006d18:	0800bb8d 	.word	0x0800bb8d
 8006d1c:	20005890 	.word	0x20005890
 8006d20:	20005894 	.word	0x20005894

08006d24 <tcp_alloc>:
{
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d28:	2001      	movs	r0, #1
 8006d2a:	f7fe fd4b 	bl	80057c4 <memp_malloc>
 8006d2e:	4d3b      	ldr	r5, [pc, #236]	; (8006e1c <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 8006d30:	4604      	mov	r4, r0
 8006d32:	bb90      	cbnz	r0, 8006d9a <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d34:	4b3a      	ldr	r3, [pc, #232]	; (8006e20 <tcp_alloc+0xfc>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006d36:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d38:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8006d3a:	4621      	mov	r1, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d158      	bne.n	8006df2 <tcp_alloc+0xce>
  if (inactive != NULL) {
 8006d40:	b114      	cbz	r4, 8006d48 <tcp_alloc+0x24>
    tcp_abort(inactive);
 8006d42:	4620      	mov	r0, r4
 8006d44:	f7ff ffa6 	bl	8006c94 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d48:	2001      	movs	r0, #1
 8006d4a:	f7fe fd3b 	bl	80057c4 <memp_malloc>
    if (pcb == NULL) {
 8006d4e:	4604      	mov	r4, r0
 8006d50:	bb18      	cbnz	r0, 8006d9a <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8006d52:	2009      	movs	r0, #9
 8006d54:	f7ff ffb6 	bl	8006cc4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d58:	2001      	movs	r0, #1
 8006d5a:	f7fe fd33 	bl	80057c4 <memp_malloc>
      if (pcb == NULL) {
 8006d5e:	4604      	mov	r4, r0
 8006d60:	b9d8      	cbnz	r0, 8006d9a <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8006d62:	2008      	movs	r0, #8
 8006d64:	f7ff ffae 	bl	8006cc4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d68:	2001      	movs	r0, #1
 8006d6a:	f7fe fd2b 	bl	80057c4 <memp_malloc>
        if (pcb == NULL) {
 8006d6e:	4604      	mov	r4, r0
 8006d70:	b998      	cbnz	r0, 8006d9a <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d72:	4b2c      	ldr	r3, [pc, #176]	; (8006e24 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006d74:	f8d5 e000 	ldr.w	lr, [r5]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d78:	681b      	ldr	r3, [r3, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006d7a:	f016 0f80 	tst.w	r6, #128	; 0x80
 8006d7e:	bf0c      	ite	eq
 8006d80:	4631      	moveq	r1, r6
 8006d82:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d13c      	bne.n	8006e02 <tcp_alloc+0xde>
  if (inactive != NULL) {
 8006d88:	b114      	cbz	r4, 8006d90 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f7ff ff82 	bl	8006c94 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d90:	2001      	movs	r0, #1
 8006d92:	f7fe fd17 	bl	80057c4 <memp_malloc>
  if (pcb != NULL) {
 8006d96:	4604      	mov	r4, r0
 8006d98:	b348      	cbz	r0, 8006dee <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006d9a:	2298      	movs	r2, #152	; 0x98
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f003 fbb4 	bl	800a50c <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006da4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006da8:	8562      	strh	r2, [r4, #42]	; 0x2a
 8006daa:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006dac:	22ff      	movs	r2, #255	; 0xff
 8006dae:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8006db0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006db4:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006db6:	2206      	movs	r2, #6
 8006db8:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006dbc:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8006dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dc2:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006dca:	682a      	ldr	r2, [r5, #0]
 8006dcc:	6222      	str	r2, [r4, #32]
    pcb->snd_buf = TCP_SND_BUF;
 8006dce:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->last_timer = tcp_timer_ctr;
 8006dd2:	4a15      	ldr	r2, [pc, #84]	; (8006e28 <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 8006dd4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 8006dd8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8006ddc:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 8006dde:	7812      	ldrb	r2, [r2, #0]
    pcb->recv = tcp_recv_null;
 8006de0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006de4:	4b12      	ldr	r3, [pc, #72]	; (8006e30 <tcp_alloc+0x10c>)
    pcb->prio = prio;
 8006de6:	7566      	strb	r6, [r4, #21]
    pcb->last_timer = tcp_timer_ctr;
 8006de8:	7762      	strb	r2, [r4, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006dea:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8006dee:	4620      	mov	r0, r4
 8006df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006df2:	6a1a      	ldr	r2, [r3, #32]
 8006df4:	1a82      	subs	r2, r0, r2
 8006df6:	428a      	cmp	r2, r1
 8006df8:	bf24      	itt	cs
 8006dfa:	461c      	movcs	r4, r3
 8006dfc:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	e79c      	b.n	8006d3c <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 8006e02:	7d5f      	ldrb	r7, [r3, #21]
 8006e04:	428f      	cmp	r7, r1
 8006e06:	d807      	bhi.n	8006e18 <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006e08:	6a1a      	ldr	r2, [r3, #32]
 8006e0a:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 8006e0e:	4282      	cmp	r2, r0
 8006e10:	bf22      	ittt	cs
 8006e12:	4639      	movcs	r1, r7
 8006e14:	4610      	movcs	r0, r2
 8006e16:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	e7b3      	b.n	8006d84 <tcp_alloc+0x60>
 8006e1c:	20005894 	.word	0x20005894
 8006e20:	200058a0 	.word	0x200058a0
 8006e24:	20005890 	.word	0x20005890
 8006e28:	2000230a 	.word	0x2000230a
 8006e2c:	08006a79 	.word	0x08006a79
 8006e30:	006ddd00 	.word	0x006ddd00

08006e34 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8006e34:	2040      	movs	r0, #64	; 0x40
 8006e36:	f7ff bf75 	b.w	8006d24 <tcp_alloc>
	...

08006e3c <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8006e3c:	4b03      	ldr	r3, [pc, #12]	; (8006e4c <tcp_next_iss+0x10>)
 8006e3e:	4a04      	ldr	r2, [pc, #16]	; (8006e50 <tcp_next_iss+0x14>)
 8006e40:	6818      	ldr	r0, [r3, #0]
 8006e42:	6812      	ldr	r2, [r2, #0]
 8006e44:	4410      	add	r0, r2
 8006e46:	6018      	str	r0, [r3, #0]
}
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20001ba0 	.word	0x20001ba0
 8006e50:	20005894 	.word	0x20005894

08006e54 <tcp_eff_send_mss_impl>:
{
 8006e54:	b510      	push	{r4, lr}
 8006e56:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8006e58:	4608      	mov	r0, r1
 8006e5a:	f7fd fd67 	bl	800492c <ip4_route>
    if (outif == NULL) {
 8006e5e:	b130      	cbz	r0, 8006e6e <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8006e60:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8006e62:	b123      	cbz	r3, 8006e6e <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8006e64:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	bf28      	it	cs
 8006e6c:	461c      	movcs	r4, r3
}
 8006e6e:	4620      	mov	r0, r4
 8006e70:	bd10      	pop	{r4, pc}
	...

08006e74 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8006e78:	4604      	mov	r4, r0
 8006e7a:	b180      	cbz	r0, 8006e9e <tcp_netif_ip_addr_changed+0x2a>
 8006e7c:	6803      	ldr	r3, [r0, #0]
 8006e7e:	b173      	cbz	r3, 8006e9e <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006e80:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <tcp_netif_ip_addr_changed+0x40>)
 8006e82:	6819      	ldr	r1, [r3, #0]
 8006e84:	f7ff ff10 	bl	8006ca8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006e88:	4b0b      	ldr	r3, [pc, #44]	; (8006eb8 <tcp_netif_ip_addr_changed+0x44>)
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	6819      	ldr	r1, [r3, #0]
 8006e8e:	f7ff ff0b 	bl	8006ca8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006e92:	b125      	cbz	r5, 8006e9e <tcp_netif_ip_addr_changed+0x2a>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b113      	cbz	r3, 8006e9e <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8006e98:	4b08      	ldr	r3, [pc, #32]	; (8006ebc <tcp_netif_ip_addr_changed+0x48>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	b903      	cbnz	r3, 8006ea0 <tcp_netif_ip_addr_changed+0x2c>
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8006ea4:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006ea6:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006ea8:	bf04      	itt	eq
 8006eaa:	6829      	ldreq	r1, [r5, #0]
 8006eac:	6019      	streq	r1, [r3, #0]
{
 8006eae:	4613      	mov	r3, r2
 8006eb0:	e7f4      	b.n	8006e9c <tcp_netif_ip_addr_changed+0x28>
 8006eb2:	bf00      	nop
 8006eb4:	20005890 	.word	0x20005890
 8006eb8:	2000589c 	.word	0x2000589c
 8006ebc:	20005898 	.word	0x20005898

08006ec0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8006ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006ec4:	68c3      	ldr	r3, [r0, #12]
{
 8006ec6:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006ec8:	8998      	ldrh	r0, [r3, #12]
{
 8006eca:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006ecc:	f7fd f83a 	bl	8003f44 <lwip_htons>
 8006ed0:	07c2      	lsls	r2, r0, #31
 8006ed2:	d415      	bmi.n	8006f00 <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006ed4:	4e18      	ldr	r6, [pc, #96]	; (8006f38 <tcp_oos_insert_segment+0x78>)
    while (next &&
 8006ed6:	b1bc      	cbz	r4, 8006f08 <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006ed8:	68e7      	ldr	r7, [r4, #12]
 8006eda:	6830      	ldr	r0, [r6, #0]
 8006edc:	892b      	ldrh	r3, [r5, #8]
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	8922      	ldrh	r2, [r4, #8]
 8006ee2:	4403      	add	r3, r0
 8006ee4:	440a      	add	r2, r1
 8006ee6:	1a9a      	subs	r2, r3, r2
    while (next &&
 8006ee8:	2a00      	cmp	r2, #0
 8006eea:	da10      	bge.n	8006f0e <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8006eec:	1a5b      	subs	r3, r3, r1
    if (next &&
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	dd0a      	ble.n	8006f08 <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8006ef2:	1a09      	subs	r1, r1, r0
 8006ef4:	b289      	uxth	r1, r1
 8006ef6:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8006ef8:	6868      	ldr	r0, [r5, #4]
 8006efa:	f7fe ff25 	bl	8005d48 <pbuf_realloc>
 8006efe:	e003      	b.n	8006f08 <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 8006f00:	4620      	mov	r0, r4
 8006f02:	f7ff fa2f 	bl	8006364 <tcp_segs_free>
    next = NULL;
 8006f06:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 8006f08:	602c      	str	r4, [r5, #0]
}
 8006f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8006f0e:	89b8      	ldrh	r0, [r7, #12]
 8006f10:	f7fd f818 	bl	8003f44 <lwip_htons>
 8006f14:	07c3      	lsls	r3, r0, #31
 8006f16:	d509      	bpl.n	8006f2c <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8006f18:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8006f22:	f7fd f80f 	bl	8003f44 <lwip_htons>
 8006f26:	4338      	orrs	r0, r7
 8006f28:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8006f2c:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f7ff fa0a 	bl	8006348 <tcp_seg_free>
      next = next->next;
 8006f34:	463c      	mov	r4, r7
 8006f36:	e7ce      	b.n	8006ed6 <tcp_oos_insert_segment+0x16>
 8006f38:	20002330 	.word	0x20002330

08006f3c <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006f3c:	7d03      	ldrb	r3, [r0, #20]
 8006f3e:	2b03      	cmp	r3, #3
{
 8006f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f44:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006f46:	d806      	bhi.n	8006f56 <tcp_receive+0x1a>
 8006f48:	4b87      	ldr	r3, [pc, #540]	; (8007168 <tcp_receive+0x22c>)
 8006f4a:	4988      	ldr	r1, [pc, #544]	; (800716c <tcp_receive+0x230>)
 8006f4c:	4888      	ldr	r0, [pc, #544]	; (8007170 <tcp_receive+0x234>)
 8006f4e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8006f52:	f003 fb8f 	bl	800a674 <iprintf>

  if (flags & TCP_ACK) {
 8006f56:	4b87      	ldr	r3, [pc, #540]	; (8007174 <tcp_receive+0x238>)
 8006f58:	4e87      	ldr	r6, [pc, #540]	; (8007178 <tcp_receive+0x23c>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	f013 0f10 	tst.w	r3, #16
 8006f60:	f000 817c 	beq.w	800725c <tcp_receive+0x320>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006f64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006f66:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006f68:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8006f6c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006f6e:	1a1d      	subs	r5, r3, r0
 8006f70:	2d00      	cmp	r5, #0
 8006f72:	4d82      	ldr	r5, [pc, #520]	; (800717c <tcp_receive+0x240>)
 8006f74:	db0d      	blt.n	8006f92 <tcp_receive+0x56>
 8006f76:	4283      	cmp	r3, r0
 8006f78:	d103      	bne.n	8006f82 <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	1acb      	subs	r3, r1, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	db07      	blt.n	8006f92 <tcp_receive+0x56>
 8006f82:	682b      	ldr	r3, [r5, #0]
 8006f84:	4299      	cmp	r1, r3
 8006f86:	d11c      	bne.n	8006fc2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006f88:	4b7d      	ldr	r3, [pc, #500]	; (8007180 <tcp_receive+0x244>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	89db      	ldrh	r3, [r3, #14]
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d917      	bls.n	8006fc2 <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006f92:	4b7b      	ldr	r3, [pc, #492]	; (8007180 <tcp_receive+0x244>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006f94:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 8006f9c:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006f9e:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 8006fa0:	6828      	ldr	r0, [r5, #0]
 8006fa2:	6560      	str	r0, [r4, #84]	; 0x54
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006fa4:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006fa8:	bf38      	it	cc
 8006faa:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 8006fae:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8006fb2:	2f00      	cmp	r7, #0
 8006fb4:	d13c      	bne.n	8007030 <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 8006fb6:	b920      	cbnz	r0, 8006fc2 <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8006fb8:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8006fbc:	2301      	movs	r3, #1
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8006fbe:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8006fc2:	682b      	ldr	r3, [r5, #0]
 8006fc4:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8006fc8:	4f6e      	ldr	r7, [pc, #440]	; (8007184 <tcp_receive+0x248>)
 8006fca:	eba3 000e 	sub.w	r0, r3, lr
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	dc37      	bgt.n	8007042 <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 8006fd2:	486d      	ldr	r0, [pc, #436]	; (8007188 <tcp_receive+0x24c>)
 8006fd4:	8800      	ldrh	r0, [r0, #0]
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f040 846f 	bne.w	80078ba <tcp_receive+0x97e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006fdc:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8006fde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fe0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006fe4:	4401      	add	r1, r0
 8006fe6:	428a      	cmp	r2, r1
 8006fe8:	f040 8467 	bne.w	80078ba <tcp_receive+0x97e>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8006fec:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8006ff0:	2a00      	cmp	r2, #0
 8006ff2:	f2c0 8462 	blt.w	80078ba <tcp_receive+0x97e>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8006ff6:	4573      	cmp	r3, lr
 8006ff8:	f040 845f 	bne.w	80078ba <tcp_receive+0x97e>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8006ffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007000:	1c53      	adds	r3, r2, #1
 8007002:	b2db      	uxtb	r3, r3
 8007004:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8007006:	bf38      	it	cc
 8007008:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800700c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007010:	2b03      	cmp	r3, #3
 8007012:	d911      	bls.n	8007038 <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007014:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8007018:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800701a:	4413      	add	r3, r2
 800701c:	b29b      	uxth	r3, r3
 800701e:	429a      	cmp	r2, r3
 8007020:	d201      	bcs.n	8007026 <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 8007022:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007026:	f8df a140 	ldr.w	sl, [pc, #320]	; 8007168 <tcp_receive+0x22c>
 800702a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8007170 <tcp_receive+0x234>
 800702e:	e108      	b.n	8007242 <tcp_receive+0x306>
      } else if (pcb->persist_backoff > 0) {
 8007030:	2800      	cmp	r0, #0
 8007032:	d0c6      	beq.n	8006fc2 <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	e7c2      	b.n	8006fbe <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8007038:	d1f5      	bne.n	8007026 <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 800703a:	4620      	mov	r0, r4
 800703c:	f002 f849 	bl	80090d2 <tcp_rexmit_fast>
 8007040:	e7f1      	b.n	8007026 <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007042:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007044:	1a9a      	subs	r2, r3, r2
 8007046:	2a00      	cmp	r2, #0
 8007048:	f300 808a 	bgt.w	8007160 <tcp_receive+0x224>
      if (pcb->flags & TF_INFR) {
 800704c:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800704e:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 8007052:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 8007054:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 8007056:	bf41      	itttt	mi
 8007058:	f022 0204 	bicmi.w	r2, r2, #4
 800705c:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800705e:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 8007062:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8007066:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007068:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 800706a:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800706c:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8007070:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 8007072:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007076:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800707a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 800707e:	d90f      	bls.n	80070a0 <tcp_receive+0x164>
        if (pcb->cwnd < pcb->ssthresh) {
 8007080:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8007084:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8007088:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800708a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800708c:	bf9c      	itt	ls
 800708e:	435b      	mulls	r3, r3
 8007090:	fb93 f3f2 	sdivls	r3, r3, r2
 8007094:	4413      	add	r3, r2
 8007096:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8007098:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 800709a:	bf38      	it	cc
 800709c:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80070a0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8007168 <tcp_receive+0x22c>
 80070a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007170 <tcp_receive+0x234>
      while (pcb->unacked != NULL &&
 80070a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80070aa:	b943      	cbnz	r3, 80070be <tcp_receive+0x182>
      if (pcb->unacked == NULL) {
 80070ac:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80070ae:	2300      	movs	r3, #0
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	d153      	bne.n	800715c <tcp_receive+0x220>
        pcb->rtime = -1;
 80070b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070b8:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 80070ba:	76e3      	strb	r3, [r4, #27]
 80070bc:	e7b3      	b.n	8007026 <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	6858      	ldr	r0, [r3, #4]
 80070c2:	f7fc ff42 	bl	8003f4a <lwip_htonl>
 80070c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80070c8:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	4683      	mov	fp, r0
 80070d0:	8998      	ldrh	r0, [r3, #12]
 80070d2:	f7fc ff37 	bl	8003f44 <lwip_htons>
 80070d6:	682b      	ldr	r3, [r5, #0]
 80070d8:	f010 0003 	ands.w	r0, r0, #3
 80070dc:	eba8 0803 	sub.w	r8, r8, r3
 80070e0:	bf18      	it	ne
 80070e2:	2001      	movne	r0, #1
 80070e4:	44d8      	add	r8, fp
 80070e6:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 80070e8:	f1b8 0f00 	cmp.w	r8, #0
 80070ec:	dcde      	bgt.n	80070ac <tcp_receive+0x170>
        next = pcb->unacked;
 80070ee:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80070f2:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 80070f6:	f8d8 3000 	ldr.w	r3, [r8]
 80070fa:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80070fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007100:	f7fe fe92 	bl	8005e28 <pbuf_clen>
 8007104:	4583      	cmp	fp, r0
 8007106:	d206      	bcs.n	8007116 <tcp_receive+0x1da>
 8007108:	464b      	mov	r3, r9
 800710a:	f240 429e 	movw	r2, #1182	; 0x49e
 800710e:	491f      	ldr	r1, [pc, #124]	; (800718c <tcp_receive+0x250>)
 8007110:	4650      	mov	r0, sl
 8007112:	f003 faaf 	bl	800a674 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8007116:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800711a:	f7fe fe85 	bl	8005e28 <pbuf_clen>
 800711e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8007122:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8007124:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8007126:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800712a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 800712e:	4413      	add	r3, r2
        tcp_seg_free(next);
 8007130:	4640      	mov	r0, r8
        recv_acked += next->len;
 8007132:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8007134:	f7ff f908 	bl	8006348 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8007138:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0b3      	beq.n	80070a8 <tcp_receive+0x16c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8007140:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1b0      	bne.n	80070a8 <tcp_receive+0x16c>
 8007146:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1ad      	bne.n	80070a8 <tcp_receive+0x16c>
 800714c:	464b      	mov	r3, r9
 800714e:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8007152:	490f      	ldr	r1, [pc, #60]	; (8007190 <tcp_receive+0x254>)
 8007154:	4650      	mov	r0, sl
 8007156:	f003 fa8d 	bl	800a674 <iprintf>
 800715a:	e7a5      	b.n	80070a8 <tcp_receive+0x16c>
        pcb->rtime = 0;
 800715c:	8623      	strh	r3, [r4, #48]	; 0x30
 800715e:	e7ac      	b.n	80070ba <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 8007160:	4620      	mov	r0, r4
 8007162:	f001 fd63 	bl	8008c2c <tcp_send_empty_ack>
 8007166:	e75e      	b.n	8007026 <tcp_receive+0xea>
 8007168:	0800ceec 	.word	0x0800ceec
 800716c:	0800cf1e 	.word	0x0800cf1e
 8007170:	0800bb8d 	.word	0x0800bb8d
 8007174:	20002310 	.word	0x20002310
 8007178:	20002330 	.word	0x20002330
 800717c:	2000230c 	.word	0x2000230c
 8007180:	20002338 	.word	0x20002338
 8007184:	20002324 	.word	0x20002324
 8007188:	20002346 	.word	0x20002346
 800718c:	0800cf37 	.word	0x0800cf37
 8007190:	0800cf5f 	.word	0x0800cf5f
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007194:	682a      	ldr	r2, [r5, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	9201      	str	r2, [sp, #4]
 800719a:	6858      	ldr	r0, [r3, #4]
 800719c:	f7fc fed5 	bl	8003f4a <lwip_htonl>
 80071a0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80071a2:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	4683      	mov	fp, r0
 80071aa:	8998      	ldrh	r0, [r3, #12]
 80071ac:	f7fc feca 	bl	8003f44 <lwip_htons>
 80071b0:	9a01      	ldr	r2, [sp, #4]
 80071b2:	f010 0003 	ands.w	r0, r0, #3
 80071b6:	eba2 0808 	sub.w	r8, r2, r8
 80071ba:	bf18      	it	ne
 80071bc:	2001      	movne	r0, #1
 80071be:	eba8 080b 	sub.w	r8, r8, fp
 80071c2:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 80071c6:	f1b8 0f00 	cmp.w	r8, #0
 80071ca:	db3d      	blt.n	8007248 <tcp_receive+0x30c>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80071d0:	1a9b      	subs	r3, r3, r2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	dc38      	bgt.n	8007248 <tcp_receive+0x30c>
      next = pcb->unsent;
 80071d6:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 80071da:	f8d8 3000 	ldr.w	r3, [r8]
 80071de:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 80071e0:	b90b      	cbnz	r3, 80071e6 <tcp_receive+0x2aa>
        pcb->unsent_oversize = 0;
 80071e2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80071e6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80071ea:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 80071ee:	f7fe fe1b 	bl	8005e28 <pbuf_clen>
 80071f2:	4583      	cmp	fp, r0
 80071f4:	d206      	bcs.n	8007204 <tcp_receive+0x2c8>
 80071f6:	4653      	mov	r3, sl
 80071f8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80071fc:	49ba      	ldr	r1, [pc, #744]	; (80074e8 <tcp_receive+0x5ac>)
 80071fe:	4648      	mov	r0, r9
 8007200:	f003 fa38 	bl	800a674 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8007204:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007208:	f7fe fe0e 	bl	8005e28 <pbuf_clen>
 800720c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8007210:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8007212:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8007214:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8007218:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 800721c:	4413      	add	r3, r2
      tcp_seg_free(next);
 800721e:	4640      	mov	r0, r8
      recv_acked += next->len;
 8007220:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8007222:	f7ff f891 	bl	8006348 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8007226:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800722a:	b153      	cbz	r3, 8007242 <tcp_receive+0x306>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800722c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800722e:	b943      	cbnz	r3, 8007242 <tcp_receive+0x306>
 8007230:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007232:	b933      	cbnz	r3, 8007242 <tcp_receive+0x306>
 8007234:	4653      	mov	r3, sl
 8007236:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800723a:	49ac      	ldr	r1, [pc, #688]	; (80074ec <tcp_receive+0x5b0>)
 800723c:	4648      	mov	r0, r9
 800723e:	f003 fa19 	bl	800a674 <iprintf>
    while (pcb->unsent != NULL &&
 8007242:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1a5      	bne.n	8007194 <tcp_receive+0x258>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8007248:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800724c:	883a      	ldrh	r2, [r7, #0]
 800724e:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007250:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8007252:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007256:	2a00      	cmp	r2, #0
 8007258:	f040 8119 	bne.w	800748e <tcp_receive+0x552>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800725c:	4fa4      	ldr	r7, [pc, #656]	; (80074f0 <tcp_receive+0x5b4>)
 800725e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007260:	8838      	ldrh	r0, [r7, #0]
 8007262:	2800      	cmp	r0, #0
 8007264:	f000 831c 	beq.w	80078a0 <tcp_receive+0x964>
 8007268:	7d23      	ldrb	r3, [r4, #20]
 800726a:	2b06      	cmp	r3, #6
 800726c:	f200 8318 	bhi.w	80078a0 <tcp_receive+0x964>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007270:	6833      	ldr	r3, [r6, #0]
 8007272:	1ad5      	subs	r5, r2, r3
 8007274:	2d01      	cmp	r5, #1
 8007276:	f100 815c 	bmi.w	8007532 <tcp_receive+0x5f6>
 800727a:	f1c3 0101 	rsb	r1, r3, #1
 800727e:	1a09      	subs	r1, r1, r0
 8007280:	4411      	add	r1, r2
 8007282:	2900      	cmp	r1, #0
 8007284:	f300 8155 	bgt.w	8007532 <tcp_receive+0x5f6>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8007288:	4b9a      	ldr	r3, [pc, #616]	; (80074f4 <tcp_receive+0x5b8>)
 800728a:	f8d3 9004 	ldr.w	r9, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 800728e:	46aa      	mov	sl, r5
 8007290:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8007292:	f1b9 0f00 	cmp.w	r9, #0
 8007296:	d106      	bne.n	80072a6 <tcp_receive+0x36a>
 8007298:	4b97      	ldr	r3, [pc, #604]	; (80074f8 <tcp_receive+0x5bc>)
 800729a:	4998      	ldr	r1, [pc, #608]	; (80074fc <tcp_receive+0x5c0>)
 800729c:	4898      	ldr	r0, [pc, #608]	; (8007500 <tcp_receive+0x5c4>)
 800729e:	f240 523c 	movw	r2, #1340	; 0x53c
 80072a2:	f003 f9e7 	bl	800a674 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80072a6:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80072aa:	429d      	cmp	r5, r3
 80072ac:	dd06      	ble.n	80072bc <tcp_receive+0x380>
 80072ae:	4b92      	ldr	r3, [pc, #584]	; (80074f8 <tcp_receive+0x5bc>)
 80072b0:	4994      	ldr	r1, [pc, #592]	; (8007504 <tcp_receive+0x5c8>)
 80072b2:	4893      	ldr	r0, [pc, #588]	; (8007500 <tcp_receive+0x5c4>)
 80072b4:	f240 523d 	movw	r2, #1341	; 0x53d
 80072b8:	f003 f9dc 	bl	800a674 <iprintf>
      if (inseg.p->len < off) {
 80072bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80072c0:	8943      	ldrh	r3, [r0, #10]
 80072c2:	429d      	cmp	r5, r3
 80072c4:	f340 812a 	ble.w	800751c <tcp_receive+0x5e0>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80072c8:	8903      	ldrh	r3, [r0, #8]
 80072ca:	429d      	cmp	r5, r3
 80072cc:	dd06      	ble.n	80072dc <tcp_receive+0x3a0>
 80072ce:	4b8a      	ldr	r3, [pc, #552]	; (80074f8 <tcp_receive+0x5bc>)
 80072d0:	498d      	ldr	r1, [pc, #564]	; (8007508 <tcp_receive+0x5cc>)
 80072d2:	488b      	ldr	r0, [pc, #556]	; (8007500 <tcp_receive+0x5c4>)
 80072d4:	f240 523f 	movw	r2, #1343	; 0x53f
 80072d8:	f003 f9cc 	bl	800a674 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80072dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80072e0:	8919      	ldrh	r1, [r3, #8]
 80072e2:	1b4d      	subs	r5, r1, r5
 80072e4:	b2ad      	uxth	r5, r5
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 80072e6:	2200      	movs	r2, #0
        while (p->len < off) {
 80072e8:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 80072ec:	459a      	cmp	sl, r3
 80072ee:	f300 80f2 	bgt.w	80074d6 <tcp_receive+0x59a>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80072f2:	f1ca 0100 	rsb	r1, sl, #0
 80072f6:	b209      	sxth	r1, r1
 80072f8:	4648      	mov	r0, r9
 80072fa:	f7fe fbdd 	bl	8005ab8 <pbuf_header>
 80072fe:	b130      	cbz	r0, 800730e <tcp_receive+0x3d2>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8007300:	4b7d      	ldr	r3, [pc, #500]	; (80074f8 <tcp_receive+0x5bc>)
 8007302:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8007306:	4981      	ldr	r1, [pc, #516]	; (800750c <tcp_receive+0x5d0>)
 8007308:	487d      	ldr	r0, [pc, #500]	; (8007500 <tcp_receive+0x5c4>)
 800730a:	f003 f9b3 	bl	800a674 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800730e:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8007312:	6833      	ldr	r3, [r6, #0]
 8007314:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007316:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8007318:	440b      	add	r3, r1
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007320:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007324:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007326:	6831      	ldr	r1, [r6, #0]
 8007328:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800732a:	1a8b      	subs	r3, r1, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	f2c0 82b1 	blt.w	8007894 <tcp_receive+0x958>
 8007332:	1c4b      	adds	r3, r1, #1
 8007334:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8007336:	1a9b      	subs	r3, r3, r2
 8007338:	1a1b      	subs	r3, r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	f300 82aa 	bgt.w	8007894 <tcp_receive+0x958>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8007340:	4291      	cmp	r1, r2
 8007342:	f040 81c9 	bne.w	80076d8 <tcp_receive+0x79c>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8007346:	4d6b      	ldr	r5, [pc, #428]	; (80074f4 <tcp_receive+0x5b8>)
 8007348:	68eb      	ldr	r3, [r5, #12]
 800734a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800734e:	8998      	ldrh	r0, [r3, #12]
 8007350:	f7fc fdf8 	bl	8003f44 <lwip_htons>
 8007354:	f010 0003 	ands.w	r0, r0, #3
 8007358:	bf18      	it	ne
 800735a:	2001      	movne	r0, #1
 800735c:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 800735e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8007360:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8007362:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8007364:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8007366:	d242      	bcs.n	80073ee <tcp_receive+0x4b2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007368:	68eb      	ldr	r3, [r5, #12]
 800736a:	8998      	ldrh	r0, [r3, #12]
 800736c:	f7fc fdea 	bl	8003f44 <lwip_htons>
 8007370:	07c2      	lsls	r2, r0, #31
 8007372:	d510      	bpl.n	8007396 <tcp_receive+0x45a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007374:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8007378:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800737c:	4640      	mov	r0, r8
 800737e:	f7fc fde1 	bl	8003f44 <lwip_htons>
 8007382:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8007386:	f7fc fddd 	bl	8003f44 <lwip_htons>
 800738a:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800738e:	ea40 0808 	orr.w	r8, r0, r8
 8007392:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8007396:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007398:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800739a:	68eb      	ldr	r3, [r5, #12]
 800739c:	8998      	ldrh	r0, [r3, #12]
 800739e:	f7fc fdd1 	bl	8003f44 <lwip_htons>
 80073a2:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 80073a4:	bf48      	it	mi
 80073a6:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80073a8:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 80073aa:	bf44      	itt	mi
 80073ac:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80073b0:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 80073b2:	8929      	ldrh	r1, [r5, #8]
 80073b4:	f7fe fcc8 	bl	8005d48 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80073b8:	68eb      	ldr	r3, [r5, #12]
 80073ba:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80073be:	8998      	ldrh	r0, [r3, #12]
 80073c0:	f7fc fdc0 	bl	8003f44 <lwip_htons>
 80073c4:	f010 0003 	ands.w	r0, r0, #3
 80073c8:	bf18      	it	ne
 80073ca:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80073cc:	6833      	ldr	r3, [r6, #0]
 80073ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 80073d0:	4440      	add	r0, r8
 80073d2:	b280      	uxth	r0, r0
 80073d4:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80073d6:	4418      	add	r0, r3
 80073d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80073da:	4413      	add	r3, r2
 80073dc:	4298      	cmp	r0, r3
 80073de:	d006      	beq.n	80073ee <tcp_receive+0x4b2>
 80073e0:	4b45      	ldr	r3, [pc, #276]	; (80074f8 <tcp_receive+0x5bc>)
 80073e2:	494b      	ldr	r1, [pc, #300]	; (8007510 <tcp_receive+0x5d4>)
 80073e4:	4846      	ldr	r0, [pc, #280]	; (8007500 <tcp_receive+0x5c4>)
 80073e6:	f240 527f 	movw	r2, #1407	; 0x57f
 80073ea:	f003 f943 	bl	800a674 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80073ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 80ad 	beq.w	8007550 <tcp_receive+0x614>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80073f6:	68eb      	ldr	r3, [r5, #12]
 80073f8:	8998      	ldrh	r0, [r3, #12]
 80073fa:	f7fc fda3 	bl	8003f44 <lwip_htons>
 80073fe:	07c0      	lsls	r0, r0, #31
 8007400:	f100 80a3 	bmi.w	800754a <tcp_receive+0x60e>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8007404:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8007408:	f1b8 0f00 	cmp.w	r8, #0
 800740c:	d03c      	beq.n	8007488 <tcp_receive+0x54c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800740e:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8007412:	6830      	ldr	r0, [r6, #0]
 8007414:	883b      	ldrh	r3, [r7, #0]
 8007416:	f8de 2004 	ldr.w	r2, [lr, #4]
 800741a:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800741e:	4403      	add	r3, r0
 8007420:	4411      	add	r1, r2
 8007422:	1a59      	subs	r1, r3, r1
            while (next &&
 8007424:	2900      	cmp	r1, #0
 8007426:	f280 80cf 	bge.w	80075c8 <tcp_receive+0x68c>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 800742a:	1a9b      	subs	r3, r3, r2
            if (next &&
 800742c:	2b00      	cmp	r3, #0
 800742e:	dd2b      	ble.n	8007488 <tcp_receive+0x54c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007430:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8007432:	1a12      	subs	r2, r2, r0
 8007434:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007436:	8998      	ldrh	r0, [r3, #12]
 8007438:	f7fc fd84 	bl	8003f44 <lwip_htons>
 800743c:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 800743e:	bf48      	it	mi
 8007440:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8007442:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8007444:	bf44      	itt	mi
 8007446:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800744a:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800744c:	8929      	ldrh	r1, [r5, #8]
 800744e:	f7fe fc7b 	bl	8005d48 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8007452:	68eb      	ldr	r3, [r5, #12]
 8007454:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8007458:	8998      	ldrh	r0, [r3, #12]
 800745a:	f7fc fd73 	bl	8003f44 <lwip_htons>
 800745e:	f010 0003 	ands.w	r0, r0, #3
 8007462:	bf18      	it	ne
 8007464:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8007466:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8007468:	4448      	add	r0, r9
 800746a:	b280      	uxth	r0, r0
 800746c:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800746e:	4418      	add	r0, r3
 8007470:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	4298      	cmp	r0, r3
 8007478:	d006      	beq.n	8007488 <tcp_receive+0x54c>
 800747a:	4b1f      	ldr	r3, [pc, #124]	; (80074f8 <tcp_receive+0x5bc>)
 800747c:	4925      	ldr	r1, [pc, #148]	; (8007514 <tcp_receive+0x5d8>)
 800747e:	4820      	ldr	r0, [pc, #128]	; (8007500 <tcp_receive+0x5c4>)
 8007480:	f240 52af 	movw	r2, #1455	; 0x5af
 8007484:	f003 f8f6 	bl	800a674 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8007488:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 800748c:	e060      	b.n	8007550 <tcp_receive+0x614>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800748e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007490:	6829      	ldr	r1, [r5, #0]
 8007492:	1a5b      	subs	r3, r3, r1
 8007494:	2b00      	cmp	r3, #0
 8007496:	f6bf aee1 	bge.w	800725c <tcp_receive+0x320>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800749a:	4b1f      	ldr	r3, [pc, #124]	; (8007518 <tcp_receive+0x5dc>)
      m = m - (pcb->sa >> 3);
 800749c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80074a0:	6819      	ldr	r1, [r3, #0]
 80074a2:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 80074a4:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 80074a8:	b289      	uxth	r1, r1
 80074aa:	b20b      	sxth	r3, r1
      if (m < 0) {
 80074ac:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 80074ae:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 80074b2:	4408      	add	r0, r1
        m = -m;
 80074b4:	bfbc      	itt	lt
 80074b6:	4249      	neglt	r1, r1
 80074b8:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 80074ba:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 80074be:	4413      	add	r3, r2
      pcb->sa += m;
 80074c0:	b200      	sxth	r0, r0
      pcb->sv += m;
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80074c6:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 80074ca:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80074ce:	2300      	movs	r3, #0
      pcb->sa += m;
 80074d0:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 80074d2:	6363      	str	r3, [r4, #52]	; 0x34
 80074d4:	e6c2      	b.n	800725c <tcp_receive+0x320>
          p->tot_len = new_tot_len;
 80074d6:	f8a9 5008 	strh.w	r5, [r9, #8]
          p->len = 0;
 80074da:	f8a9 200a 	strh.w	r2, [r9, #10]
          off -= p->len;
 80074de:	ebaa 0a03 	sub.w	sl, sl, r3
          p = p->next;
 80074e2:	f8d9 9000 	ldr.w	r9, [r9]
 80074e6:	e6ff      	b.n	80072e8 <tcp_receive+0x3ac>
 80074e8:	0800cf37 	.word	0x0800cf37
 80074ec:	0800cf5f 	.word	0x0800cf5f
 80074f0:	20002346 	.word	0x20002346
 80074f4:	20002314 	.word	0x20002314
 80074f8:	0800ceec 	.word	0x0800ceec
 80074fc:	0800cf7f 	.word	0x0800cf7f
 8007500:	0800bb8d 	.word	0x0800bb8d
 8007504:	0800cf8f 	.word	0x0800cf8f
 8007508:	0800cf9e 	.word	0x0800cf9e
 800750c:	0800cfae 	.word	0x0800cfae
 8007510:	0800cfc1 	.word	0x0800cfc1
 8007514:	0800cff8 	.word	0x0800cff8
 8007518:	20005894 	.word	0x20005894
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800751c:	4269      	negs	r1, r5
 800751e:	b209      	sxth	r1, r1
 8007520:	f7fe faca 	bl	8005ab8 <pbuf_header>
 8007524:	2800      	cmp	r0, #0
 8007526:	f43f aef2 	beq.w	800730e <tcp_receive+0x3d2>
          LWIP_ASSERT("pbuf_header failed", 0);
 800752a:	4b9c      	ldr	r3, [pc, #624]	; (800779c <tcp_receive+0x860>)
 800752c:	f240 5251 	movw	r2, #1361	; 0x551
 8007530:	e6e9      	b.n	8007306 <tcp_receive+0x3ca>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8007536:	bfbe      	ittt	lt
 8007538:	7ea3      	ldrblt	r3, [r4, #26]
 800753a:	f043 0302 	orrlt.w	r3, r3, #2
 800753e:	76a3      	strblt	r3, [r4, #26]
 8007540:	e6f1      	b.n	8007326 <tcp_receive+0x3ea>
              pcb->ooseq = pcb->ooseq->next;
 8007542:	6803      	ldr	r3, [r0, #0]
 8007544:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8007546:	f7fe feff 	bl	8006348 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800754a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800754c:	2800      	cmp	r0, #0
 800754e:	d1f8      	bne.n	8007542 <tcp_receive+0x606>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8007550:	883a      	ldrh	r2, [r7, #0]
 8007552:	6833      	ldr	r3, [r6, #0]
 8007554:	4413      	add	r3, r2
 8007556:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8007558:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800755a:	4293      	cmp	r3, r2
 800755c:	d206      	bcs.n	800756c <tcp_receive+0x630>
 800755e:	4b8f      	ldr	r3, [pc, #572]	; (800779c <tcp_receive+0x860>)
 8007560:	498f      	ldr	r1, [pc, #572]	; (80077a0 <tcp_receive+0x864>)
 8007562:	4890      	ldr	r0, [pc, #576]	; (80077a4 <tcp_receive+0x868>)
 8007564:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8007568:	f003 f884 	bl	800a674 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800756c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800756e:	883a      	ldrh	r2, [r7, #0]
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8007574:	4620      	mov	r0, r4
 8007576:	f7fe fe7d 	bl	8006274 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800757a:	686b      	ldr	r3, [r5, #4]
 800757c:	891a      	ldrh	r2, [r3, #8]
 800757e:	b11a      	cbz	r2, 8007588 <tcp_receive+0x64c>
          recv_data = inseg.p;
 8007580:	4a89      	ldr	r2, [pc, #548]	; (80077a8 <tcp_receive+0x86c>)
 8007582:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8007584:	2300      	movs	r3, #0
 8007586:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007588:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800758a:	4f84      	ldr	r7, [pc, #528]	; (800779c <tcp_receive+0x860>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800758c:	8998      	ldrh	r0, [r3, #12]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800758e:	f8df 8224 	ldr.w	r8, [pc, #548]	; 80077b4 <tcp_receive+0x878>
 8007592:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80077a4 <tcp_receive+0x868>
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007596:	f7fc fcd5 	bl	8003f44 <lwip_htons>
 800759a:	07c5      	lsls	r5, r0, #31
          recv_flags |= TF_GOT_FIN;
 800759c:	bf41      	itttt	mi
 800759e:	4a83      	ldrmi	r2, [pc, #524]	; (80077ac <tcp_receive+0x870>)
 80075a0:	7813      	ldrbmi	r3, [r2, #0]
 80075a2:	f043 0320 	orrmi.w	r3, r3, #32
 80075a6:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 80075a8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80075aa:	b125      	cbz	r5, 80075b6 <tcp_receive+0x67a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80075ac:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 80075ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80075b0:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 80075b2:	428b      	cmp	r3, r1
 80075b4:	d033      	beq.n	800761e <tcp_receive+0x6e2>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80075b6:	7ea3      	ldrb	r3, [r4, #26]
 80075b8:	07d9      	lsls	r1, r3, #31
 80075ba:	f140 8087 	bpl.w	80076cc <tcp_receive+0x790>
 80075be:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 80075c2:	f043 0302 	orr.w	r3, r3, #2
 80075c6:	e083      	b.n	80076d0 <tcp_receive+0x794>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80075c8:	f8be 000c 	ldrh.w	r0, [lr, #12]
 80075cc:	f7fc fcba 	bl	8003f44 <lwip_htons>
 80075d0:	07c1      	lsls	r1, r0, #31
 80075d2:	d51d      	bpl.n	8007610 <tcp_receive+0x6d4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80075d4:	68eb      	ldr	r3, [r5, #12]
 80075d6:	8998      	ldrh	r0, [r3, #12]
 80075d8:	f7fc fcb4 	bl	8003f44 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80075dc:	0782      	lsls	r2, r0, #30
 80075de:	d417      	bmi.n	8007610 <tcp_receive+0x6d4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80075e0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80075e4:	2001      	movs	r0, #1
 80075e6:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 80075ea:	f7fc fcab 	bl	8003f44 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 80075ee:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80075f0:	ea49 0000 	orr.w	r0, r9, r0
 80075f4:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80075f8:	8998      	ldrh	r0, [r3, #12]
 80075fa:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80075fe:	f7fc fca1 	bl	8003f44 <lwip_htons>
 8007602:	f010 0003 	ands.w	r0, r0, #3
 8007606:	bf18      	it	ne
 8007608:	2001      	movne	r0, #1
 800760a:	4481      	add	r9, r0
 800760c:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8007610:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8007614:	4640      	mov	r0, r8
 8007616:	f7fe fe97 	bl	8006348 <tcp_seg_free>
              next = next->next;
 800761a:	46c8      	mov	r8, r9
 800761c:	e6f4      	b.n	8007408 <tcp_receive+0x4cc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800761e:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007620:	8990      	ldrh	r0, [r2, #12]
 8007622:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8007626:	f7fc fc8d 	bl	8003f44 <lwip_htons>
 800762a:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800762c:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007630:	f010 0003 	ands.w	r0, r0, #3
 8007634:	bf18      	it	ne
 8007636:	2001      	movne	r0, #1
 8007638:	449a      	add	sl, r3
 800763a:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800763c:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800763e:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007640:	8998      	ldrh	r0, [r3, #12]
 8007642:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 8007646:	f7fc fc7d 	bl	8003f44 <lwip_htons>
 800764a:	f010 0003 	ands.w	r0, r0, #3
 800764e:	bf18      	it	ne
 8007650:	2001      	movne	r0, #1
 8007652:	4458      	add	r0, fp
 8007654:	4582      	cmp	sl, r0
 8007656:	d206      	bcs.n	8007666 <tcp_receive+0x72a>
 8007658:	463b      	mov	r3, r7
 800765a:	f240 52de 	movw	r2, #1502	; 0x5de
 800765e:	4641      	mov	r1, r8
 8007660:	4648      	mov	r0, r9
 8007662:	f003 f807 	bl	800a674 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8007666:	68eb      	ldr	r3, [r5, #12]
 8007668:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800766c:	8998      	ldrh	r0, [r3, #12]
 800766e:	f7fc fc69 	bl	8003f44 <lwip_htons>
 8007672:	f010 0003 	ands.w	r0, r0, #3
 8007676:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007678:	bf18      	it	ne
 800767a:	2001      	movne	r0, #1
 800767c:	4450      	add	r0, sl
 800767e:	1a18      	subs	r0, r3, r0
 8007680:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8007682:	4620      	mov	r0, r4
 8007684:	f7fe fdf6 	bl	8006274 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8007688:	6869      	ldr	r1, [r5, #4]
 800768a:	890b      	ldrh	r3, [r1, #8]
 800768c:	b133      	cbz	r3, 800769c <tcp_receive+0x760>
            if (recv_data) {
 800768e:	4b46      	ldr	r3, [pc, #280]	; (80077a8 <tcp_receive+0x86c>)
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	b1c8      	cbz	r0, 80076c8 <tcp_receive+0x78c>
              pbuf_cat(recv_data, cseg->p);
 8007694:	f7fe fbe4 	bl	8005e60 <pbuf_cat>
            cseg->p = NULL;
 8007698:	2300      	movs	r3, #0
 800769a:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800769c:	68eb      	ldr	r3, [r5, #12]
 800769e:	8998      	ldrh	r0, [r3, #12]
 80076a0:	f7fc fc50 	bl	8003f44 <lwip_htons>
 80076a4:	07c0      	lsls	r0, r0, #31
 80076a6:	d509      	bpl.n	80076bc <tcp_receive+0x780>
            recv_flags |= TF_GOT_FIN;
 80076a8:	4a40      	ldr	r2, [pc, #256]	; (80077ac <tcp_receive+0x870>)
 80076aa:	7813      	ldrb	r3, [r2, #0]
 80076ac:	f043 0320 	orr.w	r3, r3, #32
 80076b0:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80076b2:	7d23      	ldrb	r3, [r4, #20]
 80076b4:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 80076b6:	bf04      	itt	eq
 80076b8:	2307      	moveq	r3, #7
 80076ba:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 80076c0:	4628      	mov	r0, r5
 80076c2:	f7fe fe41 	bl	8006348 <tcp_seg_free>
 80076c6:	e76f      	b.n	80075a8 <tcp_receive+0x66c>
              recv_data = cseg->p;
 80076c8:	6019      	str	r1, [r3, #0]
 80076ca:	e7e5      	b.n	8007698 <tcp_receive+0x75c>
        tcp_ack(pcb);
 80076cc:	f043 0301 	orr.w	r3, r3, #1
 80076d0:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 80076d2:	b003      	add	sp, #12
 80076d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 80076d8:	4620      	mov	r0, r4
 80076da:	f001 faa7 	bl	8008c2c <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 80076de:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80076e0:	b925      	cbnz	r5, 80076ec <tcp_receive+0x7b0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80076e2:	4833      	ldr	r0, [pc, #204]	; (80077b0 <tcp_receive+0x874>)
 80076e4:	f7fe fe48 	bl	8006378 <tcp_seg_copy>
 80076e8:	6720      	str	r0, [r4, #112]	; 0x70
 80076ea:	e7f2      	b.n	80076d2 <tcp_receive+0x796>
            if (seqno == next->tcphdr->seqno) {
 80076ec:	6833      	ldr	r3, [r6, #0]
 80076ee:	f04f 0800 	mov.w	r8, #0
 80076f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80076f6:	f103 0c01 	add.w	ip, r3, #1
 80076fa:	68e8      	ldr	r0, [r5, #12]
 80076fc:	6842      	ldr	r2, [r0, #4]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d117      	bne.n	8007732 <tcp_receive+0x7f6>
              if (inseg.len > next->len) {
 8007702:	482b      	ldr	r0, [pc, #172]	; (80077b0 <tcp_receive+0x874>)
 8007704:	892b      	ldrh	r3, [r5, #8]
 8007706:	8902      	ldrh	r2, [r0, #8]
 8007708:	429a      	cmp	r2, r3
 800770a:	d9e2      	bls.n	80076d2 <tcp_receive+0x796>
                cseg = tcp_seg_copy(&inseg);
 800770c:	f7fe fe34 	bl	8006378 <tcp_seg_copy>
                if (cseg != NULL) {
 8007710:	2800      	cmp	r0, #0
 8007712:	d0de      	beq.n	80076d2 <tcp_receive+0x796>
                  if (prev != NULL) {
 8007714:	f1b8 0f00 	cmp.w	r8, #0
 8007718:	d009      	beq.n	800772e <tcp_receive+0x7f2>
                    prev->next = cseg;
 800771a:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800771e:	4629      	mov	r1, r5
}
 8007720:	b003      	add	sp, #12
 8007722:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8007726:	f7ff bbcb 	b.w	8006ec0 <tcp_oos_insert_segment>
 800772a:	460d      	mov	r5, r1
 800772c:	e7e5      	b.n	80076fa <tcp_receive+0x7be>
                    pcb->ooseq = cseg;
 800772e:	6720      	str	r0, [r4, #112]	; 0x70
 8007730:	e7f5      	b.n	800771e <tcp_receive+0x7e2>
              if (prev == NULL) {
 8007732:	f1b8 0f00 	cmp.w	r8, #0
 8007736:	d109      	bne.n	800774c <tcp_receive+0x810>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007738:	1a99      	subs	r1, r3, r2
 800773a:	2900      	cmp	r1, #0
 800773c:	da3c      	bge.n	80077b8 <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 800773e:	481c      	ldr	r0, [pc, #112]	; (80077b0 <tcp_receive+0x874>)
 8007740:	f7fe fe1a 	bl	8006378 <tcp_seg_copy>
                  if (cseg != NULL) {
 8007744:	2800      	cmp	r0, #0
 8007746:	d0c4      	beq.n	80076d2 <tcp_receive+0x796>
                    pcb->ooseq = cseg;
 8007748:	6720      	str	r0, [r4, #112]	; 0x70
 800774a:	e7e8      	b.n	800771e <tcp_receive+0x7e2>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800774c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007750:	6849      	ldr	r1, [r1, #4]
 8007752:	ebae 0101 	sub.w	r1, lr, r1
 8007756:	2900      	cmp	r1, #0
 8007758:	db2e      	blt.n	80077b8 <tcp_receive+0x87c>
 800775a:	ebac 0102 	sub.w	r1, ip, r2
 800775e:	2900      	cmp	r1, #0
 8007760:	dc2a      	bgt.n	80077b8 <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8007762:	4813      	ldr	r0, [pc, #76]	; (80077b0 <tcp_receive+0x874>)
 8007764:	f7fe fe08 	bl	8006378 <tcp_seg_copy>
                  if (cseg != NULL) {
 8007768:	4604      	mov	r4, r0
 800776a:	2800      	cmp	r0, #0
 800776c:	d0b1      	beq.n	80076d2 <tcp_receive+0x796>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800776e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007772:	6831      	ldr	r1, [r6, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800777a:	4413      	add	r3, r2
 800777c:	1a5b      	subs	r3, r3, r1
 800777e:	2b00      	cmp	r3, #0
 8007780:	dd07      	ble.n	8007792 <tcp_receive+0x856>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007782:	1a89      	subs	r1, r1, r2
 8007784:	b289      	uxth	r1, r1
 8007786:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800778a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800778e:	f7fe fadb 	bl	8005d48 <pbuf_realloc>
                    prev->next = cseg;
 8007792:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8007796:	4629      	mov	r1, r5
 8007798:	4620      	mov	r0, r4
 800779a:	e7c1      	b.n	8007720 <tcp_receive+0x7e4>
 800779c:	0800ceec 	.word	0x0800ceec
 80077a0:	0800d033 	.word	0x0800d033
 80077a4:	0800bb8d 	.word	0x0800bb8d
 80077a8:	20002328 	.word	0x20002328
 80077ac:	2000232c 	.word	0x2000232c
 80077b0:	20002314 	.word	0x20002314
 80077b4:	0800d052 	.word	0x0800d052
              if (next->next == NULL &&
 80077b8:	6829      	ldr	r1, [r5, #0]
 80077ba:	46a8      	mov	r8, r5
 80077bc:	2900      	cmp	r1, #0
 80077be:	d1b4      	bne.n	800772a <tcp_receive+0x7ee>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80077c0:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	dd85      	ble.n	80076d2 <tcp_receive+0x796>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80077c6:	8980      	ldrh	r0, [r0, #12]
 80077c8:	f7fc fbbc 	bl	8003f44 <lwip_htons>
 80077cc:	07c2      	lsls	r2, r0, #31
 80077ce:	d480      	bmi.n	80076d2 <tcp_receive+0x796>
                next->next = tcp_seg_copy(&inseg);
 80077d0:	483c      	ldr	r0, [pc, #240]	; (80078c4 <tcp_receive+0x988>)
 80077d2:	f7fe fdd1 	bl	8006378 <tcp_seg_copy>
 80077d6:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 80077d8:	2800      	cmp	r0, #0
 80077da:	f43f af7a 	beq.w	80076d2 <tcp_receive+0x796>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80077de:	68eb      	ldr	r3, [r5, #12]
 80077e0:	6831      	ldr	r1, [r6, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	892b      	ldrh	r3, [r5, #8]
 80077e6:	4413      	add	r3, r2
 80077e8:	1a5b      	subs	r3, r3, r1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	dd05      	ble.n	80077fa <tcp_receive+0x8be>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80077ee:	1a89      	subs	r1, r1, r2
 80077f0:	b289      	uxth	r1, r1
 80077f2:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 80077f4:	6868      	ldr	r0, [r5, #4]
 80077f6:	f7fe faa7 	bl	8005d48 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80077fa:	6832      	ldr	r2, [r6, #0]
 80077fc:	883b      	ldrh	r3, [r7, #0]
 80077fe:	4413      	add	r3, r2
 8007800:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007802:	1a9b      	subs	r3, r3, r2
 8007804:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007806:	1a9b      	subs	r3, r3, r2
 8007808:	2b00      	cmp	r3, #0
 800780a:	f77f af62 	ble.w	80076d2 <tcp_receive+0x796>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800780e:	682b      	ldr	r3, [r5, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	8998      	ldrh	r0, [r3, #12]
 8007814:	f7fc fb96 	bl	8003f44 <lwip_htons>
 8007818:	07c3      	lsls	r3, r0, #31
 800781a:	d511      	bpl.n	8007840 <tcp_receive+0x904>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8007822:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8007826:	4640      	mov	r0, r8
 8007828:	f7fc fb8c 	bl	8003f44 <lwip_htons>
 800782c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8007830:	f7fc fb88 	bl	8003f44 <lwip_htons>
 8007834:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8007838:	ea40 0808 	orr.w	r8, r0, r8
 800783c:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007840:	6832      	ldr	r2, [r6, #0]
 8007842:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	1a89      	subs	r1, r1, r2
 8007848:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 800784a:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800784c:	4411      	add	r1, r2
 800784e:	b289      	uxth	r1, r1
 8007850:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007852:	f7fe fa79 	bl	8005d48 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007856:	682b      	ldr	r3, [r5, #0]
 8007858:	891d      	ldrh	r5, [r3, #8]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	8998      	ldrh	r0, [r3, #12]
 800785e:	f7fc fb71 	bl	8003f44 <lwip_htons>
 8007862:	f010 0003 	ands.w	r0, r0, #3
 8007866:	bf18      	it	ne
 8007868:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800786a:	6833      	ldr	r3, [r6, #0]
 800786c:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 800786e:	4428      	add	r0, r5
 8007870:	b280      	uxth	r0, r0
 8007872:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007874:	4418      	add	r0, r3
 8007876:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007878:	4413      	add	r3, r2
 800787a:	4298      	cmp	r0, r3
 800787c:	f43f af29 	beq.w	80076d2 <tcp_receive+0x796>
 8007880:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <tcp_receive+0x98c>)
 8007882:	4912      	ldr	r1, [pc, #72]	; (80078cc <tcp_receive+0x990>)
 8007884:	4812      	ldr	r0, [pc, #72]	; (80078d0 <tcp_receive+0x994>)
 8007886:	f240 627b 	movw	r2, #1659	; 0x67b
}
 800788a:	b003      	add	sp, #12
 800788c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007890:	f002 bef0 	b.w	800a674 <iprintf>
      tcp_send_empty_ack(pcb);
 8007894:	4620      	mov	r0, r4
}
 8007896:	b003      	add	sp, #12
 8007898:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 800789c:	f001 b9c6 	b.w	8008c2c <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80078a0:	6833      	ldr	r3, [r6, #0]
 80078a2:	1a99      	subs	r1, r3, r2
 80078a4:	2900      	cmp	r1, #0
 80078a6:	db06      	blt.n	80078b6 <tcp_receive+0x97a>
 80078a8:	3301      	adds	r3, #1
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f77f af0e 	ble.w	80076d2 <tcp_receive+0x796>
      tcp_ack_now(pcb);
 80078b6:	7ea3      	ldrb	r3, [r4, #26]
 80078b8:	e683      	b.n	80075c2 <tcp_receive+0x686>
        pcb->dupacks = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c0:	f7ff bbb1 	b.w	8007026 <tcp_receive+0xea>
 80078c4:	20002314 	.word	0x20002314
 80078c8:	0800ceec 	.word	0x0800ceec
 80078cc:	0800cfc1 	.word	0x0800cfc1
 80078d0:	0800bb8d 	.word	0x0800bb8d

080078d4 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80078d4:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <tcp_getoptbyte+0x30>)
 80078d6:	4a0c      	ldr	r2, [pc, #48]	; (8007908 <tcp_getoptbyte+0x34>)
 80078d8:	6819      	ldr	r1, [r3, #0]
{
 80078da:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80078dc:	b121      	cbz	r1, 80078e8 <tcp_getoptbyte+0x14>
 80078de:	480b      	ldr	r0, [pc, #44]	; (800790c <tcp_getoptbyte+0x38>)
 80078e0:	8813      	ldrh	r3, [r2, #0]
 80078e2:	8800      	ldrh	r0, [r0, #0]
 80078e4:	4283      	cmp	r3, r0
 80078e6:	d207      	bcs.n	80078f8 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80078e8:	4b09      	ldr	r3, [pc, #36]	; (8007910 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 80078ea:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80078ec:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 80078ee:	440b      	add	r3, r1
 80078f0:	1c48      	adds	r0, r1, #1
 80078f2:	8010      	strh	r0, [r2, #0]
 80078f4:	7d18      	ldrb	r0, [r3, #20]
 80078f6:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80078f8:	1c5c      	adds	r4, r3, #1
 80078fa:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 80078fc:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80078fe:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8007900:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8007902:	bd10      	pop	{r4, pc}
 8007904:	20002340 	.word	0x20002340
 8007908:	20002334 	.word	0x20002334
 800790c:	2000233c 	.word	0x2000233c
 8007910:	20002338 	.word	0x20002338

08007914 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8007914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007916:	4d19      	ldr	r5, [pc, #100]	; (800797c <tcp_parseopt.isra.1.part.2+0x68>)
 8007918:	4e19      	ldr	r6, [pc, #100]	; (8007980 <tcp_parseopt.isra.1.part.2+0x6c>)
 800791a:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 800791c:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800791e:	802b      	strh	r3, [r5, #0]
 8007920:	8834      	ldrh	r4, [r6, #0]
 8007922:	882b      	ldrh	r3, [r5, #0]
 8007924:	42a3      	cmp	r3, r4
 8007926:	d300      	bcc.n	800792a <tcp_parseopt.isra.1.part.2+0x16>
 8007928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 800792a:	f7ff ffd3 	bl	80078d4 <tcp_getoptbyte>
      switch (opt) {
 800792e:	2801      	cmp	r0, #1
 8007930:	d0f6      	beq.n	8007920 <tcp_parseopt.isra.1.part.2+0xc>
 8007932:	d3f9      	bcc.n	8007928 <tcp_parseopt.isra.1.part.2+0x14>
 8007934:	2802      	cmp	r0, #2
 8007936:	d117      	bne.n	8007968 <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007938:	f7ff ffcc 	bl	80078d4 <tcp_getoptbyte>
 800793c:	2804      	cmp	r0, #4
 800793e:	d1f3      	bne.n	8007928 <tcp_parseopt.isra.1.part.2+0x14>
 8007940:	882b      	ldrh	r3, [r5, #0]
 8007942:	3301      	adds	r3, #1
 8007944:	42a3      	cmp	r3, r4
 8007946:	daef      	bge.n	8007928 <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8007948:	f7ff ffc4 	bl	80078d4 <tcp_getoptbyte>
 800794c:	0200      	lsls	r0, r0, #8
 800794e:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8007950:	f7ff ffc0 	bl	80078d4 <tcp_getoptbyte>
 8007954:	4320      	orrs	r0, r4
 8007956:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007958:	1e43      	subs	r3, r0, #1
 800795a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800795e:	bf28      	it	cs
 8007960:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8007964:	8038      	strh	r0, [r7, #0]
 8007966:	e7db      	b.n	8007920 <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8007968:	f7ff ffb4 	bl	80078d4 <tcp_getoptbyte>
        if (data < 2) {
 800796c:	2801      	cmp	r0, #1
 800796e:	d9db      	bls.n	8007928 <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8007970:	882b      	ldrh	r3, [r5, #0]
 8007972:	3b02      	subs	r3, #2
 8007974:	4418      	add	r0, r3
 8007976:	8028      	strh	r0, [r5, #0]
 8007978:	e7d2      	b.n	8007920 <tcp_parseopt.isra.1.part.2+0xc>
 800797a:	bf00      	nop
 800797c:	20002334 	.word	0x20002334
 8007980:	20002344 	.word	0x20002344

08007984 <tcp_input_delayed_close>:
{
 8007984:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 8007986:	4b0d      	ldr	r3, [pc, #52]	; (80079bc <tcp_input_delayed_close+0x38>)
{
 8007988:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800798a:	7818      	ldrb	r0, [r3, #0]
 800798c:	f010 0010 	ands.w	r0, r0, #16
 8007990:	d012      	beq.n	80079b8 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007992:	7ea3      	ldrb	r3, [r4, #26]
 8007994:	06db      	lsls	r3, r3, #27
 8007996:	d406      	bmi.n	80079a6 <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007998:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800799c:	b11b      	cbz	r3, 80079a6 <tcp_input_delayed_close+0x22>
 800799e:	f06f 010e 	mvn.w	r1, #14
 80079a2:	6920      	ldr	r0, [r4, #16]
 80079a4:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80079a6:	4621      	mov	r1, r4
 80079a8:	4805      	ldr	r0, [pc, #20]	; (80079c0 <tcp_input_delayed_close+0x3c>)
 80079aa:	f7fe ff65 	bl	8006878 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80079ae:	2001      	movs	r0, #1
 80079b0:	4621      	mov	r1, r4
 80079b2:	f7fd ff23 	bl	80057fc <memp_free>
 80079b6:	2001      	movs	r0, #1
}
 80079b8:	bd10      	pop	{r4, pc}
 80079ba:	bf00      	nop
 80079bc:	2000232c 	.word	0x2000232c
 80079c0:	20005890 	.word	0x20005890

080079c4 <tcp_input>:
{
 80079c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 80079c8:	4e9f      	ldr	r6, [pc, #636]	; (8007c48 <tcp_input+0x284>)
 80079ca:	6843      	ldr	r3, [r0, #4]
 80079cc:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 80079ce:	8943      	ldrh	r3, [r0, #10]
 80079d0:	2b13      	cmp	r3, #19
{
 80079d2:	b089      	sub	sp, #36	; 0x24
 80079d4:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 80079d6:	f240 81b2 	bls.w	8007d3e <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80079da:	4f9c      	ldr	r7, [pc, #624]	; (8007c4c <tcp_input+0x288>)
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6978      	ldr	r0, [r7, #20]
 80079e0:	f7fd f91b 	bl	8004c1a <ip4_addr_isbroadcast_u32>
 80079e4:	46b8      	mov	r8, r7
 80079e6:	4604      	mov	r4, r0
 80079e8:	2800      	cmp	r0, #0
 80079ea:	f040 81a8 	bne.w	8007d3e <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80079f4:	2be0      	cmp	r3, #224	; 0xe0
 80079f6:	f000 81a2 	beq.w	8007d3e <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80079fa:	6833      	ldr	r3, [r6, #0]
 80079fc:	8998      	ldrh	r0, [r3, #12]
 80079fe:	f7fc faa1 	bl	8003f44 <lwip_htons>
 8007a02:	0a81      	lsrs	r1, r0, #10
 8007a04:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007a08:	2913      	cmp	r1, #19
 8007a0a:	f240 8198 	bls.w	8007d3e <tcp_input+0x37a>
 8007a0e:	892b      	ldrh	r3, [r5, #8]
 8007a10:	b289      	uxth	r1, r1
 8007a12:	428b      	cmp	r3, r1
 8007a14:	f0c0 8193 	bcc.w	8007d3e <tcp_input+0x37a>
  if (p->len >= hdrlen_bytes) {
 8007a18:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007a1a:	4a8d      	ldr	r2, [pc, #564]	; (8007c50 <tcp_input+0x28c>)
  tcphdr_opt2 = NULL;
 8007a1c:	4f8d      	ldr	r7, [pc, #564]	; (8007c54 <tcp_input+0x290>)
 8007a1e:	9206      	str	r2, [sp, #24]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007a20:	f1a1 0314 	sub.w	r3, r1, #20
 8007a24:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8007a26:	4288      	cmp	r0, r1
  tcphdr_opt2 = NULL;
 8007a28:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007a2a:	8013      	strh	r3, [r2, #0]
 8007a2c:	4c8a      	ldr	r4, [pc, #552]	; (8007c58 <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 8007a2e:	d344      	bcc.n	8007aba <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007a30:	4249      	negs	r1, r1
 8007a32:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8007a34:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007a36:	f7fe f83f 	bl	8005ab8 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007a3a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007a3c:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8007cac <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007a40:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007a42:	4f86      	ldr	r7, [pc, #536]	; (8007c5c <tcp_input+0x298>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007a44:	f7fc fa7e 	bl	8003f44 <lwip_htons>
 8007a48:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007a4a:	6834      	ldr	r4, [r6, #0]
 8007a4c:	8860      	ldrh	r0, [r4, #2]
 8007a4e:	f7fc fa79 	bl	8003f44 <lwip_htons>
 8007a52:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007a54:	6834      	ldr	r4, [r6, #0]
 8007a56:	6860      	ldr	r0, [r4, #4]
 8007a58:	f7fc fa77 	bl	8003f4a <lwip_htonl>
 8007a5c:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007a5e:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007a60:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007a64:	68a0      	ldr	r0, [r4, #8]
 8007a66:	f7fc fa70 	bl	8003f4a <lwip_htonl>
 8007a6a:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007a6c:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007a6e:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007a70:	89e0      	ldrh	r0, [r4, #14]
 8007a72:	f7fc fa67 	bl	8003f44 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8007a76:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007a78:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8007a7a:	8998      	ldrh	r0, [r3, #12]
 8007a7c:	f7fc fa62 	bl	8003f44 <lwip_htons>
 8007a80:	b2c0      	uxtb	r0, r0
 8007a82:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007a86:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8007a88:	4a75      	ldr	r2, [pc, #468]	; (8007c60 <tcp_input+0x29c>)
 8007a8a:	9203      	str	r2, [sp, #12]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007a8c:	f010 0003 	ands.w	r0, r0, #3
 8007a90:	bf18      	it	ne
 8007a92:	2001      	movne	r0, #1
 8007a94:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a96:	4973      	ldr	r1, [pc, #460]	; (8007c64 <tcp_input+0x2a0>)
  flags = TCPH_FLAGS(tcphdr);
 8007a98:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007a9a:	4b73      	ldr	r3, [pc, #460]	; (8007c68 <tcp_input+0x2a4>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a9c:	680c      	ldr	r4, [r1, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007a9e:	8018      	strh	r0, [r3, #0]
  prev = NULL;
 8007aa0:	f04f 0a00 	mov.w	sl, #0
 8007aa4:	9304      	str	r3, [sp, #16]
 8007aa6:	4689      	mov	r9, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007aa8:	2c00      	cmp	r4, #0
 8007aaa:	d140      	bne.n	8007b2e <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007aac:	4b6f      	ldr	r3, [pc, #444]	; (8007c6c <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007aae:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8007c70 <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ab2:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007ab4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8007cb0 <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ab8:	e148      	b.n	8007d4c <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007aba:	682b      	ldr	r3, [r5, #0]
 8007abc:	b92b      	cbnz	r3, 8007aca <tcp_input+0x106>
 8007abe:	4b6c      	ldr	r3, [pc, #432]	; (8007c70 <tcp_input+0x2ac>)
 8007ac0:	496c      	ldr	r1, [pc, #432]	; (8007c74 <tcp_input+0x2b0>)
 8007ac2:	486d      	ldr	r0, [pc, #436]	; (8007c78 <tcp_input+0x2b4>)
 8007ac4:	22b2      	movs	r2, #178	; 0xb2
 8007ac6:	f002 fdd5 	bl	800a674 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8007aca:	f06f 0113 	mvn.w	r1, #19
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f7fd fff2 	bl	8005ab8 <pbuf_header>
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007ad4:	9b06      	ldr	r3, [sp, #24]
    tcphdr_opt1len = p->len;
 8007ad6:	8969      	ldrh	r1, [r5, #10]
 8007ad8:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007ada:	881c      	ldrh	r4, [r3, #0]
 8007adc:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8007ade:	4249      	negs	r1, r1
 8007ae0:	b209      	sxth	r1, r1
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f7fd ffe8 	bl	8005ab8 <pbuf_header>
    if (opt2len > p->next->len) {
 8007ae8:	6828      	ldr	r0, [r5, #0]
 8007aea:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007aec:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8007aee:	42a3      	cmp	r3, r4
 8007af0:	f0c0 8125 	bcc.w	8007d3e <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8007af4:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8007af6:	6843      	ldr	r3, [r0, #4]
 8007af8:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8007afa:	b209      	sxth	r1, r1
 8007afc:	f7fd ffdc 	bl	8005ab8 <pbuf_header>
    p->tot_len -= opt2len;
 8007b00:	892b      	ldrh	r3, [r5, #8]
 8007b02:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007b04:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8007b06:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007b08:	b12b      	cbz	r3, 8007b16 <tcp_input+0x152>
 8007b0a:	4b59      	ldr	r3, [pc, #356]	; (8007c70 <tcp_input+0x2ac>)
 8007b0c:	495b      	ldr	r1, [pc, #364]	; (8007c7c <tcp_input+0x2b8>)
 8007b0e:	485a      	ldr	r0, [pc, #360]	; (8007c78 <tcp_input+0x2b4>)
 8007b10:	22cf      	movs	r2, #207	; 0xcf
 8007b12:	f002 fdaf 	bl	800a674 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	892a      	ldrh	r2, [r5, #8]
 8007b1a:	891b      	ldrh	r3, [r3, #8]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d08c      	beq.n	8007a3a <tcp_input+0x76>
 8007b20:	4b53      	ldr	r3, [pc, #332]	; (8007c70 <tcp_input+0x2ac>)
 8007b22:	4957      	ldr	r1, [pc, #348]	; (8007c80 <tcp_input+0x2bc>)
 8007b24:	4854      	ldr	r0, [pc, #336]	; (8007c78 <tcp_input+0x2b4>)
 8007b26:	22d0      	movs	r2, #208	; 0xd0
 8007b28:	f002 fda4 	bl	800a674 <iprintf>
 8007b2c:	e785      	b.n	8007a3a <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007b2e:	7d23      	ldrb	r3, [r4, #20]
 8007b30:	b92b      	cbnz	r3, 8007b3e <tcp_input+0x17a>
 8007b32:	4b4f      	ldr	r3, [pc, #316]	; (8007c70 <tcp_input+0x2ac>)
 8007b34:	4953      	ldr	r1, [pc, #332]	; (8007c84 <tcp_input+0x2c0>)
 8007b36:	4850      	ldr	r0, [pc, #320]	; (8007c78 <tcp_input+0x2b4>)
 8007b38:	22e2      	movs	r2, #226	; 0xe2
 8007b3a:	f002 fd9b 	bl	800a674 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007b3e:	7d23      	ldrb	r3, [r4, #20]
 8007b40:	2b0a      	cmp	r3, #10
 8007b42:	d105      	bne.n	8007b50 <tcp_input+0x18c>
 8007b44:	4b4a      	ldr	r3, [pc, #296]	; (8007c70 <tcp_input+0x2ac>)
 8007b46:	4950      	ldr	r1, [pc, #320]	; (8007c88 <tcp_input+0x2c4>)
 8007b48:	484b      	ldr	r0, [pc, #300]	; (8007c78 <tcp_input+0x2b4>)
 8007b4a:	22e3      	movs	r2, #227	; 0xe3
 8007b4c:	f002 fd92 	bl	800a674 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007b50:	7d23      	ldrb	r3, [r4, #20]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d105      	bne.n	8007b62 <tcp_input+0x19e>
 8007b56:	4b46      	ldr	r3, [pc, #280]	; (8007c70 <tcp_input+0x2ac>)
 8007b58:	494c      	ldr	r1, [pc, #304]	; (8007c8c <tcp_input+0x2c8>)
 8007b5a:	4847      	ldr	r0, [pc, #284]	; (8007c78 <tcp_input+0x2b4>)
 8007b5c:	22e4      	movs	r2, #228	; 0xe4
 8007b5e:	f002 fd89 	bl	800a674 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8007b62:	6832      	ldr	r2, [r6, #0]
 8007b64:	8b21      	ldrh	r1, [r4, #24]
 8007b66:	8813      	ldrh	r3, [r2, #0]
 8007b68:	4299      	cmp	r1, r3
 8007b6a:	68e3      	ldr	r3, [r4, #12]
 8007b6c:	d169      	bne.n	8007c42 <tcp_input+0x27e>
 8007b6e:	8ae1      	ldrh	r1, [r4, #22]
 8007b70:	8852      	ldrh	r2, [r2, #2]
 8007b72:	4291      	cmp	r1, r2
 8007b74:	d165      	bne.n	8007c42 <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 8007b76:	6861      	ldr	r1, [r4, #4]
 8007b78:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007b7c:	4291      	cmp	r1, r2
 8007b7e:	d160      	bne.n	8007c42 <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007b80:	6821      	ldr	r1, [r4, #0]
 8007b82:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8007b86:	4291      	cmp	r1, r2
 8007b88:	d15b      	bne.n	8007c42 <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007b8a:	429c      	cmp	r4, r3
 8007b8c:	f040 8406 	bne.w	800839c <tcp_input+0x9d8>
 8007b90:	4b37      	ldr	r3, [pc, #220]	; (8007c70 <tcp_input+0x2ac>)
 8007b92:	493f      	ldr	r1, [pc, #252]	; (8007c90 <tcp_input+0x2cc>)
 8007b94:	4838      	ldr	r0, [pc, #224]	; (8007c78 <tcp_input+0x2b4>)
 8007b96:	22ec      	movs	r2, #236	; 0xec
 8007b98:	f002 fd6c 	bl	800a674 <iprintf>
      if (prev != NULL) {
 8007b9c:	f1ba 0f00 	cmp.w	sl, #0
 8007ba0:	d007      	beq.n	8007bb2 <tcp_input+0x1ee>
        prev->next = pcb->next;
 8007ba2:	68e3      	ldr	r3, [r4, #12]
 8007ba4:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 8007ba8:	f8d9 3000 	ldr.w	r3, [r9]
 8007bac:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 8007bae:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007bb2:	68e3      	ldr	r3, [r4, #12]
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	d105      	bne.n	8007bc4 <tcp_input+0x200>
 8007bb8:	4b2d      	ldr	r3, [pc, #180]	; (8007c70 <tcp_input+0x2ac>)
 8007bba:	4936      	ldr	r1, [pc, #216]	; (8007c94 <tcp_input+0x2d0>)
 8007bbc:	482e      	ldr	r0, [pc, #184]	; (8007c78 <tcp_input+0x2b4>)
 8007bbe:	22f4      	movs	r2, #244	; 0xf4
 8007bc0:	f002 fd58 	bl	800a674 <iprintf>
    inseg.next = NULL;
 8007bc4:	4b34      	ldr	r3, [pc, #208]	; (8007c98 <tcp_input+0x2d4>)
    inseg.len = p->tot_len;
 8007bc6:	8929      	ldrh	r1, [r5, #8]
 8007bc8:	8119      	strh	r1, [r3, #8]
    inseg.next = NULL;
 8007bca:	2200      	movs	r2, #0
    inseg.tcphdr = tcphdr;
 8007bcc:	6831      	ldr	r1, [r6, #0]
    inseg.next = NULL;
 8007bce:	601a      	str	r2, [r3, #0]
    inseg.tcphdr = tcphdr;
 8007bd0:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 8007bd2:	4832      	ldr	r0, [pc, #200]	; (8007c9c <tcp_input+0x2d8>)
    recv_acked = 0;
 8007bd4:	4932      	ldr	r1, [pc, #200]	; (8007ca0 <tcp_input+0x2dc>)
    inseg.p = p;
 8007bd6:	605d      	str	r5, [r3, #4]
    recv_data = NULL;
 8007bd8:	4b32      	ldr	r3, [pc, #200]	; (8007ca4 <tcp_input+0x2e0>)
    recv_flags = 0;
 8007bda:	7002      	strb	r2, [r0, #0]
    recv_data = NULL;
 8007bdc:	601a      	str	r2, [r3, #0]
    recv_acked = 0;
 8007bde:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 8007be0:	9a03      	ldr	r2, [sp, #12]
 8007be2:	9105      	str	r1, [sp, #20]
 8007be4:	7812      	ldrb	r2, [r2, #0]
 8007be6:	f012 0f08 	tst.w	r2, #8
 8007bea:	4680      	mov	r8, r0
 8007bec:	469a      	mov	sl, r3
 8007bee:	d003      	beq.n	8007bf8 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 8007bf0:	7b6b      	ldrb	r3, [r5, #13]
 8007bf2:	f043 0301 	orr.w	r3, r3, #1
 8007bf6:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8007bf8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007bfa:	4d2b      	ldr	r5, [pc, #172]	; (8007ca8 <tcp_input+0x2e4>)
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 8137 	beq.w	8007e70 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007c02:	4620      	mov	r0, r4
 8007c04:	f7fe ff4a 	bl	8006a9c <tcp_process_refused_data>
 8007c08:	300d      	adds	r0, #13
 8007c0a:	d008      	beq.n	8007c1e <tcp_input+0x25a>
 8007c0c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 812e 	beq.w	8007e70 <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007c14:	9b04      	ldr	r3, [sp, #16]
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 8129 	beq.w	8007e70 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8007c1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007c20:	b913      	cbnz	r3, 8007c28 <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 8007c22:	4620      	mov	r0, r4
 8007c24:	f001 f802 	bl	8008c2c <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 8007c28:	2400      	movs	r4, #0
 8007c2a:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8007c2c:	4d1a      	ldr	r5, [pc, #104]	; (8007c98 <tcp_input+0x2d4>)
    recv_data = NULL;
 8007c2e:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8007c32:	6868      	ldr	r0, [r5, #4]
 8007c34:	b110      	cbz	r0, 8007c3c <tcp_input+0x278>
      pbuf_free(inseg.p);
 8007c36:	f7fd ff45 	bl	8005ac4 <pbuf_free>
      inseg.p = NULL;
 8007c3a:	606c      	str	r4, [r5, #4]
}
 8007c3c:	b009      	add	sp, #36	; 0x24
 8007c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c42:	46a2      	mov	sl, r4
 8007c44:	461c      	mov	r4, r3
 8007c46:	e72f      	b.n	8007aa8 <tcp_input+0xe4>
 8007c48:	20002338 	.word	0x20002338
 8007c4c:	20002368 	.word	0x20002368
 8007c50:	20002344 	.word	0x20002344
 8007c54:	20002340 	.word	0x20002340
 8007c58:	2000233c 	.word	0x2000233c
 8007c5c:	2000230c 	.word	0x2000230c
 8007c60:	20002310 	.word	0x20002310
 8007c64:	20005890 	.word	0x20005890
 8007c68:	20002346 	.word	0x20002346
 8007c6c:	200058a0 	.word	0x200058a0
 8007c70:	0800ceec 	.word	0x0800ceec
 8007c74:	0800cd36 	.word	0x0800cd36
 8007c78:	0800bb8d 	.word	0x0800bb8d
 8007c7c:	0800cd46 	.word	0x0800cd46
 8007c80:	0800cd52 	.word	0x0800cd52
 8007c84:	0800cd71 	.word	0x0800cd71
 8007c88:	0800cd98 	.word	0x0800cd98
 8007c8c:	0800cdc2 	.word	0x0800cdc2
 8007c90:	0800cde9 	.word	0x0800cde9
 8007c94:	0800ce14 	.word	0x0800ce14
 8007c98:	20002314 	.word	0x20002314
 8007c9c:	2000232c 	.word	0x2000232c
 8007ca0:	20002324 	.word	0x20002324
 8007ca4:	20002328 	.word	0x20002328
 8007ca8:	200058a4 	.word	0x200058a4
 8007cac:	20002330 	.word	0x20002330
 8007cb0:	0800ce3e 	.word	0x0800ce3e
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007cb4:	7d23      	ldrb	r3, [r4, #20]
 8007cb6:	2b0a      	cmp	r3, #10
 8007cb8:	d005      	beq.n	8007cc6 <tcp_input+0x302>
 8007cba:	4653      	mov	r3, sl
 8007cbc:	22fe      	movs	r2, #254	; 0xfe
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	489d      	ldr	r0, [pc, #628]	; (8007f38 <tcp_input+0x574>)
 8007cc2:	f002 fcd7 	bl	800a674 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8007cc6:	6833      	ldr	r3, [r6, #0]
 8007cc8:	8b22      	ldrh	r2, [r4, #24]
 8007cca:	8818      	ldrh	r0, [r3, #0]
 8007ccc:	4290      	cmp	r0, r2
 8007cce:	d13c      	bne.n	8007d4a <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8007cd0:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 8007cd2:	885a      	ldrh	r2, [r3, #2]
 8007cd4:	428a      	cmp	r2, r1
 8007cd6:	d138      	bne.n	8007d4a <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8007cd8:	6861      	ldr	r1, [r4, #4]
 8007cda:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d133      	bne.n	8007d4a <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007ce2:	6821      	ldr	r1, [r4, #0]
 8007ce4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007ce8:	4299      	cmp	r1, r3
 8007cea:	d12e      	bne.n	8007d4a <tcp_input+0x386>
  if (flags & TCP_RST) {
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	0759      	lsls	r1, r3, #29
 8007cf2:	d424      	bmi.n	8007d3e <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 8007cf4:	079e      	lsls	r6, r3, #30
 8007cf6:	d513      	bpl.n	8007d20 <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007cf8:	f8db 1000 	ldr.w	r1, [fp]
 8007cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cfe:	1acb      	subs	r3, r1, r3
 8007d00:	d413      	bmi.n	8007d2a <tcp_input+0x366>
 8007d02:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8007d04:	1b9b      	subs	r3, r3, r6
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dc0f      	bgt.n	8007d2a <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d0a:	9b04      	ldr	r3, [sp, #16]
 8007d0c:	881c      	ldrh	r4, [r3, #0]
 8007d0e:	9001      	str	r0, [sp, #4]
 8007d10:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d12:	4b8a      	ldr	r3, [pc, #552]	; (8007f3c <tcp_input+0x578>)
 8007d14:	4421      	add	r1, r4
 8007d16:	1d1a      	adds	r2, r3, #4
 8007d18:	6838      	ldr	r0, [r7, #0]
 8007d1a:	f001 f93b 	bl	8008f94 <tcp_rst>
 8007d1e:	e00e      	b.n	8007d3e <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 8007d20:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 8007d22:	bf42      	ittt	mi
 8007d24:	4b86      	ldrmi	r3, [pc, #536]	; (8007f40 <tcp_input+0x57c>)
 8007d26:	681b      	ldrmi	r3, [r3, #0]
 8007d28:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8007d2a:	9b04      	ldr	r3, [sp, #16]
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	b133      	cbz	r3, 8007d3e <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 8007d30:	7ea3      	ldrb	r3, [r4, #26]
 8007d32:	f043 0302 	orr.w	r3, r3, #2
 8007d36:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 ffad 	bl	8008c98 <tcp_output>
  pbuf_free(p);
 8007d3e:	4628      	mov	r0, r5
}
 8007d40:	b009      	add	sp, #36	; 0x24
 8007d42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8007d46:	f7fd bebd 	b.w	8005ac4 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d4a:	68e4      	ldr	r4, [r4, #12]
 8007d4c:	2c00      	cmp	r4, #0
 8007d4e:	d1b1      	bne.n	8007cb4 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007d50:	4b7c      	ldr	r3, [pc, #496]	; (8007f44 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 8007d52:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007d54:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007d56:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007d5a:	4689      	mov	r9, r1
 8007d5c:	f1b9 0f00 	cmp.w	r9, #0
 8007d60:	d111      	bne.n	8007d86 <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007d62:	8990      	ldrh	r0, [r2, #12]
 8007d64:	f7fc f8ee 	bl	8003f44 <lwip_htons>
 8007d68:	0743      	lsls	r3, r0, #29
 8007d6a:	d4e8      	bmi.n	8007d3e <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007d6c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d6e:	9a04      	ldr	r2, [sp, #16]
 8007d70:	f8db 1000 	ldr.w	r1, [fp]
 8007d74:	8810      	ldrh	r0, [r2, #0]
 8007d76:	881a      	ldrh	r2, [r3, #0]
 8007d78:	9201      	str	r2, [sp, #4]
 8007d7a:	885b      	ldrh	r3, [r3, #2]
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	4b6f      	ldr	r3, [pc, #444]	; (8007f3c <tcp_input+0x578>)
 8007d80:	4401      	add	r1, r0
 8007d82:	1d1a      	adds	r2, r3, #4
 8007d84:	e7c8      	b.n	8007d18 <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 8007d86:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8007d8a:	8853      	ldrh	r3, [r2, #2]
 8007d8c:	4283      	cmp	r3, r0
 8007d8e:	d107      	bne.n	8007da0 <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007d90:	f8d9 3000 	ldr.w	r3, [r9]
 8007d94:	4573      	cmp	r3, lr
 8007d96:	f000 82dd 	beq.w	8008354 <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 82da 	beq.w	8008354 <tcp_input+0x990>
 8007da0:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007da2:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8007da6:	e7d9      	b.n	8007d5c <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 8007da8:	0798      	lsls	r0, r3, #30
 8007daa:	d5c8      	bpl.n	8007d3e <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 8007dac:	f899 0015 	ldrb.w	r0, [r9, #21]
 8007db0:	f7fe ffb8 	bl	8006d24 <tcp_alloc>
    if (npcb == NULL) {
 8007db4:	4604      	mov	r4, r0
 8007db6:	b950      	cbnz	r0, 8007dce <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007db8:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0be      	beq.n	8007d3e <tcp_input+0x37a>
 8007dc0:	4601      	mov	r1, r0
 8007dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007dca:	4798      	blx	r3
 8007dcc:	e7b7      	b.n	8007d3e <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007dce:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8007dd2:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007dd4:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007dd6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007dda:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8007ddc:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 8007de0:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8007de2:	7813      	ldrb	r3, [r2, #0]
 8007de4:	7852      	ldrb	r2, [r2, #1]
 8007de6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007dea:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8007dec:	2303      	movs	r3, #3
 8007dee:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8007df0:	f8db 3000 	ldr.w	r3, [fp]
 8007df4:	3301      	adds	r3, #1
 8007df6:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007df8:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007dfa:	f7ff f81f 	bl	8006e3c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007dfe:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 8007e02:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007e04:	3b01      	subs	r3, #1
 8007e06:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8007e08:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_nxt = iss;
 8007e0c:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8007e0e:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007e10:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 8007e12:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8007e14:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007e18:	f899 3008 	ldrb.w	r3, [r9, #8]
 8007e1c:	f003 030c 	and.w	r3, r3, #12
 8007e20:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8007e22:	4b49      	ldr	r3, [pc, #292]	; (8007f48 <tcp_input+0x584>)
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	60e2      	str	r2, [r4, #12]
 8007e28:	601c      	str	r4, [r3, #0]
 8007e2a:	f001 fa55 	bl	80092d8 <tcp_timer_needed>
 8007e2e:	4b47      	ldr	r3, [pc, #284]	; (8007f4c <tcp_input+0x588>)
 8007e30:	2201      	movs	r2, #1
 8007e32:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8007e34:	9b06      	ldr	r3, [sp, #24]
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b11b      	cbz	r3, 8007e42 <tcp_input+0x47e>
 8007e3a:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8007e3e:	f7ff fd69 	bl	8007914 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 8007e42:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007e44:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8007e46:	89db      	ldrh	r3, [r3, #14]
 8007e48:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007e4c:	1d21      	adds	r1, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007e4e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007e52:	f7fe ffff 	bl	8006e54 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007e56:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007e58:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 fe2c 	bl	8008ab8 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8007e60:	2800      	cmp	r0, #0
 8007e62:	f43f af69 	beq.w	8007d38 <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 8007e66:	2100      	movs	r1, #0
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f7fe fe9d 	bl	8006ba8 <tcp_abandon>
 8007e6e:	e766      	b.n	8007d3e <tcp_input+0x37a>
  if (flags & TCP_RST) {
 8007e70:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 8007e72:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	0759      	lsls	r1, r3, #29
 8007e78:	d535      	bpl.n	8007ee6 <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 8007e7a:	7d21      	ldrb	r1, [r4, #20]
 8007e7c:	2902      	cmp	r1, #2
 8007e7e:	d122      	bne.n	8007ec6 <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 8007e80:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d109      	bne.n	8007e9c <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 8007e88:	f898 3000 	ldrb.w	r3, [r8]
 8007e8c:	f043 0308 	orr.w	r3, r3, #8
 8007e90:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 8007e94:	7ea3      	ldrb	r3, [r4, #26]
 8007e96:	f023 0301 	bic.w	r3, r3, #1
 8007e9a:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8007e9c:	f898 3000 	ldrb.w	r3, [r8]
 8007ea0:	0719      	lsls	r1, r3, #28
 8007ea2:	f140 81ed 	bpl.w	8008280 <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007ea6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007eaa:	b11b      	cbz	r3, 8007eb4 <tcp_input+0x4f0>
 8007eac:	f06f 010d 	mvn.w	r1, #13
 8007eb0:	6920      	ldr	r0, [r4, #16]
 8007eb2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	4824      	ldr	r0, [pc, #144]	; (8007f48 <tcp_input+0x584>)
 8007eb8:	f7fe fcde 	bl	8006878 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	f7fd fc9c 	bl	80057fc <memp_free>
 8007ec4:	e6b0      	b.n	8007c28 <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 8007ec6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007ec8:	f8db 3000 	ldr.w	r3, [fp]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	f000 825a 	beq.w	8008386 <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007ed2:	1a9b      	subs	r3, r3, r2
 8007ed4:	d4e2      	bmi.n	8007e9c <tcp_input+0x4d8>
 8007ed6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007ed8:	1a9b      	subs	r3, r3, r2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	dcde      	bgt.n	8007e9c <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8007ede:	7ea3      	ldrb	r3, [r4, #26]
 8007ee0:	f043 0302 	orr.w	r3, r3, #2
 8007ee4:	e7d9      	b.n	8007e9a <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007ee6:	f013 0102 	ands.w	r1, r3, #2
 8007eea:	d003      	beq.n	8007ef4 <tcp_input+0x530>
 8007eec:	7d22      	ldrb	r2, [r4, #20]
 8007eee:	3a02      	subs	r2, #2
 8007ef0:	2a01      	cmp	r2, #1
 8007ef2:	d8f4      	bhi.n	8007ede <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007ef4:	7ea2      	ldrb	r2, [r4, #26]
 8007ef6:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 8007ef8:	bf5e      	ittt	pl
 8007efa:	4a11      	ldrpl	r2, [pc, #68]	; (8007f40 <tcp_input+0x57c>)
 8007efc:	6812      	ldrpl	r2, [r2, #0]
 8007efe:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8007f00:	2200      	movs	r2, #0
 8007f02:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 8007f06:	9a06      	ldr	r2, [sp, #24]
 8007f08:	8812      	ldrh	r2, [r2, #0]
 8007f0a:	b13a      	cbz	r2, 8007f1c <tcp_input+0x558>
 8007f0c:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8007f10:	9107      	str	r1, [sp, #28]
 8007f12:	9306      	str	r3, [sp, #24]
 8007f14:	f7ff fcfe 	bl	8007914 <tcp_parseopt.isra.1.part.2>
 8007f18:	9907      	ldr	r1, [sp, #28]
 8007f1a:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 8007f1c:	7d22      	ldrb	r2, [r4, #20]
 8007f1e:	3a02      	subs	r2, #2
 8007f20:	2a07      	cmp	r2, #7
 8007f22:	d8bb      	bhi.n	8007e9c <tcp_input+0x4d8>
 8007f24:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007f28:	00940014 	.word	0x00940014
 8007f2c:	010000fc 	.word	0x010000fc
 8007f30:	00fc014a 	.word	0x00fc014a
 8007f34:	01830164 	.word	0x01830164
 8007f38:	0800bb8d 	.word	0x0800bb8d
 8007f3c:	20002378 	.word	0x20002378
 8007f40:	20005894 	.word	0x20005894
 8007f44:	20005898 	.word	0x20005898
 8007f48:	20005890 	.word	0x20005890
 8007f4c:	2000588c 	.word	0x2000588c
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007f50:	f003 0212 	and.w	r2, r3, #18
 8007f54:	2a12      	cmp	r2, #18
 8007f56:	d15e      	bne.n	8008016 <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 8007f58:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	3201      	adds	r2, #1
 8007f5e:	428a      	cmp	r2, r1
 8007f60:	d159      	bne.n	8008016 <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 8007f62:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8007f66:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8007f68:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8007f6a:	6832      	ldr	r2, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8007f6c:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007f6e:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007f70:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8007f72:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007f74:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8007f76:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8007f78:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8007f7c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 8007f80:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007f82:	18e1      	adds	r1, r4, r3
 8007f84:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8007f86:	f7fe ff65 	bl	8006e54 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007f8a:	f241 121c 	movw	r2, #4380	; 0x111c
 8007f8e:	0043      	lsls	r3, r0, #1
 8007f90:	4293      	cmp	r3, r2
 8007f92:	bf38      	it	cc
 8007f94:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007f96:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007f98:	0080      	lsls	r0, r0, #2
 8007f9a:	4283      	cmp	r3, r0
 8007f9c:	bf28      	it	cs
 8007f9e:	4603      	movcs	r3, r0
 8007fa0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007fa4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007fa8:	b933      	cbnz	r3, 8007fb8 <tcp_input+0x5f4>
 8007faa:	4bad      	ldr	r3, [pc, #692]	; (8008260 <tcp_input+0x89c>)
 8007fac:	49ad      	ldr	r1, [pc, #692]	; (8008264 <tcp_input+0x8a0>)
 8007fae:	48ae      	ldr	r0, [pc, #696]	; (8008268 <tcp_input+0x8a4>)
 8007fb0:	f240 321a 	movw	r2, #794	; 0x31a
 8007fb4:	f002 fb5e 	bl	800a674 <iprintf>
      --pcb->snd_queuelen;
 8007fb8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8007fbc:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8007fc4:	b9fe      	cbnz	r6, 8008006 <tcp_input+0x642>
        rseg = pcb->unsent;
 8007fc6:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8007fc8:	b936      	cbnz	r6, 8007fd8 <tcp_input+0x614>
 8007fca:	4ba5      	ldr	r3, [pc, #660]	; (8008260 <tcp_input+0x89c>)
 8007fcc:	49a7      	ldr	r1, [pc, #668]	; (800826c <tcp_input+0x8a8>)
 8007fce:	48a6      	ldr	r0, [pc, #664]	; (8008268 <tcp_input+0x8a4>)
 8007fd0:	f240 3222 	movw	r2, #802	; 0x322
 8007fd4:	f002 fb4e 	bl	800a674 <iprintf>
        pcb->unsent = rseg->next;
 8007fd8:	6833      	ldr	r3, [r6, #0]
 8007fda:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f7fe f9b3 	bl	8006348 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8007fe2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007fe4:	b993      	cbnz	r3, 800800c <tcp_input+0x648>
        pcb->rtime = -1;
 8007fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fea:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007fec:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f43f af74 	beq.w	8007ede <tcp_input+0x51a>
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	6920      	ldr	r0, [r4, #16]
 8007ffc:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8007ffe:	300d      	adds	r0, #13
 8008000:	f47f af6d 	bne.w	8007ede <tcp_input+0x51a>
 8008004:	e610      	b.n	8007c28 <tcp_input+0x264>
        pcb->unacked = rseg->next;
 8008006:	6833      	ldr	r3, [r6, #0]
 8008008:	66e3      	str	r3, [r4, #108]	; 0x6c
 800800a:	e7e7      	b.n	8007fdc <tcp_input+0x618>
        pcb->rtime = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8008010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008014:	e7ea      	b.n	8007fec <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 8008016:	06db      	lsls	r3, r3, #27
 8008018:	f57f af40 	bpl.w	8007e9c <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800801c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800801e:	9a04      	ldr	r2, [sp, #16]
 8008020:	f8db 1000 	ldr.w	r1, [fp]
 8008024:	8810      	ldrh	r0, [r2, #0]
 8008026:	881a      	ldrh	r2, [r3, #0]
 8008028:	9201      	str	r2, [sp, #4]
 800802a:	885b      	ldrh	r3, [r3, #2]
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	4b90      	ldr	r3, [pc, #576]	; (8008270 <tcp_input+0x8ac>)
 8008030:	4401      	add	r1, r0
 8008032:	1d1a      	adds	r2, r3, #4
 8008034:	6838      	ldr	r0, [r7, #0]
 8008036:	f000 ffad 	bl	8008f94 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800803a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800803e:	2b05      	cmp	r3, #5
 8008040:	f63f af2c 	bhi.w	8007e9c <tcp_input+0x4d8>
        pcb->rtime = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8008048:	4620      	mov	r0, r4
 800804a:	f000 fffd 	bl	8009048 <tcp_rexmit_rto>
 800804e:	e725      	b.n	8007e9c <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 8008050:	06d8      	lsls	r0, r3, #27
 8008052:	d557      	bpl.n	8008104 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008054:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008056:	6838      	ldr	r0, [r7, #0]
 8008058:	43db      	mvns	r3, r3
 800805a:	42c3      	cmn	r3, r0
 800805c:	d443      	bmi.n	80080e6 <tcp_input+0x722>
 800805e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008060:	1ac3      	subs	r3, r0, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	dc3f      	bgt.n	80080e6 <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 8008066:	2304      	movs	r3, #4
 8008068:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800806a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800806c:	b143      	cbz	r3, 8008080 <tcp_input+0x6bc>
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	b933      	cbnz	r3, 8008080 <tcp_input+0x6bc>
 8008072:	4b7b      	ldr	r3, [pc, #492]	; (8008260 <tcp_input+0x89c>)
 8008074:	497f      	ldr	r1, [pc, #508]	; (8008274 <tcp_input+0x8b0>)
 8008076:	487c      	ldr	r0, [pc, #496]	; (8008268 <tcp_input+0x8a4>)
 8008078:	f240 3251 	movw	r2, #849	; 0x351
 800807c:	f002 fafa 	bl	800a674 <iprintf>
        if (pcb->listener == NULL) {
 8008080:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008082:	b91b      	cbnz	r3, 800808c <tcp_input+0x6c8>
            tcp_abort(pcb);
 8008084:	4620      	mov	r0, r4
 8008086:	f7fe fe05 	bl	8006c94 <tcp_abort>
            goto aborted;
 800808a:	e5cd      	b.n	8007c28 <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0f8      	beq.n	8008084 <tcp_input+0x6c0>
 8008092:	2200      	movs	r2, #0
 8008094:	4621      	mov	r1, r4
 8008096:	6920      	ldr	r0, [r4, #16]
 8008098:	4798      	blx	r3
        if (err != ERR_OK) {
 800809a:	b110      	cbz	r0, 80080a2 <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 800809c:	300d      	adds	r0, #13
 800809e:	d1f1      	bne.n	8008084 <tcp_input+0x6c0>
 80080a0:	e5c2      	b.n	8007c28 <tcp_input+0x264>
        tcp_receive(pcb);
 80080a2:	4620      	mov	r0, r4
 80080a4:	f7fe ff4a 	bl	8006f3c <tcp_receive>
        if (recv_acked != 0) {
 80080a8:	9b05      	ldr	r3, [sp, #20]
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b113      	cbz	r3, 80080b4 <tcp_input+0x6f0>
          recv_acked--;
 80080ae:	9a05      	ldr	r2, [sp, #20]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80080b4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80080b6:	f241 111c 	movw	r1, #4380	; 0x111c
 80080ba:	0053      	lsls	r3, r2, #1
 80080bc:	428b      	cmp	r3, r1
 80080be:	bf38      	it	cc
 80080c0:	460b      	movcc	r3, r1
 80080c2:	0092      	lsls	r2, r2, #2
 80080c4:	4293      	cmp	r3, r2
 80080c6:	bf28      	it	cs
 80080c8:	4613      	movcs	r3, r2
 80080ca:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80080ce:	f898 3000 	ldrb.w	r3, [r8]
 80080d2:	069a      	lsls	r2, r3, #26
 80080d4:	f57f aee2 	bpl.w	8007e9c <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80080d8:	7ea3      	ldrb	r3, [r4, #26]
 80080da:	f043 0302 	orr.w	r3, r3, #2
 80080de:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 80080e0:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 80080e2:	7523      	strb	r3, [r4, #20]
 80080e4:	e6da      	b.n	8007e9c <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80080e6:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80080e8:	9a04      	ldr	r2, [sp, #16]
 80080ea:	f8db 1000 	ldr.w	r1, [fp]
 80080ee:	8816      	ldrh	r6, [r2, #0]
 80080f0:	881a      	ldrh	r2, [r3, #0]
 80080f2:	9201      	str	r2, [sp, #4]
 80080f4:	885b      	ldrh	r3, [r3, #2]
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	4b5d      	ldr	r3, [pc, #372]	; (8008270 <tcp_input+0x8ac>)
 80080fa:	4431      	add	r1, r6
 80080fc:	1d1a      	adds	r2, r3, #4
 80080fe:	f000 ff49 	bl	8008f94 <tcp_rst>
 8008102:	e6cb      	b.n	8007e9c <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008104:	2900      	cmp	r1, #0
 8008106:	f43f aec9 	beq.w	8007e9c <tcp_input+0x4d8>
 800810a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800810c:	f8db 2000 	ldr.w	r2, [fp]
 8008110:	3b01      	subs	r3, #1
 8008112:	4293      	cmp	r3, r2
 8008114:	f47f aec2 	bne.w	8007e9c <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 8008118:	4620      	mov	r0, r4
 800811a:	f000 ffb1 	bl	8009080 <tcp_rexmit>
 800811e:	e6bd      	b.n	8007e9c <tcp_input+0x4d8>
    tcp_receive(pcb);
 8008120:	4620      	mov	r0, r4
 8008122:	f7fe ff0b 	bl	8006f3c <tcp_receive>
 8008126:	e7d2      	b.n	80080ce <tcp_input+0x70a>
    tcp_receive(pcb);
 8008128:	4620      	mov	r0, r4
 800812a:	f7fe ff07 	bl	8006f3c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800812e:	f898 3000 	ldrb.w	r3, [r8]
 8008132:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008136:	9b03      	ldr	r3, [sp, #12]
 8008138:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 800813a:	d031      	beq.n	80081a0 <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800813c:	f013 0f10 	tst.w	r3, #16
 8008140:	7ea3      	ldrb	r3, [r4, #26]
 8008142:	d028      	beq.n	8008196 <tcp_input+0x7d2>
 8008144:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	4291      	cmp	r1, r2
 800814a:	d124      	bne.n	8008196 <tcp_input+0x7d2>
 800814c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800814e:	bb12      	cbnz	r2, 8008196 <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 8008150:	f043 0302 	orr.w	r3, r3, #2
 8008154:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8008156:	4620      	mov	r0, r4
 8008158:	f7fe f98c 	bl	8006474 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800815c:	f8d9 3000 	ldr.w	r3, [r9]
 8008160:	429c      	cmp	r4, r3
 8008162:	d10a      	bne.n	800817a <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 8008164:	68e3      	ldr	r3, [r4, #12]
 8008166:	f8c9 3000 	str.w	r3, [r9]
 800816a:	e008      	b.n	800817e <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	4294      	cmp	r4, r2
 8008170:	d102      	bne.n	8008178 <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 8008172:	68e2      	ldr	r2, [r4, #12]
 8008174:	60da      	str	r2, [r3, #12]
 8008176:	e002      	b.n	800817e <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8008178:	4613      	mov	r3, r2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1f6      	bne.n	800816c <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 800817e:	4b3e      	ldr	r3, [pc, #248]	; (8008278 <tcp_input+0x8b4>)
 8008180:	2201      	movs	r2, #1
 8008182:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008184:	230a      	movs	r3, #10
 8008186:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008188:	4b3c      	ldr	r3, [pc, #240]	; (800827c <tcp_input+0x8b8>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	60e2      	str	r2, [r4, #12]
 800818e:	601c      	str	r4, [r3, #0]
 8008190:	f001 f8a2 	bl	80092d8 <tcp_timer_needed>
 8008194:	e682      	b.n	8007e9c <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 8008196:	f043 0302 	orr.w	r3, r3, #2
 800819a:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 800819c:	2308      	movs	r3, #8
 800819e:	e7a0      	b.n	80080e2 <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081a0:	06db      	lsls	r3, r3, #27
 80081a2:	f57f ae7b 	bpl.w	8007e9c <tcp_input+0x4d8>
 80081a6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	f47f ae76 	bne.w	8007e9c <tcp_input+0x4d8>
 80081b0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f47f ae72 	bne.w	8007e9c <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 80081b8:	2306      	movs	r3, #6
 80081ba:	e792      	b.n	80080e2 <tcp_input+0x71e>
    tcp_receive(pcb);
 80081bc:	4620      	mov	r0, r4
 80081be:	f7fe febd 	bl	8006f3c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80081c2:	f898 3000 	ldrb.w	r3, [r8]
 80081c6:	069f      	lsls	r7, r3, #26
 80081c8:	f57f ae68 	bpl.w	8007e9c <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80081cc:	7ea3      	ldrb	r3, [r4, #26]
 80081ce:	f043 0302 	orr.w	r3, r3, #2
 80081d2:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 80081d4:	4620      	mov	r0, r4
 80081d6:	f7fe f94d 	bl	8006474 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80081da:	f8d9 3000 	ldr.w	r3, [r9]
 80081de:	429c      	cmp	r4, r3
 80081e0:	d0c0      	beq.n	8008164 <tcp_input+0x7a0>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0cb      	beq.n	800817e <tcp_input+0x7ba>
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	4294      	cmp	r4, r2
 80081ea:	d0c2      	beq.n	8008172 <tcp_input+0x7ae>
 80081ec:	4613      	mov	r3, r2
 80081ee:	e7f8      	b.n	80081e2 <tcp_input+0x81e>
    tcp_receive(pcb);
 80081f0:	4620      	mov	r0, r4
 80081f2:	f7fe fea3 	bl	8006f3c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	06de      	lsls	r6, r3, #27
 80081fc:	f57f ae4e 	bpl.w	8007e9c <tcp_input+0x4d8>
 8008200:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	f47f ae49 	bne.w	8007e9c <tcp_input+0x4d8>
 800820a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800820c:	2b00      	cmp	r3, #0
 800820e:	f47f ae45 	bne.w	8007e9c <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 8008212:	4620      	mov	r0, r4
 8008214:	f7fe f92e 	bl	8006474 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008218:	f8d9 3000 	ldr.w	r3, [r9]
 800821c:	429c      	cmp	r4, r3
 800821e:	d0a1      	beq.n	8008164 <tcp_input+0x7a0>
 8008220:	2b00      	cmp	r3, #0
 8008222:	d0ac      	beq.n	800817e <tcp_input+0x7ba>
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	4294      	cmp	r4, r2
 8008228:	d0a3      	beq.n	8008172 <tcp_input+0x7ae>
 800822a:	4613      	mov	r3, r2
 800822c:	e7f8      	b.n	8008220 <tcp_input+0x85c>
    tcp_receive(pcb);
 800822e:	4620      	mov	r0, r4
 8008230:	f7fe fe84 	bl	8006f3c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008234:	9b03      	ldr	r3, [sp, #12]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	06d8      	lsls	r0, r3, #27
 800823a:	f57f ae2f 	bpl.w	8007e9c <tcp_input+0x4d8>
 800823e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	f47f ae2a 	bne.w	8007e9c <tcp_input+0x4d8>
 8008248:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800824a:	2b00      	cmp	r3, #0
 800824c:	f47f ae26 	bne.w	8007e9c <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 8008250:	f898 3000 	ldrb.w	r3, [r8]
 8008254:	f043 0310 	orr.w	r3, r3, #16
 8008258:	f888 3000 	strb.w	r3, [r8]
 800825c:	e61e      	b.n	8007e9c <tcp_input+0x4d8>
 800825e:	bf00      	nop
 8008260:	0800ceec 	.word	0x0800ceec
 8008264:	0800ce8b 	.word	0x0800ce8b
 8008268:	0800bb8d 	.word	0x0800bb8d
 800826c:	0800cea1 	.word	0x0800cea1
 8008270:	20002378 	.word	0x20002378
 8008274:	0800ceb4 	.word	0x0800ceb4
 8008278:	2000588c 	.word	0x2000588c
 800827c:	200058a0 	.word	0x200058a0
        if (recv_acked > 0) {
 8008280:	9b05      	ldr	r3, [sp, #20]
 8008282:	881a      	ldrh	r2, [r3, #0]
 8008284:	b122      	cbz	r2, 8008290 <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008286:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008288:	b9eb      	cbnz	r3, 80082c6 <tcp_input+0x902>
          recv_acked = 0;
 800828a:	9a05      	ldr	r2, [sp, #20]
 800828c:	2300      	movs	r3, #0
 800828e:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008290:	4620      	mov	r0, r4
 8008292:	f7ff fb77 	bl	8007984 <tcp_input_delayed_close>
 8008296:	2800      	cmp	r0, #0
 8008298:	f47f acc6 	bne.w	8007c28 <tcp_input+0x264>
        if (recv_data != NULL) {
 800829c:	f8da 3000 	ldr.w	r3, [sl]
 80082a0:	b33b      	cbz	r3, 80082f2 <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80082a2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80082a4:	b133      	cbz	r3, 80082b4 <tcp_input+0x8f0>
 80082a6:	4b40      	ldr	r3, [pc, #256]	; (80083a8 <tcp_input+0x9e4>)
 80082a8:	4940      	ldr	r1, [pc, #256]	; (80083ac <tcp_input+0x9e8>)
 80082aa:	4841      	ldr	r0, [pc, #260]	; (80083b0 <tcp_input+0x9ec>)
 80082ac:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80082b0:	f002 f9e0 	bl	800a674 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80082b4:	7ea3      	ldrb	r3, [r4, #26]
 80082b6:	f013 0310 	ands.w	r3, r3, #16
 80082ba:	d00a      	beq.n	80082d2 <tcp_input+0x90e>
            pbuf_free(recv_data);
 80082bc:	f8da 0000 	ldr.w	r0, [sl]
 80082c0:	f7fd fc00 	bl	8005ac4 <pbuf_free>
 80082c4:	e6de      	b.n	8008084 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80082c6:	4621      	mov	r1, r4
 80082c8:	6920      	ldr	r0, [r4, #16]
 80082ca:	4798      	blx	r3
            if (err == ERR_ABRT) {
 80082cc:	300d      	adds	r0, #13
 80082ce:	d1dc      	bne.n	800828a <tcp_input+0x8c6>
 80082d0:	e4aa      	b.n	8007c28 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80082d2:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80082d6:	b31e      	cbz	r6, 8008320 <tcp_input+0x95c>
 80082d8:	f8da 2000 	ldr.w	r2, [sl]
 80082dc:	6920      	ldr	r0, [r4, #16]
 80082de:	4621      	mov	r1, r4
 80082e0:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 80082e2:	f110 0f0d 	cmn.w	r0, #13
 80082e6:	f43f ac9f 	beq.w	8007c28 <tcp_input+0x264>
          if (err != ERR_OK) {
 80082ea:	b110      	cbz	r0, 80082f2 <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 80082ec:	f8da 3000 	ldr.w	r3, [sl]
 80082f0:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 80082f2:	f898 3000 	ldrb.w	r3, [r8]
 80082f6:	069a      	lsls	r2, r3, #26
 80082f8:	d505      	bpl.n	8008306 <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 80082fa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80082fc:	b1c3      	cbz	r3, 8008330 <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80082fe:	7b5a      	ldrb	r2, [r3, #13]
 8008300:	f042 0220 	orr.w	r2, r2, #32
 8008304:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8008306:	4b2b      	ldr	r3, [pc, #172]	; (80083b4 <tcp_input+0x9f0>)
 8008308:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 800830a:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800830c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800830e:	f7ff fb39 	bl	8007984 <tcp_input_delayed_close>
 8008312:	2800      	cmp	r0, #0
 8008314:	f47f ac88 	bne.w	8007c28 <tcp_input+0x264>
        tcp_output(pcb);
 8008318:	4620      	mov	r0, r4
 800831a:	f000 fcbd 	bl	8008c98 <tcp_output>
 800831e:	e483      	b.n	8007c28 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008320:	4633      	mov	r3, r6
 8008322:	f8da 2000 	ldr.w	r2, [sl]
 8008326:	4621      	mov	r1, r4
 8008328:	4630      	mov	r0, r6
 800832a:	f7fe fba5 	bl	8006a78 <tcp_recv_null>
 800832e:	e7d8      	b.n	80082e2 <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008330:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8008332:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008336:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800833a:	bf1c      	itt	ne
 800833c:	3301      	addne	r3, #1
 800833e:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8008340:	2e00      	cmp	r6, #0
 8008342:	d0e0      	beq.n	8008306 <tcp_input+0x942>
 8008344:	2300      	movs	r3, #0
 8008346:	461a      	mov	r2, r3
 8008348:	4621      	mov	r1, r4
 800834a:	6920      	ldr	r0, [r4, #16]
 800834c:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800834e:	300d      	adds	r0, #13
 8008350:	d1d9      	bne.n	8008306 <tcp_input+0x942>
 8008352:	e469      	b.n	8007c28 <tcp_input+0x264>
      if (prev != NULL) {
 8008354:	b13c      	cbz	r4, 8008366 <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008356:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800835a:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800835c:	4b16      	ldr	r3, [pc, #88]	; (80083b8 <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800835e:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008362:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	0759      	lsls	r1, r3, #29
 800836c:	f53f ace7 	bmi.w	8007d3e <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 8008370:	06dc      	lsls	r4, r3, #27
 8008372:	f57f ad19 	bpl.w	8007da8 <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008376:	9b04      	ldr	r3, [sp, #16]
 8008378:	f8db 1000 	ldr.w	r1, [fp]
 800837c:	881c      	ldrh	r4, [r3, #0]
 800837e:	8813      	ldrh	r3, [r2, #0]
 8008380:	e88d 0009 	stmia.w	sp, {r0, r3}
 8008384:	e4c5      	b.n	8007d12 <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008386:	2900      	cmp	r1, #0
 8008388:	f47f ad7e 	bne.w	8007e88 <tcp_input+0x4c4>
 800838c:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <tcp_input+0x9e4>)
 800838e:	490b      	ldr	r1, [pc, #44]	; (80083bc <tcp_input+0x9f8>)
 8008390:	4807      	ldr	r0, [pc, #28]	; (80083b0 <tcp_input+0x9ec>)
 8008392:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008396:	f002 f96d 	bl	800a674 <iprintf>
 800839a:	e575      	b.n	8007e88 <tcp_input+0x4c4>
      if (prev != NULL) {
 800839c:	f1ba 0f00 	cmp.w	sl, #0
 80083a0:	f47f abff 	bne.w	8007ba2 <tcp_input+0x1de>
 80083a4:	e40e      	b.n	8007bc4 <tcp_input+0x200>
 80083a6:	bf00      	nop
 80083a8:	0800ceec 	.word	0x0800ceec
 80083ac:	0800ced2 	.word	0x0800ced2
 80083b0:	0800bb8d 	.word	0x0800bb8d
 80083b4:	200058a4 	.word	0x200058a4
 80083b8:	20005898 	.word	0x20005898
 80083bc:	0800ce6b 	.word	0x0800ce6b

080083c0 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80083c0:	4a02      	ldr	r2, [pc, #8]	; (80083cc <tcp_trigger_input_pcb_close+0xc>)
 80083c2:	7813      	ldrb	r3, [r2, #0]
 80083c4:	f043 0310 	orr.w	r3, r3, #16
 80083c8:	7013      	strb	r3, [r2, #0]
 80083ca:	4770      	bx	lr
 80083cc:	2000232c 	.word	0x2000232c

080083d0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80083d4:	4294      	cmp	r4, r2
{
 80083d6:	461e      	mov	r6, r3
 80083d8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80083dc:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 80083de:	d228      	bcs.n	8008432 <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80083e0:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80083e4:	07ad      	lsls	r5, r5, #30
 80083e6:	d407      	bmi.n	80083f8 <tcp_pbuf_prealloc+0x28>
 80083e8:	7e9d      	ldrb	r5, [r3, #26]
 80083ea:	066d      	lsls	r5, r5, #25
 80083ec:	d421      	bmi.n	8008432 <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 80083ee:	b119      	cbz	r1, 80083f8 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 80083f0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80083f2:	b909      	cbnz	r1, 80083f8 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 80083f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083f6:	b1e3      	cbz	r3, 8008432 <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80083f8:	f204 231b 	addw	r3, r4, #539	; 0x21b
 80083fc:	f023 0103 	bic.w	r1, r3, #3
 8008400:	428a      	cmp	r2, r1
 8008402:	bf28      	it	cs
 8008404:	460a      	movcs	r2, r1
 8008406:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8008408:	2200      	movs	r2, #0
 800840a:	f7fd fbbd 	bl	8005b88 <pbuf_alloc>
  if (p == NULL) {
 800840e:	4605      	mov	r5, r0
 8008410:	b168      	cbz	r0, 800842e <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8008412:	6803      	ldr	r3, [r0, #0]
 8008414:	b133      	cbz	r3, 8008424 <tcp_pbuf_prealloc+0x54>
 8008416:	4b08      	ldr	r3, [pc, #32]	; (8008438 <tcp_pbuf_prealloc+0x68>)
 8008418:	4908      	ldr	r1, [pc, #32]	; (800843c <tcp_pbuf_prealloc+0x6c>)
 800841a:	4809      	ldr	r0, [pc, #36]	; (8008440 <tcp_pbuf_prealloc+0x70>)
 800841c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8008420:	f002 f928 	bl	800a674 <iprintf>
  *oversize = p->len - length;
 8008424:	896b      	ldrh	r3, [r5, #10]
 8008426:	1b1b      	subs	r3, r3, r4
 8008428:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800842a:	812c      	strh	r4, [r5, #8]
 800842c:	816c      	strh	r4, [r5, #10]
  return p;
}
 800842e:	4628      	mov	r0, r5
 8008430:	bd70      	pop	{r4, r5, r6, pc}
 8008432:	4621      	mov	r1, r4
 8008434:	e7e8      	b.n	8008408 <tcp_pbuf_prealloc+0x38>
 8008436:	bf00      	nop
 8008438:	0800d1ef 	.word	0x0800d1ef
 800843c:	0800d222 	.word	0x0800d222
 8008440:	0800bb8d 	.word	0x0800bb8d

08008444 <tcp_create_segment>:
{
 8008444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	f89d a020 	ldrb.w	sl, [sp, #32]
 800844c:	4680      	mov	r8, r0
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800844e:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008452:	f04f 0003 	mov.w	r0, #3
{
 8008456:	460f      	mov	r7, r1
 8008458:	4616      	mov	r6, r2
 800845a:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800845c:	bf14      	ite	ne
 800845e:	2504      	movne	r5, #4
 8008460:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008462:	f7fd f9af 	bl	80057c4 <memp_malloc>
 8008466:	4604      	mov	r4, r0
 8008468:	b928      	cbnz	r0, 8008476 <tcp_create_segment+0x32>
    pbuf_free(p);
 800846a:	4638      	mov	r0, r7
 800846c:	f7fd fb2a 	bl	8005ac4 <pbuf_free>
}
 8008470:	4620      	mov	r0, r4
 8008472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 8008476:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800847a:	2300      	movs	r3, #0
  seg->p = p;
 800847c:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008480:	893b      	ldrh	r3, [r7, #8]
 8008482:	fa1f fa85 	uxth.w	sl, r5
 8008486:	4553      	cmp	r3, sl
 8008488:	d205      	bcs.n	8008496 <tcp_create_segment+0x52>
 800848a:	4b1f      	ldr	r3, [pc, #124]	; (8008508 <tcp_create_segment+0xc4>)
 800848c:	491f      	ldr	r1, [pc, #124]	; (800850c <tcp_create_segment+0xc8>)
 800848e:	4820      	ldr	r0, [pc, #128]	; (8008510 <tcp_create_segment+0xcc>)
 8008490:	22ba      	movs	r2, #186	; 0xba
 8008492:	f002 f8ef 	bl	800a674 <iprintf>
  seg->len = p->tot_len - optlen;
 8008496:	893b      	ldrh	r3, [r7, #8]
 8008498:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_header(p, TCP_HLEN)) {
 800849c:	4638      	mov	r0, r7
  seg->len = p->tot_len - optlen;
 800849e:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 80084a0:	2114      	movs	r1, #20
 80084a2:	f7fd fb09 	bl	8005ab8 <pbuf_header>
 80084a6:	4607      	mov	r7, r0
 80084a8:	b120      	cbz	r0, 80084b4 <tcp_create_segment+0x70>
    tcp_seg_free(seg);
 80084aa:	4620      	mov	r0, r4
 80084ac:	f7fd ff4c 	bl	8006348 <tcp_seg_free>
    return NULL;
 80084b0:	2400      	movs	r4, #0
 80084b2:	e7dd      	b.n	8008470 <tcp_create_segment+0x2c>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80084b4:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80084b6:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80084ba:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80084be:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80084c2:	f7fb fd3f 	bl	8003f44 <lwip_htons>
 80084c6:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80084ca:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 80084ce:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80084d2:	f7fb fd37 	bl	8003f44 <lwip_htons>
 80084d6:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80084da:	4648      	mov	r0, r9
 80084dc:	f8d4 800c 	ldr.w	r8, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80084e0:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80084e2:	f7fb fd32 	bl	8003f4a <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80084e6:	3505      	adds	r5, #5
 80084e8:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80084ec:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80084f0:	b2a8      	uxth	r0, r5
 80084f2:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80084f6:	f7fb fd25 	bl	8003f44 <lwip_htons>
  seg->tcphdr->urgp = 0;
 80084fa:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80084fc:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8008500:	749f      	strb	r7, [r3, #18]
 8008502:	74df      	strb	r7, [r3, #19]
  return seg;
 8008504:	e7b4      	b.n	8008470 <tcp_create_segment+0x2c>
 8008506:	bf00      	nop
 8008508:	0800d1ef 	.word	0x0800d1ef
 800850c:	0800d077 	.word	0x0800d077
 8008510:	0800bb8d 	.word	0x0800bb8d

08008514 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008514:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8008516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008518:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800851a:	4605      	mov	r5, r0
 800851c:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800851e:	2001      	movs	r0, #1
 8008520:	2200      	movs	r2, #0
 8008522:	f7fd fb31 	bl	8005b88 <pbuf_alloc>
  if (p != NULL) {
 8008526:	4606      	mov	r6, r0
 8008528:	b340      	cbz	r0, 800857c <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800852a:	8943      	ldrh	r3, [r0, #10]
 800852c:	2b13      	cmp	r3, #19
 800852e:	dc05      	bgt.n	800853c <tcp_output_alloc_header.constprop.0+0x28>
 8008530:	4b13      	ldr	r3, [pc, #76]	; (8008580 <tcp_output_alloc_header.constprop.0+0x6c>)
 8008532:	4914      	ldr	r1, [pc, #80]	; (8008584 <tcp_output_alloc_header.constprop.0+0x70>)
 8008534:	4814      	ldr	r0, [pc, #80]	; (8008588 <tcp_output_alloc_header.constprop.0+0x74>)
 8008536:	2273      	movs	r2, #115	; 0x73
 8008538:	f002 f89c 	bl	800a674 <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 800853c:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 800853e:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8008540:	f7fb fd00 	bl	8003f44 <lwip_htons>
 8008544:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008546:	8b28      	ldrh	r0, [r5, #24]
 8008548:	f7fb fcfc 	bl	8003f44 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800854c:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800854e:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008550:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008552:	f7fb fcfa 	bl	8003f4a <lwip_htonl>
 8008556:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8008558:	f245 0010 	movw	r0, #20496	; 0x5010
 800855c:	f7fb fcf2 	bl	8003f44 <lwip_htons>
 8008560:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008562:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8008564:	f7fb fcee 	bl	8003f44 <lwip_htons>
    tcphdr->chksum = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	7423      	strb	r3, [r4, #16]
 800856c:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800856e:	74a3      	strb	r3, [r4, #18]
 8008570:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008572:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8008574:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008576:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008578:	4413      	add	r3, r2
 800857a:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800857c:	4630      	mov	r0, r6
 800857e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008580:	0800d1ef 	.word	0x0800d1ef
 8008584:	0800d1c1 	.word	0x0800d1c1
 8008588:	0800bb8d 	.word	0x0800bb8d

0800858c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800858c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008590:	b091      	sub	sp, #68	; 0x44
 8008592:	4605      	mov	r5, r0
 8008594:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800859c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
{
 80085a0:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80085a2:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80085a4:	9108      	str	r1, [sp, #32]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80085a6:	085b      	lsrs	r3, r3, #1
 80085a8:	4293      	cmp	r3, r2
 80085aa:	bf28      	it	cs
 80085ac:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bf08      	it	eq
 80085b2:	4613      	moveq	r3, r2
 80085b4:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80085b6:	b959      	cbnz	r1, 80085d0 <tcp_write+0x44>
 80085b8:	4ba1      	ldr	r3, [pc, #644]	; (8008840 <tcp_write+0x2b4>)
 80085ba:	49a2      	ldr	r1, [pc, #648]	; (8008844 <tcp_write+0x2b8>)
 80085bc:	48a2      	ldr	r0, [pc, #648]	; (8008848 <tcp_write+0x2bc>)
 80085be:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80085c2:	f002 f857 	bl	800a674 <iprintf>
 80085c6:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 80085ca:	b011      	add	sp, #68	; 0x44
 80085cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 80085d0:	7d2b      	ldrb	r3, [r5, #20]
 80085d2:	2b07      	cmp	r3, #7
 80085d4:	d003      	beq.n	80085de <tcp_write+0x52>
      (pcb->state != CLOSE_WAIT) &&
 80085d6:	3b02      	subs	r3, #2
 80085d8:	2b02      	cmp	r3, #2
 80085da:	f200 8254 	bhi.w	8008a86 <tcp_write+0x4fa>
  } else if (len == 0) {
 80085de:	9b05      	ldr	r3, [sp, #20]
 80085e0:	b1db      	cbz	r3, 800861a <tcp_write+0x8e>
  if (len > pcb->snd_buf) {
 80085e2:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 80085e6:	9a05      	ldr	r2, [sp, #20]
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d206      	bcs.n	80085fa <tcp_write+0x6e>
    pcb->flags |= TF_NAGLEMEMERR;
 80085ec:	7eab      	ldrb	r3, [r5, #26]
 80085ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085f2:	76ab      	strb	r3, [r5, #26]
  return ERR_MEM;
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	e7e7      	b.n	80085ca <tcp_write+0x3e>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80085fa:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 80085fe:	2a08      	cmp	r2, #8
 8008600:	d8f4      	bhi.n	80085ec <tcp_write+0x60>
 8008602:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 8008604:	b30a      	cbz	r2, 800864a <tcp_write+0xbe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8008606:	b943      	cbnz	r3, 800861a <tcp_write+0x8e>
 8008608:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800860a:	b933      	cbnz	r3, 800861a <tcp_write+0x8e>
 800860c:	4b8c      	ldr	r3, [pc, #560]	; (8008840 <tcp_write+0x2b4>)
 800860e:	498f      	ldr	r1, [pc, #572]	; (800884c <tcp_write+0x2c0>)
 8008610:	f44f 72ab 	mov.w	r2, #342	; 0x156
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8008614:	488c      	ldr	r0, [pc, #560]	; (8008848 <tcp_write+0x2bc>)
 8008616:	f002 f82d 	bl	800a674 <iprintf>
  if (pcb->unsent != NULL) {
 800861a:	6eac      	ldr	r4, [r5, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 800861c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8008620:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 8008622:	b9dc      	cbnz	r4, 800865c <tcp_write+0xd0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8008624:	f8b5 8064 	ldrh.w	r8, [r5, #100]	; 0x64
 8008628:	f1b8 0f00 	cmp.w	r8, #0
 800862c:	f000 8103 	beq.w	8008836 <tcp_write+0x2aa>
 8008630:	4b83      	ldr	r3, [pc, #524]	; (8008840 <tcp_write+0x2b4>)
 8008632:	4987      	ldr	r1, [pc, #540]	; (8008850 <tcp_write+0x2c4>)
 8008634:	4884      	ldr	r0, [pc, #528]	; (8008848 <tcp_write+0x2bc>)
 8008636:	f240 2225 	movw	r2, #549	; 0x225
 800863a:	f002 f81b 	bl	800a674 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800863e:	4627      	mov	r7, r4
  u16_t extendlen = 0;
 8008640:	46a2      	mov	sl, r4
  u16_t oversize_used = 0;
 8008642:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 8008644:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 8008646:	46a1      	mov	r9, r4
 8008648:	e094      	b.n	8008774 <tcp_write+0x1e8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800864a:	b913      	cbnz	r3, 8008652 <tcp_write+0xc6>
 800864c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0e3      	beq.n	800861a <tcp_write+0x8e>
 8008652:	4b7b      	ldr	r3, [pc, #492]	; (8008840 <tcp_write+0x2b4>)
 8008654:	497f      	ldr	r1, [pc, #508]	; (8008854 <tcp_write+0x2c8>)
 8008656:	f240 1259 	movw	r2, #345	; 0x159
 800865a:	e7db      	b.n	8008614 <tcp_write+0x88>
  if (pcb->unsent != NULL) {
 800865c:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800865e:	f8d7 b000 	ldr.w	fp, [r7]
 8008662:	f1bb 0f00 	cmp.w	fp, #0
 8008666:	f040 80b6 	bne.w	80087d6 <tcp_write+0x24a>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800866a:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800866c:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800866e:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008672:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008674:	bf14      	ite	ne
 8008676:	2404      	movne	r4, #4
 8008678:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800867a:	4423      	add	r3, r4
 800867c:	429a      	cmp	r2, r3
 800867e:	da06      	bge.n	800868e <tcp_write+0x102>
 8008680:	4b6f      	ldr	r3, [pc, #444]	; (8008840 <tcp_write+0x2b4>)
 8008682:	4975      	ldr	r1, [pc, #468]	; (8008858 <tcp_write+0x2cc>)
 8008684:	4870      	ldr	r0, [pc, #448]	; (8008848 <tcp_write+0x2bc>)
 8008686:	f240 12c7 	movw	r2, #455	; 0x1c7
 800868a:	f001 fff3 	bl	800a674 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800868e:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 8008692:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 8008694:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
 8008698:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 800869c:	eba3 0909 	sub.w	r9, r3, r9
 80086a0:	eba9 0904 	sub.w	r9, r9, r4
 80086a4:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 80086a8:	2e00      	cmp	r6, #0
 80086aa:	f000 8096 	beq.w	80087da <tcp_write+0x24e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80086ae:	45b1      	cmp	r9, r6
 80086b0:	d206      	bcs.n	80086c0 <tcp_write+0x134>
 80086b2:	4b63      	ldr	r3, [pc, #396]	; (8008840 <tcp_write+0x2b4>)
 80086b4:	4969      	ldr	r1, [pc, #420]	; (800885c <tcp_write+0x2d0>)
 80086b6:	4864      	ldr	r0, [pc, #400]	; (8008848 <tcp_write+0x2bc>)
 80086b8:	f240 12d9 	movw	r2, #473	; 0x1d9
 80086bc:	f001 ffda 	bl	800a674 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80086c0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80086c4:	9a05      	ldr	r2, [sp, #20]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	bf28      	it	cs
 80086ca:	461a      	movcs	r2, r3
 80086cc:	454a      	cmp	r2, r9
 80086ce:	4616      	mov	r6, r2
 80086d0:	bfa8      	it	ge
 80086d2:	464e      	movge	r6, r9
      oversize -= oversize_used;
 80086d4:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 80086d6:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 80086da:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 80086de:	fa1f f989 	uxth.w	r9, r9
 80086e2:	463c      	mov	r4, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80086e4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80086e8:	b153      	cbz	r3, 8008700 <tcp_write+0x174>
 80086ea:	9b05      	ldr	r3, [sp, #20]
 80086ec:	429e      	cmp	r6, r3
 80086ee:	f000 81cd 	beq.w	8008a8c <tcp_write+0x500>
 80086f2:	4b53      	ldr	r3, [pc, #332]	; (8008840 <tcp_write+0x2b4>)
 80086f4:	495a      	ldr	r1, [pc, #360]	; (8008860 <tcp_write+0x2d4>)
 80086f6:	4854      	ldr	r0, [pc, #336]	; (8008848 <tcp_write+0x2bc>)
 80086f8:	f240 12e1 	movw	r2, #481	; 0x1e1
 80086fc:	f001 ffba 	bl	800a674 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8008700:	9b05      	ldr	r3, [sp, #20]
 8008702:	429e      	cmp	r6, r3
 8008704:	f080 81c2 	bcs.w	8008a8c <tcp_write+0x500>
 8008708:	f1b9 0f00 	cmp.w	r9, #0
 800870c:	f000 808f 	beq.w	800882e <tcp_write+0x2a2>
 8008710:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 8008714:	f1ba 0f00 	cmp.w	sl, #0
 8008718:	f000 808a 	beq.w	8008830 <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800871c:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800871e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008720:	454c      	cmp	r4, r9
 8008722:	bfa8      	it	ge
 8008724:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008726:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008728:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800872c:	d557      	bpl.n	80087de <tcp_write+0x252>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800872e:	2301      	movs	r3, #1
 8008730:	9302      	str	r3, [sp, #8]
 8008732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008734:	9301      	str	r3, [sp, #4]
 8008736:	464a      	mov	r2, r9
 8008738:	9500      	str	r5, [sp, #0]
 800873a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800873e:	4641      	mov	r1, r8
 8008740:	2004      	movs	r0, #4
 8008742:	f7ff fe45 	bl	80083d0 <tcp_pbuf_prealloc>
 8008746:	4681      	mov	r9, r0
 8008748:	2800      	cmp	r0, #0
 800874a:	f000 8199 	beq.w	8008a80 <tcp_write+0x4f4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800874e:	9b08      	ldr	r3, [sp, #32]
 8008750:	6840      	ldr	r0, [r0, #4]
 8008752:	4642      	mov	r2, r8
 8008754:	1999      	adds	r1, r3, r6
 8008756:	f001 fece 	bl	800a4f6 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800875a:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 800875c:	f7fd fb64 	bl	8005e28 <pbuf_clen>
 8008760:	9b06      	ldr	r3, [sp, #24]
 8008762:	4403      	add	r3, r0
 8008764:	b29b      	uxth	r3, r3
 8008766:	9306      	str	r3, [sp, #24]
  u16_t extendlen = 0;
 8008768:	f04f 0a00 	mov.w	sl, #0
      pos += seglen;
 800876c:	44b0      	add	r8, r6
 800876e:	fa1f f888 	uxth.w	r8, r8
 8008772:	463c      	mov	r4, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	f04f 0b00 	mov.w	fp, #0
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008782:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 8008784:	9b05      	ldr	r3, [sp, #20]
 8008786:	4598      	cmp	r8, r3
 8008788:	d370      	bcc.n	800886c <tcp_write+0x2e0>
  if (oversize_used > 0) {
 800878a:	b146      	cbz	r6, 800879e <tcp_write+0x212>
    for (p = last_unsent->p; p; p = p->next) {
 800878c:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8008790:	f1b8 0f00 	cmp.w	r8, #0
 8008794:	f040 8110 	bne.w	80089b8 <tcp_write+0x42c>
    last_unsent->len += oversize_used;
 8008798:	893b      	ldrh	r3, [r7, #8]
 800879a:	441e      	add	r6, r3
 800879c:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 800879e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80087a2:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if (concat_p != NULL) {
 80087a6:	f1b9 0f00 	cmp.w	r9, #0
 80087aa:	f000 811e 	beq.w	80089ea <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80087ae:	b937      	cbnz	r7, 80087be <tcp_write+0x232>
 80087b0:	4b23      	ldr	r3, [pc, #140]	; (8008840 <tcp_write+0x2b4>)
 80087b2:	492c      	ldr	r1, [pc, #176]	; (8008864 <tcp_write+0x2d8>)
 80087b4:	4824      	ldr	r0, [pc, #144]	; (8008848 <tcp_write+0x2bc>)
 80087b6:	f240 22bb 	movw	r2, #699	; 0x2bb
 80087ba:	f001 ff5b 	bl	800a674 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 80087be:	4649      	mov	r1, r9
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7fd fb4d 	bl	8005e60 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80087c6:	893b      	ldrh	r3, [r7, #8]
 80087c8:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 80087cc:	4413      	add	r3, r2
 80087ce:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 80087d0:	f8c7 b000 	str.w	fp, [r7]
 80087d4:	e12b      	b.n	8008a2e <tcp_write+0x4a2>
 80087d6:	465f      	mov	r7, fp
 80087d8:	e741      	b.n	800865e <tcp_write+0xd2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80087da:	4634      	mov	r4, r6
 80087dc:	e782      	b.n	80086e4 <tcp_write+0x158>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 9000 	ldr.w	r9, [r3]
 80087e4:	f1b9 0f00 	cmp.w	r9, #0
 80087e8:	d112      	bne.n	8008810 <tcp_write+0x284>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80087ea:	7b1a      	ldrb	r2, [r3, #12]
 80087ec:	2a01      	cmp	r2, #1
 80087ee:	d111      	bne.n	8008814 <tcp_write+0x288>
 80087f0:	895a      	ldrh	r2, [r3, #10]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	9a08      	ldr	r2, [sp, #32]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d10b      	bne.n	8008814 <tcp_write+0x288>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80087fc:	b136      	cbz	r6, 800880c <tcp_write+0x280>
 80087fe:	4b10      	ldr	r3, [pc, #64]	; (8008840 <tcp_write+0x2b4>)
 8008800:	4919      	ldr	r1, [pc, #100]	; (8008868 <tcp_write+0x2dc>)
 8008802:	4811      	ldr	r0, [pc, #68]	; (8008848 <tcp_write+0x2bc>)
 8008804:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8008808:	f001 ff34 	bl	800a674 <iprintf>
          extendlen = seglen;
 800880c:	46c2      	mov	sl, r8
 800880e:	e7ad      	b.n	800876c <tcp_write+0x1e0>
 8008810:	464b      	mov	r3, r9
 8008812:	e7e5      	b.n	80087e0 <tcp_write+0x254>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8008814:	2201      	movs	r2, #1
 8008816:	4641      	mov	r1, r8
 8008818:	2004      	movs	r0, #4
 800881a:	f7fd f9b5 	bl	8005b88 <pbuf_alloc>
 800881e:	4681      	mov	r9, r0
 8008820:	2800      	cmp	r0, #0
 8008822:	f000 812d 	beq.w	8008a80 <tcp_write+0x4f4>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8008826:	9b08      	ldr	r3, [sp, #32]
 8008828:	4433      	add	r3, r6
 800882a:	6043      	str	r3, [r0, #4]
 800882c:	e796      	b.n	800875c <tcp_write+0x1d0>
  u16_t extendlen = 0;
 800882e:	46ca      	mov	sl, r9
 8008830:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 8008832:	46d1      	mov	r9, sl
 8008834:	e79e      	b.n	8008774 <tcp_write+0x1e8>
  u16_t extendlen = 0;
 8008836:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 8008838:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800883a:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 800883c:	46c1      	mov	r9, r8
 800883e:	e799      	b.n	8008774 <tcp_write+0x1e8>
 8008840:	0800d1ef 	.word	0x0800d1ef
 8008844:	0800d236 	.word	0x0800d236
 8008848:	0800bb8d 	.word	0x0800bb8d
 800884c:	0800d267 	.word	0x0800d267
 8008850:	0800d351 	.word	0x0800d351
 8008854:	0800d2a1 	.word	0x0800d2a1
 8008858:	0800d2d3 	.word	0x0800d2d3
 800885c:	0800d2ea 	.word	0x0800d2ea
 8008860:	0800d30a 	.word	0x0800d30a
 8008864:	0800d3dd 	.word	0x0800d3dd
 8008868:	0800d328 	.word	0x0800d328
    u16_t left = len - pos;
 800886c:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 800886e:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 8008870:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 8008874:	b29b      	uxth	r3, r3
 8008876:	4293      	cmp	r3, r2
 8008878:	bf28      	it	cs
 800887a:	4613      	movcs	r3, r2
 800887c:	b29b      	uxth	r3, r3
 800887e:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008882:	b363      	cbz	r3, 80088de <tcp_write+0x352>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8008884:	fabb f38b 	clz	r3, fp
 8008888:	095b      	lsrs	r3, r3, #5
 800888a:	9302      	str	r3, [sp, #8]
 800888c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888e:	9301      	str	r3, [sp, #4]
 8008890:	9500      	str	r5, [sp, #0]
 8008892:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008896:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008898:	2000      	movs	r0, #0
 800889a:	f7ff fd99 	bl	80083d0 <tcp_pbuf_prealloc>
 800889e:	4604      	mov	r4, r0
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d03b      	beq.n	800891c <tcp_write+0x390>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80088a4:	8943      	ldrh	r3, [r0, #10]
 80088a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d206      	bcs.n	80088ba <tcp_write+0x32e>
 80088ac:	4b7b      	ldr	r3, [pc, #492]	; (8008a9c <tcp_write+0x510>)
 80088ae:	497c      	ldr	r1, [pc, #496]	; (8008aa0 <tcp_write+0x514>)
 80088b0:	487c      	ldr	r0, [pc, #496]	; (8008aa4 <tcp_write+0x518>)
 80088b2:	f240 2241 	movw	r2, #577	; 0x241
 80088b6:	f001 fedd 	bl	800a674 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80088ba:	9b08      	ldr	r3, [sp, #32]
 80088bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088be:	6860      	ldr	r0, [r4, #4]
 80088c0:	eb03 0108 	add.w	r1, r3, r8
 80088c4:	f001 fe17 	bl	800a4f6 <memcpy>
    queuelen += pbuf_clen(p);
 80088c8:	4620      	mov	r0, r4
 80088ca:	f7fd faad 	bl	8005e28 <pbuf_clen>
 80088ce:	9b06      	ldr	r3, [sp, #24]
 80088d0:	4403      	add	r3, r0
 80088d2:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80088d4:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 80088d6:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80088d8:	d949      	bls.n	800896e <tcp_write+0x3e2>
      pbuf_free(p);
 80088da:	4620      	mov	r0, r4
 80088dc:	e01c      	b.n	8008918 <tcp_write+0x38c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80088de:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80088e2:	b133      	cbz	r3, 80088f2 <tcp_write+0x366>
 80088e4:	4b6d      	ldr	r3, [pc, #436]	; (8008a9c <tcp_write+0x510>)
 80088e6:	4970      	ldr	r1, [pc, #448]	; (8008aa8 <tcp_write+0x51c>)
 80088e8:	486e      	ldr	r0, [pc, #440]	; (8008aa4 <tcp_write+0x518>)
 80088ea:	f240 224b 	movw	r2, #587	; 0x24b
 80088ee:	f001 fec1 	bl	800a674 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80088f2:	2201      	movs	r2, #1
 80088f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088f6:	2000      	movs	r0, #0
 80088f8:	f7fd f946 	bl	8005b88 <pbuf_alloc>
 80088fc:	b170      	cbz	r0, 800891c <tcp_write+0x390>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 80088fe:	9a08      	ldr	r2, [sp, #32]
 8008900:	900d      	str	r0, [sp, #52]	; 0x34
 8008902:	4442      	add	r2, r8
 8008904:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008906:	2200      	movs	r2, #0
 8008908:	4611      	mov	r1, r2
 800890a:	4610      	mov	r0, r2
 800890c:	f7fd f93c 	bl	8005b88 <pbuf_alloc>
 8008910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008912:	4604      	mov	r4, r0
 8008914:	bb38      	cbnz	r0, 8008966 <tcp_write+0x3da>
        pbuf_free(p2);
 8008916:	4618      	mov	r0, r3
      pbuf_free(p);
 8008918:	f7fd f8d4 	bl	8005ac4 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800891c:	7eab      	ldrb	r3, [r5, #26]
 800891e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008922:	76ab      	strb	r3, [r5, #26]
  if (concat_p != NULL) {
 8008924:	f1b9 0f00 	cmp.w	r9, #0
 8008928:	d002      	beq.n	8008930 <tcp_write+0x3a4>
    pbuf_free(concat_p);
 800892a:	4648      	mov	r0, r9
 800892c:	f7fd f8ca 	bl	8005ac4 <pbuf_free>
  if (queue != NULL) {
 8008930:	f1bb 0f00 	cmp.w	fp, #0
 8008934:	d002      	beq.n	800893c <tcp_write+0x3b0>
    tcp_segs_free(queue);
 8008936:	4658      	mov	r0, fp
 8008938:	f7fd fd14 	bl	8006364 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800893c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8008940:	2b00      	cmp	r3, #0
 8008942:	f43f ae57 	beq.w	80085f4 <tcp_write+0x68>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8008946:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8008948:	2b00      	cmp	r3, #0
 800894a:	f47f ae53 	bne.w	80085f4 <tcp_write+0x68>
 800894e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008950:	2b00      	cmp	r3, #0
 8008952:	f47f ae4f 	bne.w	80085f4 <tcp_write+0x68>
 8008956:	4b51      	ldr	r3, [pc, #324]	; (8008a9c <tcp_write+0x510>)
 8008958:	4954      	ldr	r1, [pc, #336]	; (8008aac <tcp_write+0x520>)
 800895a:	4852      	ldr	r0, [pc, #328]	; (8008aa4 <tcp_write+0x518>)
 800895c:	f240 3202 	movw	r2, #770	; 0x302
 8008960:	f001 fe88 	bl	800a674 <iprintf>
 8008964:	e646      	b.n	80085f4 <tcp_write+0x68>
      pbuf_cat(p/*header*/, p2/*data*/);
 8008966:	4619      	mov	r1, r3
 8008968:	f7fd fa7a 	bl	8005e60 <pbuf_cat>
 800896c:	e7ac      	b.n	80088c8 <tcp_write+0x33c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800896e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008970:	2200      	movs	r2, #0
 8008972:	4621      	mov	r1, r4
 8008974:	9200      	str	r2, [sp, #0]
 8008976:	4443      	add	r3, r8
 8008978:	4628      	mov	r0, r5
 800897a:	f7ff fd63 	bl	8008444 <tcp_create_segment>
 800897e:	4604      	mov	r4, r0
 8008980:	2800      	cmp	r0, #0
 8008982:	d0cb      	beq.n	800891c <tcp_write+0x390>
    if (queue == NULL) {
 8008984:	f1bb 0f00 	cmp.w	fp, #0
 8008988:	d010      	beq.n	80089ac <tcp_write+0x420>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800898a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800898c:	b933      	cbnz	r3, 800899c <tcp_write+0x410>
 800898e:	4b43      	ldr	r3, [pc, #268]	; (8008a9c <tcp_write+0x510>)
 8008990:	4947      	ldr	r1, [pc, #284]	; (8008ab0 <tcp_write+0x524>)
 8008992:	4844      	ldr	r0, [pc, #272]	; (8008aa4 <tcp_write+0x518>)
 8008994:	f240 2285 	movw	r2, #645	; 0x285
 8008998:	f001 fe6c 	bl	800a674 <iprintf>
      prev_seg->next = seg;
 800899c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800899e:	601c      	str	r4, [r3, #0]
    pos += seglen;
 80089a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a2:	940b      	str	r4, [sp, #44]	; 0x2c
 80089a4:	4498      	add	r8, r3
 80089a6:	fa1f f888 	uxth.w	r8, r8
 80089aa:	e6eb      	b.n	8008784 <tcp_write+0x1f8>
 80089ac:	4683      	mov	fp, r0
 80089ae:	e7f7      	b.n	80089a0 <tcp_write+0x414>
  if (oversize_used > 0) {
 80089b0:	f04f 0a00 	mov.w	sl, #0
 80089b4:	46d1      	mov	r9, sl
 80089b6:	e6e9      	b.n	800878c <tcp_write+0x200>
      p->tot_len += oversize_used;
 80089b8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80089bc:	4433      	add	r3, r6
 80089be:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 80089c2:	f8d8 3000 	ldr.w	r3, [r8]
 80089c6:	b96b      	cbnz	r3, 80089e4 <tcp_write+0x458>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80089c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80089cc:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 80089d0:	9908      	ldr	r1, [sp, #32]
 80089d2:	4418      	add	r0, r3
 80089d4:	4632      	mov	r2, r6
 80089d6:	f001 fd8e 	bl	800a4f6 <memcpy>
        p->len += oversize_used;
 80089da:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80089de:	4433      	add	r3, r6
 80089e0:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80089e4:	f8d8 8000 	ldr.w	r8, [r8]
 80089e8:	e6d2      	b.n	8008790 <tcp_write+0x204>
  } else if (extendlen > 0) {
 80089ea:	f1ba 0f00 	cmp.w	sl, #0
 80089ee:	d019      	beq.n	8008a24 <tcp_write+0x498>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80089f0:	b10f      	cbz	r7, 80089f6 <tcp_write+0x46a>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	b933      	cbnz	r3, 8008a04 <tcp_write+0x478>
 80089f6:	4b29      	ldr	r3, [pc, #164]	; (8008a9c <tcp_write+0x510>)
 80089f8:	492e      	ldr	r1, [pc, #184]	; (8008ab4 <tcp_write+0x528>)
 80089fa:	482a      	ldr	r0, [pc, #168]	; (8008aa4 <tcp_write+0x518>)
 80089fc:	f240 22c1 	movw	r2, #705	; 0x2c1
 8008a00:	f001 fe38 	bl	800a674 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	891a      	ldrh	r2, [r3, #8]
 8008a08:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 8008a0a:	4452      	add	r2, sl
 8008a0c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008a0e:	b939      	cbnz	r1, 8008a20 <tcp_write+0x494>
    p->len += extendlen;
 8008a10:	895a      	ldrh	r2, [r3, #10]
 8008a12:	4452      	add	r2, sl
 8008a14:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8008a16:	893b      	ldrh	r3, [r7, #8]
 8008a18:	449a      	add	sl, r3
 8008a1a:	f8a7 a008 	strh.w	sl, [r7, #8]
 8008a1e:	e6d7      	b.n	80087d0 <tcp_write+0x244>
      p->tot_len += extendlen;
 8008a20:	460b      	mov	r3, r1
 8008a22:	e7f0      	b.n	8008a06 <tcp_write+0x47a>
  if (last_unsent == NULL) {
 8008a24:	2f00      	cmp	r7, #0
 8008a26:	f47f aed3 	bne.w	80087d0 <tcp_write+0x244>
    pcb->unsent = queue;
 8008a2a:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  pcb->snd_lbb += len;
 8008a2e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008a30:	9a05      	ldr	r2, [sp, #20]
 8008a32:	4413      	add	r3, r2
 8008a34:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->snd_buf -= len;
 8008a36:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8008a3a:	1a9b      	subs	r3, r3, r2
 8008a3c:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8008a40:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8008a44:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8008a48:	9b06      	ldr	r3, [sp, #24]
 8008a4a:	b153      	cbz	r3, 8008a62 <tcp_write+0x4d6>
    LWIP_ASSERT("tcp_write: valid queue length",
 8008a4c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8008a4e:	b943      	cbnz	r3, 8008a62 <tcp_write+0x4d6>
 8008a50:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008a52:	b933      	cbnz	r3, 8008a62 <tcp_write+0x4d6>
 8008a54:	4b11      	ldr	r3, [pc, #68]	; (8008a9c <tcp_write+0x510>)
 8008a56:	4915      	ldr	r1, [pc, #84]	; (8008aac <tcp_write+0x520>)
 8008a58:	4812      	ldr	r0, [pc, #72]	; (8008aa4 <tcp_write+0x518>)
 8008a5a:	f240 22ed 	movw	r2, #749	; 0x2ed
 8008a5e:	f001 fe09 	bl	800a674 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8008a62:	b15c      	cbz	r4, 8008a7c <tcp_write+0x4f0>
 8008a64:	68e4      	ldr	r4, [r4, #12]
 8008a66:	b14c      	cbz	r4, 8008a7c <tcp_write+0x4f0>
 8008a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a6a:	f013 0602 	ands.w	r6, r3, #2
 8008a6e:	d105      	bne.n	8008a7c <tcp_write+0x4f0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8008a70:	2008      	movs	r0, #8
 8008a72:	89a5      	ldrh	r5, [r4, #12]
 8008a74:	f7fb fa66 	bl	8003f44 <lwip_htons>
 8008a78:	4328      	orrs	r0, r5
 8008a7a:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	e5a4      	b.n	80085ca <tcp_write+0x3e>
      p->tot_len += extendlen;
 8008a80:	f04f 0900 	mov.w	r9, #0
 8008a84:	e74a      	b.n	800891c <tcp_write+0x390>
    return ERR_CONN;
 8008a86:	f06f 000a 	mvn.w	r0, #10
 8008a8a:	e59e      	b.n	80085ca <tcp_write+0x3e>
  if (oversize_used > 0) {
 8008a8c:	2e00      	cmp	r6, #0
 8008a8e:	d18f      	bne.n	80089b0 <tcp_write+0x424>
  pcb->unsent_oversize = oversize;
 8008a90:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008a94:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 8008a98:	e69a      	b.n	80087d0 <tcp_write+0x244>
 8008a9a:	bf00      	nop
 8008a9c:	0800d1ef 	.word	0x0800d1ef
 8008aa0:	0800d380 	.word	0x0800d380
 8008aa4:	0800bb8d 	.word	0x0800bb8d
 8008aa8:	0800d3be 	.word	0x0800d3be
 8008aac:	0800d44a 	.word	0x0800d44a
 8008ab0:	0800d3cc 	.word	0x0800d3cc
 8008ab4:	0800d415 	.word	0x0800d415

08008ab8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008ab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008abc:	f011 0803 	ands.w	r8, r1, #3
{
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008ac4:	d106      	bne.n	8008ad4 <tcp_enqueue_flags+0x1c>
 8008ac6:	4b41      	ldr	r3, [pc, #260]	; (8008bcc <tcp_enqueue_flags+0x114>)
 8008ac8:	4941      	ldr	r1, [pc, #260]	; (8008bd0 <tcp_enqueue_flags+0x118>)
 8008aca:	4842      	ldr	r0, [pc, #264]	; (8008bd4 <tcp_enqueue_flags+0x11c>)
 8008acc:	f240 321b 	movw	r2, #795	; 0x31b
 8008ad0:	f001 fdd0 	bl	800a674 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008ad4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d90a      	bls.n	8008af2 <tcp_enqueue_flags+0x3a>
 8008adc:	07f1      	lsls	r1, r6, #31
 8008ade:	d408      	bmi.n	8008af2 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8008ae0:	7ea3      	ldrb	r3, [r4, #26]
 8008ae2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ae6:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8008aec:	b003      	add	sp, #12
 8008aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008af2:	f006 0302 	and.w	r3, r6, #2
  if (flags & TCP_SYN) {
 8008af6:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008af8:	bf14      	ite	ne
 8008afa:	2704      	movne	r7, #4
 8008afc:	2700      	moveq	r7, #0
 8008afe:	f04f 0200 	mov.w	r2, #0
 8008b02:	4639      	mov	r1, r7
 8008b04:	4610      	mov	r0, r2
  u8_t optflags = 0;
 8008b06:	bf14      	ite	ne
 8008b08:	f04f 0901 	movne.w	r9, #1
 8008b0c:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008b10:	f7fd f83a 	bl	8005b88 <pbuf_alloc>
 8008b14:	4605      	mov	r5, r0
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d0e2      	beq.n	8008ae0 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008b1a:	8943      	ldrh	r3, [r0, #10]
 8008b1c:	42bb      	cmp	r3, r7
 8008b1e:	d206      	bcs.n	8008b2e <tcp_enqueue_flags+0x76>
 8008b20:	4b2a      	ldr	r3, [pc, #168]	; (8008bcc <tcp_enqueue_flags+0x114>)
 8008b22:	492d      	ldr	r1, [pc, #180]	; (8008bd8 <tcp_enqueue_flags+0x120>)
 8008b24:	482b      	ldr	r0, [pc, #172]	; (8008bd4 <tcp_enqueue_flags+0x11c>)
 8008b26:	f240 3241 	movw	r2, #833	; 0x341
 8008b2a:	f001 fda3 	bl	800a674 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008b2e:	f8cd 9000 	str.w	r9, [sp]
 8008b32:	4629      	mov	r1, r5
 8008b34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b36:	4632      	mov	r2, r6
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f7ff fc83 	bl	8008444 <tcp_create_segment>
 8008b3e:	4605      	mov	r5, r0
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d0cd      	beq.n	8008ae0 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008b44:	68c3      	ldr	r3, [r0, #12]
 8008b46:	079a      	lsls	r2, r3, #30
 8008b48:	d006      	beq.n	8008b58 <tcp_enqueue_flags+0xa0>
 8008b4a:	4b20      	ldr	r3, [pc, #128]	; (8008bcc <tcp_enqueue_flags+0x114>)
 8008b4c:	4923      	ldr	r1, [pc, #140]	; (8008bdc <tcp_enqueue_flags+0x124>)
 8008b4e:	4821      	ldr	r0, [pc, #132]	; (8008bd4 <tcp_enqueue_flags+0x11c>)
 8008b50:	f240 3249 	movw	r2, #841	; 0x349
 8008b54:	f001 fd8e 	bl	800a674 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008b58:	892b      	ldrh	r3, [r5, #8]
 8008b5a:	b133      	cbz	r3, 8008b6a <tcp_enqueue_flags+0xb2>
 8008b5c:	4b1b      	ldr	r3, [pc, #108]	; (8008bcc <tcp_enqueue_flags+0x114>)
 8008b5e:	4920      	ldr	r1, [pc, #128]	; (8008be0 <tcp_enqueue_flags+0x128>)
 8008b60:	481c      	ldr	r0, [pc, #112]	; (8008bd4 <tcp_enqueue_flags+0x11c>)
 8008b62:	f240 324a 	movw	r2, #842	; 0x34a
 8008b66:	f001 fd85 	bl	800a674 <iprintf>
  if (pcb->unsent == NULL) {
 8008b6a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008b6c:	bb4b      	cbnz	r3, 8008bc2 <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 8008b6e:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008b76:	f1b8 0f00 	cmp.w	r8, #0
 8008b7a:	d002      	beq.n	8008b82 <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 8008b7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b7e:	3301      	adds	r3, #1
 8008b80:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8008b82:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8008b84:	bf42      	ittt	mi
 8008b86:	7ea3      	ldrbmi	r3, [r4, #26]
 8008b88:	f043 0320 	orrmi.w	r3, r3, #32
 8008b8c:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008b8e:	6868      	ldr	r0, [r5, #4]
 8008b90:	f7fd f94a 	bl	8005e28 <pbuf_clen>
 8008b94:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008b98:	4418      	add	r0, r3
 8008b9a:	b280      	uxth	r0, r0
 8008b9c:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d0a3      	beq.n	8008aec <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008ba4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008ba6:	b948      	cbnz	r0, 8008bbc <tcp_enqueue_flags+0x104>
 8008ba8:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8008baa:	2c00      	cmp	r4, #0
 8008bac:	d19e      	bne.n	8008aec <tcp_enqueue_flags+0x34>
 8008bae:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <tcp_enqueue_flags+0x114>)
 8008bb0:	490c      	ldr	r1, [pc, #48]	; (8008be4 <tcp_enqueue_flags+0x12c>)
 8008bb2:	4808      	ldr	r0, [pc, #32]	; (8008bd4 <tcp_enqueue_flags+0x11c>)
 8008bb4:	f240 326d 	movw	r2, #877	; 0x36d
 8008bb8:	f001 fd5c 	bl	800a674 <iprintf>
  return ERR_OK;
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	e795      	b.n	8008aec <tcp_enqueue_flags+0x34>
 8008bc0:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	2a00      	cmp	r2, #0
 8008bc6:	d1fb      	bne.n	8008bc0 <tcp_enqueue_flags+0x108>
    useg->next = seg;
 8008bc8:	601d      	str	r5, [r3, #0]
 8008bca:	e7d1      	b.n	8008b70 <tcp_enqueue_flags+0xb8>
 8008bcc:	0800d1ef 	.word	0x0800d1ef
 8008bd0:	0800d08c 	.word	0x0800d08c
 8008bd4:	0800bb8d 	.word	0x0800bb8d
 8008bd8:	0800d0e1 	.word	0x0800d0e1
 8008bdc:	0800d11a 	.word	0x0800d11a
 8008be0:	0800d132 	.word	0x0800d132
 8008be4:	0800d15c 	.word	0x0800d15c

08008be8 <tcp_send_fin>:
{
 8008be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8008bea:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8008bec:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8008bee:	b934      	cbnz	r4, 8008bfe <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	2101      	movs	r1, #1
}
 8008bf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008bf8:	f7ff bf5e 	b.w	8008ab8 <tcp_enqueue_flags>
 8008bfc:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1fb      	bne.n	8008bfc <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008c04:	68e3      	ldr	r3, [r4, #12]
 8008c06:	8998      	ldrh	r0, [r3, #12]
 8008c08:	f7fb f99c 	bl	8003f44 <lwip_htons>
 8008c0c:	f010 0707 	ands.w	r7, r0, #7
 8008c10:	d1ee      	bne.n	8008bf0 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008c12:	68e6      	ldr	r6, [r4, #12]
 8008c14:	2001      	movs	r0, #1
 8008c16:	89b4      	ldrh	r4, [r6, #12]
 8008c18:	f7fb f994 	bl	8003f44 <lwip_htons>
 8008c1c:	4320      	orrs	r0, r4
 8008c1e:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 8008c20:	7eab      	ldrb	r3, [r5, #26]
 8008c22:	f043 0320 	orr.w	r3, r3, #32
 8008c26:	76ab      	strb	r3, [r5, #26]
}
 8008c28:	4638      	mov	r0, r7
 8008c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c2c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8008c2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008c2e:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008c30:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008c32:	f7fb f98a 	bl	8003f4a <lwip_htonl>
 8008c36:	2100      	movs	r1, #0
 8008c38:	4602      	mov	r2, r0
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f7ff fc6a 	bl	8008514 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8008c40:	4606      	mov	r6, r0
 8008c42:	b940      	cbnz	r0, 8008c56 <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008c44:	7ea3      	ldrb	r3, [r4, #26]
 8008c46:	f043 0303 	orr.w	r3, r3, #3
 8008c4a:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8008c4c:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8008c50:	4628      	mov	r0, r5
 8008c52:	b004      	add	sp, #16
 8008c54:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008c56:	1d25      	adds	r5, r4, #4
 8008c58:	4628      	mov	r0, r5
 8008c5a:	f7fb fe67 	bl	800492c <ip4_route>
  if (netif == NULL) {
 8008c5e:	b1a0      	cbz	r0, 8008c8a <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8008c60:	2206      	movs	r2, #6
 8008c62:	9201      	str	r2, [sp, #4]
 8008c64:	7a62      	ldrb	r2, [r4, #9]
 8008c66:	9002      	str	r0, [sp, #8]
 8008c68:	9200      	str	r2, [sp, #0]
 8008c6a:	7aa3      	ldrb	r3, [r4, #10]
 8008c6c:	462a      	mov	r2, r5
 8008c6e:	4621      	mov	r1, r4
 8008c70:	4630      	mov	r0, r6
 8008c72:	f7fb ffc1 	bl	8004bf8 <ip4_output_if>
 8008c76:	4605      	mov	r5, r0
  pbuf_free(p);
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f7fc ff23 	bl	8005ac4 <pbuf_free>
 8008c7e:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8008c80:	b135      	cbz	r5, 8008c90 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008c82:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008c86:	76a3      	strb	r3, [r4, #26]
 8008c88:	e7e2      	b.n	8008c50 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8008c8a:	f06f 0503 	mvn.w	r5, #3
 8008c8e:	e7f3      	b.n	8008c78 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008c90:	f023 0303 	bic.w	r3, r3, #3
 8008c94:	e7f7      	b.n	8008c86 <tcp_send_empty_ack+0x5a>
	...

08008c98 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8008c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008c9c:	7d03      	ldrb	r3, [r0, #20]
 8008c9e:	2b01      	cmp	r3, #1
{
 8008ca0:	b087      	sub	sp, #28
 8008ca2:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008ca4:	d106      	bne.n	8008cb4 <tcp_output+0x1c>
 8008ca6:	4ba5      	ldr	r3, [pc, #660]	; (8008f3c <tcp_output+0x2a4>)
 8008ca8:	49a5      	ldr	r1, [pc, #660]	; (8008f40 <tcp_output+0x2a8>)
 8008caa:	48a6      	ldr	r0, [pc, #664]	; (8008f44 <tcp_output+0x2ac>)
 8008cac:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8008cb0:	f001 fce0 	bl	800a674 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008cb4:	4ba4      	ldr	r3, [pc, #656]	; (8008f48 <tcp_output+0x2b0>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	429c      	cmp	r4, r3
 8008cba:	d052      	beq.n	8008d62 <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008cbc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8008cc0:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8008cc4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008cc6:	429f      	cmp	r7, r3
 8008cc8:	bf28      	it	cs
 8008cca:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8008ccc:	7ea3      	ldrb	r3, [r4, #26]
 8008cce:	0799      	lsls	r1, r3, #30
 8008cd0:	d510      	bpl.n	8008cf4 <tcp_output+0x5c>
 8008cd2:	b92d      	cbnz	r5, 8008ce0 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8008cd4:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8008cd6:	b007      	add	sp, #28
 8008cd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8008cdc:	f7ff bfa6 	b.w	8008c2c <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8008ce0:	68eb      	ldr	r3, [r5, #12]
 8008ce2:	6858      	ldr	r0, [r3, #4]
 8008ce4:	f7fb f931 	bl	8003f4a <lwip_htonl>
 8008ce8:	892b      	ldrh	r3, [r5, #8]
 8008cea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008cec:	1a9b      	subs	r3, r3, r2
 8008cee:	4418      	add	r0, r3
     (seg == NULL ||
 8008cf0:	4287      	cmp	r7, r0
 8008cf2:	d3ef      	bcc.n	8008cd4 <tcp_output+0x3c>
  useg = pcb->unacked;
 8008cf4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 8008cf6:	2e00      	cmp	r6, #0
 8008cf8:	d136      	bne.n	8008d68 <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008cfa:	f104 0804 	add.w	r8, r4, #4
 8008cfe:	4640      	mov	r0, r8
 8008d00:	f7fb fe14 	bl	800492c <ip4_route>
  if (netif == NULL) {
 8008d04:	4681      	mov	r9, r0
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f000 813c 	beq.w	8008f84 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 8008d0c:	b10c      	cbz	r4, 8008d12 <tcp_output+0x7a>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	b913      	cbnz	r3, 8008d18 <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008d12:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008d16:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 8008d18:	b1d5      	cbz	r5, 8008d50 <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8008d1a:	68eb      	ldr	r3, [r5, #12]
 8008d1c:	6858      	ldr	r0, [r3, #4]
 8008d1e:	f7fb f914 	bl	8003f4a <lwip_htonl>
 8008d22:	892b      	ldrh	r3, [r5, #8]
 8008d24:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008d26:	1a9b      	subs	r3, r3, r2
 8008d28:	4418      	add	r0, r3
  if (seg != NULL &&
 8008d2a:	4287      	cmp	r7, r0
 8008d2c:	d26f      	bcs.n	8008e0e <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8008d2e:	2f00      	cmp	r7, #0
 8008d30:	d06d      	beq.n	8008e0e <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8008d32:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008d36:	429f      	cmp	r7, r3
 8008d38:	d169      	bne.n	8008e0e <tcp_output+0x176>
 8008d3a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d166      	bne.n	8008e0e <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 8008d40:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008d44:	b923      	cbnz	r3, 8008d50 <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 8008d46:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 8008d50:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008d52:	b913      	cbnz	r3, 8008d5a <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8008d5a:	7ea3      	ldrb	r3, [r4, #26]
 8008d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d60:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8008d62:	2000      	movs	r0, #0
 8008d64:	e0e6      	b.n	8008f34 <tcp_output+0x29c>
 8008d66:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 8008d68:	6833      	ldr	r3, [r6, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1fb      	bne.n	8008d66 <tcp_output+0xce>
 8008d6e:	e7c4      	b.n	8008cfa <tcp_output+0x62>
    pcb->unsent = seg->next;
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8008d74:	7d23      	ldrb	r3, [r4, #20]
 8008d76:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008d78:	bf1e      	ittt	ne
 8008d7a:	7ea3      	ldrbne	r3, [r4, #26]
 8008d7c:	f023 0303 	bicne.w	r3, r3, #3
 8008d80:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008d82:	68eb      	ldr	r3, [r5, #12]
 8008d84:	6858      	ldr	r0, [r3, #4]
 8008d86:	f7fb f8e0 	bl	8003f4a <lwip_htonl>
 8008d8a:	68e9      	ldr	r1, [r5, #12]
 8008d8c:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008d90:	4683      	mov	fp, r0
 8008d92:	8988      	ldrh	r0, [r1, #12]
 8008d94:	f7fb f8d6 	bl	8003f44 <lwip_htons>
 8008d98:	f010 0003 	ands.w	r0, r0, #3
 8008d9c:	eb0b 030a 	add.w	r3, fp, sl
 8008da0:	bf18      	it	ne
 8008da2:	2001      	movne	r0, #1
 8008da4:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008da6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8008da8:	68ea      	ldr	r2, [r5, #12]
 8008daa:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008dae:	1a1b      	subs	r3, r3, r0
 8008db0:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8008db2:	bfb8      	it	lt
 8008db4:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8008db6:	8990      	ldrh	r0, [r2, #12]
 8008db8:	f7fb f8c4 	bl	8003f44 <lwip_htons>
 8008dbc:	f010 0003 	ands.w	r0, r0, #3
 8008dc0:	bf18      	it	ne
 8008dc2:	2001      	movne	r0, #1
 8008dc4:	eb10 0f0a 	cmn.w	r0, sl
 8008dc8:	f000 80d8 	beq.w	8008f7c <tcp_output+0x2e4>
      seg->next = NULL;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8008dd0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008dd2:	b913      	cbnz	r3, 8008dda <tcp_output+0x142>
        pcb->unacked = seg;
 8008dd4:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 8008dd6:	462e      	mov	r6, r5
 8008dd8:	e016      	b.n	8008e08 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8008dda:	68eb      	ldr	r3, [r5, #12]
 8008ddc:	6858      	ldr	r0, [r3, #4]
 8008dde:	f7fb f8b4 	bl	8003f4a <lwip_htonl>
 8008de2:	68f2      	ldr	r2, [r6, #12]
 8008de4:	4682      	mov	sl, r0
 8008de6:	6850      	ldr	r0, [r2, #4]
 8008de8:	f7fb f8af 	bl	8003f4a <lwip_htonl>
 8008dec:	ebaa 0000 	sub.w	r0, sl, r0
 8008df0:	2800      	cmp	r0, #0
 8008df2:	f280 80c1 	bge.w	8008f78 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8008df6:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	2a00      	cmp	r2, #0
 8008dfe:	f040 80a9 	bne.w	8008f54 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8008e06:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8008e08:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 8008e0a:	2d00      	cmp	r5, #0
 8008e0c:	d0a2      	beq.n	8008d54 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8008e0e:	68eb      	ldr	r3, [r5, #12]
 8008e10:	6858      	ldr	r0, [r3, #4]
 8008e12:	f7fb f89a 	bl	8003f4a <lwip_htonl>
 8008e16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008e18:	1ac0      	subs	r0, r0, r3
 8008e1a:	892b      	ldrh	r3, [r5, #8]
 8008e1c:	4418      	add	r0, r3
  while (seg != NULL &&
 8008e1e:	4287      	cmp	r7, r0
 8008e20:	d396      	bcc.n	8008d50 <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 8008e22:	68eb      	ldr	r3, [r5, #12]
 8008e24:	8998      	ldrh	r0, [r3, #12]
 8008e26:	f7fb f88d 	bl	8003f44 <lwip_htons>
 8008e2a:	0742      	lsls	r2, r0, #29
 8008e2c:	d506      	bpl.n	8008e3c <tcp_output+0x1a4>
 8008e2e:	4b43      	ldr	r3, [pc, #268]	; (8008f3c <tcp_output+0x2a4>)
 8008e30:	4946      	ldr	r1, [pc, #280]	; (8008f4c <tcp_output+0x2b4>)
 8008e32:	4844      	ldr	r0, [pc, #272]	; (8008f44 <tcp_output+0x2ac>)
 8008e34:	f240 4246 	movw	r2, #1094	; 0x446
 8008e38:	f001 fc1c 	bl	800a674 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008e3c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008e3e:	b19b      	cbz	r3, 8008e68 <tcp_output+0x1d0>
 8008e40:	7ea2      	ldrb	r2, [r4, #26]
 8008e42:	f012 0f44 	tst.w	r2, #68	; 0x44
 8008e46:	d10f      	bne.n	8008e68 <tcp_output+0x1d0>
 8008e48:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008e4a:	b12b      	cbz	r3, 8008e58 <tcp_output+0x1c0>
 8008e4c:	6819      	ldr	r1, [r3, #0]
 8008e4e:	b959      	cbnz	r1, 8008e68 <tcp_output+0x1d0>
 8008e50:	8919      	ldrh	r1, [r3, #8]
 8008e52:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008e54:	4299      	cmp	r1, r3
 8008e56:	d207      	bcs.n	8008e68 <tcp_output+0x1d0>
 8008e58:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008e5c:	b123      	cbz	r3, 8008e68 <tcp_output+0x1d0>
 8008e5e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008e62:	2b08      	cmp	r3, #8
 8008e64:	f240 8091 	bls.w	8008f8a <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 8008e68:	7d23      	ldrb	r3, [r4, #20]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d00a      	beq.n	8008e84 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8008e6e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008e72:	2010      	movs	r0, #16
 8008e74:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 8008e78:	f7fb f864 	bl	8003f44 <lwip_htons>
 8008e7c:	ea4b 0000 	orr.w	r0, fp, r0
 8008e80:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8008e84:	686b      	ldr	r3, [r5, #4]
 8008e86:	89db      	ldrh	r3, [r3, #14]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	f47f af71 	bne.w	8008d70 <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008e8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e90:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008e94:	f7fb f859 	bl	8003f4a <lwip_htonl>
 8008e98:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008e9c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8008e9e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008ea2:	f7fb f84f 	bl	8003f44 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008ea6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008eaa:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008eae:	4413      	add	r3, r2
 8008eb0:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008eb2:	7aab      	ldrb	r3, [r5, #10]
 8008eb4:	07db      	lsls	r3, r3, #31
 8008eb6:	d50c      	bpl.n	8008ed2 <tcp_output+0x23a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8008eb8:	4641      	mov	r1, r8
 8008eba:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008ebe:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8008ec2:	f7fd ffc7 	bl	8006e54 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8008ec6:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8008eca:	f7fb f83e 	bl	8003f4a <lwip_htonl>
 8008ece:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8008ed2:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8008ed6:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8008ed8:	bfbc      	itt	lt
 8008eda:	2300      	movlt	r3, #0
 8008edc:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8008ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ee0:	b93b      	cbnz	r3, 8008ef2 <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 8008ee2:	4b1b      	ldr	r3, [pc, #108]	; (8008f50 <tcp_output+0x2b8>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8008ee8:	68eb      	ldr	r3, [r5, #12]
 8008eea:	6858      	ldr	r0, [r3, #4]
 8008eec:	f7fb f82d 	bl	8003f4a <lwip_htonl>
 8008ef0:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008ef2:	6868      	ldr	r0, [r5, #4]
 8008ef4:	68ea      	ldr	r2, [r5, #12]
 8008ef6:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8008ef8:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 8008efa:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8008f00:	1ac9      	subs	r1, r1, r3
 8008f02:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8008f04:	8901      	ldrh	r1, [r0, #8]
 8008f06:	1acb      	subs	r3, r1, r3
 8008f08:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	7413      	strb	r3, [r2, #16]
 8008f0e:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008f10:	2206      	movs	r2, #6
 8008f12:	9201      	str	r2, [sp, #4]
 8008f14:	7a62      	ldrb	r2, [r4, #9]
 8008f16:	9200      	str	r2, [sp, #0]
 8008f18:	7aa3      	ldrb	r3, [r4, #10]
 8008f1a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f1e:	4642      	mov	r2, r8
 8008f20:	4621      	mov	r1, r4
 8008f22:	f7fb fe69 	bl	8004bf8 <ip4_output_if>
    if (err != ERR_OK) {
 8008f26:	2800      	cmp	r0, #0
 8008f28:	f43f af22 	beq.w	8008d70 <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 8008f2c:	7ea3      	ldrb	r3, [r4, #26]
 8008f2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f32:	76a3      	strb	r3, [r4, #26]
}
 8008f34:	b007      	add	sp, #28
 8008f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3a:	bf00      	nop
 8008f3c:	0800d1ef 	.word	0x0800d1ef
 8008f40:	0800d184 	.word	0x0800d184
 8008f44:	0800bb8d 	.word	0x0800bb8d
 8008f48:	200058a4 	.word	0x200058a4
 8008f4c:	0800d1aa 	.word	0x0800d1aa
 8008f50:	20005894 	.word	0x20005894
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008f54:	68d2      	ldr	r2, [r2, #12]
 8008f56:	9305      	str	r3, [sp, #20]
 8008f58:	6850      	ldr	r0, [r2, #4]
 8008f5a:	f7fa fff6 	bl	8003f4a <lwip_htonl>
 8008f5e:	68e9      	ldr	r1, [r5, #12]
 8008f60:	4682      	mov	sl, r0
 8008f62:	6848      	ldr	r0, [r1, #4]
 8008f64:	f7fa fff1 	bl	8003f4a <lwip_htonl>
 8008f68:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	9b05      	ldr	r3, [sp, #20]
 8008f70:	f6bf af47 	bge.w	8008e02 <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	e740      	b.n	8008dfa <tcp_output+0x162>
          useg->next = seg;
 8008f78:	6035      	str	r5, [r6, #0]
 8008f7a:	e72c      	b.n	8008dd6 <tcp_output+0x13e>
      tcp_seg_free(seg);
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f7fd f9e3 	bl	8006348 <tcp_seg_free>
 8008f82:	e741      	b.n	8008e08 <tcp_output+0x170>
    return ERR_RTE;
 8008f84:	f06f 0003 	mvn.w	r0, #3
 8008f88:	e7d4      	b.n	8008f34 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008f8a:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8008f8e:	f47f af6b 	bne.w	8008e68 <tcp_output+0x1d0>
 8008f92:	e6dd      	b.n	8008d50 <tcp_output+0xb8>

08008f94 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8008f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f98:	b085      	sub	sp, #20
 8008f9a:	4681      	mov	r9, r0
 8008f9c:	460e      	mov	r6, r1
 8008f9e:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8008fa0:	2114      	movs	r1, #20
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	2001      	movs	r0, #1
{
 8008fa6:	461f      	mov	r7, r3
 8008fa8:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8008fac:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8008fb0:	f7fc fdea 	bl	8005b88 <pbuf_alloc>
  if (p == NULL) {
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d03c      	beq.n	8009034 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008fba:	8943      	ldrh	r3, [r0, #10]
 8008fbc:	2b13      	cmp	r3, #19
 8008fbe:	d806      	bhi.n	8008fce <tcp_rst+0x3a>
 8008fc0:	4b1e      	ldr	r3, [pc, #120]	; (800903c <tcp_rst+0xa8>)
 8008fc2:	491f      	ldr	r1, [pc, #124]	; (8009040 <tcp_rst+0xac>)
 8008fc4:	481f      	ldr	r0, [pc, #124]	; (8009044 <tcp_rst+0xb0>)
 8008fc6:	f240 524d 	movw	r2, #1357	; 0x54d
 8008fca:	f001 fb53 	bl	800a674 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 8008fce:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 8008fd0:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8008fd2:	f7fa ffb7 	bl	8003f44 <lwip_htons>
 8008fd6:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8008fd8:	4650      	mov	r0, sl
 8008fda:	f7fa ffb3 	bl	8003f44 <lwip_htons>
 8008fde:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8008fe0:	4648      	mov	r0, r9
 8008fe2:	f7fa ffb2 	bl	8003f4a <lwip_htonl>
 8008fe6:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7fa ffae 	bl	8003f4a <lwip_htonl>
 8008fee:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8008ff0:	f245 0014 	movw	r0, #20500	; 0x5014
 8008ff4:	f7fa ffa6 	bl	8003f44 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008ff8:	2308      	movs	r3, #8
 8008ffa:	2600      	movs	r6, #0
 8008ffc:	73a3      	strb	r3, [r4, #14]
 8008ffe:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009000:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009002:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 8009004:	7426      	strb	r6, [r4, #16]
 8009006:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8009008:	74a6      	strb	r6, [r4, #18]
 800900a:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800900c:	4638      	mov	r0, r7
 800900e:	f7fb fc8d 	bl	800492c <ip4_route>
  if (netif != NULL) {
 8009012:	b148      	cbz	r0, 8009028 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8009014:	2306      	movs	r3, #6
 8009016:	9002      	str	r0, [sp, #8]
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	9600      	str	r6, [sp, #0]
 800901c:	23ff      	movs	r3, #255	; 0xff
 800901e:	463a      	mov	r2, r7
 8009020:	4641      	mov	r1, r8
 8009022:	4628      	mov	r0, r5
 8009024:	f7fb fde8 	bl	8004bf8 <ip4_output_if>
  }
  pbuf_free(p);
 8009028:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800902a:	b005      	add	sp, #20
 800902c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8009030:	f7fc bd48 	b.w	8005ac4 <pbuf_free>
}
 8009034:	b005      	add	sp, #20
 8009036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903a:	bf00      	nop
 800903c:	0800d1ef 	.word	0x0800d1ef
 8009040:	0800d1c1 	.word	0x0800d1c1
 8009044:	0800bb8d 	.word	0x0800bb8d

08009048 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8009048:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 800904a:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 800904c:	b1aa      	cbz	r2, 800907a <tcp_rexmit_rto+0x32>
 800904e:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8009050:	680b      	ldr	r3, [r1, #0]
 8009052:	b983      	cbnz	r3, 8009076 <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009054:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8009056:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009058:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800905a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 800905e:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8009060:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8009062:	bf1c      	itt	ne
 8009064:	3301      	addne	r3, #1
 8009066:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 800906e:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 8009072:	f7ff be11 	b.w	8008c98 <tcp_output>
 8009076:	4619      	mov	r1, r3
 8009078:	e7ea      	b.n	8009050 <tcp_rexmit_rto+0x8>
}
 800907a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800907e:	4770      	bx	lr

08009080 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8009082:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 8009084:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 8009086:	b1ad      	cbz	r5, 80090b4 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800908c:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 8009090:	6833      	ldr	r3, [r6, #0]
 8009092:	b983      	cbnz	r3, 80090b6 <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 8009094:	6833      	ldr	r3, [r6, #0]
 8009096:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8009098:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800909a:	682b      	ldr	r3, [r5, #0]
 800909c:	b90b      	cbnz	r3, 80090a2 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800909e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80090a2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80090a6:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 80090a8:	bf1c      	itt	ne
 80090aa:	3301      	addne	r3, #1
 80090ac:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	6363      	str	r3, [r4, #52]	; 0x34
 80090b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	6858      	ldr	r0, [r3, #4]
 80090ba:	f7fa ff46 	bl	8003f4a <lwip_htonl>
 80090be:	68eb      	ldr	r3, [r5, #12]
 80090c0:	4607      	mov	r7, r0
 80090c2:	6858      	ldr	r0, [r3, #4]
 80090c4:	f7fa ff41 	bl	8003f4a <lwip_htonl>
 80090c8:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 80090ca:	2800      	cmp	r0, #0
 80090cc:	dae2      	bge.n	8009094 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 80090ce:	6836      	ldr	r6, [r6, #0]
 80090d0:	e7de      	b.n	8009090 <tcp_rexmit+0x10>

080090d2 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80090d2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 80090d4:	b510      	push	{r4, lr}
 80090d6:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80090d8:	b30b      	cbz	r3, 800911e <tcp_rexmit_fast+0x4c>
 80090da:	7e83      	ldrb	r3, [r0, #26]
 80090dc:	075b      	lsls	r3, r3, #29
 80090de:	d41e      	bmi.n	800911e <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80090e0:	f7ff ffce 	bl	8009080 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80090e4:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 80090e8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80090ec:	4293      	cmp	r3, r2
 80090ee:	bf38      	it	cc
 80090f0:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80090f2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80090f4:	bf28      	it	cs
 80090f6:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80090f8:	0059      	lsls	r1, r3, #1
 80090fa:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80090fc:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8009100:	bf38      	it	cc
 8009102:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009106:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800910a:	440b      	add	r3, r1
 800910c:	4413      	add	r3, r2
 800910e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8009112:	7ea3      	ldrb	r3, [r4, #26]
 8009114:	f043 0304 	orr.w	r3, r3, #4
 8009118:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	8623      	strh	r3, [r4, #48]	; 0x30
 800911e:	bd10      	pop	{r4, pc}

08009120 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009122:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009124:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009126:	3801      	subs	r0, #1
 8009128:	f7fa ff0f 	bl	8003f4a <lwip_htonl>
 800912c:	2100      	movs	r1, #0
 800912e:	4602      	mov	r2, r0
 8009130:	4620      	mov	r0, r4
 8009132:	f7ff f9ef 	bl	8008514 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8009136:	4605      	mov	r5, r0
 8009138:	b1c8      	cbz	r0, 800916e <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800913a:	1d26      	adds	r6, r4, #4
 800913c:	4630      	mov	r0, r6
 800913e:	f7fb fbf5 	bl	800492c <ip4_route>
  if (netif == NULL) {
 8009142:	b188      	cbz	r0, 8009168 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8009144:	2100      	movs	r1, #0
 8009146:	2206      	movs	r2, #6
 8009148:	7aa3      	ldrb	r3, [r4, #10]
 800914a:	9002      	str	r0, [sp, #8]
 800914c:	e88d 0006 	stmia.w	sp, {r1, r2}
 8009150:	4628      	mov	r0, r5
 8009152:	4621      	mov	r1, r4
 8009154:	4632      	mov	r2, r6
 8009156:	f7fb fd4f 	bl	8004bf8 <ip4_output_if>
 800915a:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800915c:	4628      	mov	r0, r5
 800915e:	f7fc fcb1 	bl	8005ac4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8009162:	4620      	mov	r0, r4
 8009164:	b004      	add	sp, #16
 8009166:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8009168:	f06f 0403 	mvn.w	r4, #3
 800916c:	e7f6      	b.n	800915c <tcp_keepalive+0x3c>
    return ERR_MEM;
 800916e:	f04f 34ff 	mov.w	r4, #4294967295
 8009172:	e7f6      	b.n	8009162 <tcp_keepalive+0x42>

08009174 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009174:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8009178:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 800917a:	4606      	mov	r6, r0

  if (seg == NULL) {
 800917c:	b914      	cbnz	r4, 8009184 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 800917e:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8009180:	2c00      	cmp	r4, #0
 8009182:	d042      	beq.n	800920a <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009184:	68e3      	ldr	r3, [r4, #12]
 8009186:	8998      	ldrh	r0, [r3, #12]
 8009188:	f7fa fedc 	bl	8003f44 <lwip_htons>
 800918c:	f010 0501 	ands.w	r5, r0, #1
 8009190:	bf18      	it	ne
 8009192:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009194:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009196:	bf1c      	itt	ne
 8009198:	fab5 f585 	clzne	r5, r5
 800919c:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	f085 0101 	eor.w	r1, r5, #1
 80091a4:	4630      	mov	r0, r6
 80091a6:	f7ff f9b5 	bl	8008514 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80091aa:	4607      	mov	r7, r0
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d03e      	beq.n	800922e <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80091b0:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 80091b4:	b36d      	cbz	r5, 8009212 <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80091b6:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 80091ba:	2011      	movs	r0, #17
 80091bc:	f7fa fec2 	bl	8003f44 <lwip_htons>
 80091c0:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 80091c4:	b2ad      	uxth	r5, r5
 80091c6:	4328      	orrs	r0, r5
 80091c8:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80091cc:	68e3      	ldr	r3, [r4, #12]
 80091ce:	6858      	ldr	r0, [r3, #4]
 80091d0:	f7fa febb 	bl	8003f4a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80091d4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80091d6:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80091d8:	1a1b      	subs	r3, r3, r0
 80091da:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80091dc:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 80091e0:	bfb8      	it	lt
 80091e2:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80091e4:	4620      	mov	r0, r4
 80091e6:	f7fb fba1 	bl	800492c <ip4_route>
  if (netif == NULL) {
 80091ea:	b1e8      	cbz	r0, 8009228 <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80091ec:	2100      	movs	r1, #0
 80091ee:	2206      	movs	r2, #6
 80091f0:	e88d 0006 	stmia.w	sp, {r1, r2}
 80091f4:	9002      	str	r0, [sp, #8]
 80091f6:	4622      	mov	r2, r4
 80091f8:	7ab3      	ldrb	r3, [r6, #10]
 80091fa:	4631      	mov	r1, r6
 80091fc:	4638      	mov	r0, r7
 80091fe:	f7fb fcfb 	bl	8004bf8 <ip4_output_if>
 8009202:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8009204:	4638      	mov	r0, r7
 8009206:	f7fc fc5d 	bl	8005ac4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800920a:	4620      	mov	r0, r4
 800920c:	b004      	add	sp, #16
 800920e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8009212:	6860      	ldr	r0, [r4, #4]
 8009214:	8922      	ldrh	r2, [r4, #8]
 8009216:	8903      	ldrh	r3, [r0, #8]
 8009218:	1a9b      	subs	r3, r3, r2
 800921a:	b29b      	uxth	r3, r3
 800921c:	2201      	movs	r2, #1
 800921e:	f108 0114 	add.w	r1, r8, #20
 8009222:	f7fc fee1 	bl	8005fe8 <pbuf_copy_partial>
 8009226:	e7d1      	b.n	80091cc <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 8009228:	f06f 0403 	mvn.w	r4, #3
 800922c:	e7ea      	b.n	8009204 <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 800922e:	f04f 34ff 	mov.w	r4, #4294967295
 8009232:	e7ea      	b.n	800920a <tcp_zero_window_probe+0x96>

08009234 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8009234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009238:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800923a:	2006      	movs	r0, #6
{
 800923c:	460f      	mov	r7, r1
 800923e:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009240:	f7fc fac0 	bl	80057c4 <memp_malloc>
  if (timeout == NULL) {
 8009244:	4604      	mov	r4, r0
 8009246:	b938      	cbnz	r0, 8009258 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8009248:	4b1e      	ldr	r3, [pc, #120]	; (80092c4 <sys_timeout+0x90>)
 800924a:	491f      	ldr	r1, [pc, #124]	; (80092c8 <sys_timeout+0x94>)
 800924c:	481f      	ldr	r0, [pc, #124]	; (80092cc <sys_timeout+0x98>)
 800924e:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 8009250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8009254:	f001 ba0e 	b.w	800a674 <iprintf>
  now = sys_now();
 8009258:	f000 fbce 	bl	80099f8 <sys_now>
  if (next_timeout == NULL) {
 800925c:	4a1c      	ldr	r2, [pc, #112]	; (80092d0 <sys_timeout+0x9c>)
 800925e:	491d      	ldr	r1, [pc, #116]	; (80092d4 <sys_timeout+0xa0>)
 8009260:	6813      	ldr	r3, [r2, #0]
 8009262:	b95b      	cbnz	r3, 800927c <sys_timeout+0x48>
    timeouts_last_time = now;
 8009264:	6008      	str	r0, [r1, #0]
    diff = 0;
 8009266:	4618      	mov	r0, r3
  timeout->next = NULL;
 8009268:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 800926a:	4428      	add	r0, r5
  timeout->next = NULL;
 800926c:	6021      	str	r1, [r4, #0]
  timeout->h = handler;
 800926e:	60a7      	str	r7, [r4, #8]
  timeout->arg = arg;
 8009270:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 8009272:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8009274:	b92b      	cbnz	r3, 8009282 <sys_timeout+0x4e>
    next_timeout = timeout;
 8009276:	6014      	str	r4, [r2, #0]
 8009278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 800927c:	6809      	ldr	r1, [r1, #0]
 800927e:	1a40      	subs	r0, r0, r1
 8009280:	e7f2      	b.n	8009268 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 8009282:	6859      	ldr	r1, [r3, #4]
 8009284:	428d      	cmp	r5, r1
 8009286:	d217      	bcs.n	80092b8 <sys_timeout+0x84>
    next_timeout->time -= msecs;
 8009288:	1b4d      	subs	r5, r1, r5
 800928a:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	e7f2      	b.n	8009276 <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 8009290:	684e      	ldr	r6, [r1, #4]
 8009292:	42b2      	cmp	r2, r6
 8009294:	d312      	bcc.n	80092bc <sys_timeout+0x88>
 8009296:	4608      	mov	r0, r1
      timeout->time -= t->time;
 8009298:	6841      	ldr	r1, [r0, #4]
 800929a:	6862      	ldr	r2, [r4, #4]
 800929c:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 800929e:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 80092a0:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80092a2:	2900      	cmp	r1, #0
 80092a4:	d1f4      	bne.n	8009290 <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 80092a6:	4295      	cmp	r5, r2
 80092a8:	d202      	bcs.n	80092b0 <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	441d      	add	r5, r3
 80092ae:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 80092b0:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 80092b2:	6004      	str	r4, [r0, #0]
        break;
 80092b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b8:	4618      	mov	r0, r3
 80092ba:	e7ed      	b.n	8009298 <sys_timeout+0x64>
          t->next->time -= timeout->time;
 80092bc:	1ab2      	subs	r2, r6, r2
 80092be:	604a      	str	r2, [r1, #4]
 80092c0:	e7f6      	b.n	80092b0 <sys_timeout+0x7c>
 80092c2:	bf00      	nop
 80092c4:	0800d480 	.word	0x0800d480
 80092c8:	0800d4b4 	.word	0x0800d4b4
 80092cc:	0800bb8d 	.word	0x0800bb8d
 80092d0:	20002348 	.word	0x20002348
 80092d4:	20002350 	.word	0x20002350

080092d8 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80092d8:	4b08      	ldr	r3, [pc, #32]	; (80092fc <tcp_timer_needed+0x24>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	b962      	cbnz	r2, 80092f8 <tcp_timer_needed+0x20>
 80092de:	4a08      	ldr	r2, [pc, #32]	; (8009300 <tcp_timer_needed+0x28>)
 80092e0:	6812      	ldr	r2, [r2, #0]
 80092e2:	b912      	cbnz	r2, 80092ea <tcp_timer_needed+0x12>
 80092e4:	4a07      	ldr	r2, [pc, #28]	; (8009304 <tcp_timer_needed+0x2c>)
 80092e6:	6812      	ldr	r2, [r2, #0]
 80092e8:	b132      	cbz	r2, 80092f8 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 80092ea:	2201      	movs	r2, #1
 80092ec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80092ee:	4906      	ldr	r1, [pc, #24]	; (8009308 <tcp_timer_needed+0x30>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	20fa      	movs	r0, #250	; 0xfa
 80092f4:	f7ff bf9e 	b.w	8009234 <sys_timeout>
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	2000234c 	.word	0x2000234c
 8009300:	20005890 	.word	0x20005890
 8009304:	200058a0 	.word	0x200058a0
 8009308:	0800930d 	.word	0x0800930d

0800930c <tcpip_tcp_timer>:
{
 800930c:	b508      	push	{r3, lr}
  tcp_tmr();
 800930e:	f7fd fc39 	bl	8006b84 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8009312:	4b08      	ldr	r3, [pc, #32]	; (8009334 <tcpip_tcp_timer+0x28>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	b913      	cbnz	r3, 800931e <tcpip_tcp_timer+0x12>
 8009318:	4b07      	ldr	r3, [pc, #28]	; (8009338 <tcpip_tcp_timer+0x2c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	b133      	cbz	r3, 800932c <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800931e:	2200      	movs	r2, #0
 8009320:	4906      	ldr	r1, [pc, #24]	; (800933c <tcpip_tcp_timer+0x30>)
 8009322:	20fa      	movs	r0, #250	; 0xfa
}
 8009324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009328:	f7ff bf84 	b.w	8009234 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800932c:	4a04      	ldr	r2, [pc, #16]	; (8009340 <tcpip_tcp_timer+0x34>)
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	bd08      	pop	{r3, pc}
 8009332:	bf00      	nop
 8009334:	20005890 	.word	0x20005890
 8009338:	200058a0 	.word	0x200058a0
 800933c:	0800930d 	.word	0x0800930d
 8009340:	2000234c 	.word	0x2000234c

08009344 <sys_timeouts_init>:
{
 8009344:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8009346:	4d0a      	ldr	r5, [pc, #40]	; (8009370 <sys_timeouts_init+0x2c>)
 8009348:	4c0a      	ldr	r4, [pc, #40]	; (8009374 <sys_timeouts_init+0x30>)
 800934a:	f105 0208 	add.w	r2, r5, #8
 800934e:	4621      	mov	r1, r4
 8009350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009354:	f7ff ff6e 	bl	8009234 <sys_timeout>
 8009358:	f105 0210 	add.w	r2, r5, #16
 800935c:	4621      	mov	r1, r4
 800935e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009362:	f7ff ff67 	bl	8009234 <sys_timeout>
  timeouts_last_time = sys_now();
 8009366:	f000 fb47 	bl	80099f8 <sys_now>
 800936a:	4b03      	ldr	r3, [pc, #12]	; (8009378 <sys_timeouts_init+0x34>)
 800936c:	6018      	str	r0, [r3, #0]
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	0800d468 	.word	0x0800d468
 8009374:	0800937d 	.word	0x0800937d
 8009378:	20002350 	.word	0x20002350

0800937c <cyclic_timer>:
{
 800937c:	b510      	push	{r4, lr}
 800937e:	4604      	mov	r4, r0
  cyclic->handler();
 8009380:	6843      	ldr	r3, [r0, #4]
 8009382:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8009384:	4622      	mov	r2, r4
 8009386:	6820      	ldr	r0, [r4, #0]
 8009388:	4902      	ldr	r1, [pc, #8]	; (8009394 <cyclic_timer+0x18>)
}
 800938a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800938e:	f7ff bf51 	b.w	8009234 <sys_timeout>
 8009392:	bf00      	nop
 8009394:	0800937d 	.word	0x0800937d

08009398 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8009398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (next_timeout) {
 800939c:	4d13      	ldr	r5, [pc, #76]	; (80093ec <sys_check_timeouts+0x54>)
 800939e:	682b      	ldr	r3, [r5, #0]
 80093a0:	b30b      	cbz	r3, 80093e6 <sys_check_timeouts+0x4e>
    u8_t had_one;
    u32_t now;

    now = sys_now();
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 80093a2:	4e13      	ldr	r6, [pc, #76]	; (80093f0 <sys_check_timeouts+0x58>)
    do {
      PBUF_CHECK_FREE_OOSEQ();
 80093a4:	4f13      	ldr	r7, [pc, #76]	; (80093f4 <sys_check_timeouts+0x5c>)
    now = sys_now();
 80093a6:	f000 fb27 	bl	80099f8 <sys_now>
    diff = now - timeouts_last_time;
 80093aa:	6834      	ldr	r4, [r6, #0]
 80093ac:	1b04      	subs	r4, r0, r4
      PBUF_CHECK_FREE_OOSEQ();
 80093ae:	783b      	ldrb	r3, [r7, #0]
 80093b0:	b10b      	cbz	r3, 80093b6 <sys_check_timeouts+0x1e>
 80093b2:	f7fc fb33 	bl	8005a1c <pbuf_free_ooseq>
      had_one = 0;
      tmptimeout = next_timeout;
 80093b6:	6829      	ldr	r1, [r5, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80093b8:	b1a9      	cbz	r1, 80093e6 <sys_check_timeouts+0x4e>
 80093ba:	684b      	ldr	r3, [r1, #4]
 80093bc:	429c      	cmp	r4, r3
 80093be:	d312      	bcc.n	80093e6 <sys_check_timeouts+0x4e>
        /* timeout has expired */
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
 80093c0:	6832      	ldr	r2, [r6, #0]
        diff -= tmptimeout->time;
        next_timeout = tmptimeout->next;
        handler = tmptimeout->h;
 80093c2:	f8d1 8008 	ldr.w	r8, [r1, #8]
        arg = tmptimeout->arg;
 80093c6:	f8d1 900c 	ldr.w	r9, [r1, #12]
        timeouts_last_time += tmptimeout->time;
 80093ca:	441a      	add	r2, r3
        diff -= tmptimeout->time;
 80093cc:	1ae4      	subs	r4, r4, r3
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80093ce:	2006      	movs	r0, #6
        next_timeout = tmptimeout->next;
 80093d0:	680b      	ldr	r3, [r1, #0]
        timeouts_last_time += tmptimeout->time;
 80093d2:	6032      	str	r2, [r6, #0]
        next_timeout = tmptimeout->next;
 80093d4:	602b      	str	r3, [r5, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80093d6:	f7fc fa11 	bl	80057fc <memp_free>
        if (handler != NULL) {
 80093da:	f1b8 0f00 	cmp.w	r8, #0
 80093de:	d0e6      	beq.n	80093ae <sys_check_timeouts+0x16>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 80093e0:	4648      	mov	r0, r9
 80093e2:	47c0      	blx	r8
 80093e4:	e7e3      	b.n	80093ae <sys_check_timeouts+0x16>
 80093e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ea:	bf00      	nop
 80093ec:	20002348 	.word	0x20002348
 80093f0:	20002350 	.word	0x20002350
 80093f4:	20005888 	.word	0x20005888

080093f8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80093f8:	4770      	bx	lr
	...

080093fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80093fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8009400:	8943      	ldrh	r3, [r0, #10]
 8009402:	2b07      	cmp	r3, #7
{
 8009404:	b085      	sub	sp, #20
 8009406:	4605      	mov	r5, r0
 8009408:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 800940a:	d805      	bhi.n	8009418 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800940c:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800940e:	b005      	add	sp, #20
 8009410:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8009414:	f7fc bb56 	b.w	8005ac4 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009418:	4e3e      	ldr	r6, [pc, #248]	; (8009514 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 800941a:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800941c:	6831      	ldr	r1, [r6, #0]
 800941e:	6970      	ldr	r0, [r6, #20]
 8009420:	f7fb fbfb 	bl	8004c1a <ip4_addr_isbroadcast_u32>
 8009424:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 8009426:	8820      	ldrh	r0, [r4, #0]
 8009428:	f7fa fd8c 	bl	8003f44 <lwip_htons>
 800942c:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 800942e:	8860      	ldrh	r0, [r4, #2]
 8009430:	f7fa fd88 	bl	8003f44 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009434:	4a38      	ldr	r2, [pc, #224]	; (8009518 <udp_input+0x11c>)
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009436:	6971      	ldr	r1, [r6, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009438:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800943c:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800943e:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009440:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 8009442:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009444:	4603      	mov	r3, r0
  prev = NULL;
 8009446:	46a4      	mov	ip, r4
 8009448:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800944a:	b92b      	cbnz	r3, 8009458 <udp_input+0x5c>
  if (pcb != NULL) {
 800944c:	bb0c      	cbnz	r4, 8009492 <udp_input+0x96>
  if (for_us) {
 800944e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009452:	428b      	cmp	r3, r1
 8009454:	d1da      	bne.n	800940c <udp_input+0x10>
 8009456:	e01c      	b.n	8009492 <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 8009458:	8a5a      	ldrh	r2, [r3, #18]
 800945a:	4552      	cmp	r2, sl
 800945c:	d12b      	bne.n	80094b6 <udp_input+0xba>
 800945e:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 8009460:	b32f      	cbz	r7, 80094ae <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009462:	b13a      	cbz	r2, 8009474 <udp_input+0x78>
 8009464:	1c4e      	adds	r6, r1, #1
 8009466:	d005      	beq.n	8009474 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8009468:	404a      	eors	r2, r1
 800946a:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800946c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009470:	4216      	tst	r6, r2
 8009472:	d120      	bne.n	80094b6 <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8009474:	7c1a      	ldrb	r2, [r3, #16]
 8009476:	0752      	lsls	r2, r2, #29
 8009478:	d402      	bmi.n	8009480 <udp_input+0x84>
 800947a:	2c00      	cmp	r4, #0
 800947c:	bf08      	it	eq
 800947e:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8009480:	8a9a      	ldrh	r2, [r3, #20]
 8009482:	4542      	cmp	r2, r8
 8009484:	d117      	bne.n	80094b6 <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009486:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 8009488:	b9c2      	cbnz	r2, 80094bc <udp_input+0xc0>
        if (prev != NULL) {
 800948a:	f1bc 0f00 	cmp.w	ip, #0
 800948e:	d118      	bne.n	80094c2 <udp_input+0xc6>
 8009490:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 8009492:	f06f 0107 	mvn.w	r1, #7
 8009496:	4628      	mov	r0, r5
 8009498:	f7fc fb0e 	bl	8005ab8 <pbuf_header>
 800949c:	b1c0      	cbz	r0, 80094d0 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800949e:	4b1f      	ldr	r3, [pc, #124]	; (800951c <udp_input+0x120>)
 80094a0:	491f      	ldr	r1, [pc, #124]	; (8009520 <udp_input+0x124>)
 80094a2:	4820      	ldr	r0, [pc, #128]	; (8009524 <udp_input+0x128>)
 80094a4:	f240 1255 	movw	r2, #341	; 0x155
 80094a8:	f001 f8e4 	bl	800a674 <iprintf>
 80094ac:	e7ae      	b.n	800940c <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80094ae:	2a00      	cmp	r2, #0
 80094b0:	d0e0      	beq.n	8009474 <udp_input+0x78>
 80094b2:	428a      	cmp	r2, r1
 80094b4:	d0de      	beq.n	8009474 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80094b6:	469c      	mov	ip, r3
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	e7c6      	b.n	800944a <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80094bc:	4572      	cmp	r2, lr
 80094be:	d1fa      	bne.n	80094b6 <udp_input+0xba>
 80094c0:	e7e3      	b.n	800948a <udp_input+0x8e>
          prev->next = pcb->next;
 80094c2:	68da      	ldr	r2, [r3, #12]
 80094c4:	f8cc 200c 	str.w	r2, [ip, #12]
          udp_pcbs = pcb;
 80094c8:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 80094cc:	60d8      	str	r0, [r3, #12]
 80094ce:	e7df      	b.n	8009490 <udp_input+0x94>
    if (pcb != NULL) {
 80094d0:	b164      	cbz	r4, 80094ec <udp_input+0xf0>
      if (pcb->recv != NULL) {
 80094d2:	69a6      	ldr	r6, [r4, #24]
 80094d4:	2e00      	cmp	r6, #0
 80094d6:	d099      	beq.n	800940c <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80094d8:	f8cd 8000 	str.w	r8, [sp]
 80094dc:	4b12      	ldr	r3, [pc, #72]	; (8009528 <udp_input+0x12c>)
 80094de:	69e0      	ldr	r0, [r4, #28]
 80094e0:	462a      	mov	r2, r5
 80094e2:	4621      	mov	r1, r4
 80094e4:	47b0      	blx	r6
}
 80094e6:	b005      	add	sp, #20
 80094e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80094ec:	2f00      	cmp	r7, #0
 80094ee:	d18d      	bne.n	800940c <udp_input+0x10>
 80094f0:	9b03      	ldr	r3, [sp, #12]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094f8:	2be0      	cmp	r3, #224	; 0xe0
 80094fa:	d087      	beq.n	800940c <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80094fc:	9b03      	ldr	r3, [sp, #12]
 80094fe:	8999      	ldrh	r1, [r3, #12]
 8009500:	3108      	adds	r1, #8
 8009502:	b209      	sxth	r1, r1
 8009504:	4628      	mov	r0, r5
 8009506:	f7fc fada 	bl	8005abe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800950a:	2103      	movs	r1, #3
 800950c:	4628      	mov	r0, r5
 800950e:	f7fb fa03 	bl	8004918 <icmp_dest_unreach>
 8009512:	e77b      	b.n	800940c <udp_input+0x10>
 8009514:	20002368 	.word	0x20002368
 8009518:	200058a8 	.word	0x200058a8
 800951c:	0800d4f1 	.word	0x0800d4f1
 8009520:	0800d520 	.word	0x0800d520
 8009524:	0800bb8d 	.word	0x0800bb8d
 8009528:	20002378 	.word	0x20002378

0800952c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800952c:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800952e:	b138      	cbz	r0, 8009540 <udp_netif_ip_addr_changed+0x14>
 8009530:	6803      	ldr	r3, [r0, #0]
 8009532:	b12b      	cbz	r3, 8009540 <udp_netif_ip_addr_changed+0x14>
 8009534:	b121      	cbz	r1, 8009540 <udp_netif_ip_addr_changed+0x14>
 8009536:	680b      	ldr	r3, [r1, #0]
 8009538:	b113      	cbz	r3, 8009540 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800953a:	4b06      	ldr	r3, [pc, #24]	; (8009554 <udp_netif_ip_addr_changed+0x28>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	b903      	cbnz	r3, 8009542 <udp_netif_ip_addr_changed+0x16>
 8009540:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8009542:	681c      	ldr	r4, [r3, #0]
 8009544:	6802      	ldr	r2, [r0, #0]
 8009546:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8009548:	bf04      	itt	eq
 800954a:	680a      	ldreq	r2, [r1, #0]
 800954c:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	e7f5      	b.n	800953e <udp_netif_ip_addr_changed+0x12>
 8009552:	bf00      	nop
 8009554:	200058a8 	.word	0x200058a8

08009558 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8009558:	8943      	ldrh	r3, [r0, #10]
 800955a:	2b0e      	cmp	r3, #14
{
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	4604      	mov	r4, r0
 8009560:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 8009562:	d914      	bls.n	800958e <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8009564:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8009566:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8009568:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800956a:	07d9      	lsls	r1, r3, #31
 800956c:	d50a      	bpl.n	8009584 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800956e:	2b01      	cmp	r3, #1
 8009570:	d111      	bne.n	8009596 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009572:	7843      	ldrb	r3, [r0, #1]
 8009574:	b933      	cbnz	r3, 8009584 <ethernet_input+0x2c>
 8009576:	7883      	ldrb	r3, [r0, #2]
 8009578:	2b5e      	cmp	r3, #94	; 0x5e
 800957a:	d103      	bne.n	8009584 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800957c:	7b63      	ldrb	r3, [r4, #13]
 800957e:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8009582:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8009584:	2e08      	cmp	r6, #8
 8009586:	d010      	beq.n	80095aa <ethernet_input+0x52>
 8009588:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800958c:	d01e      	beq.n	80095cc <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800958e:	4620      	mov	r0, r4
 8009590:	f7fc fa98 	bl	8005ac4 <pbuf_free>
  return ERR_OK;
 8009594:	e018      	b.n	80095c8 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8009596:	2206      	movs	r2, #6
 8009598:	4914      	ldr	r1, [pc, #80]	; (80095ec <ethernet_input+0x94>)
 800959a:	f000 ff9d 	bl	800a4d8 <memcmp>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d1f0      	bne.n	8009584 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 80095a2:	7b63      	ldrb	r3, [r4, #13]
 80095a4:	f043 0308 	orr.w	r3, r3, #8
 80095a8:	e7eb      	b.n	8009582 <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80095aa:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80095ae:	071a      	lsls	r2, r3, #28
 80095b0:	d5ed      	bpl.n	800958e <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80095b2:	f06f 010d 	mvn.w	r1, #13
 80095b6:	4620      	mov	r0, r4
 80095b8:	f7fc fa7e 	bl	8005ab8 <pbuf_header>
 80095bc:	2800      	cmp	r0, #0
 80095be:	d1e6      	bne.n	800958e <ethernet_input+0x36>
        ip4_input(p, netif);
 80095c0:	4629      	mov	r1, r5
 80095c2:	4620      	mov	r0, r4
 80095c4:	f7fb f9de 	bl	8004984 <ip4_input>
}
 80095c8:	2000      	movs	r0, #0
 80095ca:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80095cc:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80095d0:	071b      	lsls	r3, r3, #28
 80095d2:	d5dc      	bpl.n	800958e <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80095d4:	f06f 010d 	mvn.w	r1, #13
 80095d8:	4620      	mov	r0, r4
 80095da:	f7fc fa6d 	bl	8005ab8 <pbuf_header>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d1d5      	bne.n	800958e <ethernet_input+0x36>
        etharp_input(p, netif);
 80095e2:	4629      	mov	r1, r5
 80095e4:	4620      	mov	r0, r4
 80095e6:	f7fa fe3f 	bl	8004268 <etharp_input>
      break;
 80095ea:	e7ed      	b.n	80095c8 <ethernet_input+0x70>
 80095ec:	0800d534 	.word	0x0800d534

080095f0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80095f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f4:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80095f6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 80095fa:	460d      	mov	r5, r1
 80095fc:	4616      	mov	r6, r2
 80095fe:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8009600:	f7fa fca0 	bl	8003f44 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8009604:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8009606:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8009608:	4628      	mov	r0, r5
 800960a:	f7fc fa55 	bl	8005ab8 <pbuf_header>
 800960e:	b9e0      	cbnz	r0, 800964a <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8009610:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 8009612:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	600b      	str	r3, [r1, #0]
 800961a:	88bb      	ldrh	r3, [r7, #4]
 800961c:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800961e:	6833      	ldr	r3, [r6, #0]
 8009620:	f8c1 3006 	str.w	r3, [r1, #6]
 8009624:	88b3      	ldrh	r3, [r6, #4]
 8009626:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8009628:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800962c:	2b06      	cmp	r3, #6
 800962e:	d006      	beq.n	800963e <ethernet_output+0x4e>
 8009630:	4b08      	ldr	r3, [pc, #32]	; (8009654 <ethernet_output+0x64>)
 8009632:	4909      	ldr	r1, [pc, #36]	; (8009658 <ethernet_output+0x68>)
 8009634:	4809      	ldr	r0, [pc, #36]	; (800965c <ethernet_output+0x6c>)
 8009636:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800963a:	f001 f81b 	bl	800a674 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800963e:	69a3      	ldr	r3, [r4, #24]
 8009640:	4629      	mov	r1, r5
 8009642:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8009644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8009648:	4718      	bx	r3
}
 800964a:	f06f 0001 	mvn.w	r0, #1
 800964e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009652:	bf00      	nop
 8009654:	0800d53a 	.word	0x0800d53a
 8009658:	0800d56f 	.word	0x0800d56f
 800965c:	0800bb8d 	.word	0x0800bb8d

08009660 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8009664:	4a25      	ldr	r2, [pc, #148]	; (80096fc <low_level_output+0x9c>)
 8009666:	9200      	str	r2, [sp, #0]
 8009668:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800966a:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800966e:	68ab      	ldr	r3, [r5, #8]
{
 8009670:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 8009672:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009674:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 8009678:	b92c      	cbnz	r4, 8009686 <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800967a:	4639      	mov	r1, r7
 800967c:	481f      	ldr	r0, [pc, #124]	; (80096fc <low_level_output+0x9c>)
 800967e:	f7f7 f981 	bl	8000984 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8009682:	4620      	mov	r0, r4
 8009684:	e004      	b.n	8009690 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009686:	682a      	ldr	r2, [r5, #0]
 8009688:	2a00      	cmp	r2, #0
 800968a:	da11      	bge.n	80096b0 <low_level_output+0x50>
        errval = ERR_USE;
 800968c:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009690:	9b00      	ldr	r3, [sp, #0]
 8009692:	f241 0214 	movw	r2, #4116	; 0x1014
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	5899      	ldr	r1, [r3, r2]
 800969a:	0689      	lsls	r1, r1, #26
 800969c:	d505      	bpl.n	80096aa <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800969e:	2120      	movs	r1, #32
 80096a0:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80096a2:	f241 0204 	movw	r2, #4100	; 0x1004
 80096a6:	2100      	movs	r1, #0
 80096a8:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 80096aa:	b003      	add	sp, #12
 80096ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 80096b0:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80096b4:	4646      	mov	r6, r8
      payloadoffset = 0;
 80096b6:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80096ba:	eb06 0809 	add.w	r8, r6, r9
 80096be:	45d8      	cmp	r8, fp
 80096c0:	eb03 0006 	add.w	r0, r3, r6
 80096c4:	6861      	ldr	r1, [r4, #4]
 80096c6:	d808      	bhi.n	80096da <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80096c8:	464a      	mov	r2, r9
 80096ca:	4451      	add	r1, sl
 80096cc:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 80096ce:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80096d0:	f000 ff11 	bl	800a4f6 <memcpy>
  for(q = p; q != NULL; q = q->next)
 80096d4:	6824      	ldr	r4, [r4, #0]
 80096d6:	9b01      	ldr	r3, [sp, #4]
 80096d8:	e7ce      	b.n	8009678 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80096da:	ebab 0606 	sub.w	r6, fp, r6
 80096de:	4632      	mov	r2, r6
 80096e0:	4451      	add	r1, sl
 80096e2:	f000 ff08 	bl	800a4f6 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80096e6:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	dbce      	blt.n	800968c <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80096ee:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80096f0:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80096f2:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80096f4:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 80096f8:	2600      	movs	r6, #0
 80096fa:	e7de      	b.n	80096ba <low_level_output+0x5a>
 80096fc:	2000717c 	.word	0x2000717c

08009700 <HAL_ETH_MspInit>:
{
 8009700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009702:	4604      	mov	r4, r0
 8009704:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009706:	2214      	movs	r2, #20
 8009708:	2100      	movs	r1, #0
 800970a:	a807      	add	r0, sp, #28
 800970c:	f000 fefe 	bl	800a50c <memset>
  if(ethHandle->Instance==ETH)
 8009710:	6822      	ldr	r2, [r4, #0]
 8009712:	4b32      	ldr	r3, [pc, #200]	; (80097dc <HAL_ETH_MspInit+0xdc>)
 8009714:	429a      	cmp	r2, r3
 8009716:	d15f      	bne.n	80097d8 <HAL_ETH_MspInit+0xd8>
    __HAL_RCC_ETH_CLK_ENABLE();
 8009718:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800971c:	2400      	movs	r4, #0
 800971e:	9401      	str	r4, [sp, #4]
 8009720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009722:	482f      	ldr	r0, [pc, #188]	; (80097e0 <HAL_ETH_MspInit+0xe0>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8009724:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009728:	631a      	str	r2, [r3, #48]	; 0x30
 800972a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800972c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8009730:	9201      	str	r2, [sp, #4]
 8009732:	9a01      	ldr	r2, [sp, #4]
 8009734:	9402      	str	r4, [sp, #8]
 8009736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009738:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800973c:	631a      	str	r2, [r3, #48]	; 0x30
 800973e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009740:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8009744:	9202      	str	r2, [sp, #8]
 8009746:	9a02      	ldr	r2, [sp, #8]
 8009748:	9403      	str	r4, [sp, #12]
 800974a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800974c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009750:	631a      	str	r2, [r3, #48]	; 0x30
 8009752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009754:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009758:	9203      	str	r2, [sp, #12]
 800975a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800975c:	9404      	str	r4, [sp, #16]
 800975e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009760:	f042 0204 	orr.w	r2, r2, #4
 8009764:	631a      	str	r2, [r3, #48]	; 0x30
 8009766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009768:	f002 0204 	and.w	r2, r2, #4
 800976c:	9204      	str	r2, [sp, #16]
 800976e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009770:	9405      	str	r4, [sp, #20]
 8009772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009774:	f042 0201 	orr.w	r2, r2, #1
 8009778:	631a      	str	r2, [r3, #48]	; 0x30
 800977a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800977c:	f002 0201 	and.w	r2, r2, #1
 8009780:	9205      	str	r2, [sp, #20]
 8009782:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009784:	9406      	str	r4, [sp, #24]
 8009786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009788:	f042 0202 	orr.w	r2, r2, #2
 800978c:	631a      	str	r2, [r3, #48]	; 0x30
 800978e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009790:	f003 0302 	and.w	r3, r3, #2
 8009794:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009796:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009798:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800979a:	250b      	movs	r5, #11
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800979c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800979e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80097a0:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097a2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80097a4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097a6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80097a8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097aa:	f7f7 fb47 	bl	8000e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80097ae:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097b0:	a907      	add	r1, sp, #28
 80097b2:	480c      	ldr	r0, [pc, #48]	; (80097e4 <HAL_ETH_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80097b4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097b6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097ba:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80097bc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097be:	f7f7 fb3d 	bl	8000e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80097c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097c6:	a907      	add	r1, sp, #28
 80097c8:	4807      	ldr	r0, [pc, #28]	; (80097e8 <HAL_ETH_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80097ca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097cc:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ce:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097d0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80097d2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097d4:	f7f7 fb32 	bl	8000e3c <HAL_GPIO_Init>
}
 80097d8:	b00d      	add	sp, #52	; 0x34
 80097da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097dc:	40028000 	.word	0x40028000
 80097e0:	40020800 	.word	0x40020800
 80097e4:	40020000 	.word	0x40020000
 80097e8:	40020400 	.word	0x40020400

080097ec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80097ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80097f0:	4c35      	ldr	r4, [pc, #212]	; (80098c8 <ethernetif_input+0xdc>)
{
 80097f2:	9001      	str	r0, [sp, #4]
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80097f4:	4620      	mov	r0, r4
 80097f6:	f7f7 f939 	bl	8000a6c <HAL_ETH_GetReceivedFrame>
 80097fa:	4605      	mov	r5, r0
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d160      	bne.n	80098c2 <ethernetif_input+0xd6>
  len = heth.RxFrameInfos.length;
 8009800:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009804:	9300      	str	r3, [sp, #0]
  if (len > 0)
 8009806:	bb19      	cbnz	r1, 8009850 <ethernetif_input+0x64>
  struct pbuf *p = NULL;
 8009808:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800980a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800980c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800980e:	2200      	movs	r2, #0
 8009810:	4282      	cmp	r2, r0
 8009812:	d14f      	bne.n	80098b4 <ethernetif_input+0xc8>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8009814:	f241 0114 	movw	r1, #4116	; 0x1014
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	5858      	ldr	r0, [r3, r1]
 800981c:	0600      	lsls	r0, r0, #24
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800981e:	bf42      	ittt	mi
 8009820:	2080      	movmi	r0, #128	; 0x80
 8009822:	5058      	strmi	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 8009824:	f241 0108 	movwmi	r1, #4104	; 0x1008
    heth.RxFrameInfos.SegCount =0;  
 8009828:	f04f 0200 	mov.w	r2, #0
 800982c:	63a2      	str	r2, [r4, #56]	; 0x38
    heth.Instance->DMARPDR = 0;
 800982e:	bf48      	it	mi
 8009830:	505a      	strmi	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8009832:	2f00      	cmp	r7, #0
 8009834:	d045      	beq.n	80098c2 <ethernetif_input+0xd6>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8009836:	9b01      	ldr	r3, [sp, #4]
 8009838:	9901      	ldr	r1, [sp, #4]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	4638      	mov	r0, r7
 800983e:	4798      	blx	r3
    
  if (err != ERR_OK)
 8009840:	2800      	cmp	r0, #0
 8009842:	d03e      	beq.n	80098c2 <ethernetif_input+0xd6>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8009844:	4638      	mov	r0, r7
    p = NULL;    
  }
}
 8009846:	b003      	add	sp, #12
 8009848:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 800984c:	f7fc b93a 	b.w	8005ac4 <pbuf_free>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8009850:	2203      	movs	r2, #3
 8009852:	2004      	movs	r0, #4
 8009854:	f7fc f998 	bl	8005b88 <pbuf_alloc>
  if (p != NULL)
 8009858:	4607      	mov	r7, r0
 800985a:	2800      	cmp	r0, #0
 800985c:	d0d4      	beq.n	8009808 <ethernetif_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800985e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8009862:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009864:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 8009868:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800986c:	462e      	mov	r6, r5
      payloadoffset = 0;
 800986e:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009872:	18b5      	adds	r5, r6, r2
 8009874:	9b00      	ldr	r3, [sp, #0]
 8009876:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800987a:	455d      	cmp	r5, fp
 800987c:	eb03 0106 	add.w	r1, r3, r6
 8009880:	d808      	bhi.n	8009894 <ethernetif_input+0xa8>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009882:	4448      	add	r0, r9
 8009884:	f000 fe37 	bl	800a4f6 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8009888:	f8d8 8000 	ldr.w	r8, [r8]
 800988c:	f1b8 0f00 	cmp.w	r8, #0
 8009890:	d1ea      	bne.n	8009868 <ethernetif_input+0x7c>
 8009892:	e7ba      	b.n	800980a <ethernetif_input+0x1e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009894:	ebab 0606 	sub.w	r6, fp, r6
 8009898:	4632      	mov	r2, r6
 800989a:	4448      	add	r0, r9
 800989c:	f000 fe2b 	bl	800a4f6 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80098a0:	f8da a00c 	ldr.w	sl, [sl, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80098a4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80098a8:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80098aa:	44b1      	add	r9, r6
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80098ac:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 80098b0:	2600      	movs	r6, #0
 80098b2:	e7de      	b.n	8009872 <ethernetif_input+0x86>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80098b4:	6819      	ldr	r1, [r3, #0]
 80098b6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80098ba:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80098bc:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80098be:	3201      	adds	r2, #1
 80098c0:	e7a6      	b.n	8009810 <ethernetif_input+0x24>
}
 80098c2:	b003      	add	sp, #12
 80098c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c8:	2000717c 	.word	0x2000717c

080098cc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80098cc:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80098ce:	4604      	mov	r4, r0
{
 80098d0:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80098d2:	b930      	cbnz	r0, 80098e2 <ethernetif_init+0x16>
 80098d4:	4b3d      	ldr	r3, [pc, #244]	; (80099cc <ethernetif_init+0x100>)
 80098d6:	493e      	ldr	r1, [pc, #248]	; (80099d0 <ethernetif_init+0x104>)
 80098d8:	483e      	ldr	r0, [pc, #248]	; (80099d4 <ethernetif_init+0x108>)
 80098da:	f240 2206 	movw	r2, #518	; 0x206
 80098de:	f000 fec9 	bl	800a674 <iprintf>
  heth.Instance = ETH;
 80098e2:	4d3d      	ldr	r5, [pc, #244]	; (80099d8 <ethernetif_init+0x10c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80098e4:	493d      	ldr	r1, [pc, #244]	; (80099dc <ethernetif_init+0x110>)
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80098e6:	2373      	movs	r3, #115	; 0x73
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80098e8:	2201      	movs	r2, #1
  netif->name[0] = IFNAME0;
 80098ea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 80098ee:	2374      	movs	r3, #116	; 0x74
 80098f0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80098f4:	e885 0006 	stmia.w	r5, {r1, r2}
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80098f8:	4b39      	ldr	r3, [pc, #228]	; (80099e0 <ethernetif_init+0x114>)
 80098fa:	6163      	str	r3, [r4, #20]
  MACAddr[1] = 0x80;
 80098fc:	2280      	movs	r2, #128	; 0x80
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80098fe:	4b39      	ldr	r3, [pc, #228]	; (80099e4 <ethernetif_init+0x118>)
  MACAddr[1] = 0x80;
 8009900:	f88d 2009 	strb.w	r2, [sp, #9]
  MACAddr[2] = 0xE1;
 8009904:	22e1      	movs	r2, #225	; 0xe1
  netif->linkoutput = low_level_output;
 8009906:	61a3      	str	r3, [r4, #24]
  MACAddr[2] = 0xE1;
 8009908:	f88d 200a 	strb.w	r2, [sp, #10]
  uint32_t regvalue = 0;
 800990c:	2300      	movs	r3, #0
  MACAddr[5] = 0x05;
 800990e:	2205      	movs	r2, #5
  uint32_t regvalue = 0;
 8009910:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8009912:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 8009914:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[3] = 0x00;
 8009918:	f88d 300b 	strb.w	r3, [sp, #11]
  MACAddr[4] = 0x00;
 800991c:	f88d 300c 	strb.w	r3, [sp, #12]
  MACAddr[5] = 0x05;
 8009920:	f88d 200d 	strb.w	r2, [sp, #13]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8009924:	61ab      	str	r3, [r5, #24]
  heth.Init.MACAddr = &MACAddr[0];
 8009926:	aa02      	add	r2, sp, #8
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009928:	61eb      	str	r3, [r5, #28]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800992a:	4628      	mov	r0, r5
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800992c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.MACAddr = &MACAddr[0];
 8009930:	616a      	str	r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009932:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009934:	f7f7 f94a 	bl	8000bcc <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8009938:	b928      	cbnz	r0, 8009946 <ethernetif_init+0x7a>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800993a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800993e:	f043 0304 	orr.w	r3, r3, #4
 8009942:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8009946:	2304      	movs	r3, #4
 8009948:	4a27      	ldr	r2, [pc, #156]	; (80099e8 <ethernetif_init+0x11c>)
 800994a:	4928      	ldr	r1, [pc, #160]	; (80099ec <ethernetif_init+0x120>)
 800994c:	4822      	ldr	r0, [pc, #136]	; (80099d8 <ethernetif_init+0x10c>)
 800994e:	f7f6 ff9f 	bl	8000890 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8009952:	4927      	ldr	r1, [pc, #156]	; (80099f0 <ethernetif_init+0x124>)
 8009954:	4a27      	ldr	r2, [pc, #156]	; (80099f4 <ethernetif_init+0x128>)
 8009956:	4820      	ldr	r0, [pc, #128]	; (80099d8 <ethernetif_init+0x10c>)
 8009958:	2304      	movs	r3, #4
 800995a:	f7f6 ffd6 	bl	800090a <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800995e:	2306      	movs	r3, #6
 8009960:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009964:	696b      	ldr	r3, [r5, #20]
  HAL_ETH_Start(&heth);
 8009966:	481c      	ldr	r0, [pc, #112]	; (80099d8 <ethernetif_init+0x10c>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009968:	781a      	ldrb	r2, [r3, #0]
 800996a:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800996e:	785a      	ldrb	r2, [r3, #1]
 8009970:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009974:	789a      	ldrb	r2, [r3, #2]
 8009976:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800997a:	78da      	ldrb	r2, [r3, #3]
 800997c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009980:	791a      	ldrb	r2, [r3, #4]
 8009982:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009986:	795b      	ldrb	r3, [r3, #5]
 8009988:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800998c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009990:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009992:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8009996:	f043 030a 	orr.w	r3, r3, #10
 800999a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_Start(&heth);
 800999e:	f7f7 fa11 	bl	8000dc4 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80099a2:	aa01      	add	r2, sp, #4
 80099a4:	211d      	movs	r1, #29
 80099a6:	480c      	ldr	r0, [pc, #48]	; (80099d8 <ethernetif_init+0x10c>)
 80099a8:	f7f7 f89f 	bl	8000aea <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80099ac:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80099ae:	480a      	ldr	r0, [pc, #40]	; (80099d8 <ethernetif_init+0x10c>)
  regvalue |= (PHY_ISFR_INT4);
 80099b0:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80099b4:	211d      	movs	r1, #29
  regvalue |= (PHY_ISFR_INT4);
 80099b6:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80099b8:	f7f7 f8d1 	bl	8000b5e <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80099bc:	aa01      	add	r2, sp, #4
 80099be:	211d      	movs	r1, #29
 80099c0:	4805      	ldr	r0, [pc, #20]	; (80099d8 <ethernetif_init+0x10c>)
 80099c2:	f7f7 f892 	bl	8000aea <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 80099c6:	2000      	movs	r0, #0
 80099c8:	b005      	add	sp, #20
 80099ca:	bd30      	pop	{r4, r5, pc}
 80099cc:	0800d5a6 	.word	0x0800d5a6
 80099d0:	0800bfc2 	.word	0x0800bfc2
 80099d4:	0800bb8d 	.word	0x0800bb8d
 80099d8:	2000717c 	.word	0x2000717c
 80099dc:	40028000 	.word	0x40028000
 80099e0:	0800462d 	.word	0x0800462d
 80099e4:	08009661 	.word	0x08009661
 80099e8:	200071c4 	.word	0x200071c4
 80099ec:	200058ac 	.word	0x200058ac
 80099f0:	200070fc 	.word	0x200070fc
 80099f4:	2000592c 	.word	0x2000592c

080099f8 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 80099f8:	f7f6 be24 	b.w	8000644 <HAL_GetTick>

080099fc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80099fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80099fe:	4f2d      	ldr	r7, [pc, #180]	; (8009ab4 <MX_LWIP_Init+0xb8>)
  IP_ADDRESS[1] = 168;
  IP_ADDRESS[2] = 1;
  IP_ADDRESS[3] = 5;
  NETMASK_ADDRESS[0] = 255;
 8009a00:	4e2d      	ldr	r6, [pc, #180]	; (8009ab8 <MX_LWIP_Init+0xbc>)
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 255;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 192;
 8009a02:	4d2e      	ldr	r5, [pc, #184]	; (8009abc <MX_LWIP_Init+0xc0>)
  IP_ADDRESS[3] = 5;
 8009a04:	2305      	movs	r3, #5
 8009a06:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 8009a08:	23ff      	movs	r3, #255	; 0xff
{
 8009a0a:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 192;
 8009a0c:	20c0      	movs	r0, #192	; 0xc0
  IP_ADDRESS[1] = 168;
 8009a0e:	21a8      	movs	r1, #168	; 0xa8
  IP_ADDRESS[2] = 1;
 8009a10:	2201      	movs	r2, #1
  NETMASK_ADDRESS[0] = 255;
 8009a12:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 8009a14:	7073      	strb	r3, [r6, #1]
  NETMASK_ADDRESS[2] = 255;
 8009a16:	70b3      	strb	r3, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 8009a18:	2400      	movs	r4, #0
  GATEWAY_ADDRESS[1] = 168;
  GATEWAY_ADDRESS[2] = 1;
  GATEWAY_ADDRESS[3] = 254;
 8009a1a:	23fe      	movs	r3, #254	; 0xfe
  GATEWAY_ADDRESS[0] = 192;
 8009a1c:	7028      	strb	r0, [r5, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009a1e:	7069      	strb	r1, [r5, #1]
  GATEWAY_ADDRESS[2] = 1;
 8009a20:	70aa      	strb	r2, [r5, #2]
  GATEWAY_ADDRESS[3] = 254;
 8009a22:	70eb      	strb	r3, [r5, #3]
  IP_ADDRESS[0] = 192;
 8009a24:	7038      	strb	r0, [r7, #0]
  IP_ADDRESS[1] = 168;
 8009a26:	7079      	strb	r1, [r7, #1]
  IP_ADDRESS[2] = 1;
 8009a28:	70ba      	strb	r2, [r7, #2]
  NETMASK_ADDRESS[3] = 0;
 8009a2a:	70f4      	strb	r4, [r6, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8009a2c:	f7fa faee 	bl	800400c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009a30:	787b      	ldrb	r3, [r7, #1]
 8009a32:	783a      	ldrb	r2, [r7, #0]
 8009a34:	4922      	ldr	r1, [pc, #136]	; (8009ac0 <MX_LWIP_Init+0xc4>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009a36:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009a38:	041b      	lsls	r3, r3, #16
 8009a3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009a3e:	78fa      	ldrb	r2, [r7, #3]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	78ba      	ldrb	r2, [r7, #2]
 8009a44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009a48:	ba1b      	rev	r3, r3
 8009a4a:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009a4c:	7873      	ldrb	r3, [r6, #1]
 8009a4e:	7832      	ldrb	r2, [r6, #0]
 8009a50:	041b      	lsls	r3, r3, #16
 8009a52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009a56:	78f2      	ldrb	r2, [r6, #3]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	78b2      	ldrb	r2, [r6, #2]
 8009a5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009a60:	4a18      	ldr	r2, [pc, #96]	; (8009ac4 <MX_LWIP_Init+0xc8>)
 8009a62:	ba1b      	rev	r3, r3
 8009a64:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009a66:	782b      	ldrb	r3, [r5, #0]
 8009a68:	0400      	lsls	r0, r0, #16
 8009a6a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009a6e:	78eb      	ldrb	r3, [r5, #3]
 8009a70:	4318      	orrs	r0, r3
 8009a72:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009a74:	4d14      	ldr	r5, [pc, #80]	; (8009ac8 <MX_LWIP_Init+0xcc>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009a76:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009a7a:	4b14      	ldr	r3, [pc, #80]	; (8009acc <MX_LWIP_Init+0xd0>)
 8009a7c:	ba00      	rev	r0, r0
 8009a7e:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009a80:	4813      	ldr	r0, [pc, #76]	; (8009ad0 <MX_LWIP_Init+0xd4>)
 8009a82:	9002      	str	r0, [sp, #8]
 8009a84:	4813      	ldr	r0, [pc, #76]	; (8009ad4 <MX_LWIP_Init+0xd8>)
 8009a86:	9001      	str	r0, [sp, #4]
 8009a88:	9400      	str	r4, [sp, #0]
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f7fb ff18 	bl	80058c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009a90:	4628      	mov	r0, r5
 8009a92:	f7fb ff53 	bl	800593c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009a96:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8009a9a:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009a9c:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8009a9e:	d504      	bpl.n	8009aaa <MX_LWIP_Init+0xae>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009aa0:	b005      	add	sp, #20
 8009aa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 8009aa6:	f7fb bf4f 	b.w	8005948 <netif_set_up>
}
 8009aaa:	b005      	add	sp, #20
 8009aac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 8009ab0:	f7fb bf59 	b.w	8005966 <netif_set_down>
 8009ab4:	200089d0 	.word	0x200089d0
 8009ab8:	200089cc 	.word	0x200089cc
 8009abc:	20008994 	.word	0x20008994
 8009ac0:	200089c8 	.word	0x200089c8
 8009ac4:	200089d4 	.word	0x200089d4
 8009ac8:	20008998 	.word	0x20008998
 8009acc:	200089d8 	.word	0x200089d8
 8009ad0:	08009559 	.word	0x08009559
 8009ad4:	080098cd 	.word	0x080098cd

08009ad8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8009ad8:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8009ada:	4803      	ldr	r0, [pc, #12]	; (8009ae8 <MX_LWIP_Process+0x10>)
 8009adc:	f7ff fe86 	bl	80097ec <ethernetif_input>
  /* Handle timeouts */
  sys_check_timeouts();

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8009ae0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_check_timeouts();
 8009ae4:	f7ff bc58 	b.w	8009398 <sys_check_timeouts>
 8009ae8:	20008998 	.word	0x20008998

08009aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009aec:	b530      	push	{r4, r5, lr}
 8009aee:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009af0:	2230      	movs	r2, #48	; 0x30
 8009af2:	2100      	movs	r1, #0
 8009af4:	a808      	add	r0, sp, #32
 8009af6:	f000 fd09 	bl	800a50c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009afa:	2100      	movs	r1, #0
 8009afc:	2214      	movs	r2, #20
 8009afe:	a803      	add	r0, sp, #12
 8009b00:	f000 fd04 	bl	800a50c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b04:	2400      	movs	r4, #0
 8009b06:	4b1d      	ldr	r3, [pc, #116]	; (8009b7c <SystemClock_Config+0x90>)
 8009b08:	9401      	str	r4, [sp, #4]
 8009b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009b10:	641a      	str	r2, [r3, #64]	; 0x40
 8009b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009b1c:	4b18      	ldr	r3, [pc, #96]	; (8009b80 <SystemClock_Config+0x94>)
 8009b1e:	9402      	str	r4, [sp, #8]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b2e:	9302      	str	r3, [sp, #8]
 8009b30:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009b32:	2301      	movs	r3, #1
 8009b34:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009b3a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009b3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009b40:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009b42:	2308      	movs	r3, #8
 8009b44:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8009b46:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009b4a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8009b4c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009b4e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009b50:	2307      	movs	r3, #7
 8009b52:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009b54:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009b56:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009b58:	f7f7 ff50 	bl	80019fc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009b5c:	230f      	movs	r3, #15
 8009b5e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009b60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009b64:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009b66:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009b6c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009b6e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009b70:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009b72:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009b74:	f7f8 f916 	bl	8001da4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8009b78:	b015      	add	sp, #84	; 0x54
 8009b7a:	bd30      	pop	{r4, r5, pc}
 8009b7c:	40023800 	.word	0x40023800
 8009b80:	40007000 	.word	0x40007000

08009b84 <main>:
{
 8009b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b88:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8009b8a:	f7f6 fd35 	bl	80005f8 <HAL_Init>
  SystemClock_Config();
 8009b8e:	f7ff ffad 	bl	8009aec <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b92:	2214      	movs	r2, #20
 8009b94:	2100      	movs	r1, #0
 8009b96:	a80b      	add	r0, sp, #44	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009b98:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b9a:	f000 fcb7 	bl	800a50c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009b9e:	4b96      	ldr	r3, [pc, #600]	; (8009df8 <main+0x274>)
 8009ba0:	9402      	str	r4, [sp, #8]
 8009ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8009ba4:	4895      	ldr	r0, [pc, #596]	; (8009dfc <main+0x278>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009ba6:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8009e40 <main+0x2bc>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009baa:	f042 0210 	orr.w	r2, r2, #16
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30
 8009bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bb2:	f002 0210 	and.w	r2, r2, #16
 8009bb6:	9202      	str	r2, [sp, #8]
 8009bb8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009bba:	9403      	str	r4, [sp, #12]
 8009bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bbe:	f042 0204 	orr.w	r2, r2, #4
 8009bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8009bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bc6:	f002 0204 	and.w	r2, r2, #4
 8009bca:	9203      	str	r2, [sp, #12]
 8009bcc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009bce:	9404      	str	r4, [sp, #16]
 8009bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8009bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bda:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009bde:	9204      	str	r2, [sp, #16]
 8009be0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009be2:	9405      	str	r4, [sp, #20]
 8009be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009be6:	f042 0201 	orr.w	r2, r2, #1
 8009bea:	631a      	str	r2, [r3, #48]	; 0x30
 8009bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bee:	f002 0201 	and.w	r2, r2, #1
 8009bf2:	9205      	str	r2, [sp, #20]
 8009bf4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009bf6:	9406      	str	r4, [sp, #24]
 8009bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bfa:	f042 0202 	orr.w	r2, r2, #2
 8009bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8009c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c02:	f002 0202 	and.w	r2, r2, #2
 8009c06:	9206      	str	r2, [sp, #24]
 8009c08:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009c0a:	9407      	str	r4, [sp, #28]
 8009c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c0e:	f042 0208 	orr.w	r2, r2, #8
 8009c12:	631a      	str	r2, [r3, #48]	; 0x30
 8009c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c16:	f003 0308 	and.w	r3, r3, #8
 8009c1a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8009c1c:	4622      	mov	r2, r4
 8009c1e:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009c20:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8009c22:	f7f7 f9eb 	bl	8000ffc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8009c26:	4622      	mov	r2, r4
 8009c28:	2101      	movs	r1, #1
 8009c2a:	4875      	ldr	r0, [pc, #468]	; (8009e00 <main+0x27c>)
 8009c2c:	f7f7 f9e6 	bl	8000ffc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8009c30:	4622      	mov	r2, r4
 8009c32:	f24f 0110 	movw	r1, #61456	; 0xf010
 8009c36:	4873      	ldr	r0, [pc, #460]	; (8009e04 <main+0x280>)
 8009c38:	f7f7 f9e0 	bl	8000ffc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c3c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009c3e:	2608      	movs	r6, #8
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009c40:	a90b      	add	r1, sp, #44	; 0x2c
 8009c42:	486e      	ldr	r0, [pc, #440]	; (8009dfc <main+0x278>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009c44:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c46:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c48:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c4a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009c4c:	f7f7 f8f6 	bl	8000e3c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c50:	a90b      	add	r1, sp, #44	; 0x2c
 8009c52:	486b      	ldr	r0, [pc, #428]	; (8009e00 <main+0x27c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009c54:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009c56:	2705      	movs	r7, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c58:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c5a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c5c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c5e:	f7f7 f8ed 	bl	8000e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009c62:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c64:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c66:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c68:	4865      	ldr	r0, [pc, #404]	; (8009e00 <main+0x27c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c6a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009c6c:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c6e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c70:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c72:	f7f7 f8e3 	bl	8000e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c76:	a90b      	add	r1, sp, #44	; 0x2c
 8009c78:	4863      	ldr	r0, [pc, #396]	; (8009e08 <main+0x284>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009c7a:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009c7c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c80:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c82:	f7f7 f8db 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009c86:	2310      	movs	r3, #16
 8009c88:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c8a:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009c8c:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c8e:	485e      	ldr	r0, [pc, #376]	; (8009e08 <main+0x284>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c90:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009c92:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c94:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c96:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c98:	f7f7 f8d0 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009c9c:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c9e:	a90b      	add	r1, sp, #44	; 0x2c
 8009ca0:	485a      	ldr	r0, [pc, #360]	; (8009e0c <main+0x288>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009ca2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ca4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ca6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ca8:	f7f7 f8c8 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cb0:	a90b      	add	r1, sp, #44	; 0x2c
 8009cb2:	4856      	ldr	r0, [pc, #344]	; (8009e0c <main+0x288>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009cb4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cb6:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009cb8:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cba:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cbc:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cbe:	f7f7 f8bd 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8009cc2:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009cc6:	a90b      	add	r1, sp, #44	; 0x2c
 8009cc8:	484e      	ldr	r0, [pc, #312]	; (8009e04 <main+0x280>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8009cca:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ccc:	950c      	str	r5, [sp, #48]	; 0x30

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009cce:	2720      	movs	r7, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cd0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cd2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009cd4:	f7f7 f8b2 	bl	8000e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009cd8:	a90b      	add	r1, sp, #44	; 0x2c
 8009cda:	484a      	ldr	r0, [pc, #296]	; (8009e04 <main+0x280>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009cdc:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009cde:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ce0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009ce2:	f7f7 f8ab 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009ce6:	a90b      	add	r1, sp, #44	; 0x2c
 8009ce8:	4844      	ldr	r0, [pc, #272]	; (8009dfc <main+0x278>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009cea:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009cec:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cf0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009cf2:	f7f7 f8a3 	bl	8000e3c <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8009cf6:	4846      	ldr	r0, [pc, #280]	; (8009e10 <main+0x28c>)
  hi2c1.Init.ClockSpeed = 100000;
 8009cf8:	4a46      	ldr	r2, [pc, #280]	; (8009e14 <main+0x290>)
 8009cfa:	4b47      	ldr	r3, [pc, #284]	; (8009e18 <main+0x294>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009cfc:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8009cfe:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009d02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d06:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8009d08:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009d0a:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009d0c:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009d0e:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009d10:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009d12:	f7f7 fdc7 	bl	80018a4 <HAL_I2C_Init>
  MX_LWIP_Init();
 8009d16:	f7ff fe71 	bl	80099fc <MX_LWIP_Init>
  MX_USB_HOST_Init();
 8009d1a:	f000 fa2b 	bl	800a174 <MX_USB_HOST_Init>
  huart3.Instance = USART3;
 8009d1e:	483f      	ldr	r0, [pc, #252]	; (8009e1c <main+0x298>)
  huart3.Init.BaudRate = 115200;
 8009d20:	4b3f      	ldr	r3, [pc, #252]	; (8009e20 <main+0x29c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009d22:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8009d24:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009d28:	250c      	movs	r5, #12
  huart3.Init.BaudRate = 115200;
 8009d2a:	e880 0048 	stmia.w	r0, {r3, r6}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009d2e:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009d30:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009d32:	6145      	str	r5, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d34:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d36:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009d38:	f7f8 f9ca 	bl	80020d0 <HAL_UART_Init>
  hspi1.Instance = SPI1;
 8009d3c:	4839      	ldr	r0, [pc, #228]	; (8009e24 <main+0x2a0>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009d3e:	493a      	ldr	r1, [pc, #232]	; (8009e28 <main+0x2a4>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009d40:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009d42:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009d46:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d4e:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8009d50:	230a      	movs	r3, #10
 8009d52:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009d54:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d56:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009d58:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009d5a:	61c7      	str	r7, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009d5c:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009d5e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d60:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009d62:	f7f8 f8e1 	bl	8001f28 <HAL_SPI_Init>
  huart4.Instance = UART4;
 8009d66:	4831      	ldr	r0, [pc, #196]	; (8009e2c <main+0x2a8>)
 8009d68:	4b31      	ldr	r3, [pc, #196]	; (8009e30 <main+0x2ac>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009d6a:	6084      	str	r4, [r0, #8]
  huart4.Init.BaudRate = 115200;
 8009d6c:	e880 0048 	stmia.w	r0, {r3, r6}
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009d70:	60c4      	str	r4, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8009d72:	6104      	str	r4, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009d74:	6145      	str	r5, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d76:	6184      	str	r4, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d78:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009d7a:	f7f8 f9a9 	bl	80020d0 <HAL_UART_Init>
  huart6.Instance = USART6;
 8009d7e:	482d      	ldr	r0, [pc, #180]	; (8009e34 <main+0x2b0>)
 8009d80:	4b2d      	ldr	r3, [pc, #180]	; (8009e38 <main+0x2b4>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009d82:	6084      	str	r4, [r0, #8]
  huart6.Init.BaudRate = 115200;
 8009d84:	e880 0048 	stmia.w	r0, {r3, r6}
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009d88:	60c4      	str	r4, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8009d8a:	6104      	str	r4, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8009d8c:	6145      	str	r5, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d8e:	6184      	str	r4, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d90:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8009d92:	f7f8 f99d 	bl	80020d0 <HAL_UART_Init>
  httpd_init();
 8009d96:	f7fa f895 	bl	8003ec4 <httpd_init>
    MX_USB_HOST_Process();
 8009d9a:	f000 fa0b 	bl	800a1b4 <MX_USB_HOST_Process>
    MX_LWIP_Process();
 8009d9e:	f7ff fe9b 	bl	8009ad8 <MX_LWIP_Process>
    HAL_UART_Receive(&huart4, &buffer, 12, 1000);
 8009da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009da6:	a908      	add	r1, sp, #32
 8009da8:	220c      	movs	r2, #12
 8009daa:	4820      	ldr	r0, [pc, #128]	; (8009e2c <main+0x2a8>)
 8009dac:	f7f8 fa1d 	bl	80021ea <HAL_UART_Receive>
    X = strtol(buffer, NULL, 10);
 8009db0:	220a      	movs	r2, #10
 8009db2:	2100      	movs	r1, #0
 8009db4:	a808      	add	r0, sp, #32
 8009db6:	f000 fd65 	bl	800a884 <strtol>
    Y = strtol(buffer + 4, NULL, 10);
 8009dba:	220a      	movs	r2, #10
    X = strtol(buffer, NULL, 10);
 8009dbc:	4604      	mov	r4, r0
    Y = strtol(buffer + 4, NULL, 10);
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	a809      	add	r0, sp, #36	; 0x24
 8009dc2:	f000 fd5f 	bl	800a884 <strtol>
    Z = strtol(buffer + 8, NULL, 10);
 8009dc6:	220a      	movs	r2, #10
    Y = strtol(buffer + 4, NULL, 10);
 8009dc8:	4605      	mov	r5, r0
    Z = strtol(buffer + 8, NULL, 10);
 8009dca:	2100      	movs	r1, #0
 8009dcc:	a80a      	add	r0, sp, #40	; 0x28
 8009dce:	f000 fd59 	bl	800a884 <strtol>
    sprintf(msg, "X: %4d, Y: %4d, Z: %4d\n\r", X, Y, Z);
 8009dd2:	462b      	mov	r3, r5
 8009dd4:	9000      	str	r0, [sp, #0]
 8009dd6:	4622      	mov	r2, r4
 8009dd8:	4918      	ldr	r1, [pc, #96]	; (8009e3c <main+0x2b8>)
 8009dda:	a80b      	add	r0, sp, #44	; 0x2c
 8009ddc:	f000 fc72 	bl	800a6c4 <siprintf>
    HAL_UART_Transmit(&huart6, &msg, 27, 1000);
 8009de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009de4:	221b      	movs	r2, #27
 8009de6:	a90b      	add	r1, sp, #44	; 0x2c
 8009de8:	4812      	ldr	r0, [pc, #72]	; (8009e34 <main+0x2b0>)
 8009dea:	f7f8 f99f 	bl	800212c <HAL_UART_Transmit>
    HAL_Delay(250);
 8009dee:	20fa      	movs	r0, #250	; 0xfa
 8009df0:	f7f6 fc2e 	bl	8000650 <HAL_Delay>
 8009df4:	e7d1      	b.n	8009d9a <main+0x216>
 8009df6:	bf00      	nop
 8009df8:	40023800 	.word	0x40023800
 8009dfc:	40021000 	.word	0x40021000
 8009e00:	40020800 	.word	0x40020800
 8009e04:	40020c00 	.word	0x40020c00
 8009e08:	40020000 	.word	0x40020000
 8009e0c:	40020400 	.word	0x40020400
 8009e10:	20008a1c 	.word	0x20008a1c
 8009e14:	40005400 	.word	0x40005400
 8009e18:	000186a0 	.word	0x000186a0
 8009e1c:	200089dc 	.word	0x200089dc
 8009e20:	40004800 	.word	0x40004800
 8009e24:	20008af0 	.word	0x20008af0
 8009e28:	40013000 	.word	0x40013000
 8009e2c:	20008ab0 	.word	0x20008ab0
 8009e30:	40004c00 	.word	0x40004c00
 8009e34:	20008a70 	.word	0x20008a70
 8009e38:	40011400 	.word	0x40011400
 8009e3c:	0800d5ba 	.word	0x0800d5ba
 8009e40:	10110000 	.word	0x10110000

08009e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009e44:	4770      	bx	lr
	...

08009e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009e48:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e4a:	4b0c      	ldr	r3, [pc, #48]	; (8009e7c <HAL_MspInit+0x34>)
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	9100      	str	r1, [sp, #0]
 8009e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e56:	645a      	str	r2, [r3, #68]	; 0x44
 8009e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e5a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009e5e:	9200      	str	r2, [sp, #0]
 8009e60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e62:	9101      	str	r1, [sp, #4]
 8009e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009e6a:	641a      	str	r2, [r3, #64]	; 0x40
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e72:	9301      	str	r3, [sp, #4]
 8009e74:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009e76:	b002      	add	sp, #8
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	40023800 	.word	0x40023800

08009e80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009e80:	b530      	push	{r4, r5, lr}
 8009e82:	4604      	mov	r4, r0
 8009e84:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e86:	2214      	movs	r2, #20
 8009e88:	2100      	movs	r1, #0
 8009e8a:	a803      	add	r0, sp, #12
 8009e8c:	f000 fb3e 	bl	800a50c <memset>
  if(hi2c->Instance==I2C1)
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <HAL_I2C_MspInit+0x68>)
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d124      	bne.n	8009ee2 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e98:	4c14      	ldr	r4, [pc, #80]	; (8009eec <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e9a:	4815      	ldr	r0, [pc, #84]	; (8009ef0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e9c:	2500      	movs	r5, #0
 8009e9e:	9501      	str	r5, [sp, #4]
 8009ea0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009ea2:	f043 0302 	orr.w	r3, r3, #2
 8009ea6:	6323      	str	r3, [r4, #48]	; 0x30
 8009ea8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009eaa:	f003 0302 	and.w	r3, r3, #2
 8009eae:	9301      	str	r3, [sp, #4]
 8009eb0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8009eb2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8009eb6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009eb8:	2312      	movs	r3, #18
 8009eba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ec4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009ec6:	2304      	movs	r3, #4
 8009ec8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009eca:	f7f6 ffb7 	bl	8000e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009ece:	9502      	str	r5, [sp, #8]
 8009ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ed2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ed6:	6423      	str	r3, [r4, #64]	; 0x40
 8009ed8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ede:	9302      	str	r3, [sp, #8]
 8009ee0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009ee2:	b009      	add	sp, #36	; 0x24
 8009ee4:	bd30      	pop	{r4, r5, pc}
 8009ee6:	bf00      	nop
 8009ee8:	40005400 	.word	0x40005400
 8009eec:	40023800 	.word	0x40023800
 8009ef0:	40020400 	.word	0x40020400

08009ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009efa:	2214      	movs	r2, #20
 8009efc:	2100      	movs	r1, #0
 8009efe:	a803      	add	r0, sp, #12
 8009f00:	f000 fb04 	bl	800a50c <memset>
  if(hspi->Instance==SPI1)
 8009f04:	6822      	ldr	r2, [r4, #0]
 8009f06:	4b1e      	ldr	r3, [pc, #120]	; (8009f80 <HAL_SPI_MspInit+0x8c>)
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d136      	bne.n	8009f7a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009f0c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8009f10:	2400      	movs	r4, #0
 8009f12:	9400      	str	r4, [sp, #0]
 8009f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f16:	481b      	ldr	r0, [pc, #108]	; (8009f84 <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009f18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f1c:	645a      	str	r2, [r3, #68]	; 0x44
 8009f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009f24:	9200      	str	r2, [sp, #0]
 8009f26:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f28:	9401      	str	r4, [sp, #4]
 8009f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f2c:	f042 0201 	orr.w	r2, r2, #1
 8009f30:	631a      	str	r2, [r3, #48]	; 0x30
 8009f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f34:	f002 0201 	and.w	r2, r2, #1
 8009f38:	9201      	str	r2, [sp, #4]
 8009f3a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f3c:	9402      	str	r4, [sp, #8]
 8009f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f40:	f042 0202 	orr.w	r2, r2, #2
 8009f44:	631a      	str	r2, [r3, #48]	; 0x30
 8009f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f48:	f003 0302 	and.w	r3, r3, #2
 8009f4c:	9302      	str	r3, [sp, #8]
 8009f4e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f50:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009f52:	2360      	movs	r3, #96	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f54:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009f56:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f58:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009f5a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f5c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f5e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009f60:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f62:	f7f6 ff6b 	bl	8000e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009f66:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f68:	a903      	add	r1, sp, #12
 8009f6a:	4807      	ldr	r0, [pc, #28]	; (8009f88 <HAL_SPI_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009f6c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f6e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f70:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f72:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009f74:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f76:	f7f6 ff61 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8009f7a:	b009      	add	sp, #36	; 0x24
 8009f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	40013000 	.word	0x40013000
 8009f84:	40020000 	.word	0x40020000
 8009f88:	40020400 	.word	0x40020400

08009f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	4604      	mov	r4, r0
 8009f90:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f92:	2214      	movs	r2, #20
 8009f94:	2100      	movs	r1, #0
 8009f96:	a807      	add	r0, sp, #28
 8009f98:	f000 fab8 	bl	800a50c <memset>
  if(huart->Instance==UART4)
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	4a36      	ldr	r2, [pc, #216]	; (800a078 <HAL_UART_MspInit+0xec>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d123      	bne.n	8009fec <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8009fa4:	4b35      	ldr	r3, [pc, #212]	; (800a07c <HAL_UART_MspInit+0xf0>)
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	9101      	str	r1, [sp, #4]
 8009faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8009fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fb4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8009fb8:	9201      	str	r2, [sp, #4]
 8009fba:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009fbc:	9102      	str	r1, [sp, #8]
 8009fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fc0:	f042 0204 	orr.w	r2, r2, #4
 8009fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8009fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc8:	f003 0304 	and.w	r3, r3, #4
 8009fcc:	9302      	str	r3, [sp, #8]
 8009fce:	9b02      	ldr	r3, [sp, #8]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009fd0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    __HAL_RCC_GPIOC_CLK_ENABLE();
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009fd4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009fe2:	2308      	movs	r3, #8
 8009fe4:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fe6:	a907      	add	r1, sp, #28
 8009fe8:	4825      	ldr	r0, [pc, #148]	; (800a080 <HAL_UART_MspInit+0xf4>)
 8009fea:	e025      	b.n	800a038 <HAL_UART_MspInit+0xac>
  else if(huart->Instance==USART3)
 8009fec:	4a25      	ldr	r2, [pc, #148]	; (800a084 <HAL_UART_MspInit+0xf8>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d126      	bne.n	800a040 <HAL_UART_MspInit+0xb4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8009ff2:	4b22      	ldr	r3, [pc, #136]	; (800a07c <HAL_UART_MspInit+0xf0>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009ff4:	4824      	ldr	r0, [pc, #144]	; (800a088 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	9103      	str	r1, [sp, #12]
 8009ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ffc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a000:	641a      	str	r2, [r3, #64]	; 0x40
 800a002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a004:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800a008:	9203      	str	r2, [sp, #12]
 800a00a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a00c:	9104      	str	r1, [sp, #16]
 800a00e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a010:	f042 0208 	orr.w	r2, r2, #8
 800a014:	631a      	str	r2, [r3, #48]	; 0x30
 800a016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a018:	f003 0308 	and.w	r3, r3, #8
 800a01c:	9304      	str	r3, [sp, #16]
 800a01e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a020:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a024:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a026:	2302      	movs	r3, #2
 800a028:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a02a:	2301      	movs	r3, #1
 800a02c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a02e:	2303      	movs	r3, #3
 800a030:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a032:	2307      	movs	r3, #7
 800a034:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a036:	a907      	add	r1, sp, #28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a038:	f7f6 ff00 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a03c:	b00c      	add	sp, #48	; 0x30
 800a03e:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART6)
 800a040:	4a12      	ldr	r2, [pc, #72]	; (800a08c <HAL_UART_MspInit+0x100>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d1fa      	bne.n	800a03c <HAL_UART_MspInit+0xb0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a046:	4b0d      	ldr	r3, [pc, #52]	; (800a07c <HAL_UART_MspInit+0xf0>)
 800a048:	2100      	movs	r1, #0
 800a04a:	9105      	str	r1, [sp, #20]
 800a04c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a04e:	f042 0220 	orr.w	r2, r2, #32
 800a052:	645a      	str	r2, [r3, #68]	; 0x44
 800a054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a056:	f002 0220 	and.w	r2, r2, #32
 800a05a:	9205      	str	r2, [sp, #20]
 800a05c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a05e:	9106      	str	r1, [sp, #24]
 800a060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a062:	f042 0204 	orr.w	r2, r2, #4
 800a066:	631a      	str	r2, [r3, #48]	; 0x30
 800a068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06a:	f003 0304 	and.w	r3, r3, #4
 800a06e:	9306      	str	r3, [sp, #24]
 800a070:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a072:	23c0      	movs	r3, #192	; 0xc0
 800a074:	e7ae      	b.n	8009fd4 <HAL_UART_MspInit+0x48>
 800a076:	bf00      	nop
 800a078:	40004c00 	.word	0x40004c00
 800a07c:	40023800 	.word	0x40023800
 800a080:	40020800 	.word	0x40020800
 800a084:	40004800 	.word	0x40004800
 800a088:	40020c00 	.word	0x40020c00
 800a08c:	40011400 	.word	0x40011400

0800a090 <NMI_Handler>:
 800a090:	4770      	bx	lr

0800a092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a092:	e7fe      	b.n	800a092 <HardFault_Handler>

0800a094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a094:	e7fe      	b.n	800a094 <MemManage_Handler>

0800a096 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a096:	e7fe      	b.n	800a096 <BusFault_Handler>

0800a098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a098:	e7fe      	b.n	800a098 <UsageFault_Handler>

0800a09a <SVC_Handler>:
 800a09a:	4770      	bx	lr

0800a09c <DebugMon_Handler>:
 800a09c:	4770      	bx	lr

0800a09e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a09e:	4770      	bx	lr

0800a0a0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a0a0:	f7f6 bac4 	b.w	800062c <HAL_IncTick>

0800a0a4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800a0a4:	4801      	ldr	r0, [pc, #4]	; (800a0ac <OTG_FS_IRQHandler+0x8>)
 800a0a6:	f7f7 b8a5 	b.w	80011f4 <HAL_HCD_IRQHandler>
 800a0aa:	bf00      	nop
 800a0ac:	20008f14 	.word	0x20008f14

0800a0b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a0b0:	b570      	push	{r4, r5, r6, lr}
 800a0b2:	460e      	mov	r6, r1
 800a0b4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	1ba3      	subs	r3, r4, r6
 800a0ba:	429d      	cmp	r5, r3
 800a0bc:	dc01      	bgt.n	800a0c2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800a0be:	4628      	mov	r0, r5
 800a0c0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800a0c2:	f3af 8000 	nop.w
 800a0c6:	f804 0b01 	strb.w	r0, [r4], #1
 800a0ca:	e7f5      	b.n	800a0b8 <_read+0x8>

0800a0cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a0cc:	b570      	push	{r4, r5, r6, lr}
 800a0ce:	460e      	mov	r6, r1
 800a0d0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	1ba3      	subs	r3, r4, r6
 800a0d6:	429d      	cmp	r5, r3
 800a0d8:	dc01      	bgt.n	800a0de <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800a0da:	4628      	mov	r0, r5
 800a0dc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800a0de:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a0e2:	f3af 8000 	nop.w
 800a0e6:	e7f5      	b.n	800a0d4 <_write+0x8>

0800a0e8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a0e8:	4b09      	ldr	r3, [pc, #36]	; (800a110 <_sbrk+0x28>)
 800a0ea:	6819      	ldr	r1, [r3, #0]
{
 800a0ec:	4602      	mov	r2, r0
	if (heap_end == 0)
 800a0ee:	b909      	cbnz	r1, 800a0f4 <_sbrk+0xc>
		heap_end = &end;
 800a0f0:	4908      	ldr	r1, [pc, #32]	; (800a114 <_sbrk+0x2c>)
 800a0f2:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800a0f4:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800a0f6:	4669      	mov	r1, sp
 800a0f8:	4402      	add	r2, r0
 800a0fa:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800a0fc:	bf89      	itett	hi
 800a0fe:	4b06      	ldrhi	r3, [pc, #24]	; (800a118 <_sbrk+0x30>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 800a100:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800a102:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 800a104:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 800a108:	bf88      	it	hi
 800a10a:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	20002354 	.word	0x20002354
 800a114:	200091dc 	.word	0x200091dc
 800a118:	200091d8 	.word	0x200091d8

0800a11c <_close>:

int _close(int file)
{
	return -1;
}
 800a11c:	f04f 30ff 	mov.w	r0, #4294967295
 800a120:	4770      	bx	lr

0800a122 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800a122:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a126:	604b      	str	r3, [r1, #4]
	return 0;
}
 800a128:	2000      	movs	r0, #0
 800a12a:	4770      	bx	lr

0800a12c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800a12c:	2001      	movs	r0, #1
 800a12e:	4770      	bx	lr

0800a130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800a130:	2000      	movs	r0, #0
 800a132:	4770      	bx	lr

0800a134 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a134:	4b05      	ldr	r3, [pc, #20]	; (800a14c <SystemInit+0x18>)
 800a136:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a13a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800a13e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a146:	609a      	str	r2, [r3, #8]
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	e000ed00 	.word	0xe000ed00

0800a150 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a150:	2904      	cmp	r1, #4
 800a152:	d00a      	beq.n	800a16a <USBH_UserProcess+0x1a>
 800a154:	2905      	cmp	r1, #5
 800a156:	d004      	beq.n	800a162 <USBH_UserProcess+0x12>
 800a158:	2902      	cmp	r1, #2
 800a15a:	d105      	bne.n	800a168 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a15c:	4b04      	ldr	r3, [pc, #16]	; (800a170 <USBH_UserProcess+0x20>)
 800a15e:	7019      	strb	r1, [r3, #0]
  break;
 800a160:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800a162:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a164:	4b02      	ldr	r3, [pc, #8]	; (800a170 <USBH_UserProcess+0x20>)
 800a166:	701a      	strb	r2, [r3, #0]
 800a168:	4770      	bx	lr
 800a16a:	2201      	movs	r2, #1
 800a16c:	e7fa      	b.n	800a164 <USBH_UserProcess+0x14>
 800a16e:	bf00      	nop
 800a170:	20002358 	.word	0x20002358

0800a174 <MX_USB_HOST_Init>:
{
 800a174:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a176:	2201      	movs	r2, #1
 800a178:	490b      	ldr	r1, [pc, #44]	; (800a1a8 <MX_USB_HOST_Init+0x34>)
 800a17a:	480c      	ldr	r0, [pc, #48]	; (800a1ac <MX_USB_HOST_Init+0x38>)
 800a17c:	f7f8 fdd0 	bl	8002d20 <USBH_Init>
 800a180:	b108      	cbz	r0, 800a186 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 800a182:	f7ff fe5f 	bl	8009e44 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a186:	490a      	ldr	r1, [pc, #40]	; (800a1b0 <MX_USB_HOST_Init+0x3c>)
 800a188:	4808      	ldr	r0, [pc, #32]	; (800a1ac <MX_USB_HOST_Init+0x38>)
 800a18a:	f7f8 fde0 	bl	8002d4e <USBH_RegisterClass>
 800a18e:	b108      	cbz	r0, 800a194 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 800a190:	f7ff fe58 	bl	8009e44 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a194:	4805      	ldr	r0, [pc, #20]	; (800a1ac <MX_USB_HOST_Init+0x38>)
 800a196:	f7f8 fe0d 	bl	8002db4 <USBH_Start>
 800a19a:	b118      	cbz	r0, 800a1a4 <MX_USB_HOST_Init+0x30>
}
 800a19c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800a1a0:	f7ff be50 	b.w	8009e44 <Error_Handler>
 800a1a4:	bd08      	pop	{r3, pc}
 800a1a6:	bf00      	nop
 800a1a8:	0800a151 	.word	0x0800a151
 800a1ac:	20008b48 	.word	0x20008b48
 800a1b0:	20000008 	.word	0x20000008

0800a1b4 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 800a1b4:	4801      	ldr	r0, [pc, #4]	; (800a1bc <MX_USB_HOST_Process+0x8>)
 800a1b6:	f7f8 be07 	b.w	8002dc8 <USBH_Process>
 800a1ba:	bf00      	nop
 800a1bc:	20008b48 	.word	0x20008b48

0800a1c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a1c0:	b530      	push	{r4, r5, lr}
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1c6:	2214      	movs	r2, #20
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	a803      	add	r0, sp, #12
 800a1cc:	f000 f99e 	bl	800a50c <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1d6:	d136      	bne.n	800a246 <HAL_HCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1d8:	4c1c      	ldr	r4, [pc, #112]	; (800a24c <HAL_HCD_MspInit+0x8c>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1da:	481d      	ldr	r0, [pc, #116]	; (800a250 <HAL_HCD_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1dc:	2500      	movs	r5, #0
 800a1de:	9501      	str	r5, [sp, #4]
 800a1e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a1e2:	f043 0301 	orr.w	r3, r3, #1
 800a1e6:	6323      	str	r3, [r4, #48]	; 0x30
 800a1e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1f2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a1f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1f8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1fa:	f7f6 fe1f 	bl	8000e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800a1fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a202:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a204:	2302      	movs	r3, #2
 800a206:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a208:	2303      	movs	r3, #3
 800a20a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a20c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a20e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a210:	480f      	ldr	r0, [pc, #60]	; (800a250 <HAL_HCD_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a212:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a214:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a216:	f7f6 fe11 	bl	8000e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a21a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a220:	6363      	str	r3, [r4, #52]	; 0x34
 800a222:	9502      	str	r5, [sp, #8]
 800a224:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a22a:	6463      	str	r3, [r4, #68]	; 0x44
 800a22c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a22e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a232:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a234:	2043      	movs	r0, #67	; 0x43
 800a236:	462a      	mov	r2, r5
 800a238:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a23a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a23c:	f7f6 fa2e 	bl	800069c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a240:	2043      	movs	r0, #67	; 0x43
 800a242:	f7f6 fa5f 	bl	8000704 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a246:	b009      	add	sp, #36	; 0x24
 800a248:	bd30      	pop	{r4, r5, pc}
 800a24a:	bf00      	nop
 800a24c:	40023800 	.word	0x40023800
 800a250:	40020000 	.word	0x40020000

0800a254 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800a254:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a258:	f7f8 befe 	b.w	8003058 <USBH_LL_IncTimer>

0800a25c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800a25c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a260:	f7f8 bf10 	b.w	8003084 <USBH_LL_Connect>

0800a264 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800a264:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a268:	f7f8 bf20 	b.w	80030ac <USBH_LL_Disconnect>

0800a26c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a26c:	4770      	bx	lr

0800a26e <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 800a26e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a272:	f7f8 beff 	b.w	8003074 <USBH_LL_PortEnabled>

0800a276 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800a276:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a27a:	f7f8 beff 	b.w	800307c <USBH_LL_PortDisabled>
	...

0800a280 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a280:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a282:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800a286:	2b01      	cmp	r3, #1
{
 800a288:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800a28a:	d11b      	bne.n	800a2c4 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a28c:	480e      	ldr	r0, [pc, #56]	; (800a2c8 <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 800a28e:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a292:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a296:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a298:	2208      	movs	r2, #8
 800a29a:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a29c:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a29e:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a2a0:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 800a2a2:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a2a6:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a2a8:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2aa:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a2ac:	f7f6 fef5 	bl	800109a <HAL_HCD_Init>
 800a2b0:	b108      	cbz	r0, 800a2b6 <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 800a2b2:	f7ff fdc7 	bl	8009e44 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a2b6:	4804      	ldr	r0, [pc, #16]	; (800a2c8 <USBH_LL_Init+0x48>)
 800a2b8:	f7f7 faee 	bl	8001898 <HAL_HCD_GetCurrentFrame>
 800a2bc:	4601      	mov	r1, r0
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f7f8 fec7 	bl	8003052 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	bd10      	pop	{r4, pc}
 800a2c8:	20008f14 	.word	0x20008f14

0800a2cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a2cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800a2ce:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a2d2:	f7f7 faab 	bl	800182c <HAL_HCD_Start>
 800a2d6:	2803      	cmp	r0, #3
 800a2d8:	bf9a      	itte	ls
 800a2da:	4b02      	ldrls	r3, [pc, #8]	; (800a2e4 <USBH_LL_Start+0x18>)
 800a2dc:	5c18      	ldrbls	r0, [r3, r0]
 800a2de:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800a2e0:	bd08      	pop	{r3, pc}
 800a2e2:	bf00      	nop
 800a2e4:	0800d5ee 	.word	0x0800d5ee

0800a2e8 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a2e8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800a2ea:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a2ee:	f7f7 fab3 	bl	8001858 <HAL_HCD_Stop>
 800a2f2:	2803      	cmp	r0, #3
 800a2f4:	bf9a      	itte	ls
 800a2f6:	4b02      	ldrls	r3, [pc, #8]	; (800a300 <USBH_LL_Stop+0x18>)
 800a2f8:	5c18      	ldrbls	r0, [r3, r0]
 800a2fa:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800a2fc:	bd08      	pop	{r3, pc}
 800a2fe:	bf00      	nop
 800a300:	0800d5ee 	.word	0x0800d5ee

0800a304 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a304:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a306:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a30a:	f7f7 fac8 	bl	800189e <HAL_HCD_GetCurrentSpeed>
 800a30e:	2802      	cmp	r0, #2
 800a310:	bf9a      	itte	ls
 800a312:	4b02      	ldrls	r3, [pc, #8]	; (800a31c <USBH_LL_GetSpeed+0x18>)
 800a314:	5c18      	ldrbls	r0, [r3, r0]
 800a316:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800a318:	bd08      	pop	{r3, pc}
 800a31a:	bf00      	nop
 800a31c:	0800d5eb 	.word	0x0800d5eb

0800a320 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a320:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a322:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a326:	f7f7 faa9 	bl	800187c <HAL_HCD_ResetPort>
 800a32a:	2803      	cmp	r0, #3
 800a32c:	bf9a      	itte	ls
 800a32e:	4b02      	ldrls	r3, [pc, #8]	; (800a338 <USBH_LL_ResetPort+0x18>)
 800a330:	5c18      	ldrbls	r0, [r3, r0]
 800a332:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800a334:	bd08      	pop	{r3, pc}
 800a336:	bf00      	nop
 800a338:	0800d5ee 	.word	0x0800d5ee

0800a33c <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a33c:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a340:	f7f7 baa5 	b.w	800188e <HAL_HCD_HC_GetXferCount>

0800a344 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a346:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800a34a:	9402      	str	r4, [sp, #8]
 800a34c:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800a350:	9401      	str	r4, [sp, #4]
 800a352:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800a356:	9400      	str	r4, [sp, #0]
 800a358:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a35c:	f7f6 fe53 	bl	8001006 <HAL_HCD_HC_Init>
 800a360:	2803      	cmp	r0, #3
 800a362:	bf9a      	itte	ls
 800a364:	4b02      	ldrls	r3, [pc, #8]	; (800a370 <USBH_LL_OpenPipe+0x2c>)
 800a366:	5c18      	ldrbls	r0, [r3, r0]
 800a368:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800a36a:	b004      	add	sp, #16
 800a36c:	bd10      	pop	{r4, pc}
 800a36e:	bf00      	nop
 800a370:	0800d5ee 	.word	0x0800d5ee

0800a374 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a374:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a376:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a37a:	f7f6 fe7c 	bl	8001076 <HAL_HCD_HC_Halt>
 800a37e:	2803      	cmp	r0, #3
 800a380:	bf9a      	itte	ls
 800a382:	4b02      	ldrls	r3, [pc, #8]	; (800a38c <USBH_LL_ClosePipe+0x18>)
 800a384:	5c18      	ldrbls	r0, [r3, r0]
 800a386:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800a388:	bd08      	pop	{r3, pc}
 800a38a:	bf00      	nop
 800a38c:	0800d5ee 	.word	0x0800d5ee

0800a390 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a392:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800a396:	9403      	str	r4, [sp, #12]
 800a398:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800a39c:	9402      	str	r4, [sp, #8]
 800a39e:	9c07      	ldr	r4, [sp, #28]
 800a3a0:	9401      	str	r4, [sp, #4]
 800a3a2:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800a3a6:	9400      	str	r4, [sp, #0]
 800a3a8:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a3ac:	f7f6 fec0 	bl	8001130 <HAL_HCD_HC_SubmitRequest>
 800a3b0:	2803      	cmp	r0, #3
 800a3b2:	bf9a      	itte	ls
 800a3b4:	4b02      	ldrls	r3, [pc, #8]	; (800a3c0 <USBH_LL_SubmitURB+0x30>)
 800a3b6:	5c18      	ldrbls	r0, [r3, r0]
 800a3b8:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800a3ba:	b004      	add	sp, #16
 800a3bc:	bd10      	pop	{r4, pc}
 800a3be:	bf00      	nop
 800a3c0:	0800d5ee 	.word	0x0800d5ee

0800a3c4 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a3c4:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a3c8:	f7f7 ba5b 	b.w	8001882 <HAL_HCD_HC_GetURBState>

0800a3cc <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a3cc:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800a3ce:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d102      	bne.n	800a3dc <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	f000 f816 	bl	800a408 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a3dc:	20c8      	movs	r0, #200	; 0xc8
 800a3de:	f7f6 f937 	bl	8000650 <HAL_Delay>
  return USBH_OK;
}
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	bd08      	pop	{r3, pc}

0800a3e6 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a3e6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 800a3ea:	2328      	movs	r3, #40	; 0x28
 800a3ec:	fb03 0101 	mla	r1, r3, r1, r0
 800a3f0:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800a3f4:	b11b      	cbz	r3, 800a3fe <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a3f6:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800a3fe:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 800a402:	e7fa      	b.n	800a3fa <USBH_LL_SetToggle+0x14>

0800a404 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800a404:	f7f6 b924 	b.w	8000650 <HAL_Delay>

0800a408 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a408:	fab0 f280 	clz	r2, r0
 800a40c:	0952      	lsrs	r2, r2, #5
 800a40e:	2101      	movs	r1, #1
 800a410:	4801      	ldr	r0, [pc, #4]	; (800a418 <MX_DriverVbusFS+0x10>)
 800a412:	f7f6 bdf3 	b.w	8000ffc <HAL_GPIO_WritePin>
 800a416:	bf00      	nop
 800a418:	40020800 	.word	0x40020800

0800a41c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a41c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a454 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a420:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a422:	e003      	b.n	800a42c <LoopCopyDataInit>

0800a424 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a424:	4b0c      	ldr	r3, [pc, #48]	; (800a458 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a426:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a428:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a42a:	3104      	adds	r1, #4

0800a42c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a42c:	480b      	ldr	r0, [pc, #44]	; (800a45c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a42e:	4b0c      	ldr	r3, [pc, #48]	; (800a460 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a430:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a432:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a434:	d3f6      	bcc.n	800a424 <CopyDataInit>
  ldr  r2, =_sbss
 800a436:	4a0b      	ldr	r2, [pc, #44]	; (800a464 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a438:	e002      	b.n	800a440 <LoopFillZerobss>

0800a43a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a43a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a43c:	f842 3b04 	str.w	r3, [r2], #4

0800a440 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a440:	4b09      	ldr	r3, [pc, #36]	; (800a468 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a442:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a444:	d3f9      	bcc.n	800a43a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a446:	f7ff fe75 	bl	800a134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a44a:	f000 f811 	bl	800a470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a44e:	f7ff fb99 	bl	8009b84 <main>
  bx  lr    
 800a452:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a454:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a458:	0800d7a4 	.word	0x0800d7a4
  ldr  r0, =_sdata
 800a45c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a460:	20001d7c 	.word	0x20001d7c
  ldr  r2, =_sbss
 800a464:	20001d7c 	.word	0x20001d7c
  ldr  r3, = _ebss
 800a468:	200091dc 	.word	0x200091dc

0800a46c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a46c:	e7fe      	b.n	800a46c <ADC_IRQHandler>
	...

0800a470 <__libc_init_array>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	4e0d      	ldr	r6, [pc, #52]	; (800a4a8 <__libc_init_array+0x38>)
 800a474:	4c0d      	ldr	r4, [pc, #52]	; (800a4ac <__libc_init_array+0x3c>)
 800a476:	1ba4      	subs	r4, r4, r6
 800a478:	10a4      	asrs	r4, r4, #2
 800a47a:	2500      	movs	r5, #0
 800a47c:	42a5      	cmp	r5, r4
 800a47e:	d109      	bne.n	800a494 <__libc_init_array+0x24>
 800a480:	4e0b      	ldr	r6, [pc, #44]	; (800a4b0 <__libc_init_array+0x40>)
 800a482:	4c0c      	ldr	r4, [pc, #48]	; (800a4b4 <__libc_init_array+0x44>)
 800a484:	f001 f9f4 	bl	800b870 <_init>
 800a488:	1ba4      	subs	r4, r4, r6
 800a48a:	10a4      	asrs	r4, r4, #2
 800a48c:	2500      	movs	r5, #0
 800a48e:	42a5      	cmp	r5, r4
 800a490:	d105      	bne.n	800a49e <__libc_init_array+0x2e>
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a498:	4798      	blx	r3
 800a49a:	3501      	adds	r5, #1
 800a49c:	e7ee      	b.n	800a47c <__libc_init_array+0xc>
 800a49e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a4a2:	4798      	blx	r3
 800a4a4:	3501      	adds	r5, #1
 800a4a6:	e7f2      	b.n	800a48e <__libc_init_array+0x1e>
 800a4a8:	0800d79c 	.word	0x0800d79c
 800a4ac:	0800d79c 	.word	0x0800d79c
 800a4b0:	0800d79c 	.word	0x0800d79c
 800a4b4:	0800d7a0 	.word	0x0800d7a0

0800a4b8 <malloc>:
 800a4b8:	4b02      	ldr	r3, [pc, #8]	; (800a4c4 <malloc+0xc>)
 800a4ba:	4601      	mov	r1, r0
 800a4bc:	6818      	ldr	r0, [r3, #0]
 800a4be:	f000 b87b 	b.w	800a5b8 <_malloc_r>
 800a4c2:	bf00      	nop
 800a4c4:	20001bac 	.word	0x20001bac

0800a4c8 <free>:
 800a4c8:	4b02      	ldr	r3, [pc, #8]	; (800a4d4 <free+0xc>)
 800a4ca:	4601      	mov	r1, r0
 800a4cc:	6818      	ldr	r0, [r3, #0]
 800a4ce:	f000 b825 	b.w	800a51c <_free_r>
 800a4d2:	bf00      	nop
 800a4d4:	20001bac 	.word	0x20001bac

0800a4d8 <memcmp>:
 800a4d8:	b510      	push	{r4, lr}
 800a4da:	3901      	subs	r1, #1
 800a4dc:	4402      	add	r2, r0
 800a4de:	4290      	cmp	r0, r2
 800a4e0:	d101      	bne.n	800a4e6 <memcmp+0xe>
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	bd10      	pop	{r4, pc}
 800a4e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a4ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a4ee:	42a3      	cmp	r3, r4
 800a4f0:	d0f5      	beq.n	800a4de <memcmp+0x6>
 800a4f2:	1b18      	subs	r0, r3, r4
 800a4f4:	bd10      	pop	{r4, pc}

0800a4f6 <memcpy>:
 800a4f6:	b510      	push	{r4, lr}
 800a4f8:	1e43      	subs	r3, r0, #1
 800a4fa:	440a      	add	r2, r1
 800a4fc:	4291      	cmp	r1, r2
 800a4fe:	d100      	bne.n	800a502 <memcpy+0xc>
 800a500:	bd10      	pop	{r4, pc}
 800a502:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a50a:	e7f7      	b.n	800a4fc <memcpy+0x6>

0800a50c <memset>:
 800a50c:	4402      	add	r2, r0
 800a50e:	4603      	mov	r3, r0
 800a510:	4293      	cmp	r3, r2
 800a512:	d100      	bne.n	800a516 <memset+0xa>
 800a514:	4770      	bx	lr
 800a516:	f803 1b01 	strb.w	r1, [r3], #1
 800a51a:	e7f9      	b.n	800a510 <memset+0x4>

0800a51c <_free_r>:
 800a51c:	b538      	push	{r3, r4, r5, lr}
 800a51e:	4605      	mov	r5, r0
 800a520:	2900      	cmp	r1, #0
 800a522:	d045      	beq.n	800a5b0 <_free_r+0x94>
 800a524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a528:	1f0c      	subs	r4, r1, #4
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	bfb8      	it	lt
 800a52e:	18e4      	addlt	r4, r4, r3
 800a530:	f000 fa9d 	bl	800aa6e <__malloc_lock>
 800a534:	4a1f      	ldr	r2, [pc, #124]	; (800a5b4 <_free_r+0x98>)
 800a536:	6813      	ldr	r3, [r2, #0]
 800a538:	4610      	mov	r0, r2
 800a53a:	b933      	cbnz	r3, 800a54a <_free_r+0x2e>
 800a53c:	6063      	str	r3, [r4, #4]
 800a53e:	6014      	str	r4, [r2, #0]
 800a540:	4628      	mov	r0, r5
 800a542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a546:	f000 ba93 	b.w	800aa70 <__malloc_unlock>
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	d90c      	bls.n	800a568 <_free_r+0x4c>
 800a54e:	6821      	ldr	r1, [r4, #0]
 800a550:	1862      	adds	r2, r4, r1
 800a552:	4293      	cmp	r3, r2
 800a554:	bf04      	itt	eq
 800a556:	681a      	ldreq	r2, [r3, #0]
 800a558:	685b      	ldreq	r3, [r3, #4]
 800a55a:	6063      	str	r3, [r4, #4]
 800a55c:	bf04      	itt	eq
 800a55e:	1852      	addeq	r2, r2, r1
 800a560:	6022      	streq	r2, [r4, #0]
 800a562:	6004      	str	r4, [r0, #0]
 800a564:	e7ec      	b.n	800a540 <_free_r+0x24>
 800a566:	4613      	mov	r3, r2
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	b10a      	cbz	r2, 800a570 <_free_r+0x54>
 800a56c:	42a2      	cmp	r2, r4
 800a56e:	d9fa      	bls.n	800a566 <_free_r+0x4a>
 800a570:	6819      	ldr	r1, [r3, #0]
 800a572:	1858      	adds	r0, r3, r1
 800a574:	42a0      	cmp	r0, r4
 800a576:	d10b      	bne.n	800a590 <_free_r+0x74>
 800a578:	6820      	ldr	r0, [r4, #0]
 800a57a:	4401      	add	r1, r0
 800a57c:	1858      	adds	r0, r3, r1
 800a57e:	4282      	cmp	r2, r0
 800a580:	6019      	str	r1, [r3, #0]
 800a582:	d1dd      	bne.n	800a540 <_free_r+0x24>
 800a584:	6810      	ldr	r0, [r2, #0]
 800a586:	6852      	ldr	r2, [r2, #4]
 800a588:	605a      	str	r2, [r3, #4]
 800a58a:	4401      	add	r1, r0
 800a58c:	6019      	str	r1, [r3, #0]
 800a58e:	e7d7      	b.n	800a540 <_free_r+0x24>
 800a590:	d902      	bls.n	800a598 <_free_r+0x7c>
 800a592:	230c      	movs	r3, #12
 800a594:	602b      	str	r3, [r5, #0]
 800a596:	e7d3      	b.n	800a540 <_free_r+0x24>
 800a598:	6820      	ldr	r0, [r4, #0]
 800a59a:	1821      	adds	r1, r4, r0
 800a59c:	428a      	cmp	r2, r1
 800a59e:	bf04      	itt	eq
 800a5a0:	6811      	ldreq	r1, [r2, #0]
 800a5a2:	6852      	ldreq	r2, [r2, #4]
 800a5a4:	6062      	str	r2, [r4, #4]
 800a5a6:	bf04      	itt	eq
 800a5a8:	1809      	addeq	r1, r1, r0
 800a5aa:	6021      	streq	r1, [r4, #0]
 800a5ac:	605c      	str	r4, [r3, #4]
 800a5ae:	e7c7      	b.n	800a540 <_free_r+0x24>
 800a5b0:	bd38      	pop	{r3, r4, r5, pc}
 800a5b2:	bf00      	nop
 800a5b4:	2000235c 	.word	0x2000235c

0800a5b8 <_malloc_r>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	1ccd      	adds	r5, r1, #3
 800a5bc:	f025 0503 	bic.w	r5, r5, #3
 800a5c0:	3508      	adds	r5, #8
 800a5c2:	2d0c      	cmp	r5, #12
 800a5c4:	bf38      	it	cc
 800a5c6:	250c      	movcc	r5, #12
 800a5c8:	2d00      	cmp	r5, #0
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	db01      	blt.n	800a5d2 <_malloc_r+0x1a>
 800a5ce:	42a9      	cmp	r1, r5
 800a5d0:	d903      	bls.n	800a5da <_malloc_r+0x22>
 800a5d2:	230c      	movs	r3, #12
 800a5d4:	6033      	str	r3, [r6, #0]
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	bd70      	pop	{r4, r5, r6, pc}
 800a5da:	f000 fa48 	bl	800aa6e <__malloc_lock>
 800a5de:	4a23      	ldr	r2, [pc, #140]	; (800a66c <_malloc_r+0xb4>)
 800a5e0:	6814      	ldr	r4, [r2, #0]
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	b991      	cbnz	r1, 800a60c <_malloc_r+0x54>
 800a5e6:	4c22      	ldr	r4, [pc, #136]	; (800a670 <_malloc_r+0xb8>)
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	b91b      	cbnz	r3, 800a5f4 <_malloc_r+0x3c>
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f000 f859 	bl	800a6a4 <_sbrk_r>
 800a5f2:	6020      	str	r0, [r4, #0]
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f000 f854 	bl	800a6a4 <_sbrk_r>
 800a5fc:	1c43      	adds	r3, r0, #1
 800a5fe:	d126      	bne.n	800a64e <_malloc_r+0x96>
 800a600:	230c      	movs	r3, #12
 800a602:	6033      	str	r3, [r6, #0]
 800a604:	4630      	mov	r0, r6
 800a606:	f000 fa33 	bl	800aa70 <__malloc_unlock>
 800a60a:	e7e4      	b.n	800a5d6 <_malloc_r+0x1e>
 800a60c:	680b      	ldr	r3, [r1, #0]
 800a60e:	1b5b      	subs	r3, r3, r5
 800a610:	d41a      	bmi.n	800a648 <_malloc_r+0x90>
 800a612:	2b0b      	cmp	r3, #11
 800a614:	d90f      	bls.n	800a636 <_malloc_r+0x7e>
 800a616:	600b      	str	r3, [r1, #0]
 800a618:	50cd      	str	r5, [r1, r3]
 800a61a:	18cc      	adds	r4, r1, r3
 800a61c:	4630      	mov	r0, r6
 800a61e:	f000 fa27 	bl	800aa70 <__malloc_unlock>
 800a622:	f104 000b 	add.w	r0, r4, #11
 800a626:	1d23      	adds	r3, r4, #4
 800a628:	f020 0007 	bic.w	r0, r0, #7
 800a62c:	1ac3      	subs	r3, r0, r3
 800a62e:	d01b      	beq.n	800a668 <_malloc_r+0xb0>
 800a630:	425a      	negs	r2, r3
 800a632:	50e2      	str	r2, [r4, r3]
 800a634:	bd70      	pop	{r4, r5, r6, pc}
 800a636:	428c      	cmp	r4, r1
 800a638:	bf0d      	iteet	eq
 800a63a:	6863      	ldreq	r3, [r4, #4]
 800a63c:	684b      	ldrne	r3, [r1, #4]
 800a63e:	6063      	strne	r3, [r4, #4]
 800a640:	6013      	streq	r3, [r2, #0]
 800a642:	bf18      	it	ne
 800a644:	460c      	movne	r4, r1
 800a646:	e7e9      	b.n	800a61c <_malloc_r+0x64>
 800a648:	460c      	mov	r4, r1
 800a64a:	6849      	ldr	r1, [r1, #4]
 800a64c:	e7ca      	b.n	800a5e4 <_malloc_r+0x2c>
 800a64e:	1cc4      	adds	r4, r0, #3
 800a650:	f024 0403 	bic.w	r4, r4, #3
 800a654:	42a0      	cmp	r0, r4
 800a656:	d005      	beq.n	800a664 <_malloc_r+0xac>
 800a658:	1a21      	subs	r1, r4, r0
 800a65a:	4630      	mov	r0, r6
 800a65c:	f000 f822 	bl	800a6a4 <_sbrk_r>
 800a660:	3001      	adds	r0, #1
 800a662:	d0cd      	beq.n	800a600 <_malloc_r+0x48>
 800a664:	6025      	str	r5, [r4, #0]
 800a666:	e7d9      	b.n	800a61c <_malloc_r+0x64>
 800a668:	bd70      	pop	{r4, r5, r6, pc}
 800a66a:	bf00      	nop
 800a66c:	2000235c 	.word	0x2000235c
 800a670:	20002360 	.word	0x20002360

0800a674 <iprintf>:
 800a674:	b40f      	push	{r0, r1, r2, r3}
 800a676:	4b0a      	ldr	r3, [pc, #40]	; (800a6a0 <iprintf+0x2c>)
 800a678:	b513      	push	{r0, r1, r4, lr}
 800a67a:	681c      	ldr	r4, [r3, #0]
 800a67c:	b124      	cbz	r4, 800a688 <iprintf+0x14>
 800a67e:	69a3      	ldr	r3, [r4, #24]
 800a680:	b913      	cbnz	r3, 800a688 <iprintf+0x14>
 800a682:	4620      	mov	r0, r4
 800a684:	f000 f954 	bl	800a930 <__sinit>
 800a688:	ab05      	add	r3, sp, #20
 800a68a:	9a04      	ldr	r2, [sp, #16]
 800a68c:	68a1      	ldr	r1, [r4, #8]
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	4620      	mov	r0, r4
 800a692:	f000 fb67 	bl	800ad64 <_vfiprintf_r>
 800a696:	b002      	add	sp, #8
 800a698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a69c:	b004      	add	sp, #16
 800a69e:	4770      	bx	lr
 800a6a0:	20001bac 	.word	0x20001bac

0800a6a4 <_sbrk_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	4c06      	ldr	r4, [pc, #24]	; (800a6c0 <_sbrk_r+0x1c>)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	f7ff fd1a 	bl	800a0e8 <_sbrk>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d102      	bne.n	800a6be <_sbrk_r+0x1a>
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	b103      	cbz	r3, 800a6be <_sbrk_r+0x1a>
 800a6bc:	602b      	str	r3, [r5, #0]
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	200091d8 	.word	0x200091d8

0800a6c4 <siprintf>:
 800a6c4:	b40e      	push	{r1, r2, r3}
 800a6c6:	b500      	push	{lr}
 800a6c8:	b09c      	sub	sp, #112	; 0x70
 800a6ca:	f44f 7102 	mov.w	r1, #520	; 0x208
 800a6ce:	ab1d      	add	r3, sp, #116	; 0x74
 800a6d0:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a6d4:	9002      	str	r0, [sp, #8]
 800a6d6:	9006      	str	r0, [sp, #24]
 800a6d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6dc:	480a      	ldr	r0, [pc, #40]	; (800a708 <siprintf+0x44>)
 800a6de:	9104      	str	r1, [sp, #16]
 800a6e0:	9107      	str	r1, [sp, #28]
 800a6e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ea:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a6ee:	6800      	ldr	r0, [r0, #0]
 800a6f0:	9301      	str	r3, [sp, #4]
 800a6f2:	a902      	add	r1, sp, #8
 800a6f4:	f000 fa18 	bl	800ab28 <_svfiprintf_r>
 800a6f8:	9b02      	ldr	r3, [sp, #8]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	701a      	strb	r2, [r3, #0]
 800a6fe:	b01c      	add	sp, #112	; 0x70
 800a700:	f85d eb04 	ldr.w	lr, [sp], #4
 800a704:	b003      	add	sp, #12
 800a706:	4770      	bx	lr
 800a708:	20001bac 	.word	0x20001bac

0800a70c <strchr>:
 800a70c:	b2c9      	uxtb	r1, r1
 800a70e:	4603      	mov	r3, r0
 800a710:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a714:	b11a      	cbz	r2, 800a71e <strchr+0x12>
 800a716:	4291      	cmp	r1, r2
 800a718:	d1f9      	bne.n	800a70e <strchr+0x2>
 800a71a:	4618      	mov	r0, r3
 800a71c:	4770      	bx	lr
 800a71e:	2900      	cmp	r1, #0
 800a720:	bf0c      	ite	eq
 800a722:	4618      	moveq	r0, r3
 800a724:	2000      	movne	r0, #0
 800a726:	4770      	bx	lr

0800a728 <strncmp>:
 800a728:	b510      	push	{r4, lr}
 800a72a:	b16a      	cbz	r2, 800a748 <strncmp+0x20>
 800a72c:	3901      	subs	r1, #1
 800a72e:	1884      	adds	r4, r0, r2
 800a730:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a734:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a738:	4293      	cmp	r3, r2
 800a73a:	d103      	bne.n	800a744 <strncmp+0x1c>
 800a73c:	42a0      	cmp	r0, r4
 800a73e:	d001      	beq.n	800a744 <strncmp+0x1c>
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1f5      	bne.n	800a730 <strncmp+0x8>
 800a744:	1a98      	subs	r0, r3, r2
 800a746:	bd10      	pop	{r4, pc}
 800a748:	4610      	mov	r0, r2
 800a74a:	bd10      	pop	{r4, pc}

0800a74c <strstr>:
 800a74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74e:	7803      	ldrb	r3, [r0, #0]
 800a750:	b133      	cbz	r3, 800a760 <strstr+0x14>
 800a752:	4603      	mov	r3, r0
 800a754:	4618      	mov	r0, r3
 800a756:	1c5e      	adds	r6, r3, #1
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	b933      	cbnz	r3, 800a76a <strstr+0x1e>
 800a75c:	4618      	mov	r0, r3
 800a75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a760:	780b      	ldrb	r3, [r1, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	bf18      	it	ne
 800a766:	2000      	movne	r0, #0
 800a768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a76a:	1e4d      	subs	r5, r1, #1
 800a76c:	1e44      	subs	r4, r0, #1
 800a76e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a772:	2a00      	cmp	r2, #0
 800a774:	d0f3      	beq.n	800a75e <strstr+0x12>
 800a776:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800a77a:	4297      	cmp	r7, r2
 800a77c:	4633      	mov	r3, r6
 800a77e:	d0f6      	beq.n	800a76e <strstr+0x22>
 800a780:	e7e8      	b.n	800a754 <strstr+0x8>

0800a782 <_strtol_l.isra.0>:
 800a782:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a786:	4680      	mov	r8, r0
 800a788:	4689      	mov	r9, r1
 800a78a:	4692      	mov	sl, r2
 800a78c:	461f      	mov	r7, r3
 800a78e:	468b      	mov	fp, r1
 800a790:	465d      	mov	r5, fp
 800a792:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a794:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a798:	f000 f954 	bl	800aa44 <__locale_ctype_ptr_l>
 800a79c:	4420      	add	r0, r4
 800a79e:	7846      	ldrb	r6, [r0, #1]
 800a7a0:	f016 0608 	ands.w	r6, r6, #8
 800a7a4:	d10b      	bne.n	800a7be <_strtol_l.isra.0+0x3c>
 800a7a6:	2c2d      	cmp	r4, #45	; 0x2d
 800a7a8:	d10b      	bne.n	800a7c2 <_strtol_l.isra.0+0x40>
 800a7aa:	782c      	ldrb	r4, [r5, #0]
 800a7ac:	2601      	movs	r6, #1
 800a7ae:	f10b 0502 	add.w	r5, fp, #2
 800a7b2:	b167      	cbz	r7, 800a7ce <_strtol_l.isra.0+0x4c>
 800a7b4:	2f10      	cmp	r7, #16
 800a7b6:	d114      	bne.n	800a7e2 <_strtol_l.isra.0+0x60>
 800a7b8:	2c30      	cmp	r4, #48	; 0x30
 800a7ba:	d00a      	beq.n	800a7d2 <_strtol_l.isra.0+0x50>
 800a7bc:	e011      	b.n	800a7e2 <_strtol_l.isra.0+0x60>
 800a7be:	46ab      	mov	fp, r5
 800a7c0:	e7e6      	b.n	800a790 <_strtol_l.isra.0+0xe>
 800a7c2:	2c2b      	cmp	r4, #43	; 0x2b
 800a7c4:	bf04      	itt	eq
 800a7c6:	782c      	ldrbeq	r4, [r5, #0]
 800a7c8:	f10b 0502 	addeq.w	r5, fp, #2
 800a7cc:	e7f1      	b.n	800a7b2 <_strtol_l.isra.0+0x30>
 800a7ce:	2c30      	cmp	r4, #48	; 0x30
 800a7d0:	d127      	bne.n	800a822 <_strtol_l.isra.0+0xa0>
 800a7d2:	782b      	ldrb	r3, [r5, #0]
 800a7d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a7d8:	2b58      	cmp	r3, #88	; 0x58
 800a7da:	d14b      	bne.n	800a874 <_strtol_l.isra.0+0xf2>
 800a7dc:	786c      	ldrb	r4, [r5, #1]
 800a7de:	2710      	movs	r7, #16
 800a7e0:	3502      	adds	r5, #2
 800a7e2:	2e00      	cmp	r6, #0
 800a7e4:	bf0c      	ite	eq
 800a7e6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a7ea:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	fbb1 fef7 	udiv	lr, r1, r7
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	fb07 1c1e 	mls	ip, r7, lr, r1
 800a7fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a7fe:	2b09      	cmp	r3, #9
 800a800:	d811      	bhi.n	800a826 <_strtol_l.isra.0+0xa4>
 800a802:	461c      	mov	r4, r3
 800a804:	42a7      	cmp	r7, r4
 800a806:	dd1d      	ble.n	800a844 <_strtol_l.isra.0+0xc2>
 800a808:	1c53      	adds	r3, r2, #1
 800a80a:	d007      	beq.n	800a81c <_strtol_l.isra.0+0x9a>
 800a80c:	4586      	cmp	lr, r0
 800a80e:	d316      	bcc.n	800a83e <_strtol_l.isra.0+0xbc>
 800a810:	d101      	bne.n	800a816 <_strtol_l.isra.0+0x94>
 800a812:	45a4      	cmp	ip, r4
 800a814:	db13      	blt.n	800a83e <_strtol_l.isra.0+0xbc>
 800a816:	fb00 4007 	mla	r0, r0, r7, r4
 800a81a:	2201      	movs	r2, #1
 800a81c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a820:	e7eb      	b.n	800a7fa <_strtol_l.isra.0+0x78>
 800a822:	270a      	movs	r7, #10
 800a824:	e7dd      	b.n	800a7e2 <_strtol_l.isra.0+0x60>
 800a826:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a82a:	2b19      	cmp	r3, #25
 800a82c:	d801      	bhi.n	800a832 <_strtol_l.isra.0+0xb0>
 800a82e:	3c37      	subs	r4, #55	; 0x37
 800a830:	e7e8      	b.n	800a804 <_strtol_l.isra.0+0x82>
 800a832:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a836:	2b19      	cmp	r3, #25
 800a838:	d804      	bhi.n	800a844 <_strtol_l.isra.0+0xc2>
 800a83a:	3c57      	subs	r4, #87	; 0x57
 800a83c:	e7e2      	b.n	800a804 <_strtol_l.isra.0+0x82>
 800a83e:	f04f 32ff 	mov.w	r2, #4294967295
 800a842:	e7eb      	b.n	800a81c <_strtol_l.isra.0+0x9a>
 800a844:	1c53      	adds	r3, r2, #1
 800a846:	d108      	bne.n	800a85a <_strtol_l.isra.0+0xd8>
 800a848:	2322      	movs	r3, #34	; 0x22
 800a84a:	f8c8 3000 	str.w	r3, [r8]
 800a84e:	4608      	mov	r0, r1
 800a850:	f1ba 0f00 	cmp.w	sl, #0
 800a854:	d107      	bne.n	800a866 <_strtol_l.isra.0+0xe4>
 800a856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85a:	b106      	cbz	r6, 800a85e <_strtol_l.isra.0+0xdc>
 800a85c:	4240      	negs	r0, r0
 800a85e:	f1ba 0f00 	cmp.w	sl, #0
 800a862:	d00c      	beq.n	800a87e <_strtol_l.isra.0+0xfc>
 800a864:	b122      	cbz	r2, 800a870 <_strtol_l.isra.0+0xee>
 800a866:	3d01      	subs	r5, #1
 800a868:	f8ca 5000 	str.w	r5, [sl]
 800a86c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a870:	464d      	mov	r5, r9
 800a872:	e7f9      	b.n	800a868 <_strtol_l.isra.0+0xe6>
 800a874:	2430      	movs	r4, #48	; 0x30
 800a876:	2f00      	cmp	r7, #0
 800a878:	d1b3      	bne.n	800a7e2 <_strtol_l.isra.0+0x60>
 800a87a:	2708      	movs	r7, #8
 800a87c:	e7b1      	b.n	800a7e2 <_strtol_l.isra.0+0x60>
 800a87e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a884 <strtol>:
 800a884:	4b08      	ldr	r3, [pc, #32]	; (800a8a8 <strtol+0x24>)
 800a886:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a888:	681c      	ldr	r4, [r3, #0]
 800a88a:	4d08      	ldr	r5, [pc, #32]	; (800a8ac <strtol+0x28>)
 800a88c:	6a23      	ldr	r3, [r4, #32]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bf08      	it	eq
 800a892:	462b      	moveq	r3, r5
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	4613      	mov	r3, r2
 800a898:	460a      	mov	r2, r1
 800a89a:	4601      	mov	r1, r0
 800a89c:	4620      	mov	r0, r4
 800a89e:	f7ff ff70 	bl	800a782 <_strtol_l.isra.0>
 800a8a2:	b003      	add	sp, #12
 800a8a4:	bd30      	pop	{r4, r5, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20001bac 	.word	0x20001bac
 800a8ac:	20001c10 	.word	0x20001c10

0800a8b0 <_cleanup_r>:
 800a8b0:	4901      	ldr	r1, [pc, #4]	; (800a8b8 <_cleanup_r+0x8>)
 800a8b2:	f000 b8a9 	b.w	800aa08 <_fwalk_reent>
 800a8b6:	bf00      	nop
 800a8b8:	0800b635 	.word	0x0800b635

0800a8bc <std.isra.0>:
 800a8bc:	2300      	movs	r3, #0
 800a8be:	b510      	push	{r4, lr}
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	6003      	str	r3, [r0, #0]
 800a8c4:	6043      	str	r3, [r0, #4]
 800a8c6:	6083      	str	r3, [r0, #8]
 800a8c8:	8181      	strh	r1, [r0, #12]
 800a8ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a8cc:	81c2      	strh	r2, [r0, #14]
 800a8ce:	6103      	str	r3, [r0, #16]
 800a8d0:	6143      	str	r3, [r0, #20]
 800a8d2:	6183      	str	r3, [r0, #24]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	2208      	movs	r2, #8
 800a8d8:	305c      	adds	r0, #92	; 0x5c
 800a8da:	f7ff fe17 	bl	800a50c <memset>
 800a8de:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <std.isra.0+0x38>)
 800a8e0:	6263      	str	r3, [r4, #36]	; 0x24
 800a8e2:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <std.isra.0+0x3c>)
 800a8e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8e6:	4b05      	ldr	r3, [pc, #20]	; (800a8fc <std.isra.0+0x40>)
 800a8e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8ea:	4b05      	ldr	r3, [pc, #20]	; (800a900 <std.isra.0+0x44>)
 800a8ec:	6224      	str	r4, [r4, #32]
 800a8ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a8f0:	bd10      	pop	{r4, pc}
 800a8f2:	bf00      	nop
 800a8f4:	0800b2bd 	.word	0x0800b2bd
 800a8f8:	0800b2df 	.word	0x0800b2df
 800a8fc:	0800b317 	.word	0x0800b317
 800a900:	0800b33b 	.word	0x0800b33b

0800a904 <__sfmoreglue>:
 800a904:	b570      	push	{r4, r5, r6, lr}
 800a906:	1e4a      	subs	r2, r1, #1
 800a908:	2568      	movs	r5, #104	; 0x68
 800a90a:	4355      	muls	r5, r2
 800a90c:	460e      	mov	r6, r1
 800a90e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a912:	f7ff fe51 	bl	800a5b8 <_malloc_r>
 800a916:	4604      	mov	r4, r0
 800a918:	b140      	cbz	r0, 800a92c <__sfmoreglue+0x28>
 800a91a:	2100      	movs	r1, #0
 800a91c:	e880 0042 	stmia.w	r0, {r1, r6}
 800a920:	300c      	adds	r0, #12
 800a922:	60a0      	str	r0, [r4, #8]
 800a924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a928:	f7ff fdf0 	bl	800a50c <memset>
 800a92c:	4620      	mov	r0, r4
 800a92e:	bd70      	pop	{r4, r5, r6, pc}

0800a930 <__sinit>:
 800a930:	6983      	ldr	r3, [r0, #24]
 800a932:	b510      	push	{r4, lr}
 800a934:	4604      	mov	r4, r0
 800a936:	bb33      	cbnz	r3, 800a986 <__sinit+0x56>
 800a938:	6483      	str	r3, [r0, #72]	; 0x48
 800a93a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800a93c:	6503      	str	r3, [r0, #80]	; 0x50
 800a93e:	4b12      	ldr	r3, [pc, #72]	; (800a988 <__sinit+0x58>)
 800a940:	4a12      	ldr	r2, [pc, #72]	; (800a98c <__sinit+0x5c>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	6282      	str	r2, [r0, #40]	; 0x28
 800a946:	4298      	cmp	r0, r3
 800a948:	bf04      	itt	eq
 800a94a:	2301      	moveq	r3, #1
 800a94c:	6183      	streq	r3, [r0, #24]
 800a94e:	f000 f81f 	bl	800a990 <__sfp>
 800a952:	6060      	str	r0, [r4, #4]
 800a954:	4620      	mov	r0, r4
 800a956:	f000 f81b 	bl	800a990 <__sfp>
 800a95a:	60a0      	str	r0, [r4, #8]
 800a95c:	4620      	mov	r0, r4
 800a95e:	f000 f817 	bl	800a990 <__sfp>
 800a962:	2200      	movs	r2, #0
 800a964:	60e0      	str	r0, [r4, #12]
 800a966:	2104      	movs	r1, #4
 800a968:	6860      	ldr	r0, [r4, #4]
 800a96a:	f7ff ffa7 	bl	800a8bc <std.isra.0>
 800a96e:	2201      	movs	r2, #1
 800a970:	2109      	movs	r1, #9
 800a972:	68a0      	ldr	r0, [r4, #8]
 800a974:	f7ff ffa2 	bl	800a8bc <std.isra.0>
 800a978:	2202      	movs	r2, #2
 800a97a:	2112      	movs	r1, #18
 800a97c:	68e0      	ldr	r0, [r4, #12]
 800a97e:	f7ff ff9d 	bl	800a8bc <std.isra.0>
 800a982:	2301      	movs	r3, #1
 800a984:	61a3      	str	r3, [r4, #24]
 800a986:	bd10      	pop	{r4, pc}
 800a988:	0800d654 	.word	0x0800d654
 800a98c:	0800a8b1 	.word	0x0800a8b1

0800a990 <__sfp>:
 800a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a992:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <__sfp+0x74>)
 800a994:	681e      	ldr	r6, [r3, #0]
 800a996:	69b3      	ldr	r3, [r6, #24]
 800a998:	4607      	mov	r7, r0
 800a99a:	b913      	cbnz	r3, 800a9a2 <__sfp+0x12>
 800a99c:	4630      	mov	r0, r6
 800a99e:	f7ff ffc7 	bl	800a930 <__sinit>
 800a9a2:	3648      	adds	r6, #72	; 0x48
 800a9a4:	68b4      	ldr	r4, [r6, #8]
 800a9a6:	6873      	ldr	r3, [r6, #4]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	d503      	bpl.n	800a9b4 <__sfp+0x24>
 800a9ac:	6833      	ldr	r3, [r6, #0]
 800a9ae:	b133      	cbz	r3, 800a9be <__sfp+0x2e>
 800a9b0:	6836      	ldr	r6, [r6, #0]
 800a9b2:	e7f7      	b.n	800a9a4 <__sfp+0x14>
 800a9b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a9b8:	b16d      	cbz	r5, 800a9d6 <__sfp+0x46>
 800a9ba:	3468      	adds	r4, #104	; 0x68
 800a9bc:	e7f4      	b.n	800a9a8 <__sfp+0x18>
 800a9be:	2104      	movs	r1, #4
 800a9c0:	4638      	mov	r0, r7
 800a9c2:	f7ff ff9f 	bl	800a904 <__sfmoreglue>
 800a9c6:	6030      	str	r0, [r6, #0]
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d1f1      	bne.n	800a9b0 <__sfp+0x20>
 800a9cc:	230c      	movs	r3, #12
 800a9ce:	603b      	str	r3, [r7, #0]
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9da:	81e3      	strh	r3, [r4, #14]
 800a9dc:	2301      	movs	r3, #1
 800a9de:	81a3      	strh	r3, [r4, #12]
 800a9e0:	6665      	str	r5, [r4, #100]	; 0x64
 800a9e2:	6025      	str	r5, [r4, #0]
 800a9e4:	60a5      	str	r5, [r4, #8]
 800a9e6:	6065      	str	r5, [r4, #4]
 800a9e8:	6125      	str	r5, [r4, #16]
 800a9ea:	6165      	str	r5, [r4, #20]
 800a9ec:	61a5      	str	r5, [r4, #24]
 800a9ee:	2208      	movs	r2, #8
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9f6:	f7ff fd89 	bl	800a50c <memset>
 800a9fa:	6365      	str	r5, [r4, #52]	; 0x34
 800a9fc:	63a5      	str	r5, [r4, #56]	; 0x38
 800a9fe:	64a5      	str	r5, [r4, #72]	; 0x48
 800aa00:	64e5      	str	r5, [r4, #76]	; 0x4c
 800aa02:	e7e6      	b.n	800a9d2 <__sfp+0x42>
 800aa04:	0800d654 	.word	0x0800d654

0800aa08 <_fwalk_reent>:
 800aa08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa0c:	4680      	mov	r8, r0
 800aa0e:	4689      	mov	r9, r1
 800aa10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa14:	2600      	movs	r6, #0
 800aa16:	b914      	cbnz	r4, 800aa1e <_fwalk_reent+0x16>
 800aa18:	4630      	mov	r0, r6
 800aa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1e:	68a5      	ldr	r5, [r4, #8]
 800aa20:	6867      	ldr	r7, [r4, #4]
 800aa22:	3f01      	subs	r7, #1
 800aa24:	d501      	bpl.n	800aa2a <_fwalk_reent+0x22>
 800aa26:	6824      	ldr	r4, [r4, #0]
 800aa28:	e7f5      	b.n	800aa16 <_fwalk_reent+0xe>
 800aa2a:	89ab      	ldrh	r3, [r5, #12]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d907      	bls.n	800aa40 <_fwalk_reent+0x38>
 800aa30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa34:	3301      	adds	r3, #1
 800aa36:	d003      	beq.n	800aa40 <_fwalk_reent+0x38>
 800aa38:	4629      	mov	r1, r5
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	47c8      	blx	r9
 800aa3e:	4306      	orrs	r6, r0
 800aa40:	3568      	adds	r5, #104	; 0x68
 800aa42:	e7ee      	b.n	800aa22 <_fwalk_reent+0x1a>

0800aa44 <__locale_ctype_ptr_l>:
 800aa44:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800aa48:	4770      	bx	lr

0800aa4a <__ascii_mbtowc>:
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	b901      	cbnz	r1, 800aa50 <__ascii_mbtowc+0x6>
 800aa4e:	a901      	add	r1, sp, #4
 800aa50:	b142      	cbz	r2, 800aa64 <__ascii_mbtowc+0x1a>
 800aa52:	b14b      	cbz	r3, 800aa68 <__ascii_mbtowc+0x1e>
 800aa54:	7813      	ldrb	r3, [r2, #0]
 800aa56:	600b      	str	r3, [r1, #0]
 800aa58:	7812      	ldrb	r2, [r2, #0]
 800aa5a:	1c10      	adds	r0, r2, #0
 800aa5c:	bf18      	it	ne
 800aa5e:	2001      	movne	r0, #1
 800aa60:	b002      	add	sp, #8
 800aa62:	4770      	bx	lr
 800aa64:	4610      	mov	r0, r2
 800aa66:	e7fb      	b.n	800aa60 <__ascii_mbtowc+0x16>
 800aa68:	f06f 0001 	mvn.w	r0, #1
 800aa6c:	e7f8      	b.n	800aa60 <__ascii_mbtowc+0x16>

0800aa6e <__malloc_lock>:
 800aa6e:	4770      	bx	lr

0800aa70 <__malloc_unlock>:
 800aa70:	4770      	bx	lr

0800aa72 <__ssputs_r>:
 800aa72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa76:	688e      	ldr	r6, [r1, #8]
 800aa78:	429e      	cmp	r6, r3
 800aa7a:	4682      	mov	sl, r0
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	4691      	mov	r9, r2
 800aa80:	4698      	mov	r8, r3
 800aa82:	d835      	bhi.n	800aaf0 <__ssputs_r+0x7e>
 800aa84:	898a      	ldrh	r2, [r1, #12]
 800aa86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa8a:	d031      	beq.n	800aaf0 <__ssputs_r+0x7e>
 800aa8c:	6825      	ldr	r5, [r4, #0]
 800aa8e:	6909      	ldr	r1, [r1, #16]
 800aa90:	1a6f      	subs	r7, r5, r1
 800aa92:	6965      	ldr	r5, [r4, #20]
 800aa94:	2302      	movs	r3, #2
 800aa96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa9a:	fb95 f5f3 	sdiv	r5, r5, r3
 800aa9e:	f108 0301 	add.w	r3, r8, #1
 800aaa2:	443b      	add	r3, r7
 800aaa4:	429d      	cmp	r5, r3
 800aaa6:	bf38      	it	cc
 800aaa8:	461d      	movcc	r5, r3
 800aaaa:	0553      	lsls	r3, r2, #21
 800aaac:	d531      	bpl.n	800ab12 <__ssputs_r+0xa0>
 800aaae:	4629      	mov	r1, r5
 800aab0:	f7ff fd82 	bl	800a5b8 <_malloc_r>
 800aab4:	4606      	mov	r6, r0
 800aab6:	b950      	cbnz	r0, 800aace <__ssputs_r+0x5c>
 800aab8:	230c      	movs	r3, #12
 800aaba:	f8ca 3000 	str.w	r3, [sl]
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aac4:	81a3      	strh	r3, [r4, #12]
 800aac6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aace:	463a      	mov	r2, r7
 800aad0:	6921      	ldr	r1, [r4, #16]
 800aad2:	f7ff fd10 	bl	800a4f6 <memcpy>
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aadc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae0:	81a3      	strh	r3, [r4, #12]
 800aae2:	6126      	str	r6, [r4, #16]
 800aae4:	6165      	str	r5, [r4, #20]
 800aae6:	443e      	add	r6, r7
 800aae8:	1bed      	subs	r5, r5, r7
 800aaea:	6026      	str	r6, [r4, #0]
 800aaec:	60a5      	str	r5, [r4, #8]
 800aaee:	4646      	mov	r6, r8
 800aaf0:	4546      	cmp	r6, r8
 800aaf2:	bf28      	it	cs
 800aaf4:	4646      	movcs	r6, r8
 800aaf6:	4632      	mov	r2, r6
 800aaf8:	4649      	mov	r1, r9
 800aafa:	6820      	ldr	r0, [r4, #0]
 800aafc:	f000 fe3a 	bl	800b774 <memmove>
 800ab00:	68a3      	ldr	r3, [r4, #8]
 800ab02:	1b9b      	subs	r3, r3, r6
 800ab04:	60a3      	str	r3, [r4, #8]
 800ab06:	6823      	ldr	r3, [r4, #0]
 800ab08:	441e      	add	r6, r3
 800ab0a:	6026      	str	r6, [r4, #0]
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab12:	462a      	mov	r2, r5
 800ab14:	f000 fe48 	bl	800b7a8 <_realloc_r>
 800ab18:	4606      	mov	r6, r0
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d1e1      	bne.n	800aae2 <__ssputs_r+0x70>
 800ab1e:	6921      	ldr	r1, [r4, #16]
 800ab20:	4650      	mov	r0, sl
 800ab22:	f7ff fcfb 	bl	800a51c <_free_r>
 800ab26:	e7c7      	b.n	800aab8 <__ssputs_r+0x46>

0800ab28 <_svfiprintf_r>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	b09d      	sub	sp, #116	; 0x74
 800ab2e:	4680      	mov	r8, r0
 800ab30:	9303      	str	r3, [sp, #12]
 800ab32:	898b      	ldrh	r3, [r1, #12]
 800ab34:	061c      	lsls	r4, r3, #24
 800ab36:	460d      	mov	r5, r1
 800ab38:	4616      	mov	r6, r2
 800ab3a:	d50f      	bpl.n	800ab5c <_svfiprintf_r+0x34>
 800ab3c:	690b      	ldr	r3, [r1, #16]
 800ab3e:	b96b      	cbnz	r3, 800ab5c <_svfiprintf_r+0x34>
 800ab40:	2140      	movs	r1, #64	; 0x40
 800ab42:	f7ff fd39 	bl	800a5b8 <_malloc_r>
 800ab46:	6028      	str	r0, [r5, #0]
 800ab48:	6128      	str	r0, [r5, #16]
 800ab4a:	b928      	cbnz	r0, 800ab58 <_svfiprintf_r+0x30>
 800ab4c:	230c      	movs	r3, #12
 800ab4e:	f8c8 3000 	str.w	r3, [r8]
 800ab52:	f04f 30ff 	mov.w	r0, #4294967295
 800ab56:	e0c5      	b.n	800ace4 <_svfiprintf_r+0x1bc>
 800ab58:	2340      	movs	r3, #64	; 0x40
 800ab5a:	616b      	str	r3, [r5, #20]
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab60:	2320      	movs	r3, #32
 800ab62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab66:	2330      	movs	r3, #48	; 0x30
 800ab68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab6c:	f04f 0b01 	mov.w	fp, #1
 800ab70:	4637      	mov	r7, r6
 800ab72:	463c      	mov	r4, r7
 800ab74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d13c      	bne.n	800abf6 <_svfiprintf_r+0xce>
 800ab7c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ab80:	d00b      	beq.n	800ab9a <_svfiprintf_r+0x72>
 800ab82:	4653      	mov	r3, sl
 800ab84:	4632      	mov	r2, r6
 800ab86:	4629      	mov	r1, r5
 800ab88:	4640      	mov	r0, r8
 800ab8a:	f7ff ff72 	bl	800aa72 <__ssputs_r>
 800ab8e:	3001      	adds	r0, #1
 800ab90:	f000 80a3 	beq.w	800acda <_svfiprintf_r+0x1b2>
 800ab94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab96:	4453      	add	r3, sl
 800ab98:	9309      	str	r3, [sp, #36]	; 0x24
 800ab9a:	783b      	ldrb	r3, [r7, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 809c 	beq.w	800acda <_svfiprintf_r+0x1b2>
 800aba2:	2300      	movs	r3, #0
 800aba4:	f04f 32ff 	mov.w	r2, #4294967295
 800aba8:	9304      	str	r3, [sp, #16]
 800abaa:	9307      	str	r3, [sp, #28]
 800abac:	9205      	str	r2, [sp, #20]
 800abae:	9306      	str	r3, [sp, #24]
 800abb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abb4:	931a      	str	r3, [sp, #104]	; 0x68
 800abb6:	2205      	movs	r2, #5
 800abb8:	7821      	ldrb	r1, [r4, #0]
 800abba:	4850      	ldr	r0, [pc, #320]	; (800acfc <_svfiprintf_r+0x1d4>)
 800abbc:	f7f5 fb20 	bl	8000200 <memchr>
 800abc0:	1c67      	adds	r7, r4, #1
 800abc2:	9b04      	ldr	r3, [sp, #16]
 800abc4:	b9d8      	cbnz	r0, 800abfe <_svfiprintf_r+0xd6>
 800abc6:	06d9      	lsls	r1, r3, #27
 800abc8:	bf44      	itt	mi
 800abca:	2220      	movmi	r2, #32
 800abcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abd0:	071a      	lsls	r2, r3, #28
 800abd2:	bf44      	itt	mi
 800abd4:	222b      	movmi	r2, #43	; 0x2b
 800abd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abda:	7822      	ldrb	r2, [r4, #0]
 800abdc:	2a2a      	cmp	r2, #42	; 0x2a
 800abde:	d016      	beq.n	800ac0e <_svfiprintf_r+0xe6>
 800abe0:	9a07      	ldr	r2, [sp, #28]
 800abe2:	2100      	movs	r1, #0
 800abe4:	200a      	movs	r0, #10
 800abe6:	4627      	mov	r7, r4
 800abe8:	3401      	adds	r4, #1
 800abea:	783b      	ldrb	r3, [r7, #0]
 800abec:	3b30      	subs	r3, #48	; 0x30
 800abee:	2b09      	cmp	r3, #9
 800abf0:	d951      	bls.n	800ac96 <_svfiprintf_r+0x16e>
 800abf2:	b1c9      	cbz	r1, 800ac28 <_svfiprintf_r+0x100>
 800abf4:	e011      	b.n	800ac1a <_svfiprintf_r+0xf2>
 800abf6:	2b25      	cmp	r3, #37	; 0x25
 800abf8:	d0c0      	beq.n	800ab7c <_svfiprintf_r+0x54>
 800abfa:	4627      	mov	r7, r4
 800abfc:	e7b9      	b.n	800ab72 <_svfiprintf_r+0x4a>
 800abfe:	4a3f      	ldr	r2, [pc, #252]	; (800acfc <_svfiprintf_r+0x1d4>)
 800ac00:	1a80      	subs	r0, r0, r2
 800ac02:	fa0b f000 	lsl.w	r0, fp, r0
 800ac06:	4318      	orrs	r0, r3
 800ac08:	9004      	str	r0, [sp, #16]
 800ac0a:	463c      	mov	r4, r7
 800ac0c:	e7d3      	b.n	800abb6 <_svfiprintf_r+0x8e>
 800ac0e:	9a03      	ldr	r2, [sp, #12]
 800ac10:	1d11      	adds	r1, r2, #4
 800ac12:	6812      	ldr	r2, [r2, #0]
 800ac14:	9103      	str	r1, [sp, #12]
 800ac16:	2a00      	cmp	r2, #0
 800ac18:	db01      	blt.n	800ac1e <_svfiprintf_r+0xf6>
 800ac1a:	9207      	str	r2, [sp, #28]
 800ac1c:	e004      	b.n	800ac28 <_svfiprintf_r+0x100>
 800ac1e:	4252      	negs	r2, r2
 800ac20:	f043 0302 	orr.w	r3, r3, #2
 800ac24:	9207      	str	r2, [sp, #28]
 800ac26:	9304      	str	r3, [sp, #16]
 800ac28:	783b      	ldrb	r3, [r7, #0]
 800ac2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ac2c:	d10e      	bne.n	800ac4c <_svfiprintf_r+0x124>
 800ac2e:	787b      	ldrb	r3, [r7, #1]
 800ac30:	2b2a      	cmp	r3, #42	; 0x2a
 800ac32:	f107 0101 	add.w	r1, r7, #1
 800ac36:	d132      	bne.n	800ac9e <_svfiprintf_r+0x176>
 800ac38:	9b03      	ldr	r3, [sp, #12]
 800ac3a:	1d1a      	adds	r2, r3, #4
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	9203      	str	r2, [sp, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	bfb8      	it	lt
 800ac44:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac48:	3702      	adds	r7, #2
 800ac4a:	9305      	str	r3, [sp, #20]
 800ac4c:	4c2c      	ldr	r4, [pc, #176]	; (800ad00 <_svfiprintf_r+0x1d8>)
 800ac4e:	7839      	ldrb	r1, [r7, #0]
 800ac50:	2203      	movs	r2, #3
 800ac52:	4620      	mov	r0, r4
 800ac54:	f7f5 fad4 	bl	8000200 <memchr>
 800ac58:	b138      	cbz	r0, 800ac6a <_svfiprintf_r+0x142>
 800ac5a:	2340      	movs	r3, #64	; 0x40
 800ac5c:	1b00      	subs	r0, r0, r4
 800ac5e:	fa03 f000 	lsl.w	r0, r3, r0
 800ac62:	9b04      	ldr	r3, [sp, #16]
 800ac64:	4303      	orrs	r3, r0
 800ac66:	9304      	str	r3, [sp, #16]
 800ac68:	3701      	adds	r7, #1
 800ac6a:	7839      	ldrb	r1, [r7, #0]
 800ac6c:	4825      	ldr	r0, [pc, #148]	; (800ad04 <_svfiprintf_r+0x1dc>)
 800ac6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac72:	2206      	movs	r2, #6
 800ac74:	1c7e      	adds	r6, r7, #1
 800ac76:	f7f5 fac3 	bl	8000200 <memchr>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d035      	beq.n	800acea <_svfiprintf_r+0x1c2>
 800ac7e:	4b22      	ldr	r3, [pc, #136]	; (800ad08 <_svfiprintf_r+0x1e0>)
 800ac80:	b9fb      	cbnz	r3, 800acc2 <_svfiprintf_r+0x19a>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	3307      	adds	r3, #7
 800ac86:	f023 0307 	bic.w	r3, r3, #7
 800ac8a:	3308      	adds	r3, #8
 800ac8c:	9303      	str	r3, [sp, #12]
 800ac8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac90:	444b      	add	r3, r9
 800ac92:	9309      	str	r3, [sp, #36]	; 0x24
 800ac94:	e76c      	b.n	800ab70 <_svfiprintf_r+0x48>
 800ac96:	fb00 3202 	mla	r2, r0, r2, r3
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	e7a3      	b.n	800abe6 <_svfiprintf_r+0xbe>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	9305      	str	r3, [sp, #20]
 800aca2:	4618      	mov	r0, r3
 800aca4:	240a      	movs	r4, #10
 800aca6:	460f      	mov	r7, r1
 800aca8:	3101      	adds	r1, #1
 800acaa:	783a      	ldrb	r2, [r7, #0]
 800acac:	3a30      	subs	r2, #48	; 0x30
 800acae:	2a09      	cmp	r2, #9
 800acb0:	d903      	bls.n	800acba <_svfiprintf_r+0x192>
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d0ca      	beq.n	800ac4c <_svfiprintf_r+0x124>
 800acb6:	9005      	str	r0, [sp, #20]
 800acb8:	e7c8      	b.n	800ac4c <_svfiprintf_r+0x124>
 800acba:	fb04 2000 	mla	r0, r4, r0, r2
 800acbe:	2301      	movs	r3, #1
 800acc0:	e7f1      	b.n	800aca6 <_svfiprintf_r+0x17e>
 800acc2:	ab03      	add	r3, sp, #12
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	462a      	mov	r2, r5
 800acc8:	4b10      	ldr	r3, [pc, #64]	; (800ad0c <_svfiprintf_r+0x1e4>)
 800acca:	a904      	add	r1, sp, #16
 800accc:	4640      	mov	r0, r8
 800acce:	f3af 8000 	nop.w
 800acd2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800acd6:	4681      	mov	r9, r0
 800acd8:	d1d9      	bne.n	800ac8e <_svfiprintf_r+0x166>
 800acda:	89ab      	ldrh	r3, [r5, #12]
 800acdc:	065b      	lsls	r3, r3, #25
 800acde:	f53f af38 	bmi.w	800ab52 <_svfiprintf_r+0x2a>
 800ace2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ace4:	b01d      	add	sp, #116	; 0x74
 800ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acea:	ab03      	add	r3, sp, #12
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	462a      	mov	r2, r5
 800acf0:	4b06      	ldr	r3, [pc, #24]	; (800ad0c <_svfiprintf_r+0x1e4>)
 800acf2:	a904      	add	r1, sp, #16
 800acf4:	4640      	mov	r0, r8
 800acf6:	f000 f9c1 	bl	800b07c <_printf_i>
 800acfa:	e7ea      	b.n	800acd2 <_svfiprintf_r+0x1aa>
 800acfc:	0800d65e 	.word	0x0800d65e
 800ad00:	0800d664 	.word	0x0800d664
 800ad04:	0800d668 	.word	0x0800d668
 800ad08:	00000000 	.word	0x00000000
 800ad0c:	0800aa73 	.word	0x0800aa73

0800ad10 <__sfputc_r>:
 800ad10:	6893      	ldr	r3, [r2, #8]
 800ad12:	3b01      	subs	r3, #1
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	b410      	push	{r4}
 800ad18:	6093      	str	r3, [r2, #8]
 800ad1a:	da09      	bge.n	800ad30 <__sfputc_r+0x20>
 800ad1c:	6994      	ldr	r4, [r2, #24]
 800ad1e:	42a3      	cmp	r3, r4
 800ad20:	db02      	blt.n	800ad28 <__sfputc_r+0x18>
 800ad22:	b2cb      	uxtb	r3, r1
 800ad24:	2b0a      	cmp	r3, #10
 800ad26:	d103      	bne.n	800ad30 <__sfputc_r+0x20>
 800ad28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad2c:	f000 bb0a 	b.w	800b344 <__swbuf_r>
 800ad30:	6813      	ldr	r3, [r2, #0]
 800ad32:	1c58      	adds	r0, r3, #1
 800ad34:	6010      	str	r0, [r2, #0]
 800ad36:	7019      	strb	r1, [r3, #0]
 800ad38:	b2c8      	uxtb	r0, r1
 800ad3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <__sfputs_r>:
 800ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad42:	4606      	mov	r6, r0
 800ad44:	460f      	mov	r7, r1
 800ad46:	4614      	mov	r4, r2
 800ad48:	18d5      	adds	r5, r2, r3
 800ad4a:	42ac      	cmp	r4, r5
 800ad4c:	d101      	bne.n	800ad52 <__sfputs_r+0x12>
 800ad4e:	2000      	movs	r0, #0
 800ad50:	e007      	b.n	800ad62 <__sfputs_r+0x22>
 800ad52:	463a      	mov	r2, r7
 800ad54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f7ff ffd9 	bl	800ad10 <__sfputc_r>
 800ad5e:	1c43      	adds	r3, r0, #1
 800ad60:	d1f3      	bne.n	800ad4a <__sfputs_r+0xa>
 800ad62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad64 <_vfiprintf_r>:
 800ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	b09d      	sub	sp, #116	; 0x74
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	4617      	mov	r7, r2
 800ad6e:	9303      	str	r3, [sp, #12]
 800ad70:	4606      	mov	r6, r0
 800ad72:	b118      	cbz	r0, 800ad7c <_vfiprintf_r+0x18>
 800ad74:	6983      	ldr	r3, [r0, #24]
 800ad76:	b90b      	cbnz	r3, 800ad7c <_vfiprintf_r+0x18>
 800ad78:	f7ff fdda 	bl	800a930 <__sinit>
 800ad7c:	4b7c      	ldr	r3, [pc, #496]	; (800af70 <_vfiprintf_r+0x20c>)
 800ad7e:	429c      	cmp	r4, r3
 800ad80:	d157      	bne.n	800ae32 <_vfiprintf_r+0xce>
 800ad82:	6874      	ldr	r4, [r6, #4]
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	0718      	lsls	r0, r3, #28
 800ad88:	d55d      	bpl.n	800ae46 <_vfiprintf_r+0xe2>
 800ad8a:	6923      	ldr	r3, [r4, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d05a      	beq.n	800ae46 <_vfiprintf_r+0xe2>
 800ad90:	2300      	movs	r3, #0
 800ad92:	9309      	str	r3, [sp, #36]	; 0x24
 800ad94:	2320      	movs	r3, #32
 800ad96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad9a:	2330      	movs	r3, #48	; 0x30
 800ad9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ada0:	f04f 0b01 	mov.w	fp, #1
 800ada4:	46b8      	mov	r8, r7
 800ada6:	4645      	mov	r5, r8
 800ada8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800adac:	2b00      	cmp	r3, #0
 800adae:	d155      	bne.n	800ae5c <_vfiprintf_r+0xf8>
 800adb0:	ebb8 0a07 	subs.w	sl, r8, r7
 800adb4:	d00b      	beq.n	800adce <_vfiprintf_r+0x6a>
 800adb6:	4653      	mov	r3, sl
 800adb8:	463a      	mov	r2, r7
 800adba:	4621      	mov	r1, r4
 800adbc:	4630      	mov	r0, r6
 800adbe:	f7ff ffbf 	bl	800ad40 <__sfputs_r>
 800adc2:	3001      	adds	r0, #1
 800adc4:	f000 80c4 	beq.w	800af50 <_vfiprintf_r+0x1ec>
 800adc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adca:	4453      	add	r3, sl
 800adcc:	9309      	str	r3, [sp, #36]	; 0x24
 800adce:	f898 3000 	ldrb.w	r3, [r8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	f000 80bc 	beq.w	800af50 <_vfiprintf_r+0x1ec>
 800add8:	2300      	movs	r3, #0
 800adda:	f04f 32ff 	mov.w	r2, #4294967295
 800adde:	9304      	str	r3, [sp, #16]
 800ade0:	9307      	str	r3, [sp, #28]
 800ade2:	9205      	str	r2, [sp, #20]
 800ade4:	9306      	str	r3, [sp, #24]
 800ade6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adea:	931a      	str	r3, [sp, #104]	; 0x68
 800adec:	2205      	movs	r2, #5
 800adee:	7829      	ldrb	r1, [r5, #0]
 800adf0:	4860      	ldr	r0, [pc, #384]	; (800af74 <_vfiprintf_r+0x210>)
 800adf2:	f7f5 fa05 	bl	8000200 <memchr>
 800adf6:	f105 0801 	add.w	r8, r5, #1
 800adfa:	9b04      	ldr	r3, [sp, #16]
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d131      	bne.n	800ae64 <_vfiprintf_r+0x100>
 800ae00:	06d9      	lsls	r1, r3, #27
 800ae02:	bf44      	itt	mi
 800ae04:	2220      	movmi	r2, #32
 800ae06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae0a:	071a      	lsls	r2, r3, #28
 800ae0c:	bf44      	itt	mi
 800ae0e:	222b      	movmi	r2, #43	; 0x2b
 800ae10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae14:	782a      	ldrb	r2, [r5, #0]
 800ae16:	2a2a      	cmp	r2, #42	; 0x2a
 800ae18:	d02c      	beq.n	800ae74 <_vfiprintf_r+0x110>
 800ae1a:	9a07      	ldr	r2, [sp, #28]
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	200a      	movs	r0, #10
 800ae20:	46a8      	mov	r8, r5
 800ae22:	3501      	adds	r5, #1
 800ae24:	f898 3000 	ldrb.w	r3, [r8]
 800ae28:	3b30      	subs	r3, #48	; 0x30
 800ae2a:	2b09      	cmp	r3, #9
 800ae2c:	d96d      	bls.n	800af0a <_vfiprintf_r+0x1a6>
 800ae2e:	b371      	cbz	r1, 800ae8e <_vfiprintf_r+0x12a>
 800ae30:	e026      	b.n	800ae80 <_vfiprintf_r+0x11c>
 800ae32:	4b51      	ldr	r3, [pc, #324]	; (800af78 <_vfiprintf_r+0x214>)
 800ae34:	429c      	cmp	r4, r3
 800ae36:	d101      	bne.n	800ae3c <_vfiprintf_r+0xd8>
 800ae38:	68b4      	ldr	r4, [r6, #8]
 800ae3a:	e7a3      	b.n	800ad84 <_vfiprintf_r+0x20>
 800ae3c:	4b4f      	ldr	r3, [pc, #316]	; (800af7c <_vfiprintf_r+0x218>)
 800ae3e:	429c      	cmp	r4, r3
 800ae40:	bf08      	it	eq
 800ae42:	68f4      	ldreq	r4, [r6, #12]
 800ae44:	e79e      	b.n	800ad84 <_vfiprintf_r+0x20>
 800ae46:	4621      	mov	r1, r4
 800ae48:	4630      	mov	r0, r6
 800ae4a:	f000 faed 	bl	800b428 <__swsetup_r>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d09e      	beq.n	800ad90 <_vfiprintf_r+0x2c>
 800ae52:	f04f 30ff 	mov.w	r0, #4294967295
 800ae56:	b01d      	add	sp, #116	; 0x74
 800ae58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5c:	2b25      	cmp	r3, #37	; 0x25
 800ae5e:	d0a7      	beq.n	800adb0 <_vfiprintf_r+0x4c>
 800ae60:	46a8      	mov	r8, r5
 800ae62:	e7a0      	b.n	800ada6 <_vfiprintf_r+0x42>
 800ae64:	4a43      	ldr	r2, [pc, #268]	; (800af74 <_vfiprintf_r+0x210>)
 800ae66:	1a80      	subs	r0, r0, r2
 800ae68:	fa0b f000 	lsl.w	r0, fp, r0
 800ae6c:	4318      	orrs	r0, r3
 800ae6e:	9004      	str	r0, [sp, #16]
 800ae70:	4645      	mov	r5, r8
 800ae72:	e7bb      	b.n	800adec <_vfiprintf_r+0x88>
 800ae74:	9a03      	ldr	r2, [sp, #12]
 800ae76:	1d11      	adds	r1, r2, #4
 800ae78:	6812      	ldr	r2, [r2, #0]
 800ae7a:	9103      	str	r1, [sp, #12]
 800ae7c:	2a00      	cmp	r2, #0
 800ae7e:	db01      	blt.n	800ae84 <_vfiprintf_r+0x120>
 800ae80:	9207      	str	r2, [sp, #28]
 800ae82:	e004      	b.n	800ae8e <_vfiprintf_r+0x12a>
 800ae84:	4252      	negs	r2, r2
 800ae86:	f043 0302 	orr.w	r3, r3, #2
 800ae8a:	9207      	str	r2, [sp, #28]
 800ae8c:	9304      	str	r3, [sp, #16]
 800ae8e:	f898 3000 	ldrb.w	r3, [r8]
 800ae92:	2b2e      	cmp	r3, #46	; 0x2e
 800ae94:	d110      	bne.n	800aeb8 <_vfiprintf_r+0x154>
 800ae96:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ae9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae9c:	f108 0101 	add.w	r1, r8, #1
 800aea0:	d137      	bne.n	800af12 <_vfiprintf_r+0x1ae>
 800aea2:	9b03      	ldr	r3, [sp, #12]
 800aea4:	1d1a      	adds	r2, r3, #4
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	9203      	str	r2, [sp, #12]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	bfb8      	it	lt
 800aeae:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeb2:	f108 0802 	add.w	r8, r8, #2
 800aeb6:	9305      	str	r3, [sp, #20]
 800aeb8:	4d31      	ldr	r5, [pc, #196]	; (800af80 <_vfiprintf_r+0x21c>)
 800aeba:	f898 1000 	ldrb.w	r1, [r8]
 800aebe:	2203      	movs	r2, #3
 800aec0:	4628      	mov	r0, r5
 800aec2:	f7f5 f99d 	bl	8000200 <memchr>
 800aec6:	b140      	cbz	r0, 800aeda <_vfiprintf_r+0x176>
 800aec8:	2340      	movs	r3, #64	; 0x40
 800aeca:	1b40      	subs	r0, r0, r5
 800aecc:	fa03 f000 	lsl.w	r0, r3, r0
 800aed0:	9b04      	ldr	r3, [sp, #16]
 800aed2:	4303      	orrs	r3, r0
 800aed4:	9304      	str	r3, [sp, #16]
 800aed6:	f108 0801 	add.w	r8, r8, #1
 800aeda:	f898 1000 	ldrb.w	r1, [r8]
 800aede:	4829      	ldr	r0, [pc, #164]	; (800af84 <_vfiprintf_r+0x220>)
 800aee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aee4:	2206      	movs	r2, #6
 800aee6:	f108 0701 	add.w	r7, r8, #1
 800aeea:	f7f5 f989 	bl	8000200 <memchr>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d034      	beq.n	800af5c <_vfiprintf_r+0x1f8>
 800aef2:	4b25      	ldr	r3, [pc, #148]	; (800af88 <_vfiprintf_r+0x224>)
 800aef4:	bb03      	cbnz	r3, 800af38 <_vfiprintf_r+0x1d4>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	3307      	adds	r3, #7
 800aefa:	f023 0307 	bic.w	r3, r3, #7
 800aefe:	3308      	adds	r3, #8
 800af00:	9303      	str	r3, [sp, #12]
 800af02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af04:	444b      	add	r3, r9
 800af06:	9309      	str	r3, [sp, #36]	; 0x24
 800af08:	e74c      	b.n	800ada4 <_vfiprintf_r+0x40>
 800af0a:	fb00 3202 	mla	r2, r0, r2, r3
 800af0e:	2101      	movs	r1, #1
 800af10:	e786      	b.n	800ae20 <_vfiprintf_r+0xbc>
 800af12:	2300      	movs	r3, #0
 800af14:	9305      	str	r3, [sp, #20]
 800af16:	4618      	mov	r0, r3
 800af18:	250a      	movs	r5, #10
 800af1a:	4688      	mov	r8, r1
 800af1c:	3101      	adds	r1, #1
 800af1e:	f898 2000 	ldrb.w	r2, [r8]
 800af22:	3a30      	subs	r2, #48	; 0x30
 800af24:	2a09      	cmp	r2, #9
 800af26:	d903      	bls.n	800af30 <_vfiprintf_r+0x1cc>
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d0c5      	beq.n	800aeb8 <_vfiprintf_r+0x154>
 800af2c:	9005      	str	r0, [sp, #20]
 800af2e:	e7c3      	b.n	800aeb8 <_vfiprintf_r+0x154>
 800af30:	fb05 2000 	mla	r0, r5, r0, r2
 800af34:	2301      	movs	r3, #1
 800af36:	e7f0      	b.n	800af1a <_vfiprintf_r+0x1b6>
 800af38:	ab03      	add	r3, sp, #12
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	4622      	mov	r2, r4
 800af3e:	4b13      	ldr	r3, [pc, #76]	; (800af8c <_vfiprintf_r+0x228>)
 800af40:	a904      	add	r1, sp, #16
 800af42:	4630      	mov	r0, r6
 800af44:	f3af 8000 	nop.w
 800af48:	f1b0 3fff 	cmp.w	r0, #4294967295
 800af4c:	4681      	mov	r9, r0
 800af4e:	d1d8      	bne.n	800af02 <_vfiprintf_r+0x19e>
 800af50:	89a3      	ldrh	r3, [r4, #12]
 800af52:	065b      	lsls	r3, r3, #25
 800af54:	f53f af7d 	bmi.w	800ae52 <_vfiprintf_r+0xee>
 800af58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af5a:	e77c      	b.n	800ae56 <_vfiprintf_r+0xf2>
 800af5c:	ab03      	add	r3, sp, #12
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	4622      	mov	r2, r4
 800af62:	4b0a      	ldr	r3, [pc, #40]	; (800af8c <_vfiprintf_r+0x228>)
 800af64:	a904      	add	r1, sp, #16
 800af66:	4630      	mov	r0, r6
 800af68:	f000 f888 	bl	800b07c <_printf_i>
 800af6c:	e7ec      	b.n	800af48 <_vfiprintf_r+0x1e4>
 800af6e:	bf00      	nop
 800af70:	0800d614 	.word	0x0800d614
 800af74:	0800d65e 	.word	0x0800d65e
 800af78:	0800d634 	.word	0x0800d634
 800af7c:	0800d5f4 	.word	0x0800d5f4
 800af80:	0800d664 	.word	0x0800d664
 800af84:	0800d668 	.word	0x0800d668
 800af88:	00000000 	.word	0x00000000
 800af8c:	0800ad41 	.word	0x0800ad41

0800af90 <_printf_common>:
 800af90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af94:	4691      	mov	r9, r2
 800af96:	461f      	mov	r7, r3
 800af98:	688a      	ldr	r2, [r1, #8]
 800af9a:	690b      	ldr	r3, [r1, #16]
 800af9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afa0:	4293      	cmp	r3, r2
 800afa2:	bfb8      	it	lt
 800afa4:	4613      	movlt	r3, r2
 800afa6:	f8c9 3000 	str.w	r3, [r9]
 800afaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afae:	4606      	mov	r6, r0
 800afb0:	460c      	mov	r4, r1
 800afb2:	b112      	cbz	r2, 800afba <_printf_common+0x2a>
 800afb4:	3301      	adds	r3, #1
 800afb6:	f8c9 3000 	str.w	r3, [r9]
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	0699      	lsls	r1, r3, #26
 800afbe:	bf42      	ittt	mi
 800afc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800afc4:	3302      	addmi	r3, #2
 800afc6:	f8c9 3000 	strmi.w	r3, [r9]
 800afca:	6825      	ldr	r5, [r4, #0]
 800afcc:	f015 0506 	ands.w	r5, r5, #6
 800afd0:	d107      	bne.n	800afe2 <_printf_common+0x52>
 800afd2:	f104 0a19 	add.w	sl, r4, #25
 800afd6:	68e3      	ldr	r3, [r4, #12]
 800afd8:	f8d9 2000 	ldr.w	r2, [r9]
 800afdc:	1a9b      	subs	r3, r3, r2
 800afde:	429d      	cmp	r5, r3
 800afe0:	db29      	blt.n	800b036 <_printf_common+0xa6>
 800afe2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800afe6:	6822      	ldr	r2, [r4, #0]
 800afe8:	3300      	adds	r3, #0
 800afea:	bf18      	it	ne
 800afec:	2301      	movne	r3, #1
 800afee:	0692      	lsls	r2, r2, #26
 800aff0:	d42e      	bmi.n	800b050 <_printf_common+0xc0>
 800aff2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aff6:	4639      	mov	r1, r7
 800aff8:	4630      	mov	r0, r6
 800affa:	47c0      	blx	r8
 800affc:	3001      	adds	r0, #1
 800affe:	d021      	beq.n	800b044 <_printf_common+0xb4>
 800b000:	6823      	ldr	r3, [r4, #0]
 800b002:	68e5      	ldr	r5, [r4, #12]
 800b004:	f8d9 2000 	ldr.w	r2, [r9]
 800b008:	f003 0306 	and.w	r3, r3, #6
 800b00c:	2b04      	cmp	r3, #4
 800b00e:	bf08      	it	eq
 800b010:	1aad      	subeq	r5, r5, r2
 800b012:	68a3      	ldr	r3, [r4, #8]
 800b014:	6922      	ldr	r2, [r4, #16]
 800b016:	bf0c      	ite	eq
 800b018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b01c:	2500      	movne	r5, #0
 800b01e:	4293      	cmp	r3, r2
 800b020:	bfc4      	itt	gt
 800b022:	1a9b      	subgt	r3, r3, r2
 800b024:	18ed      	addgt	r5, r5, r3
 800b026:	f04f 0900 	mov.w	r9, #0
 800b02a:	341a      	adds	r4, #26
 800b02c:	454d      	cmp	r5, r9
 800b02e:	d11b      	bne.n	800b068 <_printf_common+0xd8>
 800b030:	2000      	movs	r0, #0
 800b032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b036:	2301      	movs	r3, #1
 800b038:	4652      	mov	r2, sl
 800b03a:	4639      	mov	r1, r7
 800b03c:	4630      	mov	r0, r6
 800b03e:	47c0      	blx	r8
 800b040:	3001      	adds	r0, #1
 800b042:	d103      	bne.n	800b04c <_printf_common+0xbc>
 800b044:	f04f 30ff 	mov.w	r0, #4294967295
 800b048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b04c:	3501      	adds	r5, #1
 800b04e:	e7c2      	b.n	800afd6 <_printf_common+0x46>
 800b050:	18e1      	adds	r1, r4, r3
 800b052:	1c5a      	adds	r2, r3, #1
 800b054:	2030      	movs	r0, #48	; 0x30
 800b056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b05a:	4422      	add	r2, r4
 800b05c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b064:	3302      	adds	r3, #2
 800b066:	e7c4      	b.n	800aff2 <_printf_common+0x62>
 800b068:	2301      	movs	r3, #1
 800b06a:	4622      	mov	r2, r4
 800b06c:	4639      	mov	r1, r7
 800b06e:	4630      	mov	r0, r6
 800b070:	47c0      	blx	r8
 800b072:	3001      	adds	r0, #1
 800b074:	d0e6      	beq.n	800b044 <_printf_common+0xb4>
 800b076:	f109 0901 	add.w	r9, r9, #1
 800b07a:	e7d7      	b.n	800b02c <_printf_common+0x9c>

0800b07c <_printf_i>:
 800b07c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b080:	4617      	mov	r7, r2
 800b082:	7e0a      	ldrb	r2, [r1, #24]
 800b084:	b085      	sub	sp, #20
 800b086:	2a6e      	cmp	r2, #110	; 0x6e
 800b088:	4698      	mov	r8, r3
 800b08a:	4606      	mov	r6, r0
 800b08c:	460c      	mov	r4, r1
 800b08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b090:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800b094:	f000 80bc 	beq.w	800b210 <_printf_i+0x194>
 800b098:	d81a      	bhi.n	800b0d0 <_printf_i+0x54>
 800b09a:	2a63      	cmp	r2, #99	; 0x63
 800b09c:	d02e      	beq.n	800b0fc <_printf_i+0x80>
 800b09e:	d80a      	bhi.n	800b0b6 <_printf_i+0x3a>
 800b0a0:	2a00      	cmp	r2, #0
 800b0a2:	f000 80c8 	beq.w	800b236 <_printf_i+0x1ba>
 800b0a6:	2a58      	cmp	r2, #88	; 0x58
 800b0a8:	f000 808a 	beq.w	800b1c0 <_printf_i+0x144>
 800b0ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0b0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800b0b4:	e02a      	b.n	800b10c <_printf_i+0x90>
 800b0b6:	2a64      	cmp	r2, #100	; 0x64
 800b0b8:	d001      	beq.n	800b0be <_printf_i+0x42>
 800b0ba:	2a69      	cmp	r2, #105	; 0x69
 800b0bc:	d1f6      	bne.n	800b0ac <_printf_i+0x30>
 800b0be:	6821      	ldr	r1, [r4, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b0c6:	d023      	beq.n	800b110 <_printf_i+0x94>
 800b0c8:	1d11      	adds	r1, r2, #4
 800b0ca:	6019      	str	r1, [r3, #0]
 800b0cc:	6813      	ldr	r3, [r2, #0]
 800b0ce:	e027      	b.n	800b120 <_printf_i+0xa4>
 800b0d0:	2a73      	cmp	r2, #115	; 0x73
 800b0d2:	f000 80b4 	beq.w	800b23e <_printf_i+0x1c2>
 800b0d6:	d808      	bhi.n	800b0ea <_printf_i+0x6e>
 800b0d8:	2a6f      	cmp	r2, #111	; 0x6f
 800b0da:	d02a      	beq.n	800b132 <_printf_i+0xb6>
 800b0dc:	2a70      	cmp	r2, #112	; 0x70
 800b0de:	d1e5      	bne.n	800b0ac <_printf_i+0x30>
 800b0e0:	680a      	ldr	r2, [r1, #0]
 800b0e2:	f042 0220 	orr.w	r2, r2, #32
 800b0e6:	600a      	str	r2, [r1, #0]
 800b0e8:	e003      	b.n	800b0f2 <_printf_i+0x76>
 800b0ea:	2a75      	cmp	r2, #117	; 0x75
 800b0ec:	d021      	beq.n	800b132 <_printf_i+0xb6>
 800b0ee:	2a78      	cmp	r2, #120	; 0x78
 800b0f0:	d1dc      	bne.n	800b0ac <_printf_i+0x30>
 800b0f2:	2278      	movs	r2, #120	; 0x78
 800b0f4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800b0f8:	496e      	ldr	r1, [pc, #440]	; (800b2b4 <_printf_i+0x238>)
 800b0fa:	e064      	b.n	800b1c6 <_printf_i+0x14a>
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800b102:	1d11      	adds	r1, r2, #4
 800b104:	6019      	str	r1, [r3, #0]
 800b106:	6813      	ldr	r3, [r2, #0]
 800b108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b10c:	2301      	movs	r3, #1
 800b10e:	e0a3      	b.n	800b258 <_printf_i+0x1dc>
 800b110:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b114:	f102 0104 	add.w	r1, r2, #4
 800b118:	6019      	str	r1, [r3, #0]
 800b11a:	d0d7      	beq.n	800b0cc <_printf_i+0x50>
 800b11c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800b120:	2b00      	cmp	r3, #0
 800b122:	da03      	bge.n	800b12c <_printf_i+0xb0>
 800b124:	222d      	movs	r2, #45	; 0x2d
 800b126:	425b      	negs	r3, r3
 800b128:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b12c:	4962      	ldr	r1, [pc, #392]	; (800b2b8 <_printf_i+0x23c>)
 800b12e:	220a      	movs	r2, #10
 800b130:	e017      	b.n	800b162 <_printf_i+0xe6>
 800b132:	6820      	ldr	r0, [r4, #0]
 800b134:	6819      	ldr	r1, [r3, #0]
 800b136:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b13a:	d003      	beq.n	800b144 <_printf_i+0xc8>
 800b13c:	1d08      	adds	r0, r1, #4
 800b13e:	6018      	str	r0, [r3, #0]
 800b140:	680b      	ldr	r3, [r1, #0]
 800b142:	e006      	b.n	800b152 <_printf_i+0xd6>
 800b144:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b148:	f101 0004 	add.w	r0, r1, #4
 800b14c:	6018      	str	r0, [r3, #0]
 800b14e:	d0f7      	beq.n	800b140 <_printf_i+0xc4>
 800b150:	880b      	ldrh	r3, [r1, #0]
 800b152:	4959      	ldr	r1, [pc, #356]	; (800b2b8 <_printf_i+0x23c>)
 800b154:	2a6f      	cmp	r2, #111	; 0x6f
 800b156:	bf14      	ite	ne
 800b158:	220a      	movne	r2, #10
 800b15a:	2208      	moveq	r2, #8
 800b15c:	2000      	movs	r0, #0
 800b15e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800b162:	6865      	ldr	r5, [r4, #4]
 800b164:	60a5      	str	r5, [r4, #8]
 800b166:	2d00      	cmp	r5, #0
 800b168:	f2c0 809c 	blt.w	800b2a4 <_printf_i+0x228>
 800b16c:	6820      	ldr	r0, [r4, #0]
 800b16e:	f020 0004 	bic.w	r0, r0, #4
 800b172:	6020      	str	r0, [r4, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d13f      	bne.n	800b1f8 <_printf_i+0x17c>
 800b178:	2d00      	cmp	r5, #0
 800b17a:	f040 8095 	bne.w	800b2a8 <_printf_i+0x22c>
 800b17e:	4675      	mov	r5, lr
 800b180:	2a08      	cmp	r2, #8
 800b182:	d10b      	bne.n	800b19c <_printf_i+0x120>
 800b184:	6823      	ldr	r3, [r4, #0]
 800b186:	07da      	lsls	r2, r3, #31
 800b188:	d508      	bpl.n	800b19c <_printf_i+0x120>
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	6862      	ldr	r2, [r4, #4]
 800b18e:	429a      	cmp	r2, r3
 800b190:	bfde      	ittt	le
 800b192:	2330      	movle	r3, #48	; 0x30
 800b194:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b198:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b19c:	ebae 0305 	sub.w	r3, lr, r5
 800b1a0:	6123      	str	r3, [r4, #16]
 800b1a2:	f8cd 8000 	str.w	r8, [sp]
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	aa03      	add	r2, sp, #12
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f7ff feef 	bl	800af90 <_printf_common>
 800b1b2:	3001      	adds	r0, #1
 800b1b4:	d155      	bne.n	800b262 <_printf_i+0x1e6>
 800b1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ba:	b005      	add	sp, #20
 800b1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1c0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800b1c4:	493c      	ldr	r1, [pc, #240]	; (800b2b8 <_printf_i+0x23c>)
 800b1c6:	6822      	ldr	r2, [r4, #0]
 800b1c8:	6818      	ldr	r0, [r3, #0]
 800b1ca:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b1ce:	f100 0504 	add.w	r5, r0, #4
 800b1d2:	601d      	str	r5, [r3, #0]
 800b1d4:	d001      	beq.n	800b1da <_printf_i+0x15e>
 800b1d6:	6803      	ldr	r3, [r0, #0]
 800b1d8:	e002      	b.n	800b1e0 <_printf_i+0x164>
 800b1da:	0655      	lsls	r5, r2, #25
 800b1dc:	d5fb      	bpl.n	800b1d6 <_printf_i+0x15a>
 800b1de:	8803      	ldrh	r3, [r0, #0]
 800b1e0:	07d0      	lsls	r0, r2, #31
 800b1e2:	bf44      	itt	mi
 800b1e4:	f042 0220 	orrmi.w	r2, r2, #32
 800b1e8:	6022      	strmi	r2, [r4, #0]
 800b1ea:	b91b      	cbnz	r3, 800b1f4 <_printf_i+0x178>
 800b1ec:	6822      	ldr	r2, [r4, #0]
 800b1ee:	f022 0220 	bic.w	r2, r2, #32
 800b1f2:	6022      	str	r2, [r4, #0]
 800b1f4:	2210      	movs	r2, #16
 800b1f6:	e7b1      	b.n	800b15c <_printf_i+0xe0>
 800b1f8:	4675      	mov	r5, lr
 800b1fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800b1fe:	fb02 3310 	mls	r3, r2, r0, r3
 800b202:	5ccb      	ldrb	r3, [r1, r3]
 800b204:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b208:	4603      	mov	r3, r0
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d1f5      	bne.n	800b1fa <_printf_i+0x17e>
 800b20e:	e7b7      	b.n	800b180 <_printf_i+0x104>
 800b210:	6808      	ldr	r0, [r1, #0]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	6949      	ldr	r1, [r1, #20]
 800b216:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b21a:	d004      	beq.n	800b226 <_printf_i+0x1aa>
 800b21c:	1d10      	adds	r0, r2, #4
 800b21e:	6018      	str	r0, [r3, #0]
 800b220:	6813      	ldr	r3, [r2, #0]
 800b222:	6019      	str	r1, [r3, #0]
 800b224:	e007      	b.n	800b236 <_printf_i+0x1ba>
 800b226:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b22a:	f102 0004 	add.w	r0, r2, #4
 800b22e:	6018      	str	r0, [r3, #0]
 800b230:	6813      	ldr	r3, [r2, #0]
 800b232:	d0f6      	beq.n	800b222 <_printf_i+0x1a6>
 800b234:	8019      	strh	r1, [r3, #0]
 800b236:	2300      	movs	r3, #0
 800b238:	6123      	str	r3, [r4, #16]
 800b23a:	4675      	mov	r5, lr
 800b23c:	e7b1      	b.n	800b1a2 <_printf_i+0x126>
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	1d11      	adds	r1, r2, #4
 800b242:	6019      	str	r1, [r3, #0]
 800b244:	6815      	ldr	r5, [r2, #0]
 800b246:	6862      	ldr	r2, [r4, #4]
 800b248:	2100      	movs	r1, #0
 800b24a:	4628      	mov	r0, r5
 800b24c:	f7f4 ffd8 	bl	8000200 <memchr>
 800b250:	b108      	cbz	r0, 800b256 <_printf_i+0x1da>
 800b252:	1b40      	subs	r0, r0, r5
 800b254:	6060      	str	r0, [r4, #4]
 800b256:	6863      	ldr	r3, [r4, #4]
 800b258:	6123      	str	r3, [r4, #16]
 800b25a:	2300      	movs	r3, #0
 800b25c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b260:	e79f      	b.n	800b1a2 <_printf_i+0x126>
 800b262:	6923      	ldr	r3, [r4, #16]
 800b264:	462a      	mov	r2, r5
 800b266:	4639      	mov	r1, r7
 800b268:	4630      	mov	r0, r6
 800b26a:	47c0      	blx	r8
 800b26c:	3001      	adds	r0, #1
 800b26e:	d0a2      	beq.n	800b1b6 <_printf_i+0x13a>
 800b270:	6823      	ldr	r3, [r4, #0]
 800b272:	079b      	lsls	r3, r3, #30
 800b274:	d507      	bpl.n	800b286 <_printf_i+0x20a>
 800b276:	2500      	movs	r5, #0
 800b278:	f104 0919 	add.w	r9, r4, #25
 800b27c:	68e3      	ldr	r3, [r4, #12]
 800b27e:	9a03      	ldr	r2, [sp, #12]
 800b280:	1a9b      	subs	r3, r3, r2
 800b282:	429d      	cmp	r5, r3
 800b284:	db05      	blt.n	800b292 <_printf_i+0x216>
 800b286:	68e0      	ldr	r0, [r4, #12]
 800b288:	9b03      	ldr	r3, [sp, #12]
 800b28a:	4298      	cmp	r0, r3
 800b28c:	bfb8      	it	lt
 800b28e:	4618      	movlt	r0, r3
 800b290:	e793      	b.n	800b1ba <_printf_i+0x13e>
 800b292:	2301      	movs	r3, #1
 800b294:	464a      	mov	r2, r9
 800b296:	4639      	mov	r1, r7
 800b298:	4630      	mov	r0, r6
 800b29a:	47c0      	blx	r8
 800b29c:	3001      	adds	r0, #1
 800b29e:	d08a      	beq.n	800b1b6 <_printf_i+0x13a>
 800b2a0:	3501      	adds	r5, #1
 800b2a2:	e7eb      	b.n	800b27c <_printf_i+0x200>
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1a7      	bne.n	800b1f8 <_printf_i+0x17c>
 800b2a8:	780b      	ldrb	r3, [r1, #0]
 800b2aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2b2:	e765      	b.n	800b180 <_printf_i+0x104>
 800b2b4:	0800d680 	.word	0x0800d680
 800b2b8:	0800d66f 	.word	0x0800d66f

0800b2bc <__sread>:
 800b2bc:	b510      	push	{r4, lr}
 800b2be:	460c      	mov	r4, r1
 800b2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2c4:	f000 fa96 	bl	800b7f4 <_read_r>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	bfab      	itete	ge
 800b2cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b2d0:	181b      	addge	r3, r3, r0
 800b2d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2d6:	bfac      	ite	ge
 800b2d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2da:	81a3      	strhlt	r3, [r4, #12]
 800b2dc:	bd10      	pop	{r4, pc}

0800b2de <__swrite>:
 800b2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e2:	461f      	mov	r7, r3
 800b2e4:	898b      	ldrh	r3, [r1, #12]
 800b2e6:	05db      	lsls	r3, r3, #23
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	4616      	mov	r6, r2
 800b2ee:	d505      	bpl.n	800b2fc <__swrite+0x1e>
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2f8:	f000 f9c6 	bl	800b688 <_lseek_r>
 800b2fc:	89a3      	ldrh	r3, [r4, #12]
 800b2fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b306:	81a3      	strh	r3, [r4, #12]
 800b308:	4632      	mov	r2, r6
 800b30a:	463b      	mov	r3, r7
 800b30c:	4628      	mov	r0, r5
 800b30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b312:	f000 b877 	b.w	800b404 <_write_r>

0800b316 <__sseek>:
 800b316:	b510      	push	{r4, lr}
 800b318:	460c      	mov	r4, r1
 800b31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b31e:	f000 f9b3 	bl	800b688 <_lseek_r>
 800b322:	1c43      	adds	r3, r0, #1
 800b324:	89a3      	ldrh	r3, [r4, #12]
 800b326:	bf15      	itete	ne
 800b328:	6560      	strne	r0, [r4, #84]	; 0x54
 800b32a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b32e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b332:	81a3      	strheq	r3, [r4, #12]
 800b334:	bf18      	it	ne
 800b336:	81a3      	strhne	r3, [r4, #12]
 800b338:	bd10      	pop	{r4, pc}

0800b33a <__sclose>:
 800b33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b33e:	f000 b8e1 	b.w	800b504 <_close_r>
	...

0800b344 <__swbuf_r>:
 800b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b346:	460e      	mov	r6, r1
 800b348:	4614      	mov	r4, r2
 800b34a:	4605      	mov	r5, r0
 800b34c:	b118      	cbz	r0, 800b356 <__swbuf_r+0x12>
 800b34e:	6983      	ldr	r3, [r0, #24]
 800b350:	b90b      	cbnz	r3, 800b356 <__swbuf_r+0x12>
 800b352:	f7ff faed 	bl	800a930 <__sinit>
 800b356:	4b21      	ldr	r3, [pc, #132]	; (800b3dc <__swbuf_r+0x98>)
 800b358:	429c      	cmp	r4, r3
 800b35a:	d12a      	bne.n	800b3b2 <__swbuf_r+0x6e>
 800b35c:	686c      	ldr	r4, [r5, #4]
 800b35e:	69a3      	ldr	r3, [r4, #24]
 800b360:	60a3      	str	r3, [r4, #8]
 800b362:	89a3      	ldrh	r3, [r4, #12]
 800b364:	071a      	lsls	r2, r3, #28
 800b366:	d52e      	bpl.n	800b3c6 <__swbuf_r+0x82>
 800b368:	6923      	ldr	r3, [r4, #16]
 800b36a:	b363      	cbz	r3, 800b3c6 <__swbuf_r+0x82>
 800b36c:	6923      	ldr	r3, [r4, #16]
 800b36e:	6820      	ldr	r0, [r4, #0]
 800b370:	1ac0      	subs	r0, r0, r3
 800b372:	6963      	ldr	r3, [r4, #20]
 800b374:	b2f6      	uxtb	r6, r6
 800b376:	4298      	cmp	r0, r3
 800b378:	4637      	mov	r7, r6
 800b37a:	db04      	blt.n	800b386 <__swbuf_r+0x42>
 800b37c:	4621      	mov	r1, r4
 800b37e:	4628      	mov	r0, r5
 800b380:	f000 f958 	bl	800b634 <_fflush_r>
 800b384:	bb28      	cbnz	r0, 800b3d2 <__swbuf_r+0x8e>
 800b386:	68a3      	ldr	r3, [r4, #8]
 800b388:	3b01      	subs	r3, #1
 800b38a:	60a3      	str	r3, [r4, #8]
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	1c5a      	adds	r2, r3, #1
 800b390:	6022      	str	r2, [r4, #0]
 800b392:	701e      	strb	r6, [r3, #0]
 800b394:	6963      	ldr	r3, [r4, #20]
 800b396:	3001      	adds	r0, #1
 800b398:	4298      	cmp	r0, r3
 800b39a:	d004      	beq.n	800b3a6 <__swbuf_r+0x62>
 800b39c:	89a3      	ldrh	r3, [r4, #12]
 800b39e:	07db      	lsls	r3, r3, #31
 800b3a0:	d519      	bpl.n	800b3d6 <__swbuf_r+0x92>
 800b3a2:	2e0a      	cmp	r6, #10
 800b3a4:	d117      	bne.n	800b3d6 <__swbuf_r+0x92>
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f000 f943 	bl	800b634 <_fflush_r>
 800b3ae:	b190      	cbz	r0, 800b3d6 <__swbuf_r+0x92>
 800b3b0:	e00f      	b.n	800b3d2 <__swbuf_r+0x8e>
 800b3b2:	4b0b      	ldr	r3, [pc, #44]	; (800b3e0 <__swbuf_r+0x9c>)
 800b3b4:	429c      	cmp	r4, r3
 800b3b6:	d101      	bne.n	800b3bc <__swbuf_r+0x78>
 800b3b8:	68ac      	ldr	r4, [r5, #8]
 800b3ba:	e7d0      	b.n	800b35e <__swbuf_r+0x1a>
 800b3bc:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <__swbuf_r+0xa0>)
 800b3be:	429c      	cmp	r4, r3
 800b3c0:	bf08      	it	eq
 800b3c2:	68ec      	ldreq	r4, [r5, #12]
 800b3c4:	e7cb      	b.n	800b35e <__swbuf_r+0x1a>
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f000 f82d 	bl	800b428 <__swsetup_r>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d0cc      	beq.n	800b36c <__swbuf_r+0x28>
 800b3d2:	f04f 37ff 	mov.w	r7, #4294967295
 800b3d6:	4638      	mov	r0, r7
 800b3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	0800d614 	.word	0x0800d614
 800b3e0:	0800d634 	.word	0x0800d634
 800b3e4:	0800d5f4 	.word	0x0800d5f4

0800b3e8 <__ascii_wctomb>:
 800b3e8:	b149      	cbz	r1, 800b3fe <__ascii_wctomb+0x16>
 800b3ea:	2aff      	cmp	r2, #255	; 0xff
 800b3ec:	bf85      	ittet	hi
 800b3ee:	238a      	movhi	r3, #138	; 0x8a
 800b3f0:	6003      	strhi	r3, [r0, #0]
 800b3f2:	700a      	strbls	r2, [r1, #0]
 800b3f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b3f8:	bf98      	it	ls
 800b3fa:	2001      	movls	r0, #1
 800b3fc:	4770      	bx	lr
 800b3fe:	4608      	mov	r0, r1
 800b400:	4770      	bx	lr
	...

0800b404 <_write_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	4c07      	ldr	r4, [pc, #28]	; (800b424 <_write_r+0x20>)
 800b408:	4605      	mov	r5, r0
 800b40a:	4608      	mov	r0, r1
 800b40c:	4611      	mov	r1, r2
 800b40e:	2200      	movs	r2, #0
 800b410:	6022      	str	r2, [r4, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	f7fe fe5a 	bl	800a0cc <_write>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d102      	bne.n	800b422 <_write_r+0x1e>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	b103      	cbz	r3, 800b422 <_write_r+0x1e>
 800b420:	602b      	str	r3, [r5, #0]
 800b422:	bd38      	pop	{r3, r4, r5, pc}
 800b424:	200091d8 	.word	0x200091d8

0800b428 <__swsetup_r>:
 800b428:	4b32      	ldr	r3, [pc, #200]	; (800b4f4 <__swsetup_r+0xcc>)
 800b42a:	b570      	push	{r4, r5, r6, lr}
 800b42c:	681d      	ldr	r5, [r3, #0]
 800b42e:	4606      	mov	r6, r0
 800b430:	460c      	mov	r4, r1
 800b432:	b125      	cbz	r5, 800b43e <__swsetup_r+0x16>
 800b434:	69ab      	ldr	r3, [r5, #24]
 800b436:	b913      	cbnz	r3, 800b43e <__swsetup_r+0x16>
 800b438:	4628      	mov	r0, r5
 800b43a:	f7ff fa79 	bl	800a930 <__sinit>
 800b43e:	4b2e      	ldr	r3, [pc, #184]	; (800b4f8 <__swsetup_r+0xd0>)
 800b440:	429c      	cmp	r4, r3
 800b442:	d10f      	bne.n	800b464 <__swsetup_r+0x3c>
 800b444:	686c      	ldr	r4, [r5, #4]
 800b446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	0715      	lsls	r5, r2, #28
 800b44e:	d42c      	bmi.n	800b4aa <__swsetup_r+0x82>
 800b450:	06d0      	lsls	r0, r2, #27
 800b452:	d411      	bmi.n	800b478 <__swsetup_r+0x50>
 800b454:	2209      	movs	r2, #9
 800b456:	6032      	str	r2, [r6, #0]
 800b458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b45c:	81a3      	strh	r3, [r4, #12]
 800b45e:	f04f 30ff 	mov.w	r0, #4294967295
 800b462:	bd70      	pop	{r4, r5, r6, pc}
 800b464:	4b25      	ldr	r3, [pc, #148]	; (800b4fc <__swsetup_r+0xd4>)
 800b466:	429c      	cmp	r4, r3
 800b468:	d101      	bne.n	800b46e <__swsetup_r+0x46>
 800b46a:	68ac      	ldr	r4, [r5, #8]
 800b46c:	e7eb      	b.n	800b446 <__swsetup_r+0x1e>
 800b46e:	4b24      	ldr	r3, [pc, #144]	; (800b500 <__swsetup_r+0xd8>)
 800b470:	429c      	cmp	r4, r3
 800b472:	bf08      	it	eq
 800b474:	68ec      	ldreq	r4, [r5, #12]
 800b476:	e7e6      	b.n	800b446 <__swsetup_r+0x1e>
 800b478:	0751      	lsls	r1, r2, #29
 800b47a:	d512      	bpl.n	800b4a2 <__swsetup_r+0x7a>
 800b47c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b47e:	b141      	cbz	r1, 800b492 <__swsetup_r+0x6a>
 800b480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b484:	4299      	cmp	r1, r3
 800b486:	d002      	beq.n	800b48e <__swsetup_r+0x66>
 800b488:	4630      	mov	r0, r6
 800b48a:	f7ff f847 	bl	800a51c <_free_r>
 800b48e:	2300      	movs	r3, #0
 800b490:	6363      	str	r3, [r4, #52]	; 0x34
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b498:	81a3      	strh	r3, [r4, #12]
 800b49a:	2300      	movs	r3, #0
 800b49c:	6063      	str	r3, [r4, #4]
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f043 0308 	orr.w	r3, r3, #8
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	b94b      	cbnz	r3, 800b4c2 <__swsetup_r+0x9a>
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4b8:	d003      	beq.n	800b4c2 <__swsetup_r+0x9a>
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	4630      	mov	r0, r6
 800b4be:	f000 f919 	bl	800b6f4 <__smakebuf_r>
 800b4c2:	89a2      	ldrh	r2, [r4, #12]
 800b4c4:	f012 0301 	ands.w	r3, r2, #1
 800b4c8:	d00c      	beq.n	800b4e4 <__swsetup_r+0xbc>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60a3      	str	r3, [r4, #8]
 800b4ce:	6963      	ldr	r3, [r4, #20]
 800b4d0:	425b      	negs	r3, r3
 800b4d2:	61a3      	str	r3, [r4, #24]
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	b953      	cbnz	r3, 800b4ee <__swsetup_r+0xc6>
 800b4d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b4e0:	d1ba      	bne.n	800b458 <__swsetup_r+0x30>
 800b4e2:	bd70      	pop	{r4, r5, r6, pc}
 800b4e4:	0792      	lsls	r2, r2, #30
 800b4e6:	bf58      	it	pl
 800b4e8:	6963      	ldrpl	r3, [r4, #20]
 800b4ea:	60a3      	str	r3, [r4, #8]
 800b4ec:	e7f2      	b.n	800b4d4 <__swsetup_r+0xac>
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	e7f7      	b.n	800b4e2 <__swsetup_r+0xba>
 800b4f2:	bf00      	nop
 800b4f4:	20001bac 	.word	0x20001bac
 800b4f8:	0800d614 	.word	0x0800d614
 800b4fc:	0800d634 	.word	0x0800d634
 800b500:	0800d5f4 	.word	0x0800d5f4

0800b504 <_close_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4c06      	ldr	r4, [pc, #24]	; (800b520 <_close_r+0x1c>)
 800b508:	2300      	movs	r3, #0
 800b50a:	4605      	mov	r5, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	6023      	str	r3, [r4, #0]
 800b510:	f7fe fe04 	bl	800a11c <_close>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_close_r+0x1a>
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_close_r+0x1a>
 800b51c:	602b      	str	r3, [r5, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	200091d8 	.word	0x200091d8

0800b524 <__sflush_r>:
 800b524:	898a      	ldrh	r2, [r1, #12]
 800b526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b52a:	4605      	mov	r5, r0
 800b52c:	0710      	lsls	r0, r2, #28
 800b52e:	460c      	mov	r4, r1
 800b530:	d45a      	bmi.n	800b5e8 <__sflush_r+0xc4>
 800b532:	684b      	ldr	r3, [r1, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	dc05      	bgt.n	800b544 <__sflush_r+0x20>
 800b538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	dc02      	bgt.n	800b544 <__sflush_r+0x20>
 800b53e:	2000      	movs	r0, #0
 800b540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b546:	2e00      	cmp	r6, #0
 800b548:	d0f9      	beq.n	800b53e <__sflush_r+0x1a>
 800b54a:	2300      	movs	r3, #0
 800b54c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b550:	682f      	ldr	r7, [r5, #0]
 800b552:	602b      	str	r3, [r5, #0]
 800b554:	d033      	beq.n	800b5be <__sflush_r+0x9a>
 800b556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b558:	89a3      	ldrh	r3, [r4, #12]
 800b55a:	075a      	lsls	r2, r3, #29
 800b55c:	d505      	bpl.n	800b56a <__sflush_r+0x46>
 800b55e:	6863      	ldr	r3, [r4, #4]
 800b560:	1ac0      	subs	r0, r0, r3
 800b562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b564:	b10b      	cbz	r3, 800b56a <__sflush_r+0x46>
 800b566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b568:	1ac0      	subs	r0, r0, r3
 800b56a:	2300      	movs	r3, #0
 800b56c:	4602      	mov	r2, r0
 800b56e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b570:	6a21      	ldr	r1, [r4, #32]
 800b572:	4628      	mov	r0, r5
 800b574:	47b0      	blx	r6
 800b576:	1c43      	adds	r3, r0, #1
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	d106      	bne.n	800b58a <__sflush_r+0x66>
 800b57c:	6829      	ldr	r1, [r5, #0]
 800b57e:	291d      	cmp	r1, #29
 800b580:	d84b      	bhi.n	800b61a <__sflush_r+0xf6>
 800b582:	4a2b      	ldr	r2, [pc, #172]	; (800b630 <__sflush_r+0x10c>)
 800b584:	40ca      	lsrs	r2, r1
 800b586:	07d6      	lsls	r6, r2, #31
 800b588:	d547      	bpl.n	800b61a <__sflush_r+0xf6>
 800b58a:	2200      	movs	r2, #0
 800b58c:	6062      	str	r2, [r4, #4]
 800b58e:	04d9      	lsls	r1, r3, #19
 800b590:	6922      	ldr	r2, [r4, #16]
 800b592:	6022      	str	r2, [r4, #0]
 800b594:	d504      	bpl.n	800b5a0 <__sflush_r+0x7c>
 800b596:	1c42      	adds	r2, r0, #1
 800b598:	d101      	bne.n	800b59e <__sflush_r+0x7a>
 800b59a:	682b      	ldr	r3, [r5, #0]
 800b59c:	b903      	cbnz	r3, 800b5a0 <__sflush_r+0x7c>
 800b59e:	6560      	str	r0, [r4, #84]	; 0x54
 800b5a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5a2:	602f      	str	r7, [r5, #0]
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	d0ca      	beq.n	800b53e <__sflush_r+0x1a>
 800b5a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5ac:	4299      	cmp	r1, r3
 800b5ae:	d002      	beq.n	800b5b6 <__sflush_r+0x92>
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	f7fe ffb3 	bl	800a51c <_free_r>
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	6360      	str	r0, [r4, #52]	; 0x34
 800b5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5be:	6a21      	ldr	r1, [r4, #32]
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	47b0      	blx	r6
 800b5c6:	1c41      	adds	r1, r0, #1
 800b5c8:	d1c6      	bne.n	800b558 <__sflush_r+0x34>
 800b5ca:	682b      	ldr	r3, [r5, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d0c3      	beq.n	800b558 <__sflush_r+0x34>
 800b5d0:	2b1d      	cmp	r3, #29
 800b5d2:	d001      	beq.n	800b5d8 <__sflush_r+0xb4>
 800b5d4:	2b16      	cmp	r3, #22
 800b5d6:	d101      	bne.n	800b5dc <__sflush_r+0xb8>
 800b5d8:	602f      	str	r7, [r5, #0]
 800b5da:	e7b0      	b.n	800b53e <__sflush_r+0x1a>
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e2:	81a3      	strh	r3, [r4, #12]
 800b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e8:	690f      	ldr	r7, [r1, #16]
 800b5ea:	2f00      	cmp	r7, #0
 800b5ec:	d0a7      	beq.n	800b53e <__sflush_r+0x1a>
 800b5ee:	0793      	lsls	r3, r2, #30
 800b5f0:	680e      	ldr	r6, [r1, #0]
 800b5f2:	bf08      	it	eq
 800b5f4:	694b      	ldreq	r3, [r1, #20]
 800b5f6:	600f      	str	r7, [r1, #0]
 800b5f8:	bf18      	it	ne
 800b5fa:	2300      	movne	r3, #0
 800b5fc:	eba6 0807 	sub.w	r8, r6, r7
 800b600:	608b      	str	r3, [r1, #8]
 800b602:	f1b8 0f00 	cmp.w	r8, #0
 800b606:	dd9a      	ble.n	800b53e <__sflush_r+0x1a>
 800b608:	4643      	mov	r3, r8
 800b60a:	463a      	mov	r2, r7
 800b60c:	6a21      	ldr	r1, [r4, #32]
 800b60e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b610:	4628      	mov	r0, r5
 800b612:	47b0      	blx	r6
 800b614:	2800      	cmp	r0, #0
 800b616:	dc07      	bgt.n	800b628 <__sflush_r+0x104>
 800b618:	89a3      	ldrh	r3, [r4, #12]
 800b61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	f04f 30ff 	mov.w	r0, #4294967295
 800b624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b628:	4407      	add	r7, r0
 800b62a:	eba8 0800 	sub.w	r8, r8, r0
 800b62e:	e7e8      	b.n	800b602 <__sflush_r+0xde>
 800b630:	20400001 	.word	0x20400001

0800b634 <_fflush_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	690b      	ldr	r3, [r1, #16]
 800b638:	4605      	mov	r5, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	b1db      	cbz	r3, 800b676 <_fflush_r+0x42>
 800b63e:	b118      	cbz	r0, 800b648 <_fflush_r+0x14>
 800b640:	6983      	ldr	r3, [r0, #24]
 800b642:	b90b      	cbnz	r3, 800b648 <_fflush_r+0x14>
 800b644:	f7ff f974 	bl	800a930 <__sinit>
 800b648:	4b0c      	ldr	r3, [pc, #48]	; (800b67c <_fflush_r+0x48>)
 800b64a:	429c      	cmp	r4, r3
 800b64c:	d109      	bne.n	800b662 <_fflush_r+0x2e>
 800b64e:	686c      	ldr	r4, [r5, #4]
 800b650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b654:	b17b      	cbz	r3, 800b676 <_fflush_r+0x42>
 800b656:	4621      	mov	r1, r4
 800b658:	4628      	mov	r0, r5
 800b65a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b65e:	f7ff bf61 	b.w	800b524 <__sflush_r>
 800b662:	4b07      	ldr	r3, [pc, #28]	; (800b680 <_fflush_r+0x4c>)
 800b664:	429c      	cmp	r4, r3
 800b666:	d101      	bne.n	800b66c <_fflush_r+0x38>
 800b668:	68ac      	ldr	r4, [r5, #8]
 800b66a:	e7f1      	b.n	800b650 <_fflush_r+0x1c>
 800b66c:	4b05      	ldr	r3, [pc, #20]	; (800b684 <_fflush_r+0x50>)
 800b66e:	429c      	cmp	r4, r3
 800b670:	bf08      	it	eq
 800b672:	68ec      	ldreq	r4, [r5, #12]
 800b674:	e7ec      	b.n	800b650 <_fflush_r+0x1c>
 800b676:	2000      	movs	r0, #0
 800b678:	bd38      	pop	{r3, r4, r5, pc}
 800b67a:	bf00      	nop
 800b67c:	0800d614 	.word	0x0800d614
 800b680:	0800d634 	.word	0x0800d634
 800b684:	0800d5f4 	.word	0x0800d5f4

0800b688 <_lseek_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	4c07      	ldr	r4, [pc, #28]	; (800b6a8 <_lseek_r+0x20>)
 800b68c:	4605      	mov	r5, r0
 800b68e:	4608      	mov	r0, r1
 800b690:	4611      	mov	r1, r2
 800b692:	2200      	movs	r2, #0
 800b694:	6022      	str	r2, [r4, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	f7fe fd4a 	bl	800a130 <_lseek>
 800b69c:	1c43      	adds	r3, r0, #1
 800b69e:	d102      	bne.n	800b6a6 <_lseek_r+0x1e>
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	b103      	cbz	r3, 800b6a6 <_lseek_r+0x1e>
 800b6a4:	602b      	str	r3, [r5, #0]
 800b6a6:	bd38      	pop	{r3, r4, r5, pc}
 800b6a8:	200091d8 	.word	0x200091d8

0800b6ac <__swhatbuf_r>:
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	460e      	mov	r6, r1
 800b6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b4:	2900      	cmp	r1, #0
 800b6b6:	b090      	sub	sp, #64	; 0x40
 800b6b8:	4614      	mov	r4, r2
 800b6ba:	461d      	mov	r5, r3
 800b6bc:	da07      	bge.n	800b6ce <__swhatbuf_r+0x22>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	602b      	str	r3, [r5, #0]
 800b6c2:	89b3      	ldrh	r3, [r6, #12]
 800b6c4:	061a      	lsls	r2, r3, #24
 800b6c6:	d410      	bmi.n	800b6ea <__swhatbuf_r+0x3e>
 800b6c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6cc:	e00e      	b.n	800b6ec <__swhatbuf_r+0x40>
 800b6ce:	aa01      	add	r2, sp, #4
 800b6d0:	f000 f8a2 	bl	800b818 <_fstat_r>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	dbf2      	blt.n	800b6be <__swhatbuf_r+0x12>
 800b6d8:	9a02      	ldr	r2, [sp, #8]
 800b6da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6e2:	425a      	negs	r2, r3
 800b6e4:	415a      	adcs	r2, r3
 800b6e6:	602a      	str	r2, [r5, #0]
 800b6e8:	e7ee      	b.n	800b6c8 <__swhatbuf_r+0x1c>
 800b6ea:	2340      	movs	r3, #64	; 0x40
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	6023      	str	r3, [r4, #0]
 800b6f0:	b010      	add	sp, #64	; 0x40
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}

0800b6f4 <__smakebuf_r>:
 800b6f4:	898b      	ldrh	r3, [r1, #12]
 800b6f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6f8:	079d      	lsls	r5, r3, #30
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	d507      	bpl.n	800b710 <__smakebuf_r+0x1c>
 800b700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	6123      	str	r3, [r4, #16]
 800b708:	2301      	movs	r3, #1
 800b70a:	6163      	str	r3, [r4, #20]
 800b70c:	b002      	add	sp, #8
 800b70e:	bd70      	pop	{r4, r5, r6, pc}
 800b710:	ab01      	add	r3, sp, #4
 800b712:	466a      	mov	r2, sp
 800b714:	f7ff ffca 	bl	800b6ac <__swhatbuf_r>
 800b718:	9900      	ldr	r1, [sp, #0]
 800b71a:	4605      	mov	r5, r0
 800b71c:	4630      	mov	r0, r6
 800b71e:	f7fe ff4b 	bl	800a5b8 <_malloc_r>
 800b722:	b948      	cbnz	r0, 800b738 <__smakebuf_r+0x44>
 800b724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b728:	059a      	lsls	r2, r3, #22
 800b72a:	d4ef      	bmi.n	800b70c <__smakebuf_r+0x18>
 800b72c:	f023 0303 	bic.w	r3, r3, #3
 800b730:	f043 0302 	orr.w	r3, r3, #2
 800b734:	81a3      	strh	r3, [r4, #12]
 800b736:	e7e3      	b.n	800b700 <__smakebuf_r+0xc>
 800b738:	4b0d      	ldr	r3, [pc, #52]	; (800b770 <__smakebuf_r+0x7c>)
 800b73a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	6020      	str	r0, [r4, #0]
 800b740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b744:	81a3      	strh	r3, [r4, #12]
 800b746:	9b00      	ldr	r3, [sp, #0]
 800b748:	6163      	str	r3, [r4, #20]
 800b74a:	9b01      	ldr	r3, [sp, #4]
 800b74c:	6120      	str	r0, [r4, #16]
 800b74e:	b15b      	cbz	r3, 800b768 <__smakebuf_r+0x74>
 800b750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b754:	4630      	mov	r0, r6
 800b756:	f000 f871 	bl	800b83c <_isatty_r>
 800b75a:	b128      	cbz	r0, 800b768 <__smakebuf_r+0x74>
 800b75c:	89a3      	ldrh	r3, [r4, #12]
 800b75e:	f023 0303 	bic.w	r3, r3, #3
 800b762:	f043 0301 	orr.w	r3, r3, #1
 800b766:	81a3      	strh	r3, [r4, #12]
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	431d      	orrs	r5, r3
 800b76c:	81a5      	strh	r5, [r4, #12]
 800b76e:	e7cd      	b.n	800b70c <__smakebuf_r+0x18>
 800b770:	0800a8b1 	.word	0x0800a8b1

0800b774 <memmove>:
 800b774:	4288      	cmp	r0, r1
 800b776:	b510      	push	{r4, lr}
 800b778:	eb01 0302 	add.w	r3, r1, r2
 800b77c:	d803      	bhi.n	800b786 <memmove+0x12>
 800b77e:	1e42      	subs	r2, r0, #1
 800b780:	4299      	cmp	r1, r3
 800b782:	d10c      	bne.n	800b79e <memmove+0x2a>
 800b784:	bd10      	pop	{r4, pc}
 800b786:	4298      	cmp	r0, r3
 800b788:	d2f9      	bcs.n	800b77e <memmove+0xa>
 800b78a:	1881      	adds	r1, r0, r2
 800b78c:	1ad2      	subs	r2, r2, r3
 800b78e:	42d3      	cmn	r3, r2
 800b790:	d100      	bne.n	800b794 <memmove+0x20>
 800b792:	bd10      	pop	{r4, pc}
 800b794:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b798:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b79c:	e7f7      	b.n	800b78e <memmove+0x1a>
 800b79e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b7a6:	e7eb      	b.n	800b780 <memmove+0xc>

0800b7a8 <_realloc_r>:
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	4607      	mov	r7, r0
 800b7ac:	4614      	mov	r4, r2
 800b7ae:	460e      	mov	r6, r1
 800b7b0:	b921      	cbnz	r1, 800b7bc <_realloc_r+0x14>
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7b8:	f7fe befe 	b.w	800a5b8 <_malloc_r>
 800b7bc:	b922      	cbnz	r2, 800b7c8 <_realloc_r+0x20>
 800b7be:	f7fe fead 	bl	800a51c <_free_r>
 800b7c2:	4625      	mov	r5, r4
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c8:	f000 f848 	bl	800b85c <_malloc_usable_size_r>
 800b7cc:	4284      	cmp	r4, r0
 800b7ce:	d90f      	bls.n	800b7f0 <_realloc_r+0x48>
 800b7d0:	4621      	mov	r1, r4
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f7fe fef0 	bl	800a5b8 <_malloc_r>
 800b7d8:	4605      	mov	r5, r0
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d0f2      	beq.n	800b7c4 <_realloc_r+0x1c>
 800b7de:	4631      	mov	r1, r6
 800b7e0:	4622      	mov	r2, r4
 800b7e2:	f7fe fe88 	bl	800a4f6 <memcpy>
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	4638      	mov	r0, r7
 800b7ea:	f7fe fe97 	bl	800a51c <_free_r>
 800b7ee:	e7e9      	b.n	800b7c4 <_realloc_r+0x1c>
 800b7f0:	4635      	mov	r5, r6
 800b7f2:	e7e7      	b.n	800b7c4 <_realloc_r+0x1c>

0800b7f4 <_read_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4c07      	ldr	r4, [pc, #28]	; (800b814 <_read_r+0x20>)
 800b7f8:	4605      	mov	r5, r0
 800b7fa:	4608      	mov	r0, r1
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	2200      	movs	r2, #0
 800b800:	6022      	str	r2, [r4, #0]
 800b802:	461a      	mov	r2, r3
 800b804:	f7fe fc54 	bl	800a0b0 <_read>
 800b808:	1c43      	adds	r3, r0, #1
 800b80a:	d102      	bne.n	800b812 <_read_r+0x1e>
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	b103      	cbz	r3, 800b812 <_read_r+0x1e>
 800b810:	602b      	str	r3, [r5, #0]
 800b812:	bd38      	pop	{r3, r4, r5, pc}
 800b814:	200091d8 	.word	0x200091d8

0800b818 <_fstat_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4c07      	ldr	r4, [pc, #28]	; (800b838 <_fstat_r+0x20>)
 800b81c:	2300      	movs	r3, #0
 800b81e:	4605      	mov	r5, r0
 800b820:	4608      	mov	r0, r1
 800b822:	4611      	mov	r1, r2
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	f7fe fc7c 	bl	800a122 <_fstat>
 800b82a:	1c43      	adds	r3, r0, #1
 800b82c:	d102      	bne.n	800b834 <_fstat_r+0x1c>
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	b103      	cbz	r3, 800b834 <_fstat_r+0x1c>
 800b832:	602b      	str	r3, [r5, #0]
 800b834:	bd38      	pop	{r3, r4, r5, pc}
 800b836:	bf00      	nop
 800b838:	200091d8 	.word	0x200091d8

0800b83c <_isatty_r>:
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	4c06      	ldr	r4, [pc, #24]	; (800b858 <_isatty_r+0x1c>)
 800b840:	2300      	movs	r3, #0
 800b842:	4605      	mov	r5, r0
 800b844:	4608      	mov	r0, r1
 800b846:	6023      	str	r3, [r4, #0]
 800b848:	f7fe fc70 	bl	800a12c <_isatty>
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d102      	bne.n	800b856 <_isatty_r+0x1a>
 800b850:	6823      	ldr	r3, [r4, #0]
 800b852:	b103      	cbz	r3, 800b856 <_isatty_r+0x1a>
 800b854:	602b      	str	r3, [r5, #0]
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	200091d8 	.word	0x200091d8

0800b85c <_malloc_usable_size_r>:
 800b85c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800b860:	2800      	cmp	r0, #0
 800b862:	f1a0 0004 	sub.w	r0, r0, #4
 800b866:	bfbc      	itt	lt
 800b868:	580b      	ldrlt	r3, [r1, r0]
 800b86a:	18c0      	addlt	r0, r0, r3
 800b86c:	4770      	bx	lr
	...

0800b870 <_init>:
 800b870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b872:	bf00      	nop
 800b874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b876:	bc08      	pop	{r3}
 800b878:	469e      	mov	lr, r3
 800b87a:	4770      	bx	lr

0800b87c <_fini>:
 800b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87e:	bf00      	nop
 800b880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b882:	bc08      	pop	{r3}
 800b884:	469e      	mov	lr, r3
 800b886:	4770      	bx	lr
