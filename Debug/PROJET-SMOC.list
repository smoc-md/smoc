
PROJET-SMOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b314  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e74  0800b4a4  0800b4a4  0001b4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d318  0800d318  0001d318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d320  0800d320  0001d320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d324  0800d324  0001d324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001c10  20000000  0800d328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00021c10  2**0
                  CONTENTS
  8 .bss          00007390  20001c10  20001c10  00021c10  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20008fa0  20008fa0  00021c10  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00021c10  2**0
                  CONTENTS, READONLY
 11 .debug_info   00043292  00000000  00000000  00021c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008a3a  00000000  00000000  00064ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00015729  00000000  00000000  0006d90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  00083038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002188  00000000  00000000  00084668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001198a  00000000  00000000  000867f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008947  00000000  00000000  0009817a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000a0ac1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000047c8  00000000  00000000  000a0b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001c10 	.word	0x20001c10
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b48c 	.word	0x0800b48c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001c14 	.word	0x20001c14
 80001cc:	0800b48c 	.word	0x0800b48c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_InitTick+0x3c>)
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_InitTick+0x40>)
{
 80005b6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b8:	7818      	ldrb	r0, [r3, #0]
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	fbb3 f3f0 	udiv	r3, r3, r0
 80005c2:	6810      	ldr	r0, [r2, #0]
 80005c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005c8:	f000 f8aa 	bl	8000720 <HAL_SYSTICK_Config>
 80005cc:	4604      	mov	r4, r0
 80005ce:	b958      	cbnz	r0, 80005e8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d0:	2d0f      	cmp	r5, #15
 80005d2:	d809      	bhi.n	80005e8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d4:	4602      	mov	r2, r0
 80005d6:	4629      	mov	r1, r5
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295
 80005dc:	f000 f85e 	bl	800069c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <HAL_InitTick+0x44>)
 80005e2:	4620      	mov	r0, r4
 80005e4:	601d      	str	r5, [r3, #0]
 80005e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005e8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20001ba8 	.word	0x20001ba8
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000004 	.word	0x20000004

080005f8 <HAL_Init>:
{
 80005f8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <HAL_Init+0x30>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000602:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800060a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000612:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f82f 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff ffc8 	bl	80005b0 <HAL_InitTick>
  HAL_MspInit();
 8000620:	f009 fd1e 	bl	800a060 <HAL_MspInit>
}
 8000624:	2000      	movs	r0, #0
 8000626:	bd08      	pop	{r3, pc}
 8000628:	40023c00 	.word	0x40023c00

0800062c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <HAL_IncTick+0x10>)
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <HAL_IncTick+0x14>)
 8000630:	6811      	ldr	r1, [r2, #0]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	440b      	add	r3, r1
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	200021f8 	.word	0x200021f8
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <HAL_GetTick+0x8>)
 8000646:	6818      	ldr	r0, [r3, #0]
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200021f8 	.word	0x200021f8

08000650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000650:	b538      	push	{r3, r4, r5, lr}
 8000652:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000654:	f7ff fff6 	bl	8000644 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000658:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800065a:	bf1c      	itt	ne
 800065c:	4b05      	ldrne	r3, [pc, #20]	; (8000674 <HAL_Delay+0x24>)
 800065e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000660:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000662:	bf18      	it	ne
 8000664:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000666:	f7ff ffed 	bl	8000644 <HAL_GetTick>
 800066a:	1b40      	subs	r0, r0, r5
 800066c:	4284      	cmp	r4, r0
 800066e:	d8fa      	bhi.n	8000666 <HAL_Delay+0x16>
  {
  }
}
 8000670:	bd38      	pop	{r3, r4, r5, pc}
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800067a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000680:	041b      	lsls	r3, r3, #16
 8000682:	0c1b      	lsrs	r3, r3, #16
 8000684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	0200      	lsls	r0, r0, #8
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000692:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000694:	60d3      	str	r3, [r2, #12]
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	68dc      	ldr	r4, [r3, #12]
 80006a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	bf28      	it	cs
 80006b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 0501 	mov.w	r5, #1
 80006b8:	fa05 f303 	lsl.w	r3, r5, r3
 80006bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c0:	bf8c      	ite	hi
 80006c2:	3c03      	subhi	r4, #3
 80006c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c6:	4019      	ands	r1, r3
 80006c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ca:	fa05 f404 	lsl.w	r4, r5, r4
 80006ce:	3c01      	subs	r4, #1
 80006d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	ea42 0201 	orr.w	r2, r2, r1
 80006d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	bfad      	iteet	ge
 80006de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	f000 000f 	andlt.w	r0, r0, #15
 80006e6:	4b06      	ldrlt	r3, [pc, #24]	; (8000700 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	bfb5      	itete	lt
 80006ee:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	e000ed14 	.word	0xe000ed14

08000704 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000704:	2800      	cmp	r0, #0
 8000706:	db08      	blt.n	800071a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000708:	0942      	lsrs	r2, r0, #5
 800070a:	2301      	movs	r3, #1
 800070c:	f000 001f 	and.w	r0, r0, #31
 8000710:	fa03 f000 	lsl.w	r0, r3, r0
 8000714:	4b01      	ldr	r3, [pc, #4]	; (800071c <HAL_NVIC_EnableIRQ+0x18>)
 8000716:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100

08000720 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	3801      	subs	r0, #1
 8000722:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000726:	d20a      	bcs.n	800073e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	21f0      	movs	r1, #240	; 0xf0
 8000730:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e010 	.word	0xe000e010
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 800074c:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <ETH_Delay.constprop.4+0x20>)
 8000750:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	fbb3 f3f2 	udiv	r3, r3, r2
 800075a:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 800075c:	bf00      	nop
  } 
  while (Delay --);
 800075e:	9b01      	ldr	r3, [sp, #4]
 8000760:	1e5a      	subs	r2, r3, #1
 8000762:	9201      	str	r2, [sp, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f9      	bne.n	800075c <ETH_Delay.constprop.4+0x10>
}
 8000768:	b002      	add	sp, #8
 800076a:	4770      	bx	lr
 800076c:	20001ba8 	.word	0x20001ba8

08000770 <ETH_FlushTransmitFIFO>:
{
 8000770:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 8000772:	2300      	movs	r3, #0
 8000774:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000776:	f241 0118 	movw	r1, #4120	; 0x1018
 800077a:	6803      	ldr	r3, [r0, #0]
 800077c:	585a      	ldr	r2, [r3, r1]
 800077e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000782:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000784:	585b      	ldr	r3, [r3, r1]
 8000786:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000788:	f7ff ffe0 	bl	800074c <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 800078c:	9a01      	ldr	r2, [sp, #4]
 800078e:	6803      	ldr	r3, [r0, #0]
 8000790:	505a      	str	r2, [r3, r1]
}
 8000792:	b003      	add	sp, #12
 8000794:	f85d fb04 	ldr.w	pc, [sp], #4

08000798 <ETH_MACDMAConfig>:
{
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800079c:	b129      	cbz	r1, 80007aa <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800079e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007a2:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 80007a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007a8:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80007aa:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 80007ac:	6822      	ldr	r2, [r4, #0]
                       macinit.LoopbackMode |
 80007ae:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 80007b0:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80007b2:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 80007b4:	68a3      	ldr	r3, [r4, #8]
 80007b6:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80007ba:	4830      	ldr	r0, [pc, #192]	; (800087c <ETH_MACDMAConfig+0xe4>)
 80007bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c0:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80007c4:	bf0c      	ite	eq
 80007c6:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80007ca:	2100      	movne	r1, #0
 80007cc:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80007ce:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80007d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d2:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 80007d4:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d6:	f7ff ff3b 	bl	8000650 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80007da:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007dc:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 80007de:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e0:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007e2:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 80007e4:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e6:	f7ff ff33 	bl	8000650 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80007ea:	6823      	ldr	r3, [r4, #0]
 80007ec:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80007ee:	2500      	movs	r5, #0
 80007f0:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80007f2:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 80007f4:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80007f6:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80007fa:	0412      	lsls	r2, r2, #16
 80007fc:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80007fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000802:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000804:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 8000806:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000808:	f7ff ff22 	bl	8000650 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800080c:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800080e:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 8000810:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000812:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8000814:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000816:	f7ff ff1b 	bl	8000650 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800081a:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 800081e:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000820:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000824:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000826:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000828:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800082a:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800082e:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000832:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000834:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000836:	f7ff ff0b 	bl	8000650 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800083a:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800083c:	4a11      	ldr	r2, [pc, #68]	; (8000884 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 800083e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000844:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000846:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8000848:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800084a:	f7ff ff01 	bl	8000650 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800084e:	6822      	ldr	r2, [r4, #0]
 8000850:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000854:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000856:	69a3      	ldr	r3, [r4, #24]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d107      	bne.n	800086c <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800085c:	f241 011c 	movw	r1, #4124	; 0x101c
 8000860:	5853      	ldr	r3, [r2, r1]
 8000862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086a:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800086c:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800086e:	4a06      	ldr	r2, [pc, #24]	; (8000888 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000870:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000872:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000874:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ETH_MACDMAConfig+0xf4>)
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	ff20810f 	.word	0xff20810f
 8000880:	f8de3f23 	.word	0xf8de3f23
 8000884:	02c12080 	.word	0x02c12080
 8000888:	40028040 	.word	0x40028040
 800088c:	40028044 	.word	0x40028044

08000890 <HAL_ETH_DMATxDescListInit>:
{
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000892:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000896:	2c01      	cmp	r4, #1
 8000898:	f04f 0402 	mov.w	r4, #2
 800089c:	d033      	beq.n	8000906 <HAL_ETH_DMATxDescListInit+0x76>
 800089e:	2501      	movs	r5, #1
 80008a0:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80008a4:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 80008a8:	62c1      	str	r1, [r0, #44]	; 0x2c
 80008aa:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < TxBuffCount; i++)
 80008ae:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008b0:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008b4:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 80008b8:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 80008bc:	429d      	cmp	r5, r3
 80008be:	d10b      	bne.n	80008d8 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80008c0:	6802      	ldr	r2, [r0, #0]
 80008c2:	f241 0310 	movw	r3, #4112	; 0x1010
 80008c6:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008c8:	2301      	movs	r3, #1
 80008ca:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008ce:	2300      	movs	r3, #0
 80008d0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008d4:	4618      	mov	r0, r3
 80008d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008d8:	fb0e 2605 	mla	r6, lr, r5, r2
 80008dc:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008e0:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008e2:	f844 7c20 	str.w	r7, [r4, #-32]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008e6:	b92e      	cbnz	r6, 80008f4 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80008e8:	f854 6c20 	ldr.w	r6, [r4, #-32]
 80008ec:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80008f0:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80008f4:	4565      	cmp	r5, ip
 80008f6:	bf2c      	ite	cs
 80008f8:	460e      	movcs	r6, r1
 80008fa:	4626      	movcc	r6, r4
 80008fc:	f844 6c14 	str.w	r6, [r4, #-20]
  for(i=0U; i < TxBuffCount; i++)
 8000900:	3501      	adds	r5, #1
 8000902:	3420      	adds	r4, #32
 8000904:	e7da      	b.n	80008bc <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8000906:	4620      	mov	r0, r4
}
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800090a <HAL_ETH_DMARxDescListInit>:
{
 800090a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 800090e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000912:	2c01      	cmp	r4, #1
 8000914:	f04f 0402 	mov.w	r4, #2
 8000918:	d030      	beq.n	800097c <HAL_ETH_DMARxDescListInit+0x72>
 800091a:	2501      	movs	r5, #1
 800091c:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000920:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8000924:	6281      	str	r1, [r0, #40]	; 0x28
 8000926:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < RxBuffCount; i++)
 800092a:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800092c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000930:	f244 57f4 	movw	r7, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000934:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 8000938:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 800093c:	429d      	cmp	r5, r3
 800093e:	d10c      	bne.n	800095a <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000940:	6802      	ldr	r2, [r0, #0]
 8000942:	f241 030c 	movw	r3, #4108	; 0x100c
 8000946:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000948:	2301      	movs	r3, #1
 800094a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800094e:	2300      	movs	r3, #0
 8000950:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000954:	4618      	mov	r0, r3
 8000956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800095a:	fb0e 2805 	mla	r8, lr, r5, r2
 800095e:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000962:	4565      	cmp	r5, ip
 8000964:	bf2c      	ite	cs
 8000966:	4688      	movcs	r8, r1
 8000968:	46a0      	movcc	r8, r4
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800096a:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800096e:	f844 7c1c 	str.w	r7, [r4, #-28]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000972:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0U; i < RxBuffCount; i++)
 8000976:	3501      	adds	r5, #1
 8000978:	3420      	adds	r4, #32
 800097a:	e7df      	b.n	800093c <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 800097c:	4620      	mov	r0, r4
}
 800097e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000984 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000984:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000988:	2b01      	cmp	r3, #1
{
 800098a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000990:	d068      	beq.n	8000a64 <HAL_ETH_TransmitFrame+0xe0>
 8000992:	2201      	movs	r2, #1
 8000994:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000998:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 800099c:	b929      	cbnz	r1, 80009aa <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 800099e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80009a2:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 80009a6:	4610      	mov	r0, r2
 80009a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80009aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009ac:	681c      	ldr	r4, [r3, #0]
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	da06      	bge.n	80009c0 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80009b2:	2312      	movs	r3, #18
 80009b4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80009b8:	2300      	movs	r3, #0
 80009ba:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80009be:	e7f2      	b.n	80009a6 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 80009c0:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80009c4:	42a1      	cmp	r1, r4
 80009c6:	d92e      	bls.n	8000a26 <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80009c8:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80009cc:	fb04 1412 	mls	r4, r4, r2, r1
 80009d0:	b33c      	cbz	r4, 8000a22 <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 80009d2:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80009d4:	4c24      	ldr	r4, [pc, #144]	; (8000a68 <HAL_ETH_TransmitFrame+0xe4>)
 80009d6:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 80009da:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80009de:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80009e2:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009e4:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 80009e8:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80009ea:	681d      	ldr	r5, [r3, #0]
 80009ec:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 80009f0:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 80009f2:	b91c      	cbnz	r4, 80009fc <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80009f4:	681d      	ldr	r5, [r3, #0]
 80009f6:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80009fa:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 80009fc:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009fe:	bf08      	it	eq
 8000a00:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a02:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a04:	bf04      	itt	eq
 8000a06:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 8000a0a:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a0c:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a0e:	bf08      	it	eq
 8000a10:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 8000a12:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a14:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 8000a18:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a1a:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a1c:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 8000a1e:	d1e4      	bne.n	80009ea <HAL_ETH_TransmitFrame+0x66>
 8000a20:	e00d      	b.n	8000a3e <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 8000a22:	2a01      	cmp	r2, #1
 8000a24:	d1d6      	bne.n	80009d4 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000a2c:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a2e:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a30:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a38:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a3a:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000a40:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a44:	6803      	ldr	r3, [r0, #0]
 8000a46:	5899      	ldr	r1, [r3, r2]
 8000a48:	0749      	lsls	r1, r1, #29
 8000a4a:	d505      	bpl.n	8000a58 <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8000a50:	f241 0204 	movw	r2, #4100	; 0x1004
 8000a54:	2100      	movs	r1, #0
 8000a56:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000a64:	4618      	mov	r0, r3
}
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a68:	fffffa0c 	.word	0xfffffa0c

08000a6c <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8000a6c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a70:	2b01      	cmp	r3, #1
{
 8000a72:	b530      	push	{r4, r5, lr}
 8000a74:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000a78:	d023      	beq.n	8000ac2 <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 8000a7a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a80:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000a82:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a84:	2a00      	cmp	r2, #0
  __HAL_LOCK(heth);
 8000a86:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a8a:	db27      	blt.n	8000adc <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	68d9      	ldr	r1, [r3, #12]
 8000a90:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a94:	d017      	beq.n	8000ac6 <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 8000a96:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000a98:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 8000a9a:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1U)
 8000a9c:	42a2      	cmp	r2, r4
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8000a9e:	bf08      	it	eq
 8000aa0:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000aa2:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos).SegCount++;
 8000aa4:	6382      	str	r2, [r0, #56]	; 0x38
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000aa6:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000aaa:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 8000aac:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000aae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000aba:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8000abc:	6281      	str	r1, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 8000abe:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000ac6:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000ac8:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000aca:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8000acc:	bf55      	itete	pl
 8000ace:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8000ad0:	6303      	strmi	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 8000ad2:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8000ad4:	6342      	strmi	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8000ad6:	bf4c      	ite	mi
 8000ad8:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 8000ada:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8000adc:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000ade:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000ae0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ae4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000ae8:	e7eb      	b.n	8000ac2 <HAL_ETH_GetReceivedFrame+0x56>

08000aea <HAL_ETH_ReadPHYRegister>:
{
 8000aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000aec:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000af0:	2b82      	cmp	r3, #130	; 0x82
{
 8000af2:	4605      	mov	r5, r0
 8000af4:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000af6:	d030      	beq.n	8000b5a <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000af8:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000afa:	2382      	movs	r3, #130	; 0x82
 8000afc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b00:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b02:	0189      	lsls	r1, r1, #6
 8000b04:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b08:	f003 011c 	and.w	r1, r3, #28
 8000b0c:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b0e:	8a04      	ldrh	r4, [r0, #16]
 8000b10:	02e4      	lsls	r4, r4, #11
 8000b12:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000b14:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000b16:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000b1a:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000b1c:	f7ff fd92 	bl	8000644 <HAL_GetTick>
 8000b20:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b22:	f014 0001 	ands.w	r0, r4, #1
 8000b26:	d107      	bne.n	8000b38 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b28:	682b      	ldr	r3, [r5, #0]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b30:	2301      	movs	r3, #1
 8000b32:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b38:	f7ff fd84 	bl	8000644 <HAL_GetTick>
 8000b3c:	1bc0      	subs	r0, r0, r7
 8000b3e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b42:	d307      	bcc.n	8000b54 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000b44:	2301      	movs	r3, #1
 8000b46:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b50:	2003      	movs	r0, #3
 8000b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000b54:	682b      	ldr	r3, [r5, #0]
 8000b56:	691c      	ldr	r4, [r3, #16]
 8000b58:	e7e3      	b.n	8000b22 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000b5a:	2002      	movs	r0, #2
}
 8000b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b5e <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b5e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b62:	2b42      	cmp	r3, #66	; 0x42
{
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b68:	d02e      	beq.n	8000bc8 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b6a:	2342      	movs	r3, #66	; 0x42
 8000b6c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b70:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b72:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b74:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b76:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000b7a:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b7e:	f000 001c 	and.w	r0, r0, #28
 8000b82:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000b84:	8a2c      	ldrh	r4, [r5, #16]
 8000b86:	02e4      	lsls	r4, r4, #11
 8000b88:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000b8a:	4304      	orrs	r4, r0
 8000b8c:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000b8e:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000b90:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000b92:	f7ff fd57 	bl	8000644 <HAL_GetTick>
 8000b96:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b98:	f014 0001 	ands.w	r0, r4, #1
 8000b9c:	d103      	bne.n	8000ba6 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000ba6:	f7ff fd4d 	bl	8000644 <HAL_GetTick>
 8000baa:	1b80      	subs	r0, r0, r6
 8000bac:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bb0:	d307      	bcc.n	8000bc2 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	691c      	ldr	r4, [r3, #16]
 8000bc6:	e7e7      	b.n	8000b98 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000bc8:	2002      	movs	r0, #2
}
 8000bca:	bd70      	pop	{r4, r5, r6, pc}

08000bcc <HAL_ETH_Init>:
{
 8000bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	f000 80de 	beq.w	8000d96 <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000bda:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000be2:	b91b      	cbnz	r3, 8000bec <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000be4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000be8:	f008 feec 	bl	80099c4 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	4b6a      	ldr	r3, [pc, #424]	; (8000d9c <HAL_ETH_Init+0x1d0>)
 8000bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bf8:	645a      	str	r2, [r3, #68]	; 0x44
 8000bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c04:	4b66      	ldr	r3, [pc, #408]	; (8000da0 <HAL_ETH_Init+0x1d4>)
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c0c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	6a21      	ldr	r1, [r4, #32]
 8000c12:	430a      	orrs	r2, r1
 8000c14:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	f042 0201 	orr.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c24:	f7ff fd0e 	bl	8000644 <HAL_GetTick>
 8000c28:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	07d0      	lsls	r0, r2, #31
 8000c34:	d41d      	bmi.n	8000c72 <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000c36:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c38:	f001 fb8e 	bl	8002358 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c3c:	4b59      	ldr	r3, [pc, #356]	; (8000da4 <HAL_ETH_Init+0x1d8>)
 8000c3e:	4a5a      	ldr	r2, [pc, #360]	; (8000da8 <HAL_ETH_Init+0x1dc>)
 8000c40:	4403      	add	r3, r0
 8000c42:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000c44:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c48:	d822      	bhi.n	8000c90 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c4a:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c4e:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c54:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff ff80 	bl	8000b5e <HAL_ETH_WritePHYRegister>
 8000c5e:	4605      	mov	r5, r0
 8000c60:	b368      	cbz	r0, 8000cbe <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8000c62:	2101      	movs	r1, #1
 8000c64:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8000c66:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000c68:	f7ff fd96 	bl	8000798 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000c6c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000c70:	e00b      	b.n	8000c8a <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000c72:	f7ff fce7 	bl	8000644 <HAL_GetTick>
 8000c76:	1b40      	subs	r0, r0, r5
 8000c78:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c7c:	d9d5      	bls.n	8000c2a <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c7e:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000c80:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c82:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	b003      	add	sp, #12
 8000c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000c90:	4b46      	ldr	r3, [pc, #280]	; (8000dac <HAL_ETH_Init+0x1e0>)
 8000c92:	4a47      	ldr	r2, [pc, #284]	; (8000db0 <HAL_ETH_Init+0x1e4>)
 8000c94:	4403      	add	r3, r0
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d802      	bhi.n	8000ca0 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000c9a:	f045 050c 	orr.w	r5, r5, #12
 8000c9e:	e7d6      	b.n	8000c4e <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000ca0:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <HAL_ETH_Init+0x1e8>)
 8000ca2:	4a45      	ldr	r2, [pc, #276]	; (8000db8 <HAL_ETH_Init+0x1ec>)
 8000ca4:	4403      	add	r3, r0
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d9d1      	bls.n	8000c4e <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000caa:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <HAL_ETH_Init+0x1f0>)
 8000cac:	4a44      	ldr	r2, [pc, #272]	; (8000dc0 <HAL_ETH_Init+0x1f4>)
 8000cae:	4403      	add	r3, r0
 8000cb0:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000cb2:	bf94      	ite	ls
 8000cb4:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000cb8:	f045 0510 	orrhi.w	r5, r5, #16
 8000cbc:	e7c7      	b.n	8000c4e <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8000cbe:	20ff      	movs	r0, #255	; 0xff
 8000cc0:	f7ff fcc6 	bl	8000650 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000cc4:	6863      	ldr	r3, [r4, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d053      	beq.n	8000d72 <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000cca:	f7ff fcbb 	bl	8000644 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cce:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cd2:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000cd4:	466a      	mov	r2, sp
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f7ff ff06 	bl	8000aea <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cde:	f7ff fcb1 	bl	8000644 <HAL_GetTick>
 8000ce2:	1b80      	subs	r0, r0, r6
 8000ce4:	42b8      	cmp	r0, r7
 8000ce6:	d90b      	bls.n	8000d00 <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000ce8:	2101      	movs	r1, #1
 8000cea:	4620      	mov	r0, r4
 8000cec:	f7ff fd54 	bl	8000798 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000cfc:	2503      	movs	r5, #3
 8000cfe:	e7c4      	b.n	8000c8a <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d00:	9b00      	ldr	r3, [sp, #0]
 8000d02:	0759      	lsls	r1, r3, #29
 8000d04:	d5e6      	bpl.n	8000cd4 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	f7ff ff26 	bl	8000b5e <HAL_ETH_WritePHYRegister>
 8000d12:	2800      	cmp	r0, #0
 8000d14:	d1a5      	bne.n	8000c62 <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8000d16:	f7ff fc95 	bl	8000644 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d1a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d1e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d20:	466a      	mov	r2, sp
 8000d22:	2101      	movs	r1, #1
 8000d24:	4620      	mov	r0, r4
 8000d26:	f7ff fee0 	bl	8000aea <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d2a:	f7ff fc8b 	bl	8000644 <HAL_GetTick>
 8000d2e:	1b80      	subs	r0, r0, r6
 8000d30:	42b8      	cmp	r0, r7
 8000d32:	d8d9      	bhi.n	8000ce8 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d34:	9b00      	ldr	r3, [sp, #0]
 8000d36:	069a      	lsls	r2, r3, #26
 8000d38:	d5f2      	bpl.n	8000d20 <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d3a:	466a      	mov	r2, sp
 8000d3c:	211f      	movs	r1, #31
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f7ff fed3 	bl	8000aea <HAL_ETH_ReadPHYRegister>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	d18c      	bne.n	8000c62 <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d48:	9b00      	ldr	r3, [sp, #0]
 8000d4a:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d4e:	bf18      	it	ne
 8000d50:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d54:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d56:	bf4c      	ite	mi
 8000d58:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d5a:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d5e:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d60:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000d62:	2100      	movs	r1, #0
 8000d64:	4620      	mov	r0, r4
 8000d66:	f7ff fd17 	bl	8000798 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000d70:	e78b      	b.n	8000c8a <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d72:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d74:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d76:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d78:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000d7c:	b292      	uxth	r2, r2
 8000d7e:	4629      	mov	r1, r5
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff feec 	bl	8000b5e <HAL_ETH_WritePHYRegister>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	f47f af6b 	bne.w	8000c62 <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000d8c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000d90:	f7ff fc5e 	bl	8000650 <HAL_Delay>
 8000d94:	e7e5      	b.n	8000d62 <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8000d96:	2501      	movs	r5, #1
 8000d98:	e777      	b.n	8000c8a <HAL_ETH_Init+0xbe>
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40013800 	.word	0x40013800
 8000da4:	feced300 	.word	0xfeced300
 8000da8:	00e4e1bf 	.word	0x00e4e1bf
 8000dac:	fde9f140 	.word	0xfde9f140
 8000db0:	017d783f 	.word	0x017d783f
 8000db4:	fc6c7900 	.word	0xfc6c7900
 8000db8:	026259ff 	.word	0x026259ff
 8000dbc:	fa0a1f00 	.word	0xfa0a1f00
 8000dc0:	02faf07f 	.word	0x02faf07f

08000dc4 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000dc4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000dc8:	2b01      	cmp	r3, #1
{  
 8000dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dcc:	4605      	mov	r5, r0
 8000dce:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000dd2:	d031      	beq.n	8000e38 <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8000dd4:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dd6:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000dd8:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8000ddc:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dde:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000de0:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000de2:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8000de6:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dea:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000df0:	f7ff fcac 	bl	800074c <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000df4:	682b      	ldr	r3, [r5, #0]
 8000df6:	9a01      	ldr	r2, [sp, #4]
 8000df8:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8000dfa:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	f042 0204 	orr.w	r2, r2, #4
 8000e02:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000e08:	f7ff fca0 	bl	800074c <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000e0c:	682b      	ldr	r3, [r5, #0]
 8000e0e:	9a00      	ldr	r2, [sp, #0]
 8000e10:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e12:	4628      	mov	r0, r5
 8000e14:	f7ff fcac 	bl	8000770 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e18:	682a      	ldr	r2, [r5, #0]
 8000e1a:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000e1e:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e20:	58d1      	ldr	r1, [r2, r3]
 8000e22:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000e26:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e28:	58d1      	ldr	r1, [r2, r3]
 8000e2a:	f041 0102 	orr.w	r1, r1, #2
 8000e2e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e30:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e34:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e40:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000ff4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e48:	4a68      	ldr	r2, [pc, #416]	; (8000fec <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e4a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000ff8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e50:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e52:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e54:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000e56:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e58:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000e5a:	42ac      	cmp	r4, r5
 8000e5c:	f040 80b0 	bne.w	8000fc0 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e60:	684c      	ldr	r4, [r1, #4]
 8000e62:	f024 0c10 	bic.w	ip, r4, #16
 8000e66:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000e6a:	2e01      	cmp	r6, #1
 8000e6c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e70:	d812      	bhi.n	8000e98 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000e72:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e74:	2603      	movs	r6, #3
 8000e76:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e7a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	68ce      	ldr	r6, [r1, #12]
 8000e80:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e84:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000e86:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e88:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e8a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8e:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e92:	409e      	lsls	r6, r3
 8000e94:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000e96:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e98:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000e9a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ea0:	43f6      	mvns	r6, r6
 8000ea2:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea6:	688f      	ldr	r7, [r1, #8]
 8000ea8:	fa07 f70e 	lsl.w	r7, r7, lr
 8000eac:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb0:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000eb4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb6:	d116      	bne.n	8000ee6 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000eb8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ebc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ec4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ecc:	f04f 0c0f 	mov.w	ip, #15
 8000ed0:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ed4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed8:	690f      	ldr	r7, [r1, #16]
 8000eda:	fa07 f70b 	lsl.w	r7, r7, fp
 8000ede:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000ee2:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000ee6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eea:	f004 0703 	and.w	r7, r4, #3
 8000eee:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000ef2:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000ef6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef8:	00e6      	lsls	r6, r4, #3
 8000efa:	d561      	bpl.n	8000fc0 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efc:	f04f 0b00 	mov.w	fp, #0
 8000f00:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f04:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f08:	4e39      	ldr	r6, [pc, #228]	; (8000ff0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000f0e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000f12:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000f16:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f1a:	9703      	str	r7, [sp, #12]
 8000f1c:	9f03      	ldr	r7, [sp, #12]
 8000f1e:	f023 0703 	bic.w	r7, r3, #3
 8000f22:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f26:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f2a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f32:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f36:	f04f 0e0f 	mov.w	lr, #15
 8000f3a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f40:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f44:	d043      	beq.n	8000fce <HAL_GPIO_Init+0x192>
 8000f46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f4a:	42b0      	cmp	r0, r6
 8000f4c:	d041      	beq.n	8000fd2 <HAL_GPIO_Init+0x196>
 8000f4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f52:	42b0      	cmp	r0, r6
 8000f54:	d03f      	beq.n	8000fd6 <HAL_GPIO_Init+0x19a>
 8000f56:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f5a:	42b0      	cmp	r0, r6
 8000f5c:	d03d      	beq.n	8000fda <HAL_GPIO_Init+0x19e>
 8000f5e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f62:	42b0      	cmp	r0, r6
 8000f64:	d03b      	beq.n	8000fde <HAL_GPIO_Init+0x1a2>
 8000f66:	4548      	cmp	r0, r9
 8000f68:	d03b      	beq.n	8000fe2 <HAL_GPIO_Init+0x1a6>
 8000f6a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000f6e:	42b0      	cmp	r0, r6
 8000f70:	d039      	beq.n	8000fe6 <HAL_GPIO_Init+0x1aa>
 8000f72:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f76:	42b0      	cmp	r0, r6
 8000f78:	bf14      	ite	ne
 8000f7a:	2608      	movne	r6, #8
 8000f7c:	2607      	moveq	r6, #7
 8000f7e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000f82:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f86:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000f88:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f90:	bf0c      	ite	eq
 8000f92:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000f94:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000f96:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000f98:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f9a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	bf0c      	ite	eq
 8000fa0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fa2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000fa4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000fac:	bf0c      	ite	eq
 8000fae:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fb0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000fb2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000fb4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	bf54      	ite	pl
 8000fba:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000fbc:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000fbe:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	2b10      	cmp	r3, #16
 8000fc4:	f47f af45 	bne.w	8000e52 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fc8:	b005      	add	sp, #20
 8000fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fce:	465e      	mov	r6, fp
 8000fd0:	e7d5      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fd2:	2601      	movs	r6, #1
 8000fd4:	e7d3      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fd6:	2602      	movs	r6, #2
 8000fd8:	e7d1      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fda:	2603      	movs	r6, #3
 8000fdc:	e7cf      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fde:	2604      	movs	r6, #4
 8000fe0:	e7cd      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fe2:	2605      	movs	r6, #5
 8000fe4:	e7cb      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fe6:	2606      	movs	r6, #6
 8000fe8:	e7c9      	b.n	8000f7e <HAL_GPIO_Init+0x142>
 8000fea:	bf00      	nop
 8000fec:	40013c00 	.word	0x40013c00
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40021400 	.word	0x40021400

08000ffc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ffc:	b10a      	cbz	r2, 8001002 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ffe:	6181      	str	r1, [r0, #24]
 8001000:	4770      	bx	lr
 8001002:	0409      	lsls	r1, r1, #16
 8001004:	e7fb      	b.n	8000ffe <HAL_GPIO_WritePin+0x2>

08001006 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001006:	6943      	ldr	r3, [r0, #20]
 8001008:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800100c:	bf08      	it	eq
 800100e:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001010:	6181      	str	r1, [r0, #24]
 8001012:	4770      	bx	lr

08001014 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001018:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800101a:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 800101e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8001022:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8001026:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 800102a:	2801      	cmp	r0, #1
 800102c:	d028      	beq.n	8001080 <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 800102e:	2028      	movs	r0, #40	; 0x28
 8001030:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8001034:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8001036:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001038:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 800103c:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001040:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001044:	bf08      	it	eq
 8001046:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8001048:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 800104c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8001050:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001054:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001058:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 800105c:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8001060:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8001064:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8001068:	f8cd c008 	str.w	ip, [sp, #8]
 800106c:	e88d 4080 	stmia.w	sp, {r7, lr}
 8001070:	6820      	ldr	r0, [r4, #0]
 8001072:	f001 fbef 	bl	8002854 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001076:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 800107a:	b004      	add	sp, #16
 800107c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8001080:	2002      	movs	r0, #2
 8001082:	e7fa      	b.n	800107a <HAL_HCD_HC_Init+0x66>

08001084 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001084:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001088:	2b01      	cmp	r3, #1
{
 800108a:	b510      	push	{r4, lr}
 800108c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800108e:	d009      	beq.n	80010a4 <HAL_HCD_HC_Halt+0x20>
 8001090:	2301      	movs	r3, #1
 8001092:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001096:	6800      	ldr	r0, [r0, #0]
 8001098:	f001 fc66 	bl	8002968 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800109c:	2000      	movs	r0, #0
 800109e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 80010a2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80010a4:	2002      	movs	r0, #2
}
 80010a6:	bd10      	pop	{r4, pc}

080010a8 <HAL_HCD_Init>:
{
 80010a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 80010ac:	4607      	mov	r7, r0
{
 80010ae:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 80010b0:	2800      	cmp	r0, #0
 80010b2:	d041      	beq.n	8001138 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80010b4:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 80010b8:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80010ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010be:	b91b      	cbnz	r3, 80010c8 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 80010c0:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80010c4:	f009 f902 	bl	800a2cc <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80010c8:	2303      	movs	r3, #3
 80010ca:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 80010d0:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010d2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 80010d6:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 80010da:	bf08      	it	eq
 80010dc:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 80010de:	f001 fa75 	bl	80025cc <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e4:	466d      	mov	r5, sp
 80010e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f4:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80010f8:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010fa:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80010fe:	6838      	ldr	r0, [r7, #0]
 8001100:	f001 fa1e 	bl	8002540 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001104:	f856 0b10 	ldr.w	r0, [r6], #16
 8001108:	2101      	movs	r1, #1
 800110a:	f001 fa65 	bl	80025d8 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800110e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001110:	466d      	mov	r5, sp
 8001112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001114:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001118:	e894 0003 	ldmia.w	r4, {r0, r1}
 800111c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001120:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	f001 fb15 	bl	8002754 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 800112a:	2301      	movs	r3, #1
 800112c:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 8001130:	2000      	movs	r0, #0
}
 8001132:	b00a      	add	sp, #40	; 0x28
 8001134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001138:	2001      	movs	r0, #1
 800113a:	e7fa      	b.n	8001132 <HAL_HCD_Init+0x8a>

0800113c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800113c:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800113e:	2428      	movs	r4, #40	; 0x28
 8001140:	fb04 0401 	mla	r4, r4, r1, r0
{
 8001144:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8001148:	9e06      	ldr	r6, [sp, #24]
 800114a:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 800114e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001152:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8001156:	b96f      	cbnz	r7, 8001174 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001158:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800115a:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800115c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8001160:	d02b      	beq.n	80011ba <HAL_HCD_HC_SubmitRequest+0x7e>
 8001162:	42bb      	cmp	r3, r7
 8001164:	d029      	beq.n	80011ba <HAL_HCD_HC_SubmitRequest+0x7e>
 8001166:	2b01      	cmp	r3, #1
 8001168:	d131      	bne.n	80011ce <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800116a:	2328      	movs	r3, #40	; 0x28
 800116c:	fb03 0301 	mla	r3, r3, r1, r0
 8001170:	2200      	movs	r2, #0
 8001172:	e02a      	b.n	80011ca <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001174:	f04f 0e02 	mov.w	lr, #2
 8001178:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 800117c:	2b03      	cmp	r3, #3
 800117e:	d826      	bhi.n	80011ce <HAL_HCD_HC_SubmitRequest+0x92>
 8001180:	a401      	add	r4, pc, #4	; (adr r4, 8001188 <HAL_HCD_HC_SubmitRequest+0x4c>)
 8001182:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8001186:	bf00      	nop
 8001188:	08001199 	.word	0x08001199
 800118c:	0800116b 	.word	0x0800116b
 8001190:	080011bb 	.word	0x080011bb
 8001194:	080011bb 	.word	0x080011bb
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001198:	2f01      	cmp	r7, #1
 800119a:	d118      	bne.n	80011ce <HAL_HCD_HC_SubmitRequest+0x92>
 800119c:	b9ba      	cbnz	r2, 80011ce <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 800119e:	b925      	cbnz	r5, 80011aa <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 80011a0:	2328      	movs	r3, #40	; 0x28
 80011a2:	fb03 0301 	mla	r3, r3, r1, r0
 80011a6:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80011aa:	2328      	movs	r3, #40	; 0x28
 80011ac:	fb03 0301 	mla	r3, r3, r1, r0
 80011b0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80011b4:	b14a      	cbz	r2, 80011ca <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011b6:	2202      	movs	r2, #2
 80011b8:	e007      	b.n	80011ca <HAL_HCD_HC_SubmitRequest+0x8e>
 80011ba:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80011bc:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 80011c0:	b9d2      	cbnz	r2, 80011f8 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80011c2:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 80011c6:	2c00      	cmp	r4, #0
 80011c8:	d1f5      	bne.n	80011b6 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80011ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80011ce:	2428      	movs	r4, #40	; 0x28
 80011d0:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80011d4:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 80011d6:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80011da:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80011dc:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 80011de:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80011e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80011e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 80011e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80011ea:	3138      	adds	r1, #56	; 0x38
 80011ec:	7c02      	ldrb	r2, [r0, #16]
 80011ee:	6800      	ldr	r0, [r0, #0]
}
 80011f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80011f4:	f001 bc1c 	b.w	8002a30 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80011f8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80011fc:	e7da      	b.n	80011b4 <HAL_HCD_HC_SubmitRequest+0x78>
 80011fe:	bf00      	nop

08001200 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001204:	6806      	ldr	r6, [r0, #0]
{
 8001206:	b087      	sub	sp, #28
 8001208:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800120a:	4630      	mov	r0, r6
 800120c:	f001 fa44 	bl	8002698 <USB_GetMode>
 8001210:	2801      	cmp	r0, #1
 8001212:	f040 80b4 	bne.w	800137e <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001216:	6820      	ldr	r0, [r4, #0]
 8001218:	f001 fa3a 	bl	8002690 <USB_ReadInterrupts>
 800121c:	2800      	cmp	r0, #0
 800121e:	f000 80ae 	beq.w	800137e <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001222:	6820      	ldr	r0, [r4, #0]
 8001224:	f001 fa34 	bl	8002690 <USB_ReadInterrupts>
 8001228:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800122a:	bf48      	it	mi
 800122c:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800122e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001230:	bf44      	itt	mi
 8001232:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8001236:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001238:	f001 fa2a 	bl	8002690 <USB_ReadInterrupts>
 800123c:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800123e:	bf48      	it	mi
 8001240:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001242:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001244:	bf44      	itt	mi
 8001246:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 800124a:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800124c:	f001 fa20 	bl	8002690 <USB_ReadInterrupts>
 8001250:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001252:	bf48      	it	mi
 8001254:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001256:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001258:	bf44      	itt	mi
 800125a:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 800125e:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001260:	f001 fa16 	bl	8002690 <USB_ReadInterrupts>
 8001264:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001266:	bf48      	it	mi
 8001268:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800126a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800126c:	bf44      	itt	mi
 800126e:	2202      	movmi	r2, #2
 8001270:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001272:	f001 fa0d 	bl	8002690 <USB_ReadInterrupts>
 8001276:	0082      	lsls	r2, r0, #2
 8001278:	d510      	bpl.n	800129c <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800127a:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 800127e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001282:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001286:	4620      	mov	r0, r4
 8001288:	f009 f870 	bl	800a36c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800128c:	2101      	movs	r1, #1
 800128e:	6820      	ldr	r0, [r4, #0]
 8001290:	f001 fa06 	bl	80026a0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800129a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800129c:	6820      	ldr	r0, [r4, #0]
 800129e:	f001 f9f7 	bl	8002690 <USB_ReadInterrupts>
 80012a2:	01c3      	lsls	r3, r0, #7
 80012a4:	d542      	bpl.n	800132c <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80012a6:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80012a8:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80012ac:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 80012ae:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80012b2:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80012b4:	9b05      	ldr	r3, [sp, #20]
 80012b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80012ba:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80012bc:	9b04      	ldr	r3, [sp, #16]
 80012be:	079f      	lsls	r7, r3, #30
 80012c0:	d50d      	bpl.n	80012de <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80012c2:	9b04      	ldr	r3, [sp, #16]
 80012c4:	07d8      	lsls	r0, r3, #31
 80012c6:	d506      	bpl.n	80012d6 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80012c8:	69ab      	ldr	r3, [r5, #24]
 80012ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80012ce:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80012d0:	4620      	mov	r0, r4
 80012d2:	f009 f847 	bl	800a364 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80012d6:	9b05      	ldr	r3, [sp, #20]
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80012de:	9b04      	ldr	r3, [sp, #16]
 80012e0:	0719      	lsls	r1, r3, #28
 80012e2:	d519      	bpl.n	8001318 <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80012e4:	9b05      	ldr	r3, [sp, #20]
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80012ec:	9b04      	ldr	r3, [sp, #16]
 80012ee:	075a      	lsls	r2, r3, #29
 80012f0:	d550      	bpl.n	8001394 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80012f2:	69a1      	ldr	r1, [r4, #24]
 80012f4:	2902      	cmp	r1, #2
 80012f6:	d145      	bne.n	8001384 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80012f8:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80012fa:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80012fc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001304:	bf18      	it	ne
 8001306:	2101      	movne	r1, #1
 8001308:	f001 f9ca 	bl	80026a0 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800130c:	4620      	mov	r0, r4
 800130e:	f009 f832 	bl	800a376 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8001312:	4620      	mov	r0, r4
 8001314:	f009 f826 	bl	800a364 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001318:	9b04      	ldr	r3, [sp, #16]
 800131a:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800131c:	bf42      	ittt	mi
 800131e:	9b05      	ldrmi	r3, [sp, #20]
 8001320:	f043 0320 	orrmi.w	r3, r3, #32
 8001324:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001326:	9b05      	ldr	r3, [sp, #20]
 8001328:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800132c:	6820      	ldr	r0, [r4, #0]
 800132e:	f001 f9af 	bl	8002690 <USB_ReadInterrupts>
 8001332:	0707      	lsls	r7, r0, #28
 8001334:	d505      	bpl.n	8001342 <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 8001336:	4620      	mov	r0, r4
 8001338:	f009 f810 	bl	800a35c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	2208      	movs	r2, #8
 8001340:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001342:	6820      	ldr	r0, [r4, #0]
 8001344:	f001 f9a4 	bl	8002690 <USB_ReadInterrupts>
 8001348:	0185      	lsls	r5, r0, #6
 800134a:	d512      	bpl.n	8001372 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800134c:	6820      	ldr	r0, [r4, #0]
 800134e:	f001 fb06 	bl	800295e <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001352:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001356:	9001      	str	r0, [sp, #4]
 8001358:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800135c:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800135e:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001362:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001364:	68a3      	ldr	r3, [r4, #8]
 8001366:	459a      	cmp	sl, r3
 8001368:	d323      	bcc.n	80013b2 <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001370:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001372:	6820      	ldr	r0, [r4, #0]
 8001374:	f001 f98c 	bl	8002690 <USB_ReadInterrupts>
 8001378:	06c3      	lsls	r3, r0, #27
 800137a:	f100 8220 	bmi.w	80017be <HAL_HCD_IRQHandler+0x5be>
}
 800137e:	b007      	add	sp, #28
 8001380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001384:	68e3      	ldr	r3, [r4, #12]
 8001386:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8001388:	bf04      	itt	eq
 800138a:	f64e 2260 	movweq	r2, #60000	; 0xea60
 800138e:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8001392:	e7bb      	b.n	800130c <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001394:	4620      	mov	r0, r4
 8001396:	f008 fff2 	bl	800a37e <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800139a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800139e:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80013a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80013a4:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80013a8:	6993      	ldr	r3, [r2, #24]
 80013aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	e7b2      	b.n	8001318 <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80013b2:	9a01      	ldr	r2, [sp, #4]
 80013b4:	f00a 030f 	and.w	r3, sl, #15
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	07d8      	lsls	r0, r3, #31
 80013be:	f140 808a 	bpl.w	80014d6 <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80013c2:	f8d8 3000 	ldr.w	r3, [r8]
 80013c6:	6820      	ldr	r0, [r4, #0]
 80013c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80013cc:	fa5f f58a 	uxtb.w	r5, sl
 80013d0:	f000 8104 	beq.w	80015dc <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013d4:	016a      	lsls	r2, r5, #5
 80013d6:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 80013da:	18d6      	adds	r6, r2, r3
 80013dc:	68b1      	ldr	r1, [r6, #8]
 80013de:	0749      	lsls	r1, r1, #29
 80013e0:	d513      	bpl.n	800140a <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013e2:	2104      	movs	r1, #4
 80013e4:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013e6:	68f1      	ldr	r1, [r6, #12]
 80013e8:	f041 0102 	orr.w	r1, r1, #2
 80013ec:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80013ee:	68b1      	ldr	r1, [r6, #8]
 80013f0:	0589      	lsls	r1, r1, #22
 80013f2:	d542      	bpl.n	800147a <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013f4:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013f6:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013fe:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001400:	f001 fab2 	bl	8002968 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001408:	e0c7      	b.n	800159a <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800140a:	68b1      	ldr	r1, [r6, #8]
 800140c:	0689      	lsls	r1, r1, #26
 800140e:	d502      	bpl.n	8001416 <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001410:	2120      	movs	r1, #32
 8001412:	60b1      	str	r1, [r6, #8]
 8001414:	e7eb      	b.n	80013ee <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001416:	68b1      	ldr	r1, [r6, #8]
 8001418:	0709      	lsls	r1, r1, #28
 800141a:	d515      	bpl.n	8001448 <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800141c:	68f1      	ldr	r1, [r6, #12]
 800141e:	9303      	str	r3, [sp, #12]
 8001420:	f041 0102 	orr.w	r1, r1, #2
 8001424:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001426:	fb07 4105 	mla	r1, r7, r5, r4
 800142a:	f04f 0e05 	mov.w	lr, #5
 800142e:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001432:	2110      	movs	r1, #16
 8001434:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001436:	2108      	movs	r1, #8
 8001438:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800143a:	4629      	mov	r1, r5
 800143c:	9202      	str	r2, [sp, #8]
 800143e:	f001 fa93 	bl	8002968 <USB_HC_Halt>
 8001442:	9a02      	ldr	r2, [sp, #8]
 8001444:	9b03      	ldr	r3, [sp, #12]
 8001446:	e7d2      	b.n	80013ee <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001448:	68b1      	ldr	r1, [r6, #8]
 800144a:	0549      	lsls	r1, r1, #21
 800144c:	d5cf      	bpl.n	80013ee <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800144e:	68f1      	ldr	r1, [r6, #12]
 8001450:	9303      	str	r3, [sp, #12]
 8001452:	f041 0102 	orr.w	r1, r1, #2
 8001456:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001458:	4629      	mov	r1, r5
 800145a:	9202      	str	r2, [sp, #8]
 800145c:	f001 fa84 	bl	8002968 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001460:	2110      	movs	r1, #16
 8001462:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001464:	fb07 4105 	mla	r1, r7, r5, r4
 8001468:	2008      	movs	r0, #8
 800146a:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800146e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001472:	60b1      	str	r1, [r6, #8]
 8001474:	9b03      	ldr	r3, [sp, #12]
 8001476:	9a02      	ldr	r2, [sp, #8]
 8001478:	e7b9      	b.n	80013ee <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800147a:	68b1      	ldr	r1, [r6, #8]
 800147c:	07c8      	lsls	r0, r1, #31
 800147e:	d53d      	bpl.n	80014fc <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 8001480:	6921      	ldr	r1, [r4, #16]
 8001482:	b149      	cbz	r1, 8001498 <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001484:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001488:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800148a:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800148e:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001492:	1a09      	subs	r1, r1, r0
 8001494:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8001498:	fb07 4e05 	mla	lr, r7, r5, r4
 800149c:	2001      	movs	r0, #1
 800149e:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80014a2:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80014a6:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80014a8:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 80014ac:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80014b0:	d116      	bne.n	80014e0 <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014b2:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014b4:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014bc:	4629      	mov	r1, r5
 80014be:	f001 fa53 	bl	8002968 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014c2:	2310      	movs	r3, #16
 80014c4:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80014c6:	fb07 4505 	mla	r5, r7, r5, r4
 80014ca:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80014ce:	f083 0301 	eor.w	r3, r3, #1
 80014d2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80014d6:	f10a 0a01 	add.w	sl, sl, #1
 80014da:	f108 0820 	add.w	r8, r8, #32
 80014de:	e741      	b.n	8001364 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80014e0:	2903      	cmp	r1, #3
 80014e2:	d1f0      	bne.n	80014c6 <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80014e4:	58d1      	ldr	r1, [r2, r3]
 80014e6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80014ea:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80014ec:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80014f0:	4602      	mov	r2, r0
 80014f2:	4629      	mov	r1, r5
 80014f4:	4620      	mov	r0, r4
 80014f6:	f008 ff3d 	bl	800a374 <HAL_HCD_HC_NotifyURBChange_Callback>
 80014fa:	e7e4      	b.n	80014c6 <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80014fc:	68b1      	ldr	r1, [r6, #8]
 80014fe:	0789      	lsls	r1, r1, #30
 8001500:	d536      	bpl.n	8001570 <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001502:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001504:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001508:	f021 0102 	bic.w	r1, r1, #2
 800150c:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800150e:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8001512:	2901      	cmp	r1, #1
 8001514:	d10c      	bne.n	8001530 <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001516:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800151a:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800151e:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001522:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001526:	4629      	mov	r1, r5
 8001528:	4620      	mov	r0, r4
 800152a:	f008 ff23 	bl	800a374 <HAL_HCD_HC_NotifyURBChange_Callback>
 800152e:	e7d2      	b.n	80014d6 <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001530:	2905      	cmp	r1, #5
 8001532:	d0f0      	beq.n	8001516 <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001534:	2906      	cmp	r1, #6
 8001536:	d001      	beq.n	800153c <HAL_HCD_IRQHandler+0x33c>
 8001538:	2908      	cmp	r1, #8
 800153a:	d114      	bne.n	8001566 <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 800153c:	fb07 4105 	mla	r1, r7, r5, r4
 8001540:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8001542:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001544:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 8001546:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001548:	bf83      	ittte	hi
 800154a:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 800154c:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001550:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001554:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001558:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800155a:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800155e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001562:	50d1      	str	r1, [r2, r3]
 8001564:	e7d9      	b.n	800151a <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001566:	2903      	cmp	r1, #3
 8001568:	d1d7      	bne.n	800151a <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800156a:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 800156e:	e7f3      	b.n	8001558 <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001570:	68b1      	ldr	r1, [r6, #8]
 8001572:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8001576:	d012      	beq.n	800159e <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001578:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800157a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001582:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001586:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 8001588:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800158a:	3201      	adds	r2, #1
 800158c:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 800158e:	2206      	movs	r2, #6
 8001590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001594:	f001 f9e8 	bl	8002968 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	60b3      	str	r3, [r6, #8]
 800159c:	e79b      	b.n	80014d6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800159e:	68b3      	ldr	r3, [r6, #8]
 80015a0:	06da      	lsls	r2, r3, #27
 80015a2:	d598      	bpl.n	80014d6 <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80015a4:	fb07 4205 	mla	r2, r7, r5, r4
 80015a8:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d10a      	bne.n	80015c6 <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80015b0:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015b2:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015b4:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015bc:	4629      	mov	r1, r5
 80015be:	f001 f9d3 	bl	8002968 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015c2:	2310      	movs	r3, #16
 80015c4:	e7e9      	b.n	800159a <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80015c6:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 80015ca:	d1fa      	bne.n	80015c2 <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80015cc:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80015ce:	6923      	ldr	r3, [r4, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f6      	bne.n	80015c2 <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 80015d4:	2303      	movs	r3, #3
 80015d6:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 80015da:	e7ea      	b.n	80015b2 <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80015dc:	0169      	lsls	r1, r5, #5
 80015de:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 80015e2:	188e      	adds	r6, r1, r2
 80015e4:	68b3      	ldr	r3, [r6, #8]
 80015e6:	f013 0e04 	ands.w	lr, r3, #4
 80015ea:	d006      	beq.n	80015fa <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80015ec:	2304      	movs	r3, #4
 80015ee:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015f0:	68f3      	ldr	r3, [r6, #12]
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	60f3      	str	r3, [r6, #12]
 80015f8:	e76d      	b.n	80014d6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80015fa:	68b3      	ldr	r3, [r6, #8]
 80015fc:	f013 0320 	ands.w	r3, r3, #32
 8001600:	d014      	beq.n	800162c <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001602:	2320      	movs	r3, #32
 8001604:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001606:	fb07 4305 	mla	r3, r7, r5, r4
 800160a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800160e:	2a01      	cmp	r2, #1
 8001610:	f47f af61 	bne.w	80014d6 <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 8001614:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001618:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800161c:	68f3      	ldr	r3, [r6, #12]
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001624:	4629      	mov	r1, r5
 8001626:	f001 f99f 	bl	8002968 <USB_HC_Halt>
 800162a:	e754      	b.n	80014d6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800162c:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8001630:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001634:	d011      	beq.n	800165a <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 8001636:	fb07 4205 	mla	r2, r7, r5, r4
 800163a:	2104      	movs	r1, #4
 800163c:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8001640:	2101      	movs	r1, #1
 8001642:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001646:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001648:	68f3      	ldr	r3, [r6, #12]
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001650:	4629      	mov	r1, r5
 8001652:	f001 f989 	bl	8002968 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	e79f      	b.n	800159a <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800165a:	68b3      	ldr	r3, [r6, #8]
 800165c:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8001660:	d005      	beq.n	800166e <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001662:	68f3      	ldr	r3, [r6, #12]
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800166a:	4629      	mov	r1, r5
 800166c:	e6c8      	b.n	8001400 <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800166e:	68b3      	ldr	r3, [r6, #8]
 8001670:	07db      	lsls	r3, r3, #31
 8001672:	d511      	bpl.n	8001698 <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001674:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001676:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800167a:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 800167e:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001682:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001684:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001686:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001688:	f001 f96e 	bl	8002968 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 800168c:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800168e:	2201      	movs	r2, #1
 8001690:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001692:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001696:	e71e      	b.n	80014d6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001698:	68b3      	ldr	r3, [r6, #8]
 800169a:	071b      	lsls	r3, r3, #28
 800169c:	d50e      	bpl.n	80016bc <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800169e:	2308      	movs	r3, #8
 80016a0:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016a2:	68f3      	ldr	r3, [r6, #12]
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016aa:	4629      	mov	r1, r5
 80016ac:	f001 f95c 	bl	8002968 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80016b0:	fb07 4505 	mla	r5, r7, r5, r4
 80016b4:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80016b6:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80016ba:	e70c      	b.n	80014d6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80016bc:	68b3      	ldr	r3, [r6, #8]
 80016be:	06db      	lsls	r3, r3, #27
 80016c0:	d515      	bpl.n	80016ee <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016c2:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 80016c6:	2203      	movs	r2, #3
 80016c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 80016cc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016d0:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 80016d4:	b92a      	cbnz	r2, 80016e2 <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80016d6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80016da:	b912      	cbnz	r2, 80016e2 <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016e2:	68f3      	ldr	r3, [r6, #12]
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016ea:	4629      	mov	r1, r5
 80016ec:	e767      	b.n	80015be <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80016ee:	68b3      	ldr	r3, [r6, #8]
 80016f0:	061b      	lsls	r3, r3, #24
 80016f2:	d50c      	bpl.n	800170e <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016f4:	68f3      	ldr	r3, [r6, #12]
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016fc:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 80016fe:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001702:	f001 f931 	bl	8002968 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001706:	2306      	movs	r3, #6
 8001708:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800170c:	e744      	b.n	8001598 <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800170e:	68b3      	ldr	r3, [r6, #8]
 8001710:	055b      	lsls	r3, r3, #21
 8001712:	d50f      	bpl.n	8001734 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001714:	68f3      	ldr	r3, [r6, #12]
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800171c:	4629      	mov	r1, r5
 800171e:	f001 f923 	bl	8002968 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001722:	2310      	movs	r3, #16
 8001724:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172a:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800172c:	fb07 4505 	mla	r5, r7, r5, r4
 8001730:	2308      	movs	r3, #8
 8001732:	e7c0      	b.n	80016b6 <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001734:	68b3      	ldr	r3, [r6, #8]
 8001736:	0798      	lsls	r0, r3, #30
 8001738:	f57f aecd 	bpl.w	80014d6 <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800173c:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800173e:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001742:	f023 0302 	bic.w	r3, r3, #2
 8001746:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001748:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800174c:	2b01      	cmp	r3, #1
 800174e:	d10e      	bne.n	800176e <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001750:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001754:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8001758:	3b02      	subs	r3, #2
 800175a:	2b01      	cmp	r3, #1
 800175c:	f63f aedd 	bhi.w	800151a <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001760:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001764:	f083 0301 	eor.w	r3, r3, #1
 8001768:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 800176c:	e6d5      	b.n	800151a <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800176e:	2b03      	cmp	r3, #3
 8001770:	d102      	bne.n	8001778 <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001772:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8001776:	e6d0      	b.n	800151a <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001778:	2b04      	cmp	r3, #4
 800177a:	d0fa      	beq.n	8001772 <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800177c:	2b05      	cmp	r3, #5
 800177e:	d102      	bne.n	8001786 <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001780:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8001784:	e6c9      	b.n	800151a <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001786:	2b06      	cmp	r3, #6
 8001788:	d002      	beq.n	8001790 <HAL_HCD_IRQHandler+0x590>
 800178a:	2b08      	cmp	r3, #8
 800178c:	f47f aec5 	bne.w	800151a <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 8001790:	fb07 4005 	mla	r0, r7, r5, r4
 8001794:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001796:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001798:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 800179a:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800179c:	bf84      	itt	hi
 800179e:	2304      	movhi	r3, #4
 80017a0:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80017a4:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 80017a6:	bf88      	it	hi
 80017a8:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80017ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80017b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80017b4:	bf98      	it	ls
 80017b6:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80017ba:	508b      	str	r3, [r1, r2]
 80017bc:	e6ad      	b.n	800151a <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017be:	6826      	ldr	r6, [r4, #0]
 80017c0:	69b3      	ldr	r3, [r6, #24]
 80017c2:	f023 0310 	bic.w	r3, r3, #16
 80017c6:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 80017c8:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80017ca:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 80017ce:	2a02      	cmp	r2, #2
 80017d0:	d129      	bne.n	8001826 <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017d2:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80017d6:	f1b8 0f00 	cmp.w	r8, #0
 80017da:	d024      	beq.n	8001826 <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80017dc:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80017e0:	2728      	movs	r7, #40	; 0x28
 80017e2:	fb07 4705 	mla	r7, r7, r5, r4
 80017e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80017e8:	b1e9      	cbz	r1, 8001826 <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80017ea:	4642      	mov	r2, r8
 80017ec:	4630      	mov	r0, r6
 80017ee:	f000 ff41 	bl	8002674 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80017f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f4:	4443      	add	r3, r8
 80017f6:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80017f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017fa:	4443      	add	r3, r8
 80017fc:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80017fe:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8001802:	016b      	lsls	r3, r5, #5
 8001804:	199a      	adds	r2, r3, r6
 8001806:	6911      	ldr	r1, [r2, #16]
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_HCD_IRQHandler+0x634>)
 800180a:	400a      	ands	r2, r1
 800180c:	b15a      	cbz	r2, 8001826 <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800180e:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001810:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001814:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001818:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800181a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800181e:	f083 0301 	eor.w	r3, r3, #1
 8001822:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001826:	6822      	ldr	r2, [r4, #0]
 8001828:	6993      	ldr	r3, [r2, #24]
 800182a:	f043 0310 	orr.w	r3, r3, #16
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	e5a5      	b.n	800137e <HAL_HCD_IRQHandler+0x17e>
 8001832:	bf00      	nop
 8001834:	1ff80000 	.word	0x1ff80000

08001838 <HAL_HCD_Start>:
{
 8001838:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 800183a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800183e:	2b01      	cmp	r3, #1
{
 8001840:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001842:	d00d      	beq.n	8001860 <HAL_HCD_Start+0x28>
 8001844:	2501      	movs	r5, #1
 8001846:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800184a:	6800      	ldr	r0, [r0, #0]
 800184c:	f000 feb8 	bl	80025c0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001850:	4629      	mov	r1, r5
 8001852:	6820      	ldr	r0, [r4, #0]
 8001854:	f000 ff5e 	bl	8002714 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001858:	2000      	movs	r0, #0
 800185a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 800185e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8001860:	2002      	movs	r0, #2
}
 8001862:	bd38      	pop	{r3, r4, r5, pc}

08001864 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8001864:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001868:	2b01      	cmp	r3, #1
{
 800186a:	b510      	push	{r4, lr}
 800186c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800186e:	d009      	beq.n	8001884 <HAL_HCD_Stop+0x20>
 8001870:	2301      	movs	r3, #1
 8001872:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001876:	6800      	ldr	r0, [r0, #0]
 8001878:	f001 f98c 	bl	8002b94 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800187c:	2000      	movs	r0, #0
 800187e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8001882:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001884:	2002      	movs	r0, #2
}
 8001886:	bd10      	pop	{r4, pc}

08001888 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001888:	6800      	ldr	r0, [r0, #0]
 800188a:	f000 bf25 	b.w	80026d8 <USB_ResetPort>

0800188e <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800188e:	2328      	movs	r3, #40	; 0x28
 8001890:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001894:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8001898:	4770      	bx	lr

0800189a <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800189a:	2328      	movs	r3, #40	; 0x28
 800189c:	fb03 0101 	mla	r1, r3, r1, r0
}
 80018a0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80018a2:	4770      	bx	lr

080018a4 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80018a4:	6800      	ldr	r0, [r0, #0]
 80018a6:	f000 bfd0 	b.w	800284a <USB_GetCurrentFrame>

080018aa <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80018aa:	6800      	ldr	r0, [r0, #0]
 80018ac:	f000 bfc2 	b.w	8002834 <USB_GetHostSpeed>

080018b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018b0:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018b2:	4604      	mov	r4, r0
 80018b4:	b908      	cbnz	r0, 80018ba <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80018b6:	2001      	movs	r0, #1
 80018b8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018c2:	b91b      	cbnz	r3, 80018cc <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018c8:	f008 fbe6 	bl	800a098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018cc:	2324      	movs	r3, #36	; 0x24
 80018ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018ec:	f000 fd3a 	bl	8002364 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018f0:	6865      	ldr	r5, [r4, #4]
 80018f2:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <HAL_I2C_Init+0x148>)
 80018f4:	429d      	cmp	r5, r3
 80018f6:	d84d      	bhi.n	8001994 <HAL_I2C_Init+0xe4>
 80018f8:	4b40      	ldr	r3, [pc, #256]	; (80019fc <HAL_I2C_Init+0x14c>)
 80018fa:	4298      	cmp	r0, r3
 80018fc:	d9db      	bls.n	80018b6 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018fe:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001900:	493f      	ldr	r1, [pc, #252]	; (8001a00 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001902:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001904:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001908:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800190c:	430b      	orrs	r3, r1
 800190e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001910:	6a13      	ldr	r3, [r2, #32]
 8001912:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001916:	3101      	adds	r1, #1
 8001918:	4319      	orrs	r1, r3
 800191a:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800191c:	69d1      	ldr	r1, [r2, #28]
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_I2C_Init+0x148>)
 8001920:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001924:	429d      	cmp	r5, r3
 8001926:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800192a:	f100 30ff 	add.w	r0, r0, #4294967295
 800192e:	d848      	bhi.n	80019c2 <HAL_I2C_Init+0x112>
 8001930:	006d      	lsls	r5, r5, #1
 8001932:	fbb0 f0f5 	udiv	r0, r0, r5
 8001936:	3001      	adds	r0, #1
 8001938:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800193c:	2b04      	cmp	r3, #4
 800193e:	bf38      	it	cc
 8001940:	2304      	movcc	r3, #4
 8001942:	430b      	orrs	r3, r1
 8001944:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001946:	6811      	ldr	r1, [r2, #0]
 8001948:	6a20      	ldr	r0, [r4, #32]
 800194a:	69e3      	ldr	r3, [r4, #28]
 800194c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001950:	4303      	orrs	r3, r0
 8001952:	430b      	orrs	r3, r1
 8001954:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001956:	6891      	ldr	r1, [r2, #8]
 8001958:	68e0      	ldr	r0, [r4, #12]
 800195a:	6923      	ldr	r3, [r4, #16]
 800195c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001960:	4303      	orrs	r3, r0
 8001962:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001966:	430b      	orrs	r3, r1
 8001968:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800196a:	68d1      	ldr	r1, [r2, #12]
 800196c:	69a0      	ldr	r0, [r4, #24]
 800196e:	6963      	ldr	r3, [r4, #20]
 8001970:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001974:	4303      	orrs	r3, r0
 8001976:	430b      	orrs	r3, r1
 8001978:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800197a:	6813      	ldr	r3, [r2, #0]
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001982:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001984:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001986:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001988:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800198c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800198e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001992:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_I2C_Init+0x154>)
 8001996:	4298      	cmp	r0, r3
 8001998:	d98d      	bls.n	80018b6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800199a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800199c:	4e18      	ldr	r6, [pc, #96]	; (8001a00 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800199e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80019a0:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019a8:	4333      	orrs	r3, r6
 80019aa:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ac:	6a13      	ldr	r3, [r2, #32]
 80019ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019b2:	4371      	muls	r1, r6
 80019b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80019bc:	fbb1 f1f6 	udiv	r1, r1, r6
 80019c0:	e7a9      	b.n	8001916 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019c2:	68a3      	ldr	r3, [r4, #8]
 80019c4:	b953      	cbnz	r3, 80019dc <HAL_I2C_Init+0x12c>
 80019c6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80019ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80019ce:	1c43      	adds	r3, r0, #1
 80019d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d4:	b16b      	cbz	r3, 80019f2 <HAL_I2C_Init+0x142>
 80019d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019da:	e7b2      	b.n	8001942 <HAL_I2C_Init+0x92>
 80019dc:	2319      	movs	r3, #25
 80019de:	436b      	muls	r3, r5
 80019e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80019e4:	1c43      	adds	r3, r0, #1
 80019e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ea:	b113      	cbz	r3, 80019f2 <HAL_I2C_Init+0x142>
 80019ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019f0:	e7a7      	b.n	8001942 <HAL_I2C_Init+0x92>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e7a5      	b.n	8001942 <HAL_I2C_Init+0x92>
 80019f6:	bf00      	nop
 80019f8:	000186a0 	.word	0x000186a0
 80019fc:	001e847f 	.word	0x001e847f
 8001a00:	000f4240 	.word	0x000f4240
 8001a04:	003d08ff 	.word	0x003d08ff

08001a08 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	d041      	beq.n	8001a94 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a10:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001a14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a18:	b92b      	cbnz	r3, 8001a26 <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a1a:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8001a1c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a20:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a22:	f008 fb71 	bl	800a108 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a26:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a28:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a2a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a2e:	69d3      	ldr	r3, [r2, #28]
 8001a30:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a34:	f023 030f 	bic.w	r3, r3, #15
 8001a38:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a3a:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8001a3c:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a3e:	428b      	cmp	r3, r1
 8001a40:	d031      	beq.n	8001aa6 <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a42:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001a44:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a46:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8001a48:	bf0c      	ite	eq
 8001a4a:	2510      	moveq	r5, #16
 8001a4c:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a4e:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a50:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8001a52:	bf98      	it	ls
 8001a54:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a56:	f000 fd2d 	bl	80024b4 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001a5a:	6923      	ldr	r3, [r4, #16]
 8001a5c:	6961      	ldr	r1, [r4, #20]
 8001a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a62:	d11b      	bne.n	8001a9c <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001a64:	68e3      	ldr	r3, [r4, #12]
 8001a66:	220a      	movs	r2, #10
 8001a68:	b1b3      	cbz	r3, 8001a98 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a6a:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a70:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001a72:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a74:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a78:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8001a7a:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001a7e:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001a82:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001a84:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a86:	1e99      	subs	r1, r3, #2
 8001a88:	29fd      	cmp	r1, #253	; 0xfd
 8001a8a:	d90e      	bls.n	8001aaa <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8001a94:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8001a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a98:	00eb      	lsls	r3, r5, #3
 8001a9a:	e7e7      	b.n	8001a6c <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	fbb0 f0f5 	udiv	r0, r0, r5
 8001aa2:	4343      	muls	r3, r0
 8001aa4:	e7e5      	b.n	8001a72 <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	e7ed      	b.n	8001a86 <HAL_I2S_Init+0x7e>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	6922      	ldr	r2, [r4, #16]
 8001aae:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ab0:	6866      	ldr	r6, [r4, #4]
 8001ab2:	68e5      	ldr	r5, [r4, #12]
 8001ab4:	69a0      	ldr	r0, [r4, #24]
 8001ab6:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8001b34 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001aba:	4313      	orrs	r3, r2
 8001abc:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001abe:	68a3      	ldr	r3, [r4, #8]
 8001ac0:	69cf      	ldr	r7, [r1, #28]
 8001ac2:	ea46 0203 	orr.w	r2, r6, r3
 8001ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aca:	432a      	orrs	r2, r5
 8001acc:	4302      	orrs	r2, r0
 8001ace:	ea07 070e 	and.w	r7, r7, lr
 8001ad2:	433a      	orrs	r2, r7
 8001ad4:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ad6:	6a22      	ldr	r2, [r4, #32]
 8001ad8:	2a01      	cmp	r2, #1
 8001ada:	d11d      	bne.n	8001b18 <HAL_I2S_Init+0x110>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001adc:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <HAL_I2S_Init+0x120>)
 8001ade:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ae0:	4f12      	ldr	r7, [pc, #72]	; (8001b2c <HAL_I2S_Init+0x124>)
 8001ae2:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <HAL_I2S_Init+0x128>)
 8001ae4:	42b9      	cmp	r1, r7
 8001ae6:	bf18      	it	ne
 8001ae8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001aec:	432b      	orrs	r3, r5
 8001aee:	69d1      	ldr	r1, [r2, #28]
 8001af0:	ea01 010e 	and.w	r1, r1, lr
 8001af4:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001af6:	2102      	movs	r1, #2
 8001af8:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001afa:	69d7      	ldr	r7, [r2, #28]
 8001afc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b00:	4303      	orrs	r3, r0
      tmp = I2S_MODE_SLAVE_TX;
 8001b02:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 8001b06:	ea43 0307 	orr.w	r3, r3, r7
 8001b0a:	bf0c      	ite	eq
 8001b0c:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8001b10:	2100      	movne	r1, #0
 8001b12:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001b14:	430b      	orrs	r3, r1
 8001b16:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b18:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b1a:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b1c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 8001b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b24:	08001b3f 	.word	0x08001b3f
 8001b28:	08001c3d 	.word	0x08001c3d
 8001b2c:	40003800 	.word	0x40003800
 8001b30:	40003400 	.word	0x40003400
 8001b34:	fffff040 	.word	0xfffff040

08001b38 <HAL_I2S_TxCpltCallback>:
 8001b38:	4770      	bx	lr

08001b3a <HAL_I2S_RxCpltCallback>:
 8001b3a:	4770      	bx	lr

08001b3c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b3c:	4770      	bx	lr

08001b3e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001b40:	6803      	ldr	r3, [r0, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b46:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001b4a:	2a04      	cmp	r2, #4
{
 8001b4c:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b4e:	d136      	bne.n	8001bbe <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b50:	9a01      	ldr	r2, [sp, #4]
 8001b52:	07d1      	lsls	r1, r2, #31
 8001b54:	d517      	bpl.n	8001b86 <I2S_IRQHandler+0x48>
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	0652      	lsls	r2, r2, #25
 8001b5a:	d514      	bpl.n	8001b86 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001b5c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001b5e:	68d9      	ldr	r1, [r3, #12]
 8001b60:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8001b64:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001b66:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001b68:	3a01      	subs	r2, #1
 8001b6a:	b292      	uxth	r2, r2
 8001b6c:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001b6e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001b70:	b292      	uxth	r2, r2
 8001b72:	b942      	cbnz	r2, 8001b86 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b7a:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001b82:	f7ff ffda 	bl	8001b3a <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b86:	9b01      	ldr	r3, [sp, #4]
 8001b88:	0659      	lsls	r1, r3, #25
 8001b8a:	d518      	bpl.n	8001bbe <I2S_IRQHandler+0x80>
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	0692      	lsls	r2, r2, #26
 8001b92:	d514      	bpl.n	8001bbe <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	9202      	str	r2, [sp, #8]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	9202      	str	r2, [sp, #8]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7ff ffbf 	bl	8001b3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001bbe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d136      	bne.n	8001c34 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001bc6:	9b01      	ldr	r3, [sp, #4]
 8001bc8:	079b      	lsls	r3, r3, #30
 8001bca:	d519      	bpl.n	8001c00 <I2S_IRQHandler+0xc2>
 8001bcc:	6822      	ldr	r2, [r4, #0]
 8001bce:	6853      	ldr	r3, [r2, #4]
 8001bd0:	0618      	lsls	r0, r3, #24
 8001bd2:	d515      	bpl.n	8001c00 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bd6:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001bda:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8001bdc:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8001bde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001be6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	b94b      	cbnz	r3, 8001c00 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bec:	6853      	ldr	r3, [r2, #4]
 8001bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001bf2:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7ff ff9c 	bl	8001b38 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c00:	9b01      	ldr	r3, [sp, #4]
 8001c02:	0719      	lsls	r1, r3, #28
 8001c04:	d516      	bpl.n	8001c34 <I2S_IRQHandler+0xf6>
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	0692      	lsls	r2, r2, #26
 8001c0c:	d512      	bpl.n	8001c34 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c14:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c16:	2200      	movs	r2, #0
 8001c18:	9203      	str	r2, [sp, #12]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	9303      	str	r3, [sp, #12]
 8001c1e:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c28:	f043 0304 	orr.w	r3, r3, #4
 8001c2c:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7ff ff84 	bl	8001b3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c34:	b004      	add	sp, #16
 8001c36:	bd10      	pop	{r4, pc}

08001c38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001c3c:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c3e:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c40:	498b      	ldr	r1, [pc, #556]	; (8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c42:	6893      	ldr	r3, [r2, #8]
{
 8001c44:	b086      	sub	sp, #24
 8001c46:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c48:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c4a:	4b8a      	ldr	r3, [pc, #552]	; (8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001c4c:	428a      	cmp	r2, r1
 8001c4e:	bf18      	it	ne
 8001c50:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001c54:	6899      	ldr	r1, [r3, #8]
 8001c56:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c58:	6851      	ldr	r1, [r2, #4]
 8001c5a:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c5c:	6859      	ldr	r1, [r3, #4]
 8001c5e:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c60:	6841      	ldr	r1, [r0, #4]
 8001c62:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8001c66:	f040 8090 	bne.w	8001d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x14e>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001c6a:	9b00      	ldr	r3, [sp, #0]
 8001c6c:	0799      	lsls	r1, r3, #30
 8001c6e:	d51a      	bpl.n	8001ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8001c70:	9b02      	ldr	r3, [sp, #8]
 8001c72:	061b      	lsls	r3, r3, #24
 8001c74:	d517      	bpl.n	8001ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001c76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c78:	1c99      	adds	r1, r3, #2
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	6241      	str	r1, [r0, #36]	; 0x24
 8001c7e:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001c80:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001c88:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b95b      	cbnz	r3, 8001ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c8e:	6853      	ldr	r3, [r2, #4]
 8001c90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c94:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001c96:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b923      	cbnz	r3, 8001ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ca2:	f7ff ffc9 	bl	8001c38 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001ca6:	9b01      	ldr	r3, [sp, #4]
 8001ca8:	07d8      	lsls	r0, r3, #31
 8001caa:	d522      	bpl.n	8001cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8001cac:	9b03      	ldr	r3, [sp, #12]
 8001cae:	0659      	lsls	r1, r3, #25
 8001cb0:	d51f      	bpl.n	8001cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001cb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cb4:	6820      	ldr	r0, [r4, #0]
 8001cb6:	496e      	ldr	r1, [pc, #440]	; (8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001cb8:	1c93      	adds	r3, r2, #2
 8001cba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001cbc:	4b6d      	ldr	r3, [pc, #436]	; (8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001cbe:	4288      	cmp	r0, r1
 8001cc0:	bf18      	it	ne
 8001cc2:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001cc6:	68d9      	ldr	r1, [r3, #12]
 8001cc8:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8001cca:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001ccc:	3a01      	subs	r2, #1
 8001cce:	b292      	uxth	r2, r2
 8001cd0:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001cd2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001cd4:	b292      	uxth	r2, r2
 8001cd6:	b962      	cbnz	r2, 8001cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cde:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001ce0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	b92b      	cbnz	r3, 8001cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001cec:	4620      	mov	r0, r4
 8001cee:	f7ff ffa3 	bl	8001c38 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cf2:	9b01      	ldr	r3, [sp, #4]
 8001cf4:	065a      	lsls	r2, r3, #25
 8001cf6:	d522      	bpl.n	8001d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8001cf8:	9b03      	ldr	r3, [sp, #12]
 8001cfa:	069b      	lsls	r3, r3, #26
 8001cfc:	d51f      	bpl.n	8001d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	495b      	ldr	r1, [pc, #364]	; (8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001d02:	4a5c      	ldr	r2, [pc, #368]	; (8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001d04:	428b      	cmp	r3, r1
 8001d06:	bf18      	it	ne
 8001d08:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001d0c:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d0e:	6851      	ldr	r1, [r2, #4]
 8001d10:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001d14:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d1c:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	9204      	str	r2, [sp, #16]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	9204      	str	r2, [sp, #16]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	9304      	str	r3, [sp, #16]
 8001d2a:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001d3a:	f7ff feff 	bl	8001b3c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d3e:	9b00      	ldr	r3, [sp, #0]
 8001d40:	0718      	lsls	r0, r3, #28
 8001d42:	d520      	bpl.n	8001d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001d44:	9b02      	ldr	r3, [sp, #8]
 8001d46:	0699      	lsls	r1, r3, #26
 8001d48:	d51d      	bpl.n	8001d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d4a:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d4c:	4948      	ldr	r1, [pc, #288]	; (8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d54:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d56:	4a47      	ldr	r2, [pc, #284]	; (8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001d58:	428b      	cmp	r3, r1
 8001d5a:	bf18      	it	ne
 8001d5c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001d60:	6851      	ldr	r1, [r2, #4]
 8001d62:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001d66:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	9205      	str	r2, [sp, #20]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	9305      	str	r3, [sp, #20]
 8001d70:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8001d72:	2301      	movs	r3, #1
 8001d74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d7a:	f043 0304 	orr.w	r3, r3, #4
 8001d7e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff fedb 	bl	8001b3c <HAL_I2S_ErrorCallback>
}
 8001d86:	b006      	add	sp, #24
 8001d88:	bd10      	pop	{r4, pc}
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001d8a:	9a01      	ldr	r2, [sp, #4]
 8001d8c:	0792      	lsls	r2, r2, #30
 8001d8e:	d51a      	bpl.n	8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 8001d90:	9a03      	ldr	r2, [sp, #12]
 8001d92:	0611      	lsls	r1, r2, #24
 8001d94:	d517      	bpl.n	8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001d96:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001d98:	1c91      	adds	r1, r2, #2
 8001d9a:	8812      	ldrh	r2, [r2, #0]
 8001d9c:	6241      	str	r1, [r0, #36]	; 0x24
 8001d9e:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001da0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001da2:	3a01      	subs	r2, #1
 8001da4:	b292      	uxth	r2, r2
 8001da6:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001da8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001daa:	b292      	uxth	r2, r2
 8001dac:	b95a      	cbnz	r2, 8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001db4:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8001db6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	b923      	cbnz	r3, 8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
      hi2s->State = HAL_I2S_STATE_READY;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001dc2:	f7ff ff39 	bl	8001c38 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001dc6:	9b00      	ldr	r3, [sp, #0]
 8001dc8:	07da      	lsls	r2, r3, #31
 8001dca:	d51c      	bpl.n	8001e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001dcc:	9b02      	ldr	r3, [sp, #8]
 8001dce:	065b      	lsls	r3, r3, #25
 8001dd0:	d519      	bpl.n	8001e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001dd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dd4:	1c9a      	adds	r2, r3, #2
 8001dd6:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001dd8:	6822      	ldr	r2, [r4, #0]
 8001dda:	68d1      	ldr	r1, [r2, #12]
 8001ddc:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8001dde:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001de6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b963      	cbnz	r3, 8001e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dec:	6853      	ldr	r3, [r2, #4]
 8001dee:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001df2:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001df4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	b92b      	cbnz	r3, 8001e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      hi2s->State = HAL_I2S_STATE_READY;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e00:	4620      	mov	r0, r4
 8001e02:	f7ff ff19 	bl	8001c38 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e06:	9b00      	ldr	r3, [sp, #0]
 8001e08:	0658      	lsls	r0, r3, #25
 8001e0a:	d51b      	bpl.n	8001e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001e0c:	9b02      	ldr	r3, [sp, #8]
 8001e0e:	0699      	lsls	r1, r3, #26
 8001e10:	d518      	bpl.n	8001e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e12:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e14:	4916      	ldr	r1, [pc, #88]	; (8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e16:	6853      	ldr	r3, [r2, #4]
 8001e18:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e1c:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001e20:	428a      	cmp	r2, r1
 8001e22:	bf18      	it	ne
 8001e24:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001e28:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e30:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e3a:	f043 0302 	orr.w	r3, r3, #2
 8001e3e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001e40:	f7ff fe7c 	bl	8001b3c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e44:	9b01      	ldr	r3, [sp, #4]
 8001e46:	071a      	lsls	r2, r3, #28
 8001e48:	d59d      	bpl.n	8001d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001e4a:	9b03      	ldr	r3, [sp, #12]
 8001e4c:	069b      	lsls	r3, r3, #26
 8001e4e:	d59a      	bpl.n	8001d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e50:	6822      	ldr	r2, [r4, #0]
 8001e52:	4907      	ldr	r1, [pc, #28]	; (8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001e56:	428a      	cmp	r2, r1
 8001e58:	bf18      	it	ne
 8001e5a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001e64:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e66:	6853      	ldr	r3, [r2, #4]
 8001e68:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e6c:	6053      	str	r3, [r2, #4]
 8001e6e:	e780      	b.n	8001d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8001e70:	40003800 	.word	0x40003800
 8001e74:	40003400 	.word	0x40003400

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	b908      	cbnz	r0, 8001e84 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001e80:	2001      	movs	r0, #1
 8001e82:	e03f      	b.n	8001f04 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e84:	6803      	ldr	r3, [r0, #0]
 8001e86:	07dd      	lsls	r5, r3, #31
 8001e88:	d410      	bmi.n	8001eac <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	0798      	lsls	r0, r3, #30
 8001e8e:	d45a      	bmi.n	8001f46 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	071a      	lsls	r2, r3, #28
 8001e94:	f100 809c 	bmi.w	8001fd0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	075b      	lsls	r3, r3, #29
 8001e9c:	f100 80ba 	bmi.w	8002014 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea0:	69a0      	ldr	r0, [r4, #24]
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	f040 811b 	bne.w	80020de <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	e02b      	b.n	8001f04 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eac:	4ba4      	ldr	r3, [pc, #656]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	f002 020c 	and.w	r2, r2, #12
 8001eb4:	2a04      	cmp	r2, #4
 8001eb6:	d007      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ebe:	2a08      	cmp	r2, #8
 8001ec0:	d10a      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	0259      	lsls	r1, r3, #9
 8001ec6:	d507      	bpl.n	8001ed8 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	4b9d      	ldr	r3, [pc, #628]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	039a      	lsls	r2, r3, #14
 8001ece:	d5dc      	bpl.n	8001e8a <HAL_RCC_OscConfig+0x12>
 8001ed0:	6863      	ldr	r3, [r4, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1d9      	bne.n	8001e8a <HAL_RCC_OscConfig+0x12>
 8001ed6:	e7d3      	b.n	8001e80 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed8:	6863      	ldr	r3, [r4, #4]
 8001eda:	4d99      	ldr	r5, [pc, #612]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
 8001edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee0:	d113      	bne.n	8001f0a <HAL_RCC_OscConfig+0x92>
 8001ee2:	682b      	ldr	r3, [r5, #0]
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001eea:	f7fe fbab 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4d94      	ldr	r5, [pc, #592]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001ef0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	682b      	ldr	r3, [r5, #0]
 8001ef4:	039b      	lsls	r3, r3, #14
 8001ef6:	d4c8      	bmi.n	8001e8a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7fe fba4 	bl	8000644 <HAL_GetTick>
 8001efc:	1b80      	subs	r0, r0, r6
 8001efe:	2864      	cmp	r0, #100	; 0x64
 8001f00:	d9f7      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001f02:	2003      	movs	r0, #3
}
 8001f04:	b002      	add	sp, #8
 8001f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f0e:	d104      	bne.n	8001f1a <HAL_RCC_OscConfig+0xa2>
 8001f10:	682b      	ldr	r3, [r5, #0]
 8001f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f16:	602b      	str	r3, [r5, #0]
 8001f18:	e7e3      	b.n	8001ee2 <HAL_RCC_OscConfig+0x6a>
 8001f1a:	682a      	ldr	r2, [r5, #0]
 8001f1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f20:	602a      	str	r2, [r5, #0]
 8001f22:	682a      	ldr	r2, [r5, #0]
 8001f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f28:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1dd      	bne.n	8001eea <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fb89 	bl	8000644 <HAL_GetTick>
 8001f32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f34:	682b      	ldr	r3, [r5, #0]
 8001f36:	039f      	lsls	r7, r3, #14
 8001f38:	d5a7      	bpl.n	8001e8a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f3a:	f7fe fb83 	bl	8000644 <HAL_GetTick>
 8001f3e:	1b80      	subs	r0, r0, r6
 8001f40:	2864      	cmp	r0, #100	; 0x64
 8001f42:	d9f7      	bls.n	8001f34 <HAL_RCC_OscConfig+0xbc>
 8001f44:	e7dd      	b.n	8001f02 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f46:	4b7e      	ldr	r3, [pc, #504]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	f012 0f0c 	tst.w	r2, #12
 8001f4e:	d007      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f56:	2a08      	cmp	r2, #8
 8001f58:	d111      	bne.n	8001f7e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	025e      	lsls	r6, r3, #9
 8001f5e:	d40e      	bmi.n	8001f7e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f60:	4b77      	ldr	r3, [pc, #476]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	0795      	lsls	r5, r2, #30
 8001f66:	d502      	bpl.n	8001f6e <HAL_RCC_OscConfig+0xf6>
 8001f68:	68e2      	ldr	r2, [r4, #12]
 8001f6a:	2a01      	cmp	r2, #1
 8001f6c:	d188      	bne.n	8001e80 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	6921      	ldr	r1, [r4, #16]
 8001f72:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001f76:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001f7a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7c:	e788      	b.n	8001e90 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f7e:	68e2      	ldr	r2, [r4, #12]
 8001f80:	4b70      	ldr	r3, [pc, #448]	; (8002144 <HAL_RCC_OscConfig+0x2cc>)
 8001f82:	b1b2      	cbz	r2, 8001fb2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f88:	f7fe fb5c 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	4d6c      	ldr	r5, [pc, #432]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001f8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	682b      	ldr	r3, [r5, #0]
 8001f92:	0798      	lsls	r0, r3, #30
 8001f94:	d507      	bpl.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	682b      	ldr	r3, [r5, #0]
 8001f98:	6922      	ldr	r2, [r4, #16]
 8001f9a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f9e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fa2:	602b      	str	r3, [r5, #0]
 8001fa4:	e774      	b.n	8001e90 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7fe fb4d 	bl	8000644 <HAL_GetTick>
 8001faa:	1b80      	subs	r0, r0, r6
 8001fac:	2802      	cmp	r0, #2
 8001fae:	d9ef      	bls.n	8001f90 <HAL_RCC_OscConfig+0x118>
 8001fb0:	e7a7      	b.n	8001f02 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fb46 	bl	8000644 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb8:	4d61      	ldr	r5, [pc, #388]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001fba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbc:	682b      	ldr	r3, [r5, #0]
 8001fbe:	0799      	lsls	r1, r3, #30
 8001fc0:	f57f af66 	bpl.w	8001e90 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7fe fb3e 	bl	8000644 <HAL_GetTick>
 8001fc8:	1b80      	subs	r0, r0, r6
 8001fca:	2802      	cmp	r0, #2
 8001fcc:	d9f6      	bls.n	8001fbc <HAL_RCC_OscConfig+0x144>
 8001fce:	e798      	b.n	8001f02 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fd0:	6962      	ldr	r2, [r4, #20]
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_RCC_OscConfig+0x2d0>)
 8001fd4:	b17a      	cbz	r2, 8001ff6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fda:	f7fe fb33 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4d58      	ldr	r5, [pc, #352]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001fe0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001fe4:	079f      	lsls	r7, r3, #30
 8001fe6:	f53f af57 	bmi.w	8001e98 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fea:	f7fe fb2b 	bl	8000644 <HAL_GetTick>
 8001fee:	1b80      	subs	r0, r0, r6
 8001ff0:	2802      	cmp	r0, #2
 8001ff2:	d9f6      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x16a>
 8001ff4:	e785      	b.n	8001f02 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001ff6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fb24 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffc:	4d50      	ldr	r5, [pc, #320]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001ffe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002002:	0798      	lsls	r0, r3, #30
 8002004:	f57f af48 	bpl.w	8001e98 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002008:	f7fe fb1c 	bl	8000644 <HAL_GetTick>
 800200c:	1b80      	subs	r0, r0, r6
 800200e:	2802      	cmp	r0, #2
 8002010:	d9f6      	bls.n	8002000 <HAL_RCC_OscConfig+0x188>
 8002012:	e776      	b.n	8001f02 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002014:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
 8002016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002018:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800201c:	d128      	bne.n	8002070 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	9201      	str	r2, [sp, #4]
 8002020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002022:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002032:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	4d45      	ldr	r5, [pc, #276]	; (800214c <HAL_RCC_OscConfig+0x2d4>)
 8002036:	682b      	ldr	r3, [r5, #0]
 8002038:	05d9      	lsls	r1, r3, #23
 800203a:	d51b      	bpl.n	8002074 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	68a3      	ldr	r3, [r4, #8]
 800203e:	4d40      	ldr	r5, [pc, #256]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
 8002040:	2b01      	cmp	r3, #1
 8002042:	d127      	bne.n	8002094 <HAL_RCC_OscConfig+0x21c>
 8002044:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800204c:	f7fe fafa 	bl	8000644 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	4d3b      	ldr	r5, [pc, #236]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8002052:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800205a:	079b      	lsls	r3, r3, #30
 800205c:	d539      	bpl.n	80020d2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800205e:	2e00      	cmp	r6, #0
 8002060:	f43f af1e 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002064:	4a36      	ldr	r2, [pc, #216]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
 8002066:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	e717      	b.n	8001ea0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002070:	2600      	movs	r6, #0
 8002072:	e7df      	b.n	8002034 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002074:	682b      	ldr	r3, [r5, #0]
 8002076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800207c:	f7fe fae2 	bl	8000644 <HAL_GetTick>
 8002080:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	682b      	ldr	r3, [r5, #0]
 8002084:	05da      	lsls	r2, r3, #23
 8002086:	d4d9      	bmi.n	800203c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002088:	f7fe fadc 	bl	8000644 <HAL_GetTick>
 800208c:	1bc0      	subs	r0, r0, r7
 800208e:	2802      	cmp	r0, #2
 8002090:	d9f7      	bls.n	8002082 <HAL_RCC_OscConfig+0x20a>
 8002092:	e736      	b.n	8001f02 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002094:	2b05      	cmp	r3, #5
 8002096:	d104      	bne.n	80020a2 <HAL_RCC_OscConfig+0x22a>
 8002098:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	672b      	str	r3, [r5, #112]	; 0x70
 80020a0:	e7d0      	b.n	8002044 <HAL_RCC_OscConfig+0x1cc>
 80020a2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	672a      	str	r2, [r5, #112]	; 0x70
 80020aa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80020ac:	f022 0204 	bic.w	r2, r2, #4
 80020b0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ca      	bne.n	800204c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80020b6:	f7fe fac5 	bl	8000644 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80020be:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80020c2:	0798      	lsls	r0, r3, #30
 80020c4:	d5cb      	bpl.n	800205e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7fe fabd 	bl	8000644 <HAL_GetTick>
 80020ca:	1bc0      	subs	r0, r0, r7
 80020cc:	4540      	cmp	r0, r8
 80020ce:	d9f7      	bls.n	80020c0 <HAL_RCC_OscConfig+0x248>
 80020d0:	e717      	b.n	8001f02 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7fe fab7 	bl	8000644 <HAL_GetTick>
 80020d6:	1bc0      	subs	r0, r0, r7
 80020d8:	4540      	cmp	r0, r8
 80020da:	d9bd      	bls.n	8002058 <HAL_RCC_OscConfig+0x1e0>
 80020dc:	e711      	b.n	8001f02 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020de:	4d18      	ldr	r5, [pc, #96]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
 80020e0:	68ab      	ldr	r3, [r5, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d047      	beq.n	800217a <HAL_RCC_OscConfig+0x302>
 80020ea:	4e19      	ldr	r6, [pc, #100]	; (8002150 <HAL_RCC_OscConfig+0x2d8>)
 80020ec:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ee:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80020f0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f2:	d135      	bne.n	8002160 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80020f4:	f7fe faa6 	bl	8000644 <HAL_GetTick>
 80020f8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fa:	682b      	ldr	r3, [r5, #0]
 80020fc:	0199      	lsls	r1, r3, #6
 80020fe:	d429      	bmi.n	8002154 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002100:	6a22      	ldr	r2, [r4, #32]
 8002102:	69e3      	ldr	r3, [r4, #28]
 8002104:	4313      	orrs	r3, r2
 8002106:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002108:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800210c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800210e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002112:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002114:	4c0a      	ldr	r4, [pc, #40]	; (8002140 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002116:	0852      	lsrs	r2, r2, #1
 8002118:	3a01      	subs	r2, #1
 800211a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800211e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002120:	2301      	movs	r3, #1
 8002122:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002124:	f7fe fa8e 	bl	8000644 <HAL_GetTick>
 8002128:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	019a      	lsls	r2, r3, #6
 800212e:	f53f aebb 	bmi.w	8001ea8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002132:	f7fe fa87 	bl	8000644 <HAL_GetTick>
 8002136:	1b40      	subs	r0, r0, r5
 8002138:	2802      	cmp	r0, #2
 800213a:	d9f6      	bls.n	800212a <HAL_RCC_OscConfig+0x2b2>
 800213c:	e6e1      	b.n	8001f02 <HAL_RCC_OscConfig+0x8a>
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	42470000 	.word	0x42470000
 8002148:	42470e80 	.word	0x42470e80
 800214c:	40007000 	.word	0x40007000
 8002150:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe fa76 	bl	8000644 <HAL_GetTick>
 8002158:	1bc0      	subs	r0, r0, r7
 800215a:	2802      	cmp	r0, #2
 800215c:	d9cd      	bls.n	80020fa <HAL_RCC_OscConfig+0x282>
 800215e:	e6d0      	b.n	8001f02 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8002160:	f7fe fa70 	bl	8000644 <HAL_GetTick>
 8002164:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	682b      	ldr	r3, [r5, #0]
 8002168:	019b      	lsls	r3, r3, #6
 800216a:	f57f ae9d 	bpl.w	8001ea8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216e:	f7fe fa69 	bl	8000644 <HAL_GetTick>
 8002172:	1b00      	subs	r0, r0, r4
 8002174:	2802      	cmp	r0, #2
 8002176:	d9f6      	bls.n	8002166 <HAL_RCC_OscConfig+0x2ee>
 8002178:	e6c3      	b.n	8001f02 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217a:	2801      	cmp	r0, #1
 800217c:	f43f aec2 	beq.w	8001f04 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8002180:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	69e3      	ldr	r3, [r4, #28]
 8002184:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8002188:	429a      	cmp	r2, r3
 800218a:	f47f ae79 	bne.w	8001e80 <HAL_RCC_OscConfig+0x8>
 800218e:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002190:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002194:	4293      	cmp	r3, r2
 8002196:	f47f ae73 	bne.w	8001e80 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800219a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800219c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021a0:	4003      	ands	r3, r0
 80021a2:	4293      	cmp	r3, r2
 80021a4:	f47f ae6c 	bne.w	8001e80 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021aa:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021ae:	4293      	cmp	r3, r2
 80021b0:	f47f ae66 	bne.w	8001e80 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021b6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80021ba:	1ac0      	subs	r0, r0, r3
 80021bc:	bf18      	it	ne
 80021be:	2001      	movne	r0, #1
 80021c0:	e6a0      	b.n	8001f04 <HAL_RCC_OscConfig+0x8c>
 80021c2:	bf00      	nop

080021c4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c4:	4913      	ldr	r1, [pc, #76]	; (8002214 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80021c6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c8:	688b      	ldr	r3, [r1, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x16>
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d6:	4810      	ldr	r0, [pc, #64]	; (8002218 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021d8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80021da:	4810      	ldr	r0, [pc, #64]	; (800221c <HAL_RCC_GetSysClockFreq+0x58>)
 80021dc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021de:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021e0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021e4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e8:	bf14      	ite	ne
 80021ea:	480c      	ldrne	r0, [pc, #48]	; (800221c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ec:	480a      	ldreq	r0, [pc, #40]	; (8002218 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ee:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80021f2:	bf18      	it	ne
 80021f4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fa:	fba1 0100 	umull	r0, r1, r1, r0
 80021fe:	f7fe f84f 	bl	80002a0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <HAL_RCC_GetSysClockFreq+0x50>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800220a:	3301      	adds	r3, #1
 800220c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800220e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002212:	bd08      	pop	{r3, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	00f42400 	.word	0x00f42400
 800221c:	007a1200 	.word	0x007a1200

08002220 <HAL_RCC_ClockConfig>:
{
 8002220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002224:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002226:	4604      	mov	r4, r0
 8002228:	b910      	cbnz	r0, 8002230 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800222a:	2001      	movs	r0, #1
 800222c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b44      	ldr	r3, [pc, #272]	; (8002344 <HAL_RCC_ClockConfig+0x124>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	f002 020f 	and.w	r2, r2, #15
 8002238:	428a      	cmp	r2, r1
 800223a:	d329      	bcc.n	8002290 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	6821      	ldr	r1, [r4, #0]
 800223e:	078f      	lsls	r7, r1, #30
 8002240:	d42e      	bmi.n	80022a0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002242:	07c8      	lsls	r0, r1, #31
 8002244:	d441      	bmi.n	80022ca <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002246:	4b3f      	ldr	r3, [pc, #252]	; (8002344 <HAL_RCC_ClockConfig+0x124>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	f002 020f 	and.w	r2, r2, #15
 800224e:	4295      	cmp	r5, r2
 8002250:	d367      	bcc.n	8002322 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	0751      	lsls	r1, r2, #29
 8002256:	d46d      	bmi.n	8002334 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002258:	0713      	lsls	r3, r2, #28
 800225a:	d507      	bpl.n	800226c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225c:	4a3a      	ldr	r2, [pc, #232]	; (8002348 <HAL_RCC_ClockConfig+0x128>)
 800225e:	6921      	ldr	r1, [r4, #16]
 8002260:	6893      	ldr	r3, [r2, #8]
 8002262:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002266:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800226a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800226c:	f7ff ffaa 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002270:	4b35      	ldr	r3, [pc, #212]	; (8002348 <HAL_RCC_ClockConfig+0x128>)
 8002272:	4a36      	ldr	r2, [pc, #216]	; (800234c <HAL_RCC_ClockConfig+0x12c>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	40d8      	lsrs	r0, r3
 800227e:	4b34      	ldr	r3, [pc, #208]	; (8002350 <HAL_RCC_ClockConfig+0x130>)
 8002280:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002282:	4b34      	ldr	r3, [pc, #208]	; (8002354 <HAL_RCC_ClockConfig+0x134>)
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	f7fe f993 	bl	80005b0 <HAL_InitTick>
  return HAL_OK;
 800228a:	2000      	movs	r0, #0
 800228c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002290:	b2ca      	uxtb	r2, r1
 8002292:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	4299      	cmp	r1, r3
 800229c:	d1c5      	bne.n	800222a <HAL_RCC_ClockConfig+0xa>
 800229e:	e7cd      	b.n	800223c <HAL_RCC_ClockConfig+0x1c>
 80022a0:	4b29      	ldr	r3, [pc, #164]	; (8002348 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a6:	bf1e      	ittt	ne
 80022a8:	689a      	ldrne	r2, [r3, #8]
 80022aa:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80022ae:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b2:	bf42      	ittt	mi
 80022b4:	689a      	ldrmi	r2, [r3, #8]
 80022b6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80022ba:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	68a0      	ldr	r0, [r4, #8]
 80022c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022c4:	4302      	orrs	r2, r0
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	e7bb      	b.n	8002242 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ca:	6862      	ldr	r2, [r4, #4]
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_RCC_ClockConfig+0x128>)
 80022ce:	2a01      	cmp	r2, #1
 80022d0:	d11d      	bne.n	800230e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d8:	d0a7      	beq.n	800222a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022da:	4e1b      	ldr	r6, [pc, #108]	; (8002348 <HAL_RCC_ClockConfig+0x128>)
 80022dc:	68b3      	ldr	r3, [r6, #8]
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80022e6:	f7fe f9ad 	bl	8000644 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ea:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80022ee:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f0:	68b3      	ldr	r3, [r6, #8]
 80022f2:	6862      	ldr	r2, [r4, #4]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022fc:	d0a3      	beq.n	8002246 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fe:	f7fe f9a1 	bl	8000644 <HAL_GetTick>
 8002302:	1bc0      	subs	r0, r0, r7
 8002304:	4540      	cmp	r0, r8
 8002306:	d9f3      	bls.n	80022f0 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002308:	2003      	movs	r0, #3
}
 800230a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230e:	1e91      	subs	r1, r2, #2
 8002310:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002312:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002314:	d802      	bhi.n	800231c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800231a:	e7dd      	b.n	80022d8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	f013 0f02 	tst.w	r3, #2
 8002320:	e7da      	b.n	80022d8 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	b2ea      	uxtb	r2, r5
 8002324:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	429d      	cmp	r5, r3
 800232e:	f47f af7c 	bne.w	800222a <HAL_RCC_ClockConfig+0xa>
 8002332:	e78e      	b.n	8002252 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002334:	4904      	ldr	r1, [pc, #16]	; (8002348 <HAL_RCC_ClockConfig+0x128>)
 8002336:	68e0      	ldr	r0, [r4, #12]
 8002338:	688b      	ldr	r3, [r1, #8]
 800233a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800233e:	4303      	orrs	r3, r0
 8002340:	608b      	str	r3, [r1, #8]
 8002342:	e789      	b.n	8002258 <HAL_RCC_ClockConfig+0x38>
 8002344:	40023c00 	.word	0x40023c00
 8002348:	40023800 	.word	0x40023800
 800234c:	0800d25e 	.word	0x0800d25e
 8002350:	20001ba8 	.word	0x20001ba8
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002358:	4b01      	ldr	r3, [pc, #4]	; (8002360 <HAL_RCC_GetHCLKFreq+0x8>)
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20001ba8 	.word	0x20001ba8

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	4a03      	ldr	r2, [pc, #12]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002372:	6810      	ldr	r0, [r2, #0]
}
 8002374:	40d8      	lsrs	r0, r3
 8002376:	4770      	bx	lr
 8002378:	40023800 	.word	0x40023800
 800237c:	0800d26e 	.word	0x0800d26e
 8002380:	20001ba8 	.word	0x20001ba8

08002384 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002384:	6803      	ldr	r3, [r0, #0]
 8002386:	f013 0f05 	tst.w	r3, #5
{
 800238a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800238c:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800238e:	d105      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002390:	6828      	ldr	r0, [r5, #0]
 8002392:	f010 0002 	ands.w	r0, r0, #2
 8002396:	d128      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8002398:	b003      	add	sp, #12
 800239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 800239c:	4c41      	ldr	r4, [pc, #260]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800239e:	4e42      	ldr	r6, [pc, #264]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 80023a0:	2300      	movs	r3, #0
 80023a2:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80023a4:	f7fe f94e 	bl	8000644 <HAL_GetTick>
 80023a8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023aa:	6833      	ldr	r3, [r6, #0]
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	d415      	bmi.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80023b0:	68ab      	ldr	r3, [r5, #8]
 80023b2:	686a      	ldr	r2, [r5, #4]
 80023b4:	071b      	lsls	r3, r3, #28
 80023b6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80023ba:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80023be:	2301      	movs	r3, #1
 80023c0:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80023c2:	f7fe f93f 	bl	8000644 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023c6:	4c38      	ldr	r4, [pc, #224]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 80023c8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	0118      	lsls	r0, r3, #4
 80023ce:	d4df      	bmi.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023d0:	f7fe f938 	bl	8000644 <HAL_GetTick>
 80023d4:	1b80      	subs	r0, r0, r6
 80023d6:	2802      	cmp	r0, #2
 80023d8:	d9f7      	bls.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x46>
 80023da:	e004      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023dc:	f7fe f932 	bl	8000644 <HAL_GetTick>
 80023e0:	1bc0      	subs	r0, r0, r7
 80023e2:	2802      	cmp	r0, #2
 80023e4:	d9e1      	bls.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 80023e6:	2003      	movs	r0, #3
 80023e8:	e7d6      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	4b2e      	ldr	r3, [pc, #184]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 80023f0:	4c2e      	ldr	r4, [pc, #184]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800240c:	f7fe f91a 	bl	8000644 <HAL_GetTick>
 8002410:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	05d9      	lsls	r1, r3, #23
 8002416:	d51b      	bpl.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002418:	4c23      	ldr	r4, [pc, #140]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800241a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800241c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002420:	d11c      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002422:	68eb      	ldr	r3, [r5, #12]
 8002424:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002428:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800242c:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800242e:	d134      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002430:	6891      	ldr	r1, [r2, #8]
 8002432:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002436:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800243a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800243e:	4301      	orrs	r1, r0
 8002440:	6091      	str	r1, [r2, #8]
 8002442:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002448:	430b      	orrs	r3, r1
 800244a:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 800244c:	2000      	movs	r0, #0
 800244e:	e7a3      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002450:	f7fe f8f8 	bl	8000644 <HAL_GetTick>
 8002454:	1b80      	subs	r0, r0, r6
 8002456:	2802      	cmp	r0, #2
 8002458:	d9db      	bls.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800245a:	e7c4      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800245c:	68ea      	ldr	r2, [r5, #12]
 800245e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002462:	4293      	cmp	r3, r2
 8002464:	d0dd      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002466:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002468:	4a11      	ldr	r2, [pc, #68]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800246a:	2101      	movs	r1, #1
 800246c:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800246e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002472:	2100      	movs	r1, #0
 8002474:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002476:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002478:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800247a:	07da      	lsls	r2, r3, #31
 800247c:	d5d1      	bpl.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 800247e:	f7fe f8e1 	bl	8000644 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002486:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800248a:	079b      	lsls	r3, r3, #30
 800248c:	d4c9      	bmi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7fe f8d9 	bl	8000644 <HAL_GetTick>
 8002492:	1b80      	subs	r0, r0, r6
 8002494:	42b8      	cmp	r0, r7
 8002496:	d9f7      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002498:	e7a5      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800249a:	6891      	ldr	r1, [r2, #8]
 800249c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80024a0:	e7ce      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 80024a2:	bf00      	nop
 80024a4:	42470068 	.word	0x42470068
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40007000 	.word	0x40007000
 80024b0:	42470e40 	.word	0x42470e40

080024b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80024b4:	2801      	cmp	r0, #1
 80024b6:	d120      	bne.n	80024fa <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 80024ba:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 80024bc:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 80024c0:	d004      	beq.n	80024cc <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 80024c2:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80024c4:	480f      	ldr	r0, [pc, #60]	; (8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80024c6:	bf18      	it	ne
 80024c8:	2000      	movne	r0, #0
 80024ca:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024cc:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80024ce:	490c      	ldr	r1, [pc, #48]	; (8002500 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80024d0:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024d2:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80024d4:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80024d8:	bf4c      	ite	mi
 80024da:	4b0b      	ldrmi	r3, [pc, #44]	; (8002508 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80024dc:	4b0b      	ldrpl	r3, [pc, #44]	; (800250c <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80024de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80024e2:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80024e6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80024ea:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80024ee:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80024f0:	f3c0 7002 	ubfx	r0, r0, #28, #3
 80024f4:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 80024f8:	4770      	bx	lr
  uint32_t frequency = 0U;
 80024fa:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	00bb8000 	.word	0x00bb8000
 8002508:	007a1200 	.word	0x007a1200
 800250c:	00f42400 	.word	0x00f42400

08002510 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002512:	3b01      	subs	r3, #1
 8002514:	d101      	bne.n	800251a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002516:	2003      	movs	r0, #3
 8002518:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800251a:	6902      	ldr	r2, [r0, #16]
 800251c:	2a00      	cmp	r2, #0
 800251e:	daf8      	bge.n	8002512 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002520:	6903      	ldr	r3, [r0, #16]
 8002522:	4a06      	ldr	r2, [pc, #24]	; (800253c <USB_CoreReset+0x2c>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800252a:	3a01      	subs	r2, #1
 800252c:	d0f3      	beq.n	8002516 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800252e:	6903      	ldr	r3, [r0, #16]
 8002530:	f013 0301 	ands.w	r3, r3, #1
 8002534:	d1f9      	bne.n	800252a <USB_CoreReset+0x1a>

  return HAL_OK;
 8002536:	4618      	mov	r0, r3
}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	00030d41 	.word	0x00030d41

08002540 <USB_CoreInit>:
{
 8002540:	b084      	sub	sp, #16
 8002542:	b538      	push	{r3, r4, r5, lr}
 8002544:	ad05      	add	r5, sp, #20
 8002546:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800254a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800254c:	2b01      	cmp	r3, #1
{
 800254e:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002550:	d125      	bne.n	800259e <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002552:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002558:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800255a:	68c3      	ldr	r3, [r0, #12]
 800255c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002564:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002566:	68c3      	ldr	r3, [r0, #12]
 8002568:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800256c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800256e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002570:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002572:	bf02      	ittt	eq
 8002574:	68c3      	ldreq	r3, [r0, #12]
 8002576:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800257a:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800257c:	f7ff ffc8 	bl	8002510 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002580:	9b08      	ldr	r3, [sp, #32]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d107      	bne.n	8002596 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002586:	68a3      	ldr	r3, [r4, #8]
 8002588:	f043 0306 	orr.w	r3, r3, #6
 800258c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800258e:	68a3      	ldr	r3, [r4, #8]
 8002590:	f043 0320 	orr.w	r3, r3, #32
 8002594:	60a3      	str	r3, [r4, #8]
}
 8002596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800259a:	b004      	add	sp, #16
 800259c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800259e:	68c3      	ldr	r3, [r0, #12]
 80025a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a4:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80025a6:	f7ff ffb3 	bl	8002510 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80025aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025ac:	b923      	cbnz	r3, 80025b8 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80025b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80025b6:	e7e3      	b.n	8002580 <USB_CoreInit+0x40>
 80025b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025be:	e7f9      	b.n	80025b4 <USB_CoreInit+0x74>

080025c0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80025c0:	6883      	ldr	r3, [r0, #8]
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6083      	str	r3, [r0, #8]
}
 80025c8:	2000      	movs	r0, #0
 80025ca:	4770      	bx	lr

080025cc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80025cc:	6883      	ldr	r3, [r0, #8]
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	6083      	str	r3, [r0, #8]
}
 80025d4:	2000      	movs	r0, #0
 80025d6:	4770      	bx	lr

080025d8 <USB_SetCurrentMode>:
{
 80025d8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80025da:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80025dc:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80025de:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80025e2:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80025e4:	d108      	bne.n	80025f8 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80025e6:	68c3      	ldr	r3, [r0, #12]
 80025e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80025ec:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80025ee:	2032      	movs	r0, #50	; 0x32
 80025f0:	f7fe f82e 	bl	8000650 <HAL_Delay>
  return HAL_OK;
 80025f4:	2000      	movs	r0, #0
 80025f6:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80025f8:	b919      	cbnz	r1, 8002602 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80025fa:	68c3      	ldr	r3, [r0, #12]
 80025fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002600:	e7f4      	b.n	80025ec <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002602:	2001      	movs	r0, #1
}
 8002604:	bd08      	pop	{r3, pc}
	...

08002608 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002608:	0189      	lsls	r1, r1, #6
 800260a:	f041 0120 	orr.w	r1, r1, #32
 800260e:	4a06      	ldr	r2, [pc, #24]	; (8002628 <USB_FlushTxFifo+0x20>)
 8002610:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002612:	3a01      	subs	r2, #1
 8002614:	d005      	beq.n	8002622 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002616:	6903      	ldr	r3, [r0, #16]
 8002618:	f013 0320 	ands.w	r3, r3, #32
 800261c:	d1f9      	bne.n	8002612 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800261e:	4618      	mov	r0, r3
 8002620:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002622:	2003      	movs	r0, #3
}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	00030d41 	.word	0x00030d41

0800262c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800262c:	2310      	movs	r3, #16
 800262e:	4a06      	ldr	r2, [pc, #24]	; (8002648 <USB_FlushRxFifo+0x1c>)
 8002630:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002632:	3a01      	subs	r2, #1
 8002634:	d005      	beq.n	8002642 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002636:	6903      	ldr	r3, [r0, #16]
 8002638:	f013 0310 	ands.w	r3, r3, #16
 800263c:	d1f9      	bne.n	8002632 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800263e:	4618      	mov	r0, r3
 8002640:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002642:	2003      	movs	r0, #3
}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	00030d41 	.word	0x00030d41

0800264c <USB_WritePacket>:
{
 800264c:	b510      	push	{r4, lr}
 800264e:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002652:	b94c      	cbnz	r4, 8002668 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002654:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002656:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800265a:	f023 0303 	bic.w	r3, r3, #3
 800265e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002662:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8002664:	4299      	cmp	r1, r3
 8002666:	d101      	bne.n	800266c <USB_WritePacket+0x20>
}
 8002668:	2000      	movs	r0, #0
 800266a:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800266c:	f851 2b04 	ldr.w	r2, [r1], #4
 8002670:	6002      	str	r2, [r0, #0]
 8002672:	e7f7      	b.n	8002664 <USB_WritePacket+0x18>

08002674 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002674:	3203      	adds	r2, #3
 8002676:	f022 0203 	bic.w	r2, r2, #3
 800267a:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800267c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8002680:	4291      	cmp	r1, r2
 8002682:	d101      	bne.n	8002688 <USB_ReadPacket+0x14>
}
 8002684:	4608      	mov	r0, r1
 8002686:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002688:	6803      	ldr	r3, [r0, #0]
 800268a:	f841 3b04 	str.w	r3, [r1], #4
 800268e:	e7f7      	b.n	8002680 <USB_ReadPacket+0xc>

08002690 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002690:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002692:	6980      	ldr	r0, [r0, #24]
}
 8002694:	4010      	ands	r0, r2
 8002696:	4770      	bx	lr

08002698 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002698:	6940      	ldr	r0, [r0, #20]
}
 800269a:	f000 0001 	and.w	r0, r0, #1
 800269e:	4770      	bx	lr

080026a0 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80026a0:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80026a4:	f023 0303 	bic.w	r3, r3, #3
{
 80026a8:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80026aa:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80026ae:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80026b2:	f001 0303 	and.w	r3, r1, #3
 80026b6:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 80026b8:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80026ba:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80026be:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80026c2:	d104      	bne.n	80026ce <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80026c4:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 80026c8:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80026ca:	2000      	movs	r0, #0
 80026cc:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80026ce:	2902      	cmp	r1, #2
 80026d0:	d1fb      	bne.n	80026ca <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 80026d2:	f241 7370 	movw	r3, #6000	; 0x1770
 80026d6:	e7f7      	b.n	80026c8 <USB_InitFSLSPClkSel+0x28>

080026d8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80026d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80026da:	2500      	movs	r5, #0
 80026dc:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80026de:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80026e2:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80026e4:	9b01      	ldr	r3, [sp, #4]
 80026e6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80026ea:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80026ec:	9b01      	ldr	r3, [sp, #4]
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80026f2:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80026f4:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80026f8:	2064      	movs	r0, #100	; 0x64
 80026fa:	f7fd ffa9 	bl	8000650 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80026fe:	9b01      	ldr	r3, [sp, #4]
 8002700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002704:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8002708:	200a      	movs	r0, #10
 800270a:	f7fd ffa1 	bl	8000650 <HAL_Delay>

  return HAL_OK;
}
 800270e:	4628      	mov	r0, r5
 8002710:	b003      	add	sp, #12
 8002712:	bd30      	pop	{r4, r5, pc}

08002714 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002714:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800271a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800271e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002720:	9b01      	ldr	r3, [sp, #4]
 8002722:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002726:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002728:	9b01      	ldr	r3, [sp, #4]
 800272a:	04da      	lsls	r2, r3, #19
 800272c:	d406      	bmi.n	800273c <USB_DriveVbus+0x28>
 800272e:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8002730:	bf02      	ittt	eq
 8002732:	9b01      	ldreq	r3, [sp, #4]
 8002734:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8002738:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800273c:	9b01      	ldr	r3, [sp, #4]
 800273e:	04db      	lsls	r3, r3, #19
 8002740:	d505      	bpl.n	800274e <USB_DriveVbus+0x3a>
 8002742:	b921      	cbnz	r1, 800274e <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8002744:	9b01      	ldr	r3, [sp, #4]
 8002746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800274a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 800274e:	2000      	movs	r0, #0
 8002750:	b002      	add	sp, #8
 8002752:	4770      	bx	lr

08002754 <USB_HostInit>:
{
 8002754:	b084      	sub	sp, #16
 8002756:	b538      	push	{r3, r4, r5, lr}
 8002758:	4604      	mov	r4, r0
 800275a:	a805      	add	r0, sp, #20
 800275c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002766:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800276c:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800276e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002770:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002774:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277c:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800277e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002780:	05da      	lsls	r2, r3, #23
 8002782:	d53f      	bpl.n	8002804 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002784:	9b07      	ldr	r3, [sp, #28]
 8002786:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002788:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800278c:	d13c      	bne.n	8002808 <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800278e:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002792:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8002796:	2110      	movs	r1, #16
 8002798:	4620      	mov	r0, r4
 800279a:	f7ff ff35 	bl	8002608 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800279e:	4620      	mov	r0, r4
 80027a0:	f7ff ff44 	bl	800262c <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	9906      	ldr	r1, [sp, #24]
 80027a8:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 80027b0:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 80027b2:	428b      	cmp	r3, r1
 80027b4:	d12b      	bne.n	800280e <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 80027b6:	2101      	movs	r1, #1
 80027b8:	4620      	mov	r0, r4
 80027ba:	f7ff ffab 	bl	8002714 <USB_DriveVbus>
  HAL_Delay(200U);
 80027be:	20c8      	movs	r0, #200	; 0xc8
 80027c0:	f7fd ff46 	bl	8000650 <HAL_Delay>
  USBx->GINTMSK = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295
 80027cc:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80027ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027d0:	05db      	lsls	r3, r3, #23
 80027d2:	d521      	bpl.n	8002818 <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 80027d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d8:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80027da:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80027de:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80027e2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 80027e6:	9b08      	ldr	r3, [sp, #32]
 80027e8:	b91b      	cbnz	r3, 80027f2 <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80027ea:	69a3      	ldr	r3, [r4, #24]
 80027ec:	f043 0310 	orr.w	r3, r3, #16
 80027f0:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80027f2:	69a2      	ldr	r2, [r4, #24]
 80027f4:	4b0d      	ldr	r3, [pc, #52]	; (800282c <USB_HostInit+0xd8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61a3      	str	r3, [r4, #24]
}
 80027fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027fe:	2000      	movs	r0, #0
 8002800:	b004      	add	sp, #16
 8002802:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002804:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	e7c1      	b.n	8002792 <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800280e:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8002810:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8002812:	60d5      	str	r5, [r2, #12]
 8002814:	3220      	adds	r2, #32
 8002816:	e7cc      	b.n	80027b2 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800281c:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8002820:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002822:	4b03      	ldr	r3, [pc, #12]	; (8002830 <USB_HostInit+0xdc>)
 8002824:	e7dd      	b.n	80027e2 <USB_HostInit+0x8e>
 8002826:	bf00      	nop
 8002828:	00e00300 	.word	0x00e00300
 800282c:	a3200008 	.word	0xa3200008
 8002830:	004000e0 	.word	0x004000e0

08002834 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002834:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800283a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800283e:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8002840:	9801      	ldr	r0, [sp, #4]
}
 8002842:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8002846:	b002      	add	sp, #8
 8002848:	4770      	bx	lr

0800284a <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800284a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800284e:	6880      	ldr	r0, [r0, #8]
}
 8002850:	b280      	uxth	r0, r0
 8002852:	4770      	bx	lr

08002854 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8002854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002858:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 800285c:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8002860:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8002864:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002866:	f04f 30ff 	mov.w	r0, #4294967295
 800286a:	60a0      	str	r0, [r4, #8]
 800286c:	fa4f f882 	sxtb.w	r8, r2
 8002870:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8002874:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8002878:	2e03      	cmp	r6, #3
 800287a:	d86c      	bhi.n	8002956 <USB_HC_Init+0x102>
 800287c:	e8df f006 	tbb	[pc, r6]
 8002880:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002884:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8002888:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800288c:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800288e:	da03      	bge.n	8002898 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002890:	68e1      	ldr	r1, [r4, #12]
 8002892:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002896:	e005      	b.n	80028a4 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8002898:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800289a:	05c9      	lsls	r1, r1, #23
 800289c:	d542      	bpl.n	8002924 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800289e:	68e1      	ldr	r1, [r4, #12]
 80028a0:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 80028a4:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80028a6:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80028a8:	f8dc 4018 	ldr.w	r4, [ip, #24]
 80028ac:	2101      	movs	r1, #1
 80028ae:	fa01 f10e 	lsl.w	r1, r1, lr
 80028b2:	4321      	orrs	r1, r4
 80028b4:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80028b8:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 80028ba:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80028be:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80028c2:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 80028c4:	bfb4      	ite	lt
 80028c6:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 80028ca:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80028cc:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 80028d0:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80028d4:	059b      	lsls	r3, r3, #22
 80028d6:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80028da:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80028de:	02d2      	lsls	r2, r2, #11
 80028e0:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80028e4:	432b      	orrs	r3, r5
 80028e6:	4313      	orrs	r3, r2
 80028e8:	04b2      	lsls	r2, r6, #18
 80028ea:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 80028ee:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80028f0:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 80028f4:	bf0c      	ite	eq
 80028f6:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 80028fa:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80028fc:	4323      	orrs	r3, r4
 80028fe:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8002900:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002902:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8002906:	d128      	bne.n	800295a <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8002908:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800290c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002910:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8002914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002918:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 800291c:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002920:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002922:	dbb5      	blt.n	8002890 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002924:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f10e 	lsl.w	r1, r1, lr
 800292e:	4301      	orrs	r1, r0
 8002930:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002934:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 8002936:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002938:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800293c:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 800293e:	4604      	mov	r4, r0
 8002940:	e7c4      	b.n	80028cc <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002942:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8002946:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800294a:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800294c:	daea      	bge.n	8002924 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800294e:	68e1      	ldr	r1, [r4, #12]
 8002950:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8002954:	e7a6      	b.n	80028a4 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8002956:	2001      	movs	r0, #1
 8002958:	e7a6      	b.n	80028a8 <USB_HC_Init+0x54>
}
 800295a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800295e <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800295e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002962:	6940      	ldr	r0, [r0, #20]
}
 8002964:	b280      	uxth	r0, r0
 8002966:	4770      	bx	lr

08002968 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002968:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800296c:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8002970:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002974:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002978:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800297c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002980:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002984:	d11e      	bne.n	80029c4 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002986:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002988:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800298c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002990:	d137      	bne.n	8002a02 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002992:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002996:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800299a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800299e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029a2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80029a6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80029aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029ae:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80029b2:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 80029b6:	3b01      	subs	r3, #1
 80029b8:	d002      	beq.n	80029c0 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80029ba:	6811      	ldr	r1, [r2, #0]
 80029bc:	2900      	cmp	r1, #0
 80029be:	dbfa      	blt.n	80029b6 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80029c0:	2000      	movs	r0, #0
 80029c2:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80029c4:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80029c8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80029cc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80029d0:	d117      	bne.n	8002a02 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80029d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029d6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80029da:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80029de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029e2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80029e6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80029ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029ee:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80029f2:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 80029f6:	3b01      	subs	r3, #1
 80029f8:	d0e2      	beq.n	80029c0 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80029fa:	6811      	ldr	r1, [r2, #0]
 80029fc:	2900      	cmp	r1, #0
 80029fe:	dbfa      	blt.n	80029f6 <USB_HC_Halt+0x8e>
 8002a00:	e7de      	b.n	80029c0 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a06:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002a0a:	e7d9      	b.n	80029c0 <USB_HC_Halt+0x58>

08002a0c <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002a0c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002a10:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <USB_DoPing+0x20>)
 8002a12:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a16:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a22:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8002a26:	2000      	movs	r0, #0
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	80080000 	.word	0x80080000

08002a30 <USB_HC_StartXfer>:
{
 8002a30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002a34:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002a36:	05db      	lsls	r3, r3, #23
{
 8002a38:	4616      	mov	r6, r2
 8002a3a:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8002a3c:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002a3e:	d517      	bpl.n	8002a70 <USB_HC_StartXfer+0x40>
 8002a40:	790d      	ldrb	r5, [r1, #4]
 8002a42:	b9ad      	cbnz	r5, 8002a70 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8002a44:	b94e      	cbnz	r6, 8002a5a <USB_HC_StartXfer+0x2a>
 8002a46:	794b      	ldrb	r3, [r1, #5]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d111      	bne.n	8002a70 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	f7ff ffdd 	bl	8002a0c <USB_DoPing>
}
 8002a52:	2000      	movs	r0, #0
 8002a54:	b002      	add	sp, #8
 8002a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8002a5a:	2e01      	cmp	r6, #1
 8002a5c:	d108      	bne.n	8002a70 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002a5e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8002a62:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8002a66:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8002a6a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8002a6e:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8002a70:	6908      	ldr	r0, [r1, #16]
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d066      	beq.n	8002b44 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8002a76:	890b      	ldrh	r3, [r1, #8]
 8002a78:	3801      	subs	r0, #1
 8002a7a:	4418      	add	r0, r3
 8002a7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a80:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8002a82:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002a86:	d903      	bls.n	8002a90 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 8002a8c:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8002a90:	78cf      	ldrb	r7, [r1, #3]
 8002a92:	b117      	cbz	r7, 8002a9a <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002a94:	890b      	ldrh	r3, [r1, #8]
 8002a96:	4343      	muls	r3, r0
 8002a98:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002a9a:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002a9e:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002aa0:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002aa4:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002aa8:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002aac:	ea4e 0e08 	orr.w	lr, lr, r8
 8002ab0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002b90 <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002ab4:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002ab8:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 8002abc:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002ac0:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8002ac4:	b116      	cbz	r6, 8002acc <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002ac6:	68c8      	ldr	r0, [r1, #12]
 8002ac8:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8002acc:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8002ad0:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002ad4:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002ad8:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 8002adc:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002ae0:	43c0      	mvns	r0, r0
 8002ae2:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002ae6:	0740      	lsls	r0, r0, #29
 8002ae8:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8002aec:	ea40 000c 	orr.w	r0, r0, ip
 8002af0:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002af4:	4825      	ldr	r0, [pc, #148]	; (8002b8c <USB_HC_StartXfer+0x15c>)
 8002af6:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002afa:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002afe:	f8d0 c000 	ldr.w	ip, [r0]
 8002b02:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8002b06:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002b0a:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 8002b0e:	b1df      	cbz	r7, 8002b48 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002b10:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002b14:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b18:	f8d0 c000 	ldr.w	ip, [r0]
 8002b1c:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8002b20:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b24:	6800      	ldr	r0, [r0, #0]
 8002b26:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8002b2a:	2e00      	cmp	r6, #0
 8002b2c:	d191      	bne.n	8002a52 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002b2e:	2f00      	cmp	r7, #0
 8002b30:	d18f      	bne.n	8002a52 <USB_HC_StartXfer+0x22>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d08d      	beq.n	8002a52 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8002b36:	79c8      	ldrb	r0, [r1, #7]
 8002b38:	2803      	cmp	r0, #3
 8002b3a:	d813      	bhi.n	8002b64 <USB_HC_StartXfer+0x134>
 8002b3c:	e8df f000 	tbb	[pc, r0]
 8002b40:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8002b44:	2001      	movs	r0, #1
 8002b46:	e7a3      	b.n	8002a90 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002b48:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8002b4c:	e7e2      	b.n	8002b14 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002b4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002b50:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002b52:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8002b56:	b280      	uxth	r0, r0
 8002b58:	4285      	cmp	r5, r0
 8002b5a:	d903      	bls.n	8002b64 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002b5c:	69a0      	ldr	r0, [r4, #24]
 8002b5e:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002b62:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8002b64:	2000      	movs	r0, #0
 8002b66:	9000      	str	r0, [sp, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	68c9      	ldr	r1, [r1, #12]
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7ff fd6d 	bl	800264c <USB_WritePacket>
 8002b72:	e76e      	b.n	8002a52 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002b74:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002b78:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002b7a:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8002b7e:	b280      	uxth	r0, r0
 8002b80:	4285      	cmp	r5, r0
 8002b82:	d9ef      	bls.n	8002b64 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002b84:	69a0      	ldr	r0, [r4, #24]
 8002b86:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8002b8a:	e7ea      	b.n	8002b62 <USB_HC_StartXfer+0x132>
 8002b8c:	20001c2c 	.word	0x20001c2c
 8002b90:	1ff80000 	.word	0x1ff80000

08002b94 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b94:	6883      	ldr	r3, [r0, #8]
 8002b96:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002b9a:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b9c:	2110      	movs	r1, #16
{
 8002b9e:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ba0:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ba2:	f7ff fd31 	bl	8002608 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f7ff fd40 	bl	800262c <USB_FlushRxFifo>
 8002bac:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8002bb0:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8002bb4:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002bb6:	6811      	ldr	r1, [r2, #0]
 8002bb8:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002bbc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8002bc0:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8002bc4:	4290      	cmp	r0, r2
 8002bc6:	d1f6      	bne.n	8002bb6 <USB_StopHost+0x22>
 8002bc8:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002bd0:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8002bd4:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002bdc:	d802      	bhi.n	8002be4 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	2900      	cmp	r1, #0
 8002be2:	dbf8      	blt.n	8002bd6 <USB_StopHost+0x42>
 8002be4:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d1ef      	bne.n	8002bca <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002bf2:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002bf4:	68a3      	ldr	r3, [r4, #8]
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	bd10      	pop	{r4, pc}

08002c00 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8002c00:	2000      	movs	r0, #0
 8002c02:	4770      	bx	lr

08002c04 <USBH_CDC_InterfaceDeInit>:
{
 8002c04:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002c06:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8002c0a:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8002c0c:	7821      	ldrb	r1, [r4, #0]
{
 8002c0e:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8002c10:	b139      	cbz	r1, 8002c22 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8002c12:	f000 fe17 	bl	8003844 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8002c16:	7821      	ldrb	r1, [r4, #0]
 8002c18:	4628      	mov	r0, r5
 8002c1a:	f000 fe2f 	bl	800387c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8002c1e:	2300      	movs	r3, #0
 8002c20:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8002c22:	7b21      	ldrb	r1, [r4, #12]
 8002c24:	b141      	cbz	r1, 8002c38 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8002c26:	4628      	mov	r0, r5
 8002c28:	f000 fe0c 	bl	8003844 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8002c2c:	7b21      	ldrb	r1, [r4, #12]
 8002c2e:	4628      	mov	r0, r5
 8002c30:	f000 fe24 	bl	800387c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8002c34:	2300      	movs	r3, #0
 8002c36:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8002c38:	7b61      	ldrb	r1, [r4, #13]
 8002c3a:	b141      	cbz	r1, 8002c4e <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f000 fe01 	bl	8003844 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8002c42:	7b61      	ldrb	r1, [r4, #13]
 8002c44:	4628      	mov	r0, r5
 8002c46:	f000 fe19 	bl	800387c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8002c4e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8002c52:	69d8      	ldr	r0, [r3, #28]
 8002c54:	b128      	cbz	r0, 8002c62 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8002c56:	f007 fcbb 	bl	800a5d0 <free>
    phost->pActiveClass->pData = 0U;
 8002c5a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8002c5e:	2200      	movs	r2, #0
 8002c60:	61da      	str	r2, [r3, #28]
}
 8002c62:	2000      	movs	r0, #0
 8002c64:	bd38      	pop	{r3, r4, r5, pc}

08002c66 <USBH_CDC_InterfaceInit>:
{
 8002c66:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8002c68:	2202      	movs	r2, #2
{
 8002c6a:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	4611      	mov	r1, r2
{
 8002c70:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 8002c72:	f000 f9b2 	bl	8002fda <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8002c76:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8002c78:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8002c7a:	d102      	bne.n	8002c82 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8002c7c:	2002      	movs	r0, #2
}
 8002c7e:	b005      	add	sp, #20
 8002c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8002c82:	4601      	mov	r1, r0
 8002c84:	4628      	mov	r0, r5
 8002c86:	f000 f99f 	bl	8002fc8 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002c8a:	2050      	movs	r0, #80	; 0x50
 8002c8c:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8002c90:	f007 fc96 	bl	800a5c0 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002c94:	231a      	movs	r3, #26
 8002c96:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002c9a:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002c9c:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 8002ca0:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002ca2:	bf42      	ittt	mi
 8002ca4:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002ca6:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8002caa:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002cac:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8002cae:	7841      	ldrb	r1, [r0, #1]
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	f000 fdcc 	bl	800384e <USBH_AllocPipe>
 8002cb6:	4601      	mov	r1, r0
 8002cb8:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8002cba:	8960      	ldrh	r0, [r4, #10]
 8002cbc:	9002      	str	r0, [sp, #8]
 8002cbe:	2003      	movs	r0, #3
 8002cc0:	9001      	str	r0, [sp, #4]
 8002cc2:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002cc6:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002cca:	7862      	ldrb	r2, [r4, #1]
 8002ccc:	9000      	str	r0, [sp, #0]
 8002cce:	4628      	mov	r0, r5
 8002cd0:	f000 fda9 	bl	8003826 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	7821      	ldrb	r1, [r4, #0]
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f007 fc08 	bl	800a4ee <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8002cde:	2300      	movs	r3, #0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	210a      	movs	r1, #10
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	f000 f978 	bl	8002fda <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 8002cea:	28ff      	cmp	r0, #255	; 0xff
 8002cec:	d0c6      	beq.n	8002c7c <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002cee:	231a      	movs	r3, #26
 8002cf0:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002cf4:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002cf8:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002cfc:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 8002d00:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002d04:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002d08:	bf0d      	iteet	eq
 8002d0a:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002d0c:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002d0e:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002d10:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002d12:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002d16:	bf08      	it	eq
 8002d18:	73a3      	strbeq	r3, [r4, #14]
 8002d1a:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002d1e:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002d20:	bf18      	it	ne
 8002d22:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002d24:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8002d26:	bf14      	ite	ne
 8002d28:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8002d2a:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002d2c:	f000 fd8f 	bl	800384e <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8002d30:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002d32:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8002d34:	4628      	mov	r0, r5
 8002d36:	f000 fd8a 	bl	800384e <USBH_AllocPipe>
 8002d3a:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8002d3c:	8b20      	ldrh	r0, [r4, #24]
 8002d3e:	9002      	str	r0, [sp, #8]
 8002d40:	2602      	movs	r6, #2
 8002d42:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002d46:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002d4a:	7ba2      	ldrb	r2, [r4, #14]
 8002d4c:	7b61      	ldrb	r1, [r4, #13]
 8002d4e:	9601      	str	r6, [sp, #4]
 8002d50:	9000      	str	r0, [sp, #0]
 8002d52:	4628      	mov	r0, r5
 8002d54:	f000 fd67 	bl	8003826 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8002d58:	8b60      	ldrh	r0, [r4, #26]
 8002d5a:	9002      	str	r0, [sp, #8]
 8002d5c:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002d60:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002d64:	7be2      	ldrb	r2, [r4, #15]
 8002d66:	7b21      	ldrb	r1, [r4, #12]
 8002d68:	9601      	str	r6, [sp, #4]
 8002d6a:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8002d6c:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8002d6e:	4628      	mov	r0, r5
 8002d70:	f000 fd59 	bl	8003826 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8002d74:	4632      	mov	r2, r6
 8002d76:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8002d78:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	f007 fbb6 	bl	800a4ee <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8002d82:	4632      	mov	r2, r6
 8002d84:	7b21      	ldrb	r1, [r4, #12]
 8002d86:	4628      	mov	r0, r5
 8002d88:	f007 fbb1 	bl	800a4ee <USBH_LL_SetToggle>
      status = USBH_OK;
 8002d8c:	4630      	mov	r0, r6
 8002d8e:	e776      	b.n	8002c7e <USBH_CDC_InterfaceInit+0x18>

08002d90 <USBH_CDC_ClassRequest>:
{
 8002d90:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002d92:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8002d96:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8002d98:	23a1      	movs	r3, #161	; 0xa1
 8002d9a:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8002d9c:	2321      	movs	r3, #33	; 0x21
 8002d9e:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002da0:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8002da6:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002da8:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002daa:	3140      	adds	r1, #64	; 0x40
{
 8002dac:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002dae:	f000 fac9 	bl	8003344 <USBH_CtlReq>
  if(status == USBH_OK)
 8002db2:	4605      	mov	r5, r0
 8002db4:	b920      	cbnz	r0, 8002dc0 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8002db6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8002dba:	2102      	movs	r1, #2
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	4798      	blx	r3
}
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	bd38      	pop	{r3, r4, r5, pc}

08002dc4 <USBH_CDC_TransmitCallback>:
 8002dc4:	4770      	bx	lr

08002dc6 <USBH_CDC_ReceiveCallback>:
 8002dc6:	4770      	bx	lr

08002dc8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8002dc8:	4770      	bx	lr

08002dca <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002dca:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8002dce:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002dd0:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8002dd2:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8002dd6:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d83d      	bhi.n	8002e58 <USBH_CDC_Process+0x8e>
 8002ddc:	e8df f003 	tbb	[pc, r3]
 8002de0:	42170603 	.word	0x42170603
 8002de4:	a6          	.byte	0xa6
 8002de5:	00          	.byte	0x00
    status = USBH_OK;
 8002de6:	2000      	movs	r0, #0
}
 8002de8:	b002      	add	sp, #8
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8002dec:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8002dee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8002df0:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8002df2:	2320      	movs	r3, #32
 8002df4:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002df6:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8002dfc:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002dfe:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002e00:	f000 faa0 	bl	8003344 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002e04:	bb50      	cbnz	r0, 8002e5c <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8002e06:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 8002e08:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8002e0c:	e024      	b.n	8002e58 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8002e0e:	23a1      	movs	r3, #161	; 0xa1
 8002e10:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8002e12:	2321      	movs	r3, #33	; 0x21
 8002e14:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002e16:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8002e1c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002e1e:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002e20:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8002e24:	f000 fa8e 	bl	8003344 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002e28:	b9c0      	cbnz	r0, 8002e5c <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8002e2a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002e2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 8002e2e:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8002e32:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8002e3c:	4291      	cmp	r1, r2
 8002e3e:	d10b      	bne.n	8002e58 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8002e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e44:	795a      	ldrb	r2, [r3, #5]
 8002e46:	4291      	cmp	r1, r2
 8002e48:	d106      	bne.n	8002e58 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8002e4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d102      	bne.n	8002e58 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 8002e52:	4628      	mov	r0, r5
 8002e54:	f7ff ffb8 	bl	8002dc8 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8002e58:	2001      	movs	r0, #1
 8002e5a:	e7c5      	b.n	8002de8 <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8002e5c:	2801      	cmp	r0, #1
 8002e5e:	d0fb      	beq.n	8002e58 <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 8002e60:	2304      	movs	r3, #4
 8002e62:	e7d1      	b.n	8002e08 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 8002e64:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8002e68:	2901      	cmp	r1, #1
 8002e6a:	d021      	beq.n	8002eb0 <USBH_CDC_Process+0xe6>
 8002e6c:	2902      	cmp	r1, #2
 8002e6e:	d02e      	beq.n	8002ece <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002e70:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8002e74:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8002e76:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d045      	beq.n	8002f0a <USBH_CDC_Process+0x140>
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d1ea      	bne.n	8002e58 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8002e82:	7b31      	ldrb	r1, [r6, #12]
 8002e84:	4628      	mov	r0, r5
 8002e86:	f007 fb21 	bl	800a4cc <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8002e8a:	2801      	cmp	r0, #1
 8002e8c:	d1e4      	bne.n	8002e58 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8002e8e:	7b31      	ldrb	r1, [r6, #12]
 8002e90:	4628      	mov	r0, r5
 8002e92:	f007 fad7 	bl	800a444 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8002e96:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002e98:	4298      	cmp	r0, r3
 8002e9a:	d040      	beq.n	8002f1e <USBH_CDC_Process+0x154>
 8002e9c:	8b72      	ldrh	r2, [r6, #26]
 8002e9e:	4290      	cmp	r0, r2
 8002ea0:	d93d      	bls.n	8002f1e <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 8002ea2:	1a1b      	subs	r3, r3, r0
 8002ea4:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8002ea6:	6a33      	ldr	r3, [r6, #32]
 8002ea8:	4418      	add	r0, r3
 8002eaa:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e033      	b.n	8002f18 <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002eb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002eb2:	8b22      	ldrh	r2, [r4, #24]
 8002eb4:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 8002eb6:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002eb8:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 8002eba:	bf98      	it	ls
 8002ebc:	b282      	uxthls	r2, r0
 8002ebe:	69e1      	ldr	r1, [r4, #28]
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	f000 fc89 	bl	80037d8 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8002ec6:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8002ec8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8002ecc:	e7d0      	b.n	8002e70 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8002ece:	7b61      	ldrb	r1, [r4, #13]
 8002ed0:	f007 fafc 	bl	800a4cc <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8002ed4:	2801      	cmp	r0, #1
 8002ed6:	d115      	bne.n	8002f04 <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eda:	8b22      	ldrh	r2, [r4, #24]
 8002edc:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8002ede:	bf83      	ittte	hi
 8002ee0:	1a9b      	subhi	r3, r3, r2
 8002ee2:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002ee4:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 8002ee6:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002ee8:	bf8a      	itet	hi
 8002eea:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 8002eec:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002eee:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 8002ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ef2:	b10b      	cbz	r3, 8002ef8 <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e7e7      	b.n	8002ec8 <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8002ef8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8002efc:	4628      	mov	r0, r5
 8002efe:	f7ff ff61 	bl	8002dc4 <USBH_CDC_TransmitCallback>
 8002f02:	e7b5      	b.n	8002e70 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 8002f04:	2802      	cmp	r0, #2
 8002f06:	d1b3      	bne.n	8002e70 <USBH_CDC_Process+0xa6>
 8002f08:	e7f4      	b.n	8002ef4 <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 8002f0a:	7b33      	ldrb	r3, [r6, #12]
 8002f0c:	8b72      	ldrh	r2, [r6, #26]
 8002f0e:	6a31      	ldr	r1, [r6, #32]
 8002f10:	4628      	mov	r0, r5
 8002f12:	f000 fc78 	bl	8003806 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8002f16:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8002f18:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8002f1c:	e79c      	b.n	8002e58 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8002f24:	4628      	mov	r0, r5
 8002f26:	f7ff ff4e 	bl	8002dc6 <USBH_CDC_ReceiveCallback>
 8002f2a:	e795      	b.n	8002e58 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	f000 fc0d 	bl	800374c <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d190      	bne.n	8002e58 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8002f36:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8002f3a:	e78d      	b.n	8002e58 <USBH_CDC_Process+0x8e>

08002f3c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8002f3c:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8002f40:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8002f44:	2100      	movs	r1, #0
 8002f46:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d1fb      	bne.n	8002f46 <DeInitStateMachine+0xa>
 8002f4e:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8002f52:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8002f5c:	4291      	cmp	r1, r2
 8002f5e:	d1fb      	bne.n	8002f58 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8002f60:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8002f62:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8002f64:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8002f66:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8002f68:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8002f6a:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 8002f6e:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8002f70:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 8002f72:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8002f74:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8002f78:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	4770      	bx	lr

08002f80 <USBH_Init>:
{
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	460d      	mov	r5, r1
  if(phost == NULL)
 8002f84:	4604      	mov	r4, r0
 8002f86:	b180      	cbz	r0, 8002faa <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8002f88:	2300      	movs	r3, #0
  phost->id = id;
 8002f8a:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8002f8e:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8002f92:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 8002f96:	f7ff ffd1 	bl	8002f3c <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8002f9a:	b10d      	cbz	r5, 8002fa0 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8002f9c:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f007 f9f1 	bl	800a388 <USBH_LL_Init>
  return USBH_OK;
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 8002faa:	2002      	movs	r0, #2
}
 8002fac:	bd38      	pop	{r3, r4, r5, pc}

08002fae <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8002fae:	b149      	cbz	r1, 8002fc4 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8002fb0:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8002fb4:	b933      	cbnz	r3, 8002fc4 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 8002fbc:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8002fc4:	2002      	movs	r0, #2
  }

  return status;
}
 8002fc6:	4770      	bx	lr

08002fc8 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8002fc8:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 8002fcc:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8002fce:	bf86      	itte	hi
 8002fd0:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8002fd4:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8002fd6:	2002      	movls	r0, #2
  }
  return status;
}
 8002fd8:	4770      	bx	lr

08002fda <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8002fda:	b570      	push	{r4, r5, r6, lr}
 8002fdc:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8002fde:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8002fe2:	428e      	cmp	r6, r1
 8002fe4:	b2e5      	uxtb	r5, r4
 8002fe6:	d001      	beq.n	8002fec <USBH_FindInterface+0x12>
 8002fe8:	29ff      	cmp	r1, #255	; 0xff
 8002fea:	d10b      	bne.n	8003004 <USBH_FindInterface+0x2a>
 8002fec:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8002ff0:	4296      	cmp	r6, r2
 8002ff2:	d001      	beq.n	8002ff8 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8002ff4:	2aff      	cmp	r2, #255	; 0xff
 8002ff6:	d105      	bne.n	8003004 <USBH_FindInterface+0x2a>
 8002ff8:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 8002ffc:	429e      	cmp	r6, r3
 8002ffe:	d007      	beq.n	8003010 <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8003000:	2bff      	cmp	r3, #255	; 0xff
 8003002:	d005      	beq.n	8003010 <USBH_FindInterface+0x36>
 8003004:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003006:	2c02      	cmp	r4, #2
 8003008:	f100 001a 	add.w	r0, r0, #26
 800300c:	d1e7      	bne.n	8002fde <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800300e:	25ff      	movs	r5, #255	; 0xff
}
 8003010:	4628      	mov	r0, r5
 8003012:	bd70      	pop	{r4, r5, r6, pc}

08003014 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8003014:	b510      	push	{r4, lr}
 8003016:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003018:	f007 f9dc 	bl	800a3d4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800301c:	2101      	movs	r1, #1
 800301e:	4620      	mov	r0, r4
 8003020:	f007 fa58 	bl	800a4d4 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8003024:	2000      	movs	r0, #0
 8003026:	bd10      	pop	{r4, pc}

08003028 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8003028:	b530      	push	{r4, r5, lr}
 800302a:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800302c:	2302      	movs	r3, #2
 800302e:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 8003032:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 8003036:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8003038:	b933      	cbnz	r3, 8003048 <USBH_Process+0x20>
 800303a:	7802      	ldrb	r2, [r0, #0]
 800303c:	b122      	cbz	r2, 8003048 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800303e:	7802      	ldrb	r2, [r0, #0]
 8003040:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 8003042:	bf1c      	itt	ne
 8003044:	2203      	movne	r2, #3
 8003046:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 8003048:	7822      	ldrb	r2, [r4, #0]
 800304a:	2a0b      	cmp	r2, #11
 800304c:	d818      	bhi.n	8003080 <USBH_Process+0x58>
 800304e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003052:	000c      	.short	0x000c
 8003054:	001f001a 	.word	0x001f001a
 8003058:	00170121 	.word	0x00170121
 800305c:	0107004f 	.word	0x0107004f
 8003060:	00d000c6 	.word	0x00d000c6
 8003064:	00e700da 	.word	0x00e700da
 8003068:	0118      	.short	0x0118
    if (phost->device.is_connected)
 800306a:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800306e:	b13b      	cbz	r3, 8003080 <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003070:	2301      	movs	r3, #1
      USBH_Delay(200U);
 8003072:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003074:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 8003076:	f007 fa49 	bl	800a50c <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800307a:	4620      	mov	r0, r4
 800307c:	f007 f9d4 	bl	800a428 <USBH_LL_ResetPort>
}
 8003080:	2000      	movs	r0, #0
 8003082:	b007      	add	sp, #28
 8003084:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 8003086:	2b01      	cmp	r3, #1
 8003088:	d1fa      	bne.n	8003080 <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 800308a:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 800308c:	7023      	strb	r3, [r4, #0]
 800308e:	e7f7      	b.n	8003080 <USBH_Process+0x58>
    USBH_Delay(100U);
 8003090:	2064      	movs	r0, #100	; 0x64
 8003092:	f007 fa3b 	bl	800a50c <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003096:	4620      	mov	r0, r4
 8003098:	f007 f9b8 	bl	800a40c <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 800309c:	2305      	movs	r3, #5
 800309e:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80030a0:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80030a4:	2100      	movs	r1, #0
 80030a6:	4620      	mov	r0, r4
 80030a8:	f000 fbd1 	bl	800384e <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80030ac:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80030ae:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80030b0:	4620      	mov	r0, r4
 80030b2:	f000 fbcc 	bl	800384e <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80030b6:	79a2      	ldrb	r2, [r4, #6]
 80030b8:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80030bc:	7120      	strb	r0, [r4, #4]
 80030be:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 80030c0:	9202      	str	r2, [sp, #8]
 80030c2:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 80030c4:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80030c8:	9200      	str	r2, [sp, #0]
 80030ca:	9501      	str	r5, [sp, #4]
 80030cc:	2280      	movs	r2, #128	; 0x80
 80030ce:	4620      	mov	r0, r4
 80030d0:	f000 fba9 	bl	8003826 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 80030d4:	79a2      	ldrb	r2, [r4, #6]
 80030d6:	9202      	str	r2, [sp, #8]
 80030d8:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80030dc:	9200      	str	r2, [sp, #0]
 80030de:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80030e2:	7961      	ldrb	r1, [r4, #5]
 80030e4:	9501      	str	r5, [sp, #4]
 80030e6:	462a      	mov	r2, r5
 80030e8:	4620      	mov	r0, r4
 80030ea:	f000 fb9c 	bl	8003826 <USBH_OpenPipe>
 80030ee:	e7c7      	b.n	8003080 <USBH_Process+0x58>
  switch (phost->EnumState)
 80030f0:	7863      	ldrb	r3, [r4, #1]
 80030f2:	2b07      	cmp	r3, #7
 80030f4:	d8c4      	bhi.n	8003080 <USBH_Process+0x58>
 80030f6:	e8df f003 	tbb	[pc, r3]
 80030fa:	1504      	.short	0x1504
 80030fc:	4138301e 	.word	0x4138301e
 8003100:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8003102:	2108      	movs	r1, #8
 8003104:	4620      	mov	r0, r4
 8003106:	f000 f9fa 	bl	80034fe <USBH_Get_DevDesc>
 800310a:	4605      	mov	r5, r0
 800310c:	2800      	cmp	r0, #0
 800310e:	d1b7      	bne.n	8003080 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003110:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003112:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003116:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8003118:	7921      	ldrb	r1, [r4, #4]
 800311a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800311e:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8003120:	9202      	str	r2, [sp, #8]
 8003122:	e7cf      	b.n	80030c4 <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8003124:	2112      	movs	r1, #18
 8003126:	4620      	mov	r0, r4
 8003128:	f000 f9e9 	bl	80034fe <USBH_Get_DevDesc>
 800312c:	2800      	cmp	r0, #0
 800312e:	d1a7      	bne.n	8003080 <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 8003130:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003132:	7063      	strb	r3, [r4, #1]
 8003134:	e7a4      	b.n	8003080 <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8003136:	2101      	movs	r1, #1
 8003138:	4620      	mov	r0, r4
 800313a:	f000 fadd 	bl	80036f8 <USBH_SetAddress>
 800313e:	4605      	mov	r5, r0
 8003140:	2800      	cmp	r0, #0
 8003142:	d19d      	bne.n	8003080 <USBH_Process+0x58>
      USBH_Delay(2U);
 8003144:	2002      	movs	r0, #2
 8003146:	f007 f9e1 	bl	800a50c <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 800314a:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 800314c:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 800314e:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8003150:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8003154:	7921      	ldrb	r1, [r4, #4]
 8003156:	79a2      	ldrb	r2, [r4, #6]
 8003158:	e7e2      	b.n	8003120 <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 800315a:	2109      	movs	r1, #9
 800315c:	4620      	mov	r0, r4
 800315e:	f000 fa16 	bl	800358e <USBH_Get_CfgDesc>
 8003162:	2800      	cmp	r0, #0
 8003164:	d18c      	bne.n	8003080 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003166:	2304      	movs	r3, #4
 8003168:	e7e3      	b.n	8003132 <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 800316a:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 800316e:	4620      	mov	r0, r4
 8003170:	f000 fa0d 	bl	800358e <USBH_Get_CfgDesc>
 8003174:	2800      	cmp	r0, #0
 8003176:	d183      	bne.n	8003080 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8003178:	2305      	movs	r3, #5
 800317a:	e7da      	b.n	8003132 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 800317c:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8003180:	b141      	cbz	r1, 8003194 <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 8003182:	23ff      	movs	r3, #255	; 0xff
 8003184:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8003188:	4620      	mov	r0, r4
 800318a:	f000 fa8e 	bl	80036aa <USBH_Get_StringDesc>
 800318e:	2800      	cmp	r0, #0
 8003190:	f47f af76 	bne.w	8003080 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003194:	2306      	movs	r3, #6
 8003196:	e7cc      	b.n	8003132 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 8003198:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 800319c:	b141      	cbz	r1, 80031b0 <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 800319e:	23ff      	movs	r3, #255	; 0xff
 80031a0:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80031a4:	4620      	mov	r0, r4
 80031a6:	f000 fa80 	bl	80036aa <USBH_Get_StringDesc>
 80031aa:	2800      	cmp	r0, #0
 80031ac:	f47f af68 	bne.w	8003080 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80031b0:	2307      	movs	r3, #7
 80031b2:	e7be      	b.n	8003132 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80031b4:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 80031b8:	b141      	cbz	r1, 80031cc <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 80031ba:	23ff      	movs	r3, #255	; 0xff
 80031bc:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80031c0:	4620      	mov	r0, r4
 80031c2:	f000 fa72 	bl	80036aa <USBH_Get_StringDesc>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	f47f af5a 	bne.w	8003080 <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80031d2:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d009      	beq.n	80031ee <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 80031da:	2307      	movs	r3, #7
 80031dc:	e756      	b.n	800308c <USBH_Process+0x64>
      if(phost->pUser != NULL)
 80031de:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f43f af4c 	beq.w	8003080 <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80031e8:	2101      	movs	r1, #1
 80031ea:	4620      	mov	r0, r4
 80031ec:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 80031ee:	2308      	movs	r3, #8
 80031f0:	e74c      	b.n	800308c <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80031f2:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80031f6:	4620      	mov	r0, r4
 80031f8:	f000 fa8c 	bl	8003714 <USBH_SetCfg>
 80031fc:	2800      	cmp	r0, #0
 80031fe:	f47f af3f 	bne.w	8003080 <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8003202:	2309      	movs	r3, #9
 8003204:	e742      	b.n	800308c <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8003206:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 800320a:	069b      	lsls	r3, r3, #26
 800320c:	d506      	bpl.n	800321c <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800320e:	2101      	movs	r1, #1
 8003210:	4620      	mov	r0, r4
 8003212:	f000 fa8d 	bl	8003730 <USBH_SetFeature>
 8003216:	2800      	cmp	r0, #0
 8003218:	f47f af32 	bne.w	8003080 <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 800321c:	230a      	movs	r3, #10
 800321e:	e735      	b.n	800308c <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 8003220:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8003224:	2b00      	cmp	r3, #0
 8003226:	f43f af2b 	beq.w	8003080 <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 800322a:	2300      	movs	r3, #0
 800322c:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8003230:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003234:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 8003238:	7919      	ldrb	r1, [r3, #4]
 800323a:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 800323c:	bf08      	it	eq
 800323e:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 8003242:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003246:	b1d3      	cbz	r3, 800327e <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	4620      	mov	r0, r4
 800324c:	4798      	blx	r3
 800324e:	b9b0      	cbnz	r0, 800327e <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 8003250:	2306      	movs	r3, #6
 8003252:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8003254:	2103      	movs	r1, #3
 8003256:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800325a:	4620      	mov	r0, r4
 800325c:	4798      	blx	r3
 800325e:	e70f      	b.n	8003080 <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 8003260:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003264:	b15b      	cbz	r3, 800327e <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	4620      	mov	r0, r4
 800326a:	4798      	blx	r3
 800326c:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8003270:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f47f af03 	bne.w	8003080 <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 800327a:	230b      	movs	r3, #11
 800327c:	e706      	b.n	800308c <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 800327e:	230d      	movs	r3, #13
 8003280:	e704      	b.n	800308c <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 8003282:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003286:	2b00      	cmp	r3, #0
 8003288:	f43f aefa 	beq.w	8003080 <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4620      	mov	r0, r4
 8003290:	4798      	blx	r3
 8003292:	e6f5      	b.n	8003080 <USBH_Process+0x58>
    DeInitStateMachine(phost);
 8003294:	4620      	mov	r0, r4
 8003296:	f7ff fe51 	bl	8002f3c <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 800329a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f43f aeee 	beq.w	8003080 <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4620      	mov	r0, r4
 80032a8:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 80032b0:	e6e6      	b.n	8003080 <USBH_Process+0x58>

080032b2 <USBH_LL_SetTimer>:
  phost->Timer = time;
 80032b2:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 80032b6:	4770      	bx	lr

080032b8 <USBH_LL_IncTimer>:
  phost->Timer ++;
 80032b8:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 80032bc:	3201      	adds	r2, #1
 80032be:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80032c2:	7802      	ldrb	r2, [r0, #0]
 80032c4:	2a0b      	cmp	r2, #11
 80032c6:	d104      	bne.n	80032d2 <USBH_LL_IncTimer+0x1a>
 80032c8:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80032cc:	b10b      	cbz	r3, 80032d2 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	4718      	bx	r3
 80032d2:	4770      	bx	lr

080032d4 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80032da:	4770      	bx	lr

080032dc <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80032e2:	4770      	bx	lr

080032e4 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 80032e4:	7802      	ldrb	r2, [r0, #0]
{
 80032e6:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 80032e8:	b94a      	cbnz	r2, 80032fe <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 80032ea:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 80032ee:	2201      	movs	r2, #1
 80032f0:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 80032f4:	b10b      	cbz	r3, 80032fa <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80032f6:	2104      	movs	r1, #4
 80032f8:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80032fa:	2000      	movs	r0, #0
 80032fc:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 80032fe:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 8003302:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 8003304:	bf04      	itt	eq
 8003306:	2202      	moveq	r2, #2
 8003308:	7002      	strbeq	r2, [r0, #0]
 800330a:	e7f6      	b.n	80032fa <USBH_LL_Connect+0x16>

0800330c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800330c:	b510      	push	{r4, lr}
 800330e:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8003310:	f007 f86e 	bl	800a3f0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8003314:	7921      	ldrb	r1, [r4, #4]
 8003316:	4620      	mov	r0, r4
 8003318:	f000 fab0 	bl	800387c <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800331c:	7961      	ldrb	r1, [r4, #5]
 800331e:	4620      	mov	r0, r4
 8003320:	f000 faac 	bl	800387c <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 800332a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800332e:	b113      	cbz	r3, 8003336 <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8003330:	2105      	movs	r1, #5
 8003332:	4620      	mov	r0, r4
 8003334:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003336:	4620      	mov	r0, r4
 8003338:	f007 f84c 	bl	800a3d4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800333c:	2303      	movs	r3, #3
 800333e:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8003340:	2000      	movs	r0, #0
 8003342:	bd10      	pop	{r4, pc}

08003344 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8003344:	b513      	push	{r0, r1, r4, lr}
 8003346:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8003348:	7880      	ldrb	r0, [r0, #2]
 800334a:	2801      	cmp	r0, #1
 800334c:	d003      	beq.n	8003356 <USBH_CtlReq+0x12>
 800334e:	2802      	cmp	r0, #2
 8003350:	d008      	beq.n	8003364 <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 8003352:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 8003354:	e004      	b.n	8003360 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8003356:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8003358:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 800335a:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 800335c:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 800335e:	70a3      	strb	r3, [r4, #2]
}
 8003360:	b002      	add	sp, #8
 8003362:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8003364:	7e23      	ldrb	r3, [r4, #24]
 8003366:	3b01      	subs	r3, #1
 8003368:	2101      	movs	r1, #1
 800336a:	2b0a      	cmp	r3, #10
 800336c:	d8f1      	bhi.n	8003352 <USBH_CtlReq+0xe>
 800336e:	e8df f003 	tbb	[pc, r3]
 8003372:	0f06      	.short	0x0f06
 8003374:	4c40362b 	.word	0x4c40362b
 8003378:	8c806f64 	.word	0x8c806f64
 800337c:	95          	.byte	0x95
 800337d:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800337e:	7962      	ldrb	r2, [r4, #5]
 8003380:	f104 0110 	add.w	r1, r4, #16
 8003384:	4620      	mov	r0, r4
 8003386:	f000 f9ef 	bl	8003768 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800338a:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800338c:	7623      	strb	r3, [r4, #24]
 800338e:	e7e0      	b.n	8003352 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8003390:	7961      	ldrb	r1, [r4, #5]
 8003392:	4620      	mov	r0, r4
 8003394:	f007 f89a 	bl	800a4cc <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003398:	2801      	cmp	r0, #1
 800339a:	d10f      	bne.n	80033bc <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 800339c:	8ae2      	ldrh	r2, [r4, #22]
 800339e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80033a2:	b12a      	cbz	r2, 80033b0 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	da01      	bge.n	80033ac <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e7ef      	b.n	800338c <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 80033ac:	2305      	movs	r3, #5
 80033ae:	e7ed      	b.n	800338c <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	da01      	bge.n	80033b8 <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80033b4:	2309      	movs	r3, #9
 80033b6:	e7e9      	b.n	800338c <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 80033b8:	2307      	movs	r3, #7
 80033ba:	e7e7      	b.n	800338c <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80033bc:	2804      	cmp	r0, #4
 80033be:	d001      	beq.n	80033c4 <USBH_CtlReq+0x80>
 80033c0:	2802      	cmp	r0, #2
 80033c2:	d1c6      	bne.n	8003352 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 80033c4:	230b      	movs	r3, #11
 80033c6:	e7e1      	b.n	800338c <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 80033c8:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80033cc:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 80033ce:	89a2      	ldrh	r2, [r4, #12]
 80033d0:	7923      	ldrb	r3, [r4, #4]
 80033d2:	68a1      	ldr	r1, [r4, #8]
 80033d4:	4620      	mov	r0, r4
 80033d6:	f000 f9ef 	bl	80037b8 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80033da:	2304      	movs	r3, #4
 80033dc:	e7d6      	b.n	800338c <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80033de:	7921      	ldrb	r1, [r4, #4]
 80033e0:	4620      	mov	r0, r4
 80033e2:	f007 f873 	bl	800a4cc <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80033e6:	2801      	cmp	r0, #1
 80033e8:	d0e4      	beq.n	80033b4 <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80033ea:	2805      	cmp	r0, #5
 80033ec:	d015      	beq.n	800341a <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 80033ee:	2804      	cmp	r0, #4
 80033f0:	e7e7      	b.n	80033c2 <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 80033f2:	7963      	ldrb	r3, [r4, #5]
 80033f4:	9100      	str	r1, [sp, #0]
 80033f6:	89a2      	ldrh	r2, [r4, #12]
 80033f8:	68a1      	ldr	r1, [r4, #8]
 80033fa:	4620      	mov	r0, r4
 80033fc:	f000 f9c5 	bl	800378a <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8003400:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003404:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8003406:	2306      	movs	r3, #6
 8003408:	e7c0      	b.n	800338c <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800340a:	7961      	ldrb	r1, [r4, #5]
 800340c:	4620      	mov	r0, r4
 800340e:	f007 f85d 	bl	800a4cc <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003412:	2801      	cmp	r0, #1
 8003414:	d0d0      	beq.n	80033b8 <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 8003416:	2805      	cmp	r0, #5
 8003418:	d105      	bne.n	8003426 <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 800341a:	2301      	movs	r3, #1
 800341c:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800341e:	2300      	movs	r3, #0
 8003420:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 8003422:	2003      	movs	r0, #3
 8003424:	e79c      	b.n	8003360 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003426:	2802      	cmp	r0, #2
 8003428:	d0c0      	beq.n	80033ac <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 800342a:	2804      	cmp	r0, #4
 800342c:	d191      	bne.n	8003352 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 800342e:	230b      	movs	r3, #11
 8003430:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8003432:	2301      	movs	r3, #1
 8003434:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8003436:	2002      	movs	r0, #2
 8003438:	e792      	b.n	8003360 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 800343a:	2200      	movs	r2, #0
 800343c:	7923      	ldrb	r3, [r4, #4]
 800343e:	4611      	mov	r1, r2
 8003440:	4620      	mov	r0, r4
 8003442:	f000 f9b9 	bl	80037b8 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8003446:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800344a:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800344c:	2308      	movs	r3, #8
 800344e:	e79d      	b.n	800338c <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8003450:	7921      	ldrb	r1, [r4, #4]
 8003452:	4620      	mov	r0, r4
 8003454:	f007 f83a 	bl	800a4cc <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8003458:	2801      	cmp	r0, #1
 800345a:	d104      	bne.n	8003466 <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 800345c:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 800345e:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8003460:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8003462:	7620      	strb	r0, [r4, #24]
 8003464:	e77c      	b.n	8003360 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8003466:	2804      	cmp	r0, #4
 8003468:	d0ac      	beq.n	80033c4 <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 800346a:	2805      	cmp	r0, #5
 800346c:	f47f af71 	bne.w	8003352 <USBH_CtlReq+0xe>
 8003470:	e7d3      	b.n	800341a <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 8003472:	2200      	movs	r2, #0
 8003474:	7963      	ldrb	r3, [r4, #5]
 8003476:	9100      	str	r1, [sp, #0]
 8003478:	4620      	mov	r0, r4
 800347a:	4611      	mov	r1, r2
 800347c:	f000 f985 	bl	800378a <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8003480:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003484:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8003486:	230a      	movs	r3, #10
 8003488:	e780      	b.n	800338c <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800348a:	7961      	ldrb	r1, [r4, #5]
 800348c:	4620      	mov	r0, r4
 800348e:	f007 f81d 	bl	800a4cc <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003492:	2801      	cmp	r0, #1
 8003494:	d0e2      	beq.n	800345c <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003496:	2802      	cmp	r0, #2
 8003498:	d1a9      	bne.n	80033ee <USBH_CtlReq+0xaa>
 800349a:	e78b      	b.n	80033b4 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800349c:	7e63      	ldrb	r3, [r4, #25]
 800349e:	3301      	adds	r3, #1
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	7663      	strb	r3, [r4, #25]
 80034a6:	d806      	bhi.n	80034b6 <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80034a8:	4620      	mov	r0, r4
 80034aa:	f006 ffa1 	bl	800a3f0 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80034ae:	2301      	movs	r3, #1
 80034b0:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80034b2:	70a3      	strb	r3, [r4, #2]
 80034b4:	e74d      	b.n	8003352 <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80034b6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80034ba:	2106      	movs	r1, #6
 80034bc:	4620      	mov	r0, r4
 80034be:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	7663      	strb	r3, [r4, #25]
 80034c4:	e7b5      	b.n	8003432 <USBH_CtlReq+0xee>

080034c6 <USBH_GetDescriptor>:
{
 80034c6:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 80034c8:	7884      	ldrb	r4, [r0, #2]
{
 80034ca:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 80034ce:	2c01      	cmp	r4, #1
 80034d0:	d110      	bne.n	80034f4 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80034d2:	f061 047f 	orn	r4, r1, #127	; 0x7f
 80034d6:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80034d8:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 80034dc:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 80034e0:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80034e2:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80034e6:	bf0c      	ite	eq
 80034e8:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 80034ec:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80034ee:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 80034f0:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 80034f2:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 80034f4:	462a      	mov	r2, r5
 80034f6:	4619      	mov	r1, r3
}
 80034f8:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 80034fa:	f7ff bf23 	b.w	8003344 <USBH_CtlReq>

080034fe <USBH_Get_DevDesc>:
{
 80034fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8003500:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8003504:	460d      	mov	r5, r1
 8003506:	9100      	str	r1, [sp, #0]
 8003508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800350c:	2100      	movs	r1, #0
{
 800350e:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003510:	f7ff ffd9 	bl	80034c6 <USBH_GetDescriptor>
 8003514:	bbc8      	cbnz	r0, 800358a <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8003516:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800351a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800351e:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8003522:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8003526:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800352a:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800352e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8003532:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8003536:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800353a:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800353e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8003542:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 8003546:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8003548:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 800354c:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8003550:	d91b      	bls.n	800358a <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8003552:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8003556:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 800355a:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 800355e:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8003562:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8003566:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800356a:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 800356e:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8003572:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8003576:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800357a:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800357e:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8003582:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8003586:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 800358a:	b003      	add	sp, #12
 800358c:	bd30      	pop	{r4, r5, pc}

0800358e <USBH_Get_CfgDesc>:
{
 800358e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8003592:	f100 051c 	add.w	r5, r0, #28
{
 8003596:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8003598:	9100      	str	r1, [sp, #0]
 800359a:	462b      	mov	r3, r5
 800359c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a0:	2100      	movs	r1, #0
{
 80035a2:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80035a4:	f7ff ff8f 	bl	80034c6 <USBH_GetDescriptor>
 80035a8:	bb48      	cbnz	r0, 80035fe <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80035aa:	7f23      	ldrb	r3, [r4, #28]
 80035ac:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80035b0:	7f63      	ldrb	r3, [r4, #29]
 80035b2:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80035b6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80035ba:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80035be:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80035c2:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80035c6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80035ca:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80035ce:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80035d2:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80035d6:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80035da:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80035dc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80035e0:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80035e4:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80035e8:	d909      	bls.n	80035fe <USBH_Get_CfgDesc+0x70>
 80035ea:	4627      	mov	r7, r4
 80035ec:	462b      	mov	r3, r5
 80035ee:	4606      	mov	r6, r0
 80035f0:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80035f2:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80035f6:	2e02      	cmp	r6, #2
 80035f8:	d001      	beq.n	80035fe <USBH_Get_CfgDesc+0x70>
 80035fa:	4596      	cmp	lr, r2
 80035fc:	d802      	bhi.n	8003604 <USBH_Get_CfgDesc+0x76>
}
 80035fe:	b003      	add	sp, #12
 8003600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003604:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8003606:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003608:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800360a:	7859      	ldrb	r1, [r3, #1]
 800360c:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800360e:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8003610:	d1f1      	bne.n	80035f6 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8003612:	7819      	ldrb	r1, [r3, #0]
 8003614:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8003618:	7859      	ldrb	r1, [r3, #1]
 800361a:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800361e:	7899      	ldrb	r1, [r3, #2]
 8003620:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8003624:	78d9      	ldrb	r1, [r3, #3]
 8003626:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800362a:	7919      	ldrb	r1, [r3, #4]
 800362c:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8003630:	7959      	ldrb	r1, [r3, #5]
 8003632:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8003636:	7999      	ldrb	r1, [r3, #6]
 8003638:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800363c:	79d9      	ldrb	r1, [r3, #7]
 800363e:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8003642:	7a19      	ldrb	r1, [r3, #8]
 8003644:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003648:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 800364c:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800364e:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 8003652:	428d      	cmp	r5, r1
 8003654:	d802      	bhi.n	800365c <USBH_Get_CfgDesc+0xce>
 8003656:	3601      	adds	r6, #1
 8003658:	371a      	adds	r7, #26
 800365a:	e7cc      	b.n	80035f6 <USBH_Get_CfgDesc+0x68>
 800365c:	4596      	cmp	lr, r2
 800365e:	d9fa      	bls.n	8003656 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003660:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8003662:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003664:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8003666:	785d      	ldrb	r5, [r3, #1]
 8003668:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800366a:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800366c:	d1ef      	bne.n	800364e <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800366e:	1c4d      	adds	r5, r1, #1
 8003670:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8003674:	4421      	add	r1, r4
 8003676:	f893 9000 	ldrb.w	r9, [r3]
 800367a:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800367e:	f893 9001 	ldrb.w	r9, [r3, #1]
 8003682:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8003686:	f893 9002 	ldrb.w	r9, [r3, #2]
 800368a:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800368e:	f893 9003 	ldrb.w	r9, [r3, #3]
 8003692:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8003696:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800369a:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800369e:	f893 9006 	ldrb.w	r9, [r3, #6]
 80036a2:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 80036a6:	b2e9      	uxtb	r1, r5
 80036a8:	e7d1      	b.n	800364e <USBH_Get_CfgDesc+0xc0>

080036aa <USBH_Get_StringDesc>:
{
 80036aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 80036ac:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 80036b0:	4614      	mov	r4, r2
 80036b2:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 80036ba:	462b      	mov	r3, r5
 80036bc:	2100      	movs	r1, #0
{
 80036be:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 80036c0:	f7ff ff01 	bl	80034c6 <USBH_GetDescriptor>
 80036c4:	b978      	cbnz	r0, 80036e6 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 80036c6:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d10b      	bne.n	80036e6 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80036ce:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 80036d2:	3b02      	subs	r3, #2
 80036d4:	42bb      	cmp	r3, r7
 80036d6:	bf28      	it	cs
 80036d8:	463b      	movcs	r3, r7
 80036da:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 80036dc:	4602      	mov	r2, r0
 80036de:	4293      	cmp	r3, r2
 80036e0:	d803      	bhi.n	80036ea <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 80036e2:	2300      	movs	r3, #0
 80036e4:	7023      	strb	r3, [r4, #0]
}
 80036e6:	b003      	add	sp, #12
 80036e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 80036ea:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 80036ec:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 80036ee:	7889      	ldrb	r1, [r1, #2]
 80036f0:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 80036f4:	b292      	uxth	r2, r2
 80036f6:	e7f2      	b.n	80036de <USBH_Get_StringDesc+0x34>

080036f8 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 80036f8:	7883      	ldrb	r3, [r0, #2]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d106      	bne.n	800370c <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80036fe:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8003700:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8003702:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8003704:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8003706:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003708:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800370a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800370c:	2200      	movs	r2, #0
 800370e:	4611      	mov	r1, r2
 8003710:	f7ff be18 	b.w	8003344 <USBH_CtlReq>

08003714 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8003714:	7883      	ldrb	r3, [r0, #2]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d106      	bne.n	8003728 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800371a:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800371c:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800371e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003720:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8003722:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003724:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003726:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003728:	2200      	movs	r2, #0
 800372a:	4611      	mov	r1, r2
 800372c:	f7ff be0a 	b.w	8003344 <USBH_CtlReq>

08003730 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8003730:	7883      	ldrb	r3, [r0, #2]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d106      	bne.n	8003744 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003736:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8003738:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800373a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800373c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800373e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003740:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003742:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8003744:	2200      	movs	r2, #0
 8003746:	4611      	mov	r1, r2
 8003748:	f7ff bdfc 	b.w	8003344 <USBH_CtlReq>

0800374c <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 800374c:	7883      	ldrb	r3, [r0, #2]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d106      	bne.n	8003760 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8003752:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8003754:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003756:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8003758:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800375a:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800375c:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800375e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003760:	2200      	movs	r2, #0
 8003762:	4611      	mov	r1, r2
 8003764:	f7ff bdee 	b.w	8003344 <USBH_CtlReq>

08003768 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8003768:	b530      	push	{r4, r5, lr}
 800376a:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800376c:	2400      	movs	r4, #0
{
 800376e:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003770:	2308      	movs	r3, #8
 8003772:	9302      	str	r3, [sp, #8]
 8003774:	9101      	str	r1, [sp, #4]
 8003776:	9403      	str	r4, [sp, #12]
 8003778:	9400      	str	r4, [sp, #0]
 800377a:	4623      	mov	r3, r4
 800377c:	4622      	mov	r2, r4
 800377e:	4629      	mov	r1, r5
 8003780:	f006 fe8a 	bl	800a498 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8003784:	4620      	mov	r0, r4
 8003786:	b005      	add	sp, #20
 8003788:	bd30      	pop	{r4, r5, pc}

0800378a <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800378a:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800378c:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003790:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003792:	2d00      	cmp	r5, #0
{
 8003794:	461c      	mov	r4, r3
 8003796:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800379a:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 800379c:	bf18      	it	ne
 800379e:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80037a0:	9303      	str	r3, [sp, #12]
 80037a2:	2301      	movs	r3, #1
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	2300      	movs	r3, #0
 80037a8:	9101      	str	r1, [sp, #4]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4621      	mov	r1, r4
 80037ae:	f006 fe73 	bl	800a498 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80037b2:	2000      	movs	r0, #0
 80037b4:	b005      	add	sp, #20
 80037b6:	bd30      	pop	{r4, r5, pc}

080037b8 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80037b8:	b530      	push	{r4, r5, lr}
 80037ba:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80037bc:	2400      	movs	r4, #0
{
 80037be:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80037c0:	9202      	str	r2, [sp, #8]
 80037c2:	2201      	movs	r2, #1
 80037c4:	9101      	str	r1, [sp, #4]
 80037c6:	9403      	str	r4, [sp, #12]
 80037c8:	9200      	str	r2, [sp, #0]
 80037ca:	4623      	mov	r3, r4
 80037cc:	4629      	mov	r1, r5
 80037ce:	f006 fe63 	bl	800a498 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 80037d2:	4620      	mov	r0, r4
 80037d4:	b005      	add	sp, #20
 80037d6:	bd30      	pop	{r4, r5, pc}

080037d8 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80037d8:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 80037da:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 80037de:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 80037e0:	2d00      	cmp	r5, #0
{
 80037e2:	461c      	mov	r4, r3
 80037e4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80037e8:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 80037ea:	bf18      	it	ne
 80037ec:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80037ee:	9303      	str	r3, [sp, #12]
 80037f0:	2301      	movs	r3, #1
 80037f2:	9101      	str	r1, [sp, #4]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	2200      	movs	r2, #0
 80037f8:	2302      	movs	r3, #2
 80037fa:	4621      	mov	r1, r4
 80037fc:	f006 fe4c 	bl	800a498 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8003800:	2000      	movs	r0, #0
 8003802:	b005      	add	sp, #20
 8003804:	bd30      	pop	{r4, r5, pc}

08003806 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003806:	b530      	push	{r4, r5, lr}
 8003808:	b085      	sub	sp, #20
 800380a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800380c:	2400      	movs	r4, #0
 800380e:	9202      	str	r2, [sp, #8]
 8003810:	2201      	movs	r2, #1
 8003812:	9101      	str	r1, [sp, #4]
 8003814:	9403      	str	r4, [sp, #12]
 8003816:	9200      	str	r2, [sp, #0]
 8003818:	2302      	movs	r3, #2
 800381a:	4629      	mov	r1, r5
 800381c:	f006 fe3c 	bl	800a498 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8003820:	4620      	mov	r0, r4
 8003822:	b005      	add	sp, #20
 8003824:	bd30      	pop	{r4, r5, pc}

08003826 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8003826:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8003828:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800382c:	9402      	str	r4, [sp, #8]
 800382e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8003832:	9401      	str	r4, [sp, #4]
 8003834:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003838:	9400      	str	r4, [sp, #0]
 800383a:	f006 fe07 	bl	800a44c <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 800383e:	2000      	movs	r0, #0
 8003840:	b004      	add	sp, #16
 8003842:	bd10      	pop	{r4, pc}

08003844 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8003844:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8003846:	f006 fe19 	bl	800a47c <USBH_LL_ClosePipe>

  return USBH_OK;

}
 800384a:	2000      	movs	r0, #0
 800384c:	bd08      	pop	{r3, pc}

0800384e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800384e:	b530      	push	{r4, r5, lr}
 8003850:	2300      	movs	r3, #0
 8003852:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8003856:	f854 5b04 	ldr.w	r5, [r4], #4
 800385a:	042d      	lsls	r5, r5, #16
 800385c:	b2da      	uxtb	r2, r3
 800385e:	d407      	bmi.n	8003870 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8003860:	33e0      	adds	r3, #224	; 0xe0
 8003862:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003866:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 800386a:	b292      	uxth	r2, r2
}
 800386c:	b2d0      	uxtb	r0, r2
 800386e:	bd30      	pop	{r4, r5, pc}
 8003870:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8003872:	2b0b      	cmp	r3, #11
 8003874:	d1ef      	bne.n	8003856 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8003876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800387a:	e7f7      	b.n	800386c <USBH_AllocPipe+0x1e>

0800387c <USBH_FreePipe>:
   if(idx < 11U)
 800387c:	290a      	cmp	r1, #10
 800387e:	bf9f      	itttt	ls
 8003880:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8003884:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8003888:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 800388c:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8003890:	2000      	movs	r0, #0
 8003892:	4770      	bx	lr

08003894 <fs_open_custom>:
};

 unsigned long engine_js_size = 4837;

int fs_open_custom(struct fs_file *file, const char *name)
{
 8003894:	b538      	push	{r3, r4, r5, lr}
 8003896:	460d      	mov	r5, r1
	int len = 0;
	file->flags = 0;
 8003898:	2300      	movs	r3, #0
{
 800389a:	4604      	mov	r4, r0
	file->flags = 0;
 800389c:	7403      	strb	r3, [r0, #16]

	if ( strcmp( name, "/favicon.ico" ) == 0 )
 800389e:	4920      	ldr	r1, [pc, #128]	; (8003920 <fs_open_custom+0x8c>)
 80038a0:	4628      	mov	r0, r5
 80038a2:	f7fc fc95 	bl	80001d0 <strcmp>
 80038a6:	b920      	cbnz	r0, 80038b2 <fs_open_custom+0x1e>
	{
		len = img_favicon_size;
 80038a8:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <fs_open_custom+0x90>)
 80038aa:	6818      	ldr	r0, [r3, #0]
		file->data = ( const char * )img_favicon;
 80038ac:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <fs_open_custom+0x94>)
		len = strlen( ok );
	}
	else
	{
		len = index_html_size;
		file->data = ( const char * )index_html;
 80038ae:	6023      	str	r3, [r4, #0]
 80038b0:	e015      	b.n	80038de <fs_open_custom+0x4a>
	else if ( strcmp( name, "/engine.js" ) == 0 )
 80038b2:	491e      	ldr	r1, [pc, #120]	; (800392c <fs_open_custom+0x98>)
 80038b4:	4628      	mov	r0, r5
 80038b6:	f7fc fc8b 	bl	80001d0 <strcmp>
 80038ba:	b918      	cbnz	r0, 80038c4 <fs_open_custom+0x30>
		len = engine_js_size;
 80038bc:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <fs_open_custom+0x9c>)
 80038be:	6818      	ldr	r0, [r3, #0]
		file->data = ( const char * )engine_js;
 80038c0:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <fs_open_custom+0xa0>)
 80038c2:	e7f4      	b.n	80038ae <fs_open_custom+0x1a>
	else if ( strcmp( name, "/orange.html" ) == 0 )
 80038c4:	491c      	ldr	r1, [pc, #112]	; (8003938 <fs_open_custom+0xa4>)
 80038c6:	4628      	mov	r0, r5
 80038c8:	f7fc fc82 	bl	80001d0 <strcmp>
 80038cc:	b960      	cbnz	r0, 80038e8 <fs_open_custom+0x54>
		HAL_GPIO_TogglePin( GPIOD, LD3_Pin);
 80038ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		HAL_GPIO_TogglePin( GPIOD, LD6_Pin);
 80038d2:	481a      	ldr	r0, [pc, #104]	; (800393c <fs_open_custom+0xa8>)
 80038d4:	f7fd fb97 	bl	8001006 <HAL_GPIO_TogglePin>
		file->data = ok;
 80038d8:	4b19      	ldr	r3, [pc, #100]	; (8003940 <fs_open_custom+0xac>)
 80038da:	6023      	str	r3, [r4, #0]
		len = strlen( ok );
 80038dc:	2056      	movs	r0, #86	; 0x56
	}

	file->len = len;
	file->index = len;
	file->pextension = 0;
 80038de:	2300      	movs	r3, #0
	file->len = len;
 80038e0:	6060      	str	r0, [r4, #4]
	file->index = len;
 80038e2:	60a0      	str	r0, [r4, #8]
	file->pextension = 0;
 80038e4:	60e3      	str	r3, [r4, #12]
	return len;
}
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
	else if ( strcmp( name, "/green.html" ) == 0 )
 80038e8:	4916      	ldr	r1, [pc, #88]	; (8003944 <fs_open_custom+0xb0>)
 80038ea:	4628      	mov	r0, r5
 80038ec:	f7fc fc70 	bl	80001d0 <strcmp>
 80038f0:	b910      	cbnz	r0, 80038f8 <fs_open_custom+0x64>
		HAL_GPIO_TogglePin( GPIOD, LD4_Pin);
 80038f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038f6:	e7ec      	b.n	80038d2 <fs_open_custom+0x3e>
	else if ( strcmp( name, "/red.html" ) == 0 )
 80038f8:	4913      	ldr	r1, [pc, #76]	; (8003948 <fs_open_custom+0xb4>)
 80038fa:	4628      	mov	r0, r5
 80038fc:	f7fc fc68 	bl	80001d0 <strcmp>
 8003900:	b910      	cbnz	r0, 8003908 <fs_open_custom+0x74>
		HAL_GPIO_TogglePin( GPIOD, LD5_Pin);
 8003902:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003906:	e7e4      	b.n	80038d2 <fs_open_custom+0x3e>
	else if ( strcmp( name, "/blue.html" ) == 0 )
 8003908:	4910      	ldr	r1, [pc, #64]	; (800394c <fs_open_custom+0xb8>)
 800390a:	4628      	mov	r0, r5
 800390c:	f7fc fc60 	bl	80001d0 <strcmp>
 8003910:	b910      	cbnz	r0, 8003918 <fs_open_custom+0x84>
		HAL_GPIO_TogglePin( GPIOD, LD6_Pin);
 8003912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003916:	e7dc      	b.n	80038d2 <fs_open_custom+0x3e>
		len = index_html_size;
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <fs_open_custom+0xbc>)
 800391a:	6818      	ldr	r0, [r3, #0]
		file->data = ( const char * )index_html;
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <fs_open_custom+0xc0>)
 800391e:	e7c6      	b.n	80038ae <fs_open_custom+0x1a>
 8003920:	0800b4ac 	.word	0x0800b4ac
 8003924:	20001894 	.word	0x20001894
 8003928:	20001314 	.word	0x20001314
 800392c:	0800b4b9 	.word	0x0800b4b9
 8003930:	20001310 	.word	0x20001310
 8003934:	20000028 	.word	0x20000028
 8003938:	0800b4c4 	.word	0x0800b4c4
 800393c:	40020c00 	.word	0x40020c00
 8003940:	0800b4f2 	.word	0x0800b4f2
 8003944:	0800b4d1 	.word	0x0800b4d1
 8003948:	0800b4dd 	.word	0x0800b4dd
 800394c:	0800b4e7 	.word	0x0800b4e7
 8003950:	20001b9c 	.word	0x20001b9c
 8003954:	20001898 	.word	0x20001898

08003958 <fs_close_custom>:

/*-----------------------------------------------------------------------------*/
void fs_close_custom(struct fs_file *file)
{
 8003958:	b510      	push	{r4, lr}
	if ( file->flags & 0x04 )
 800395a:	7c03      	ldrb	r3, [r0, #16]
 800395c:	075b      	lsls	r3, r3, #29
{
 800395e:	4604      	mov	r4, r0
	if ( file->flags & 0x04 )
 8003960:	d502      	bpl.n	8003968 <fs_close_custom+0x10>
	{
		free( ( char * )file->data );
 8003962:	6800      	ldr	r0, [r0, #0]
 8003964:	f006 fe34 	bl	800a5d0 <free>
	}

	file->data = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	6023      	str	r3, [r4, #0]
	file->len = 0;
 800396c:	6063      	str	r3, [r4, #4]
 800396e:	bd10      	pop	{r4, pc}

08003970 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8003970:	b510      	push	{r4, lr}
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8003972:	4604      	mov	r4, r0
 8003974:	b158      	cbz	r0, 800398e <fs_open+0x1e>
 8003976:	b151      	cbz	r1, 800398e <fs_open+0x1e>
     return ERR_ARG;
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 8003978:	f7ff ff8c 	bl	8003894 <fs_open_custom>
 800397c:	b118      	cbz	r0, 8003986 <fs_open+0x16>
    file->is_custom_file = 1;
 800397e:	2301      	movs	r3, #1
 8003980:	7463      	strb	r3, [r4, #17]
    return ERR_OK;
 8003982:	2000      	movs	r0, #0
 8003984:	bd10      	pop	{r4, pc}
  }
  file->is_custom_file = 0;
 8003986:	7460      	strb	r0, [r4, #17]
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8003988:	f06f 0005 	mvn.w	r0, #5
 800398c:	bd10      	pop	{r4, pc}
     return ERR_ARG;
 800398e:	f06f 000f 	mvn.w	r0, #15
}
 8003992:	bd10      	pop	{r4, pc}

08003994 <fs_close>:
/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 8003994:	7c43      	ldrb	r3, [r0, #17]
 8003996:	b10b      	cbz	r3, 800399c <fs_close+0x8>
    fs_close_custom(file);
 8003998:	f7ff bfde 	b.w	8003958 <fs_close_custom>
 800399c:	4770      	bx	lr

0800399e <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 800399e:	6842      	ldr	r2, [r0, #4]
 80039a0:	6880      	ldr	r0, [r0, #8]
}
 80039a2:	1a10      	subs	r0, r2, r0
 80039a4:	4770      	bx	lr
	...

080039a8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 80039a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ac:	4605      	mov	r5, r0
 80039ae:	460f      	mov	r7, r1
 80039b0:	4698      	mov	r8, r3
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80039b2:	4616      	mov	r6, r2
 80039b4:	b932      	cbnz	r2, 80039c4 <http_write+0x1c>
 80039b6:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <http_write+0x70>)
 80039b8:	4918      	ldr	r1, [pc, #96]	; (8003a1c <http_write+0x74>)
 80039ba:	4819      	ldr	r0, [pc, #100]	; (8003a20 <http_write+0x78>)
 80039bc:	f44f 7204 	mov.w	r2, #528	; 0x210
 80039c0:	f006 fedc 	bl	800a77c <iprintf>
  len = *length;
 80039c4:	8830      	ldrh	r0, [r6, #0]
  if (len == 0) {
 80039c6:	b328      	cbz	r0, 8003a14 <http_write+0x6c>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80039c8:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 80039ca:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 80039ce:	0064      	lsls	r4, r4, #1
 80039d0:	b2a4      	uxth	r4, r4
 80039d2:	429c      	cmp	r4, r3
 80039d4:	bf28      	it	cs
 80039d6:	461c      	movcs	r4, r3
 80039d8:	4284      	cmp	r4, r0
 80039da:	bf28      	it	cs
 80039dc:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 80039de:	4643      	mov	r3, r8
 80039e0:	4622      	mov	r2, r4
 80039e2:	4639      	mov	r1, r7
 80039e4:	4628      	mov	r0, r5
 80039e6:	f004 ff33 	bl	8008850 <tcp_write>
    if (err == ERR_MEM) {
 80039ea:	1c43      	adds	r3, r0, #1
 80039ec:	d10d      	bne.n	8003a0a <http_write+0x62>
      if ((tcp_sndbuf(pcb) == 0) ||
 80039ee:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 80039f2:	b133      	cbz	r3, 8003a02 <http_write+0x5a>
 80039f4:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d802      	bhi.n	8003a02 <http_write+0x5a>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
          /* no need to try smaller sizes */
          len = 1;
      } else {
        len /= 2;
 80039fc:	0864      	lsrs	r4, r4, #1
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 80039fe:	2c01      	cmp	r4, #1
 8003a00:	d8ed      	bhi.n	80039de <http_write+0x36>
  if (err == ERR_OK) {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	8033      	strh	r3, [r6, #0]
 8003a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (err == ERR_OK) {
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d1f9      	bne.n	8003a02 <http_write+0x5a>
    *length = len;
 8003a0e:	8034      	strh	r4, [r6, #0]
 8003a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
}
 8003a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a18:	0800b7eb 	.word	0x0800b7eb
 8003a1c:	0800b822 	.word	0x0800b822
 8003a20:	0800b831 	.word	0x0800b831

08003a24 <http_state_eof>:
{
 8003a24:	b510      	push	{r4, lr}
 8003a26:	4604      	mov	r4, r0
  if(hs->handle) {
 8003a28:	6940      	ldr	r0, [r0, #20]
 8003a2a:	b118      	cbz	r0, 8003a34 <http_state_eof+0x10>
    fs_close(hs->handle);
 8003a2c:	f7ff ffb2 	bl	8003994 <fs_close>
    hs->handle = NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	6163      	str	r3, [r4, #20]
  if (hs->req) {
 8003a34:	6a20      	ldr	r0, [r4, #32]
 8003a36:	b118      	cbz	r0, 8003a40 <http_state_eof+0x1c>
    pbuf_free(hs->req);
 8003a38:	f002 f9a6 	bl	8005d88 <pbuf_free>
    hs->req = NULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6223      	str	r3, [r4, #32]
 8003a40:	bd10      	pop	{r4, pc}
	...

08003a44 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8003a48:	490a      	ldr	r1, [pc, #40]	; (8003a74 <http_get_404_file+0x30>)
 8003a4a:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	f7ff ff8f 	bl	8003970 <fs_open>
  if (err != ERR_OK) {
 8003a52:	b168      	cbz	r0, 8003a70 <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8003a54:	4908      	ldr	r1, [pc, #32]	; (8003a78 <http_get_404_file+0x34>)
 8003a56:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7ff ff89 	bl	8003970 <fs_open>
    if (err != ERR_OK) {
 8003a5e:	b138      	cbz	r0, 8003a70 <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8003a60:	4906      	ldr	r1, [pc, #24]	; (8003a7c <http_get_404_file+0x38>)
 8003a62:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8003a64:	4620      	mov	r0, r4
 8003a66:	f7ff ff83 	bl	8003970 <fs_open>
      if (err != ERR_OK) {
 8003a6a:	b108      	cbz	r0, 8003a70 <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8003a6c:	2400      	movs	r4, #0
 8003a6e:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 8003a70:	4620      	mov	r0, r4
 8003a72:	bd38      	pop	{r3, r4, r5, pc}
 8003a74:	0800b64b 	.word	0x0800b64b
 8003a78:	0800b655 	.word	0x0800b655
 8003a7c:	0800b65e 	.word	0x0800b65e

08003a80 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8003a84:	4615      	mov	r5, r2
 8003a86:	bb42      	cbnz	r2, 8003ada <http_accept+0x5a>
 8003a88:	b339      	cbz	r1, 8003ada <http_accept+0x5a>
    return ERR_VAL;
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f002 fdd3 	bl	8006638 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003a92:	2050      	movs	r0, #80	; 0x50
 8003a94:	f001 ff16 	bl	80058c4 <mem_malloc>
  if (ret != NULL) {
 8003a98:	4606      	mov	r6, r0
 8003a9a:	b308      	cbz	r0, 8003ae0 <http_accept+0x60>
  memset(hs, 0, sizeof(struct http_state));
 8003a9c:	2250      	movs	r2, #80	; 0x50
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	f006 fdb8 	bl	800a614 <memset>
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 8003aa4:	2305      	movs	r3, #5
 8003aa6:	f8a6 304e 	strh.w	r3, [r6, #78]	; 0x4e
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8003aaa:	4631      	mov	r1, r6
 8003aac:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8003aae:	61f4      	str	r4, [r6, #28]
  tcp_arg(pcb, hs);
 8003ab0:	f002 fdda 	bl	8006668 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 8003ab4:	490c      	ldr	r1, [pc, #48]	; (8003ae8 <http_accept+0x68>)
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f002 fdda 	bl	8006670 <tcp_recv>
  tcp_err(pcb, http_err);
 8003abc:	490b      	ldr	r1, [pc, #44]	; (8003aec <http_accept+0x6c>)
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f002 fe04 	bl	80066cc <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003ac4:	490a      	ldr	r1, [pc, #40]	; (8003af0 <http_accept+0x70>)
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	2204      	movs	r2, #4
 8003aca:	f002 fe1d 	bl	8006708 <tcp_poll>
  tcp_sent(pcb, http_sent);
 8003ace:	4909      	ldr	r1, [pc, #36]	; (8003af4 <http_accept+0x74>)
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f002 fde5 	bl	80066a0 <tcp_sent>

  return ERR_OK;
}
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8003ada:	f06f 0505 	mvn.w	r5, #5
 8003ade:	e7fa      	b.n	8003ad6 <http_accept+0x56>
    return ERR_MEM;
 8003ae0:	f04f 35ff 	mov.w	r5, #4294967295
 8003ae4:	e7f7      	b.n	8003ad6 <http_accept+0x56>
 8003ae6:	bf00      	nop
 8003ae8:	08003d49 	.word	0x08003d49
 8003aec:	08004171 	.word	0x08004171
 8003af0:	08003d0d 	.word	0x08003d0d
 8003af4:	08003cf5 	.word	0x08003cf5

08003af8 <http_close_conn>:
{
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	4604      	mov	r4, r0
 8003afc:	460d      	mov	r5, r1
  tcp_arg(pcb, NULL);
 8003afe:	2100      	movs	r1, #0
 8003b00:	f002 fdb2 	bl	8006668 <tcp_arg>
  tcp_recv(pcb, NULL);
 8003b04:	2100      	movs	r1, #0
 8003b06:	4620      	mov	r0, r4
 8003b08:	f002 fdb2 	bl	8006670 <tcp_recv>
  tcp_err(pcb, NULL);
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f002 fddc 	bl	80066cc <tcp_err>
  tcp_poll(pcb, NULL, 0);
 8003b14:	2200      	movs	r2, #0
 8003b16:	4611      	mov	r1, r2
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f002 fdf5 	bl	8006708 <tcp_poll>
  tcp_sent(pcb, NULL);
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4620      	mov	r0, r4
 8003b22:	f002 fdbd 	bl	80066a0 <tcp_sent>
  if (hs != NULL) {
 8003b26:	b12d      	cbz	r5, 8003b34 <http_close_conn+0x3c>
    http_state_eof(hs);
 8003b28:	4628      	mov	r0, r5
 8003b2a:	f7ff ff7b 	bl	8003a24 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f001 fda8 	bl	8005684 <mem_free>
  err = tcp_close(pcb);
 8003b34:	4620      	mov	r0, r4
 8003b36:	f003 f8f7 	bl	8006d28 <tcp_close>
  if (err != ERR_OK) {
 8003b3a:	4605      	mov	r5, r0
 8003b3c:	b120      	cbz	r0, 8003b48 <http_close_conn+0x50>
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003b3e:	2204      	movs	r2, #4
 8003b40:	4902      	ldr	r1, [pc, #8]	; (8003b4c <http_close_conn+0x54>)
 8003b42:	4620      	mov	r0, r4
 8003b44:	f002 fde0 	bl	8006708 <tcp_poll>
}
 8003b48:	4628      	mov	r0, r5
 8003b4a:	bd38      	pop	{r3, r4, r5, pc}
 8003b4c:	08003d0d 	.word	0x08003d0d

08003b50 <http_check_eof>:
{
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	4605      	mov	r5, r0
  if (hs->handle == NULL) {
 8003b54:	6948      	ldr	r0, [r1, #20]
{
 8003b56:	460c      	mov	r4, r1
  if (hs->handle == NULL) {
 8003b58:	b928      	cbnz	r0, 8003b66 <http_check_eof+0x16>
    http_close_conn(pcb, hs);
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f7ff ffcb 	bl	8003af8 <http_close_conn>
    return 0;
 8003b62:	2000      	movs	r0, #0
 8003b64:	bd38      	pop	{r3, r4, r5, pc}
  bytes_left = fs_bytes_left(hs->handle);
 8003b66:	f7ff ff1a 	bl	800399e <fs_bytes_left>
  if (bytes_left <= 0) {
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	ddf5      	ble.n	8003b5a <http_check_eof+0xa>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8003b6e:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <http_check_eof+0x30>)
 8003b70:	4904      	ldr	r1, [pc, #16]	; (8003b84 <http_check_eof+0x34>)
 8003b72:	4805      	ldr	r0, [pc, #20]	; (8003b88 <http_check_eof+0x38>)
 8003b74:	f240 4283 	movw	r2, #1155	; 0x483
 8003b78:	f006 fe00 	bl	800a77c <iprintf>
  return 1;
 8003b7c:	2001      	movs	r0, #1
}
 8003b7e:	bd38      	pop	{r3, r4, r5, pc}
 8003b80:	0800b7eb 	.word	0x0800b7eb
 8003b84:	0800b614 	.word	0x0800b614
 8003b88:	0800b831 	.word	0x0800b831

08003b8c <http_send>:
{
 8003b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b90:	4605      	mov	r5, r0
  if (hs == NULL) {
 8003b92:	460c      	mov	r4, r1
 8003b94:	b921      	cbnz	r1, 8003ba0 <http_send+0x14>
    return 0;
 8003b96:	2600      	movs	r6, #0
}
 8003b98:	4630      	mov	r0, r6
 8003b9a:	b003      	add	sp, #12
 8003b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 8003ba0:	f8b1 304e 	ldrh.w	r3, [r1, #78]	; 0x4e
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d81d      	bhi.n	8003be4 <http_send+0x58>
  sendlen = len;
 8003ba8:	af02      	add	r7, sp, #8
  len = tcp_sndbuf(pcb);
 8003baa:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  sendlen = len;
 8003bae:	f827 6d02 	strh.w	r6, [r7, #-2]!
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 8003bb2:	f04f 0800 	mov.w	r8, #0
 8003bb6:	f8b4 a04e 	ldrh.w	sl, [r4, #78]	; 0x4e
  while(len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8003bba:	b12e      	cbz	r6, 8003bc8 <http_send+0x3c>
 8003bbc:	f1ba 0f04 	cmp.w	sl, #4
 8003bc0:	d802      	bhi.n	8003bc8 <http_send+0x3c>
 8003bc2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003bc6:	b9fb      	cbnz	r3, 8003c08 <http_send+0x7c>
  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 8003bc8:	f1ba 0f04 	cmp.w	sl, #4
 8003bcc:	d905      	bls.n	8003bda <http_send+0x4e>
 8003bce:	69a3      	ldr	r3, [r4, #24]
 8003bd0:	b91b      	cbnz	r3, 8003bda <http_send+0x4e>
    if(http_check_eof(pcb, hs)) {
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f7ff ffbb 	bl	8003b50 <http_check_eof>
  if((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 8003bda:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	f240 8086 	bls.w	8003cf0 <http_send+0x164>
  if (hs->left == 0) {
 8003be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d051      	beq.n	8003c8e <http_send+0x102>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003bea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003bec:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8003bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bf4:	428a      	cmp	r2, r1
 8003bf6:	bf98      	it	ls
 8003bf8:	4613      	movls	r3, r2
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003bfa:	69a1      	ldr	r1, [r4, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003bfc:	f8ad 3006 	strh.w	r3, [sp, #6]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003c00:	2900      	cmp	r1, #0
 8003c02:	d14b      	bne.n	8003c9c <http_send+0x110>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e053      	b.n	8003cb0 <http_send+0x124>
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 8003c08:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 8003c0c:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 8003c10:	4658      	mov	r0, fp
 8003c12:	f7fc fae7 	bl	80001e4 <strlen>
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8003c16:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 8003c1a:	fa1f f980 	uxth.w	r9, r0
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8003c1e:	4648      	mov	r0, r9
 8003c20:	1a40      	subs	r0, r0, r1
 8003c22:	42b0      	cmp	r0, r6
 8003c24:	bfa8      	it	ge
 8003c26:	4630      	movge	r0, r6
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 8003c28:	f1ba 0f03 	cmp.w	sl, #3
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8003c2c:	f8ad 0006 	strh.w	r0, [sp, #6]
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 8003c30:	4459      	add	r1, fp
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 8003c32:	d02a      	beq.n	8003c8a <http_send+0xfe>
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8003c34:	f1ba 0f04 	cmp.w	sl, #4
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 8003c38:	f04f 0300 	mov.w	r3, #0
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8003c3c:	d001      	beq.n	8003c42 <http_send+0xb6>
      apiflags |= TCP_WRITE_FLAG_MORE;
 8003c3e:	f043 0302 	orr.w	r3, r3, #2
    err = http_write(pcb, ptr, &sendlen, apiflags);
 8003c42:	463a      	mov	r2, r7
 8003c44:	4628      	mov	r0, r5
 8003c46:	f7ff feaf 	bl	80039a8 <http_write>
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 8003c4a:	b108      	cbz	r0, 8003c50 <http_send+0xc4>
      sendlen = 0;
 8003c4c:	f8ad 8006 	strh.w	r8, [sp, #6]
    hs->hdr_pos += sendlen;
 8003c50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003c54:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8003c58:	4413      	add	r3, r2
 8003c5a:	b29b      	uxth	r3, r3
    len -= sendlen;
 8003c5c:	1ab6      	subs	r6, r6, r2
    if(hs->hdr_pos == hdrlen) {
 8003c5e:	4599      	cmp	r9, r3
    hs->hdr_pos += sendlen;
 8003c60:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    len -= sendlen;
 8003c64:	b2b6      	uxth	r6, r6
    if(hs->hdr_pos == hdrlen) {
 8003c66:	d1a6      	bne.n	8003bb6 <http_send+0x2a>
      hs->hdr_index++;
 8003c68:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
        hs->hdr_index++;
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8003c72:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d804      	bhi.n	8003c84 <http_send+0xf8>
         (hs->hdrs[hs->hdr_index] == NULL)) {
 8003c7a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8003c7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c80:	2a00      	cmp	r2, #0
 8003c82:	d0f3      	beq.n	8003c6c <http_send+0xe0>
      hs->hdr_pos = 0;
 8003c84:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
 8003c88:	e795      	b.n	8003bb6 <http_send+0x2a>
      apiflags |= TCP_WRITE_FLAG_COPY;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e7d7      	b.n	8003c3e <http_send+0xb2>
    if (!http_check_eof(pcb, hs)) {
 8003c8e:	4621      	mov	r1, r4
 8003c90:	4628      	mov	r0, r5
 8003c92:	f7ff ff5d 	bl	8003b50 <http_check_eof>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d1a7      	bne.n	8003bea <http_send+0x5e>
 8003c9a:	e77c      	b.n	8003b96 <http_send+0xa>
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003c9c:	6960      	ldr	r0, [r4, #20]
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	d0b0      	beq.n	8003c04 <http_send+0x78>
 8003ca2:	6843      	ldr	r3, [r0, #4]
 8003ca4:	1a9a      	subs	r2, r3, r2
 8003ca6:	6803      	ldr	r3, [r0, #0]
 8003ca8:	4413      	add	r3, r2
 8003caa:	1acb      	subs	r3, r1, r3
 8003cac:	bf18      	it	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	f10d 0206 	add.w	r2, sp, #6
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	f7ff fe77 	bl	80039a8 <http_write>
  if (err == ERR_OK) {
 8003cba:	b9b8      	cbnz	r0, 8003cec <http_send+0x160>
    hs->file += len;
 8003cbc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8003cc0:	69a2      	ldr	r2, [r4, #24]
    hs->left -= len;
 8003cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hs->file += len;
 8003cc4:	440a      	add	r2, r1
    hs->left -= len;
 8003cc6:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8003cc8:	61a2      	str	r2, [r4, #24]
    hs->left -= len;
 8003cca:	6263      	str	r3, [r4, #36]	; 0x24
    data_to_send = 1;
 8003ccc:	2601      	movs	r6, #1
  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8003cce:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003cd0:	2f00      	cmp	r7, #0
 8003cd2:	f47f af61 	bne.w	8003b98 <http_send+0xc>
 8003cd6:	6960      	ldr	r0, [r4, #20]
 8003cd8:	f7ff fe61 	bl	800399e <fs_bytes_left>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	f73f af5b 	bgt.w	8003b98 <http_send+0xc>
    http_close_conn(pcb, hs);
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	f7ff ff07 	bl	8003af8 <http_close_conn>
 8003cea:	e754      	b.n	8003b96 <http_send+0xa>
  u8_t data_to_send = 0;
 8003cec:	2600      	movs	r6, #0
 8003cee:	e7ee      	b.n	8003cce <http_send+0x142>
 8003cf0:	2602      	movs	r6, #2
 8003cf2:	e751      	b.n	8003b98 <http_send+0xc>

08003cf4 <http_sent>:
{
 8003cf4:	b508      	push	{r3, lr}
 8003cf6:	460b      	mov	r3, r1
  if (hs == NULL) {
 8003cf8:	4601      	mov	r1, r0
 8003cfa:	b128      	cbz	r0, 8003d08 <http_sent+0x14>
  hs->retries = 0;
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ff42 	bl	8003b8c <http_send>
}
 8003d08:	2000      	movs	r0, #0
 8003d0a:	bd08      	pop	{r3, pc}

08003d0c <http_poll>:
{
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	460c      	mov	r4, r1
  if (hs == NULL) {
 8003d10:	4601      	mov	r1, r0
 8003d12:	b920      	cbnz	r0, 8003d1e <http_poll+0x12>
      http_close_conn(pcb, hs);
 8003d14:	4620      	mov	r0, r4
 8003d16:	f7ff feef 	bl	8003af8 <http_close_conn>
}
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	bd10      	pop	{r4, pc}
    hs->retries++;
 8003d1e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8003d22:	3301      	adds	r3, #1
 8003d24:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8003d26:	2b04      	cmp	r3, #4
    hs->retries++;
 8003d28:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8003d2c:	d0f2      	beq.n	8003d14 <http_poll+0x8>
    if(hs && (hs->handle)) {
 8003d2e:	6943      	ldr	r3, [r0, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f2      	beq.n	8003d1a <http_poll+0xe>
      if(http_send(pcb, hs)) {
 8003d34:	4620      	mov	r0, r4
 8003d36:	f7ff ff29 	bl	8003b8c <http_send>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d0ed      	beq.n	8003d1a <http_poll+0xe>
        tcp_output(pcb);
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f005 f90c 	bl	8008f5c <tcp_output>
 8003d44:	e7e9      	b.n	8003d1a <http_poll+0xe>
	...

08003d48 <http_recv>:
{
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	b087      	sub	sp, #28
 8003d4e:	4604      	mov	r4, r0
 8003d50:	9101      	str	r1, [sp, #4]
 8003d52:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8003d54:	469a      	mov	sl, r3
 8003d56:	b94b      	cbnz	r3, 8003d6c <http_recv+0x24>
 8003d58:	b152      	cbz	r2, 8003d70 <http_recv+0x28>
 8003d5a:	b988      	cbnz	r0, 8003d80 <http_recv+0x38>
      tcp_recved(pcb, p->tot_len);
 8003d5c:	9801      	ldr	r0, [sp, #4]
 8003d5e:	8929      	ldrh	r1, [r5, #8]
 8003d60:	f002 fc16 	bl	8006590 <tcp_recved>
      pbuf_free(p);
 8003d64:	4628      	mov	r0, r5
 8003d66:	f002 f80f 	bl	8005d88 <pbuf_free>
 8003d6a:	e001      	b.n	8003d70 <http_recv+0x28>
    if (p != NULL) {
 8003d6c:	2a00      	cmp	r2, #0
 8003d6e:	d1f5      	bne.n	8003d5c <http_recv+0x14>
    http_close_conn(pcb, hs);
 8003d70:	4621      	mov	r1, r4
 8003d72:	9801      	ldr	r0, [sp, #4]
 8003d74:	f7ff fec0 	bl	8003af8 <http_close_conn>
}
 8003d78:	2000      	movs	r0, #0
 8003d7a:	b007      	add	sp, #28
 8003d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_recved(pcb, p->tot_len);
 8003d80:	8911      	ldrh	r1, [r2, #8]
 8003d82:	9801      	ldr	r0, [sp, #4]
 8003d84:	f002 fc04 	bl	8006590 <tcp_recved>
    if (hs->handle == NULL) {
 8003d88:	6963      	ldr	r3, [r4, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 81c6 	bne.w	800411c <http_recv+0x3d4>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8003d90:	69a3      	ldr	r3, [r4, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 81e1 	bne.w	800415a <http_recv+0x412>
  if (hs->req == NULL) {
 8003d98:	6a20      	ldr	r0, [r4, #32]
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	f040 808f 	bne.w	8003ebe <http_recv+0x176>
    hs->req = p;
 8003da0:	6225      	str	r5, [r4, #32]
  pbuf_ref(p);
 8003da2:	4628      	mov	r0, r5
 8003da4:	f002 f9aa 	bl	80060fc <pbuf_ref>
  if (hs->req->next != NULL) {
 8003da8:	6a20      	ldr	r0, [r4, #32]
 8003daa:	6803      	ldr	r3, [r0, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 808a 	beq.w	8003ec6 <http_recv+0x17e>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003db2:	f8b0 9008 	ldrh.w	r9, [r0, #8]
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8003db6:	49ad      	ldr	r1, [pc, #692]	; (800406c <http_recv+0x324>)
    data = httpd_req_buf;
 8003db8:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 800406c <http_recv+0x324>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003dbc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003dc0:	4599      	cmp	r9, r3
 8003dc2:	bf28      	it	cs
 8003dc4:	4699      	movcs	r9, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8003dc6:	464a      	mov	r2, r9
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f002 fa6f 	bl	80062ac <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8003dce:	f1b9 0f06 	cmp.w	r9, #6
 8003dd2:	f240 818f 	bls.w	80040f4 <http_recv+0x3ac>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8003dd6:	464a      	mov	r2, r9
 8003dd8:	49a5      	ldr	r1, [pc, #660]	; (8004070 <http_recv+0x328>)
 8003dda:	4640      	mov	r0, r8
 8003ddc:	f000 fa19 	bl	8004212 <lwip_strnstr>
    if (crlf != NULL) {
 8003de0:	2800      	cmp	r0, #0
 8003de2:	f000 8187 	beq.w	80040f4 <http_recv+0x3ac>
      if (!strncmp(data, "GET ", 4)) {
 8003de6:	2204      	movs	r2, #4
 8003de8:	49a2      	ldr	r1, [pc, #648]	; (8004074 <http_recv+0x32c>)
 8003dea:	4640      	mov	r0, r8
 8003dec:	f006 fcfc 	bl	800a7e8 <strncmp>
 8003df0:	9002      	str	r0, [sp, #8]
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d16c      	bne.n	8003ed0 <http_recv+0x188>
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8003df6:	f1a9 0304 	sub.w	r3, r9, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8003dfa:	b29b      	uxth	r3, r3
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8003dfc:	f108 0604 	add.w	r6, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8003e00:	461a      	mov	r2, r3
 8003e02:	499d      	ldr	r1, [pc, #628]	; (8004078 <http_recv+0x330>)
 8003e04:	9303      	str	r3, [sp, #12]
 8003e06:	4630      	mov	r0, r6
 8003e08:	f000 fa03 	bl	8004212 <lwip_strnstr>
        sp1 = data + 3;
 8003e0c:	f108 0b03 	add.w	fp, r8, #3
      if (sp2 == NULL) {
 8003e10:	4607      	mov	r7, r0
 8003e12:	9b03      	ldr	r3, [sp, #12]
 8003e14:	b950      	cbnz	r0, 8003e2c <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8003e16:	461a      	mov	r2, r3
 8003e18:	4995      	ldr	r1, [pc, #596]	; (8004070 <http_recv+0x328>)
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f000 f9f9 	bl	8004212 <lwip_strnstr>
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003e20:	4607      	mov	r7, r0
 8003e22:	2800      	cmp	r0, #0
 8003e24:	f000 8166 	beq.w	80040f4 <http_recv+0x3ac>
        is_09 = 1;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	9302      	str	r3, [sp, #8]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003e2c:	45bb      	cmp	fp, r7
 8003e2e:	f080 8161 	bcs.w	80040f4 <http_recv+0x3ac>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8003e32:	464a      	mov	r2, r9
 8003e34:	4991      	ldr	r1, [pc, #580]	; (800407c <http_recv+0x334>)
 8003e36:	4640      	mov	r0, r8
 8003e38:	f000 f9eb 	bl	8004212 <lwip_strnstr>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	f000 8159 	beq.w	80040f4 <http_recv+0x3ac>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8003e42:	1bbf      	subs	r7, r7, r6
          uri[uri_len] = 0;
 8003e44:	b2bf      	uxth	r7, r7
          *sp1 = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f888 3003 	strb.w	r3, [r8, #3]
  size_t uri_len = strlen(uri);
 8003e4c:	4630      	mov	r0, r6
          uri[uri_len] = 0;
 8003e4e:	55f3      	strb	r3, [r6, r7]
 8003e50:	9605      	str	r6, [sp, #20]
  size_t uri_len = strlen(uri);
 8003e52:	f7fc f9c7 	bl	80001e4 <strlen>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8003e56:	2800      	cmp	r0, #0
 8003e58:	f000 80a5 	beq.w	8003fa6 <http_recv+0x25e>
 8003e5c:	1e47      	subs	r7, r0, #1
 8003e5e:	5df3      	ldrb	r3, [r6, r7]
 8003e60:	2b2f      	cmp	r3, #47	; 0x2f
 8003e62:	f040 80a0 	bne.w	8003fa6 <http_recv+0x25e>
 8003e66:	4b86      	ldr	r3, [pc, #536]	; (8004080 <http_recv+0x338>)
 8003e68:	429e      	cmp	r6, r3
 8003e6a:	469b      	mov	fp, r3
 8003e6c:	d102      	bne.n	8003e74 <http_recv+0x12c>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8003e6e:	2801      	cmp	r0, #1
 8003e70:	f040 8099 	bne.w	8003fa6 <http_recv+0x25e>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8003e74:	2f3f      	cmp	r7, #63	; 0x3f
 8003e76:	bf28      	it	cs
 8003e78:	273f      	movcs	r7, #63	; 0x3f
    if (copy_len > 0) {
 8003e7a:	b13f      	cbz	r7, 8003e8c <http_recv+0x144>
      MEMCPY(http_uri_buf, uri, copy_len);
 8003e7c:	463a      	mov	r2, r7
 8003e7e:	4631      	mov	r1, r6
 8003e80:	487f      	ldr	r0, [pc, #508]	; (8004080 <http_recv+0x338>)
 8003e82:	f006 fbbc 	bl	800a5fe <memcpy>
      http_uri_buf[copy_len] = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f80b 3007 	strb.w	r3, [fp, r7]
        file_name = g_psDefaultFilenames[loop].name;
 8003e8c:	f8df 9228 	ldr.w	r9, [pc, #552]	; 80040b8 <http_recv+0x370>
        is_09 = 1;
 8003e90:	f04f 0800 	mov.w	r8, #0
      if (copy_len > 0) {
 8003e94:	b317      	cbz	r7, 8003edc <http_recv+0x194>
        if (len_left > 0) {
 8003e96:	f1d7 023f 	rsbs	r2, r7, #63	; 0x3f
 8003e9a:	d00e      	beq.n	8003eba <http_recv+0x172>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 8003e9c:	f859 6038 	ldr.w	r6, [r9, r8, lsl #3]
 8003ea0:	9203      	str	r2, [sp, #12]
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f7fc f99e 	bl	80001e4 <strlen>
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 8003ea8:	9a03      	ldr	r2, [sp, #12]
 8003eaa:	4282      	cmp	r2, r0
 8003eac:	bf28      	it	cs
 8003eae:	4602      	movcs	r2, r0
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	eb0b 0007 	add.w	r0, fp, r7
 8003eb6:	f006 fba2 	bl	800a5fe <memcpy>
        file_name = http_uri_buf;
 8003eba:	4a71      	ldr	r2, [pc, #452]	; (8004080 <http_recv+0x338>)
 8003ebc:	e010      	b.n	8003ee0 <http_recv+0x198>
    pbuf_cat(hs->req, p);
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f002 f930 	bl	8006124 <pbuf_cat>
 8003ec4:	e76d      	b.n	8003da2 <http_recv+0x5a>
    data = (char *)p->payload;
 8003ec6:	f8d5 8004 	ldr.w	r8, [r5, #4]
    data_len = p->len;
 8003eca:	f8b5 900a 	ldrh.w	r9, [r5, #10]
 8003ece:	e77e      	b.n	8003dce <http_recv+0x86>
        data[4] = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f888 3004 	strb.w	r3, [r8, #4]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8003ed6:	f06f 0a0f 	mvn.w	sl, #15
 8003eda:	e04c      	b.n	8003f76 <http_recv+0x22e>
        file_name = g_psDefaultFilenames[loop].name;
 8003edc:	f859 2038 	ldr.w	r2, [r9, r8, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 8003ee0:	9203      	str	r2, [sp, #12]
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f7ff fd43 	bl	8003970 <fs_open>
 8003eea:	4626      	mov	r6, r4
      if(err == ERR_OK) {
 8003eec:	9a03      	ldr	r2, [sp, #12]
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d153      	bne.n	8003f9a <http_recv+0x252>
        uri = file_name;
 8003ef2:	9205      	str	r2, [sp, #20]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8003ef4:	9f05      	ldr	r7, [sp, #20]
    hs->handle = file;
 8003ef6:	6166      	str	r6, [r4, #20]
  if (file != NULL) {
 8003ef8:	2e00      	cmp	r6, #0
 8003efa:	d071      	beq.n	8003fe0 <http_recv+0x298>
    hs->file = file->data;
 8003efc:	6833      	ldr	r3, [r6, #0]
 8003efe:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8003f00:	6873      	ldr	r3, [r6, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da06      	bge.n	8003f14 <http_recv+0x1cc>
 8003f06:	4b5f      	ldr	r3, [pc, #380]	; (8004084 <http_recv+0x33c>)
 8003f08:	495f      	ldr	r1, [pc, #380]	; (8004088 <http_recv+0x340>)
 8003f0a:	4860      	ldr	r0, [pc, #384]	; (800408c <http_recv+0x344>)
 8003f0c:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8003f10:	f006 fc34 	bl	800a77c <iprintf>
    if (file->is_custom_file && (file->data == NULL)) {
 8003f14:	7c73      	ldrb	r3, [r6, #17]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d060      	beq.n	8003fdc <http_recv+0x294>
 8003f1a:	6833      	ldr	r3, [r6, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d15d      	bne.n	8003fdc <http_recv+0x294>
      hs->left = file->len;
 8003f20:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8003f28:	9b02      	ldr	r3, [sp, #8]
 8003f2a:	b183      	cbz	r3, 8003f4e <http_recv+0x206>
 8003f2c:	6963      	ldr	r3, [r4, #20]
 8003f2e:	7c1b      	ldrb	r3, [r3, #16]
 8003f30:	07da      	lsls	r2, r3, #31
 8003f32:	d50c      	bpl.n	8003f4e <http_recv+0x206>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8003f34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003f36:	4951      	ldr	r1, [pc, #324]	; (800407c <http_recv+0x334>)
 8003f38:	69a0      	ldr	r0, [r4, #24]
 8003f3a:	f000 f96a 	bl	8004212 <lwip_strnstr>
      if (file_start != NULL) {
 8003f3e:	b130      	cbz	r0, 8003f4e <http_recv+0x206>
        size_t diff = file_start + 4 - hs->file;
 8003f40:	69a3      	ldr	r3, [r4, #24]
 8003f42:	3004      	adds	r0, #4
 8003f44:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 8003f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 8003f48:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 8003f4e:	6963      	ldr	r3, [r4, #20]
 8003f50:	b113      	cbz	r3, 8003f58 <http_recv+0x210>
 8003f52:	7c1b      	ldrb	r3, [r3, #16]
 8003f54:	07db      	lsls	r3, r3, #31
 8003f56:	d40e      	bmi.n	8003f76 <http_recv+0x22e>
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 8003f58:	4b4d      	ldr	r3, [pc, #308]	; (8004090 <http_recv+0x348>)
 8003f5a:	6323      	str	r3, [r4, #48]	; 0x30
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6363      	str	r3, [r4, #52]	; 0x34
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 8003f60:	63a3      	str	r3, [r4, #56]	; 0x38
  if (uri == NULL) {
 8003f62:	2f00      	cmp	r7, #0
 8003f64:	d141      	bne.n	8003fea <http_recv+0x2a2>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8003f66:	4b4b      	ldr	r3, [pc, #300]	; (8004094 <http_recv+0x34c>)
 8003f68:	62e3      	str	r3, [r4, #44]	; 0x2c
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 8003f6a:	4b4b      	ldr	r3, [pc, #300]	; (8004098 <http_recv+0x350>)
 8003f6c:	63e3      	str	r3, [r4, #60]	; 0x3c
    hs->hdr_index = 0;
 8003f6e:	f8a4 704e 	strh.w	r7, [r4, #78]	; 0x4e
    hs->hdr_pos = 0;
 8003f72:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
        if (hs->req != NULL) {
 8003f76:	6a20      	ldr	r0, [r4, #32]
 8003f78:	b118      	cbz	r0, 8003f82 <http_recv+0x23a>
          pbuf_free(hs->req);
 8003f7a:	f001 ff05 	bl	8005d88 <pbuf_free>
          hs->req = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6223      	str	r3, [r4, #32]
      pbuf_free(p);
 8003f82:	4628      	mov	r0, r5
 8003f84:	f001 ff00 	bl	8005d88 <pbuf_free>
      if (parsed == ERR_OK) {
 8003f88:	f1ba 0f00 	cmp.w	sl, #0
 8003f8c:	f040 80c1 	bne.w	8004112 <http_recv+0x3ca>
          http_send(pcb, hs);
 8003f90:	4621      	mov	r1, r4
 8003f92:	9801      	ldr	r0, [sp, #4]
 8003f94:	f7ff fdfa 	bl	8003b8c <http_send>
 8003f98:	e6ee      	b.n	8003d78 <http_recv+0x30>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8003f9a:	f108 0801 	add.w	r8, r8, #1
 8003f9e:	f1b8 0f05 	cmp.w	r8, #5
 8003fa2:	f47f af77 	bne.w	8003e94 <http_recv+0x14c>
    params = (char *)strchr(uri, '?');
 8003fa6:	213f      	movs	r1, #63	; 0x3f
 8003fa8:	9805      	ldr	r0, [sp, #20]
 8003faa:	f006 fc0f 	bl	800a7cc <strchr>
    if (params != NULL) {
 8003fae:	b108      	cbz	r0, 8003fb4 <http_recv+0x26c>
      *params = '\0';
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	7003      	strb	r3, [r0, #0]
    err = fs_open(&hs->file_handle, uri);
 8003fb4:	9905      	ldr	r1, [sp, #20]
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4626      	mov	r6, r4
 8003fba:	f7ff fcd9 	bl	8003970 <fs_open>
    if (err == ERR_OK) {
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d098      	beq.n	8003ef4 <http_recv+0x1ac>
      file = http_get_404_file(hs, &uri);
 8003fc2:	a905      	add	r1, sp, #20
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f7ff fd3d 	bl	8003a44 <http_get_404_file>
  if (file == NULL) {
 8003fca:	4606      	mov	r6, r0
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d191      	bne.n	8003ef4 <http_recv+0x1ac>
    file = http_get_404_file(hs, &uri);
 8003fd0:	a905      	add	r1, sp, #20
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f7ff fd36 	bl	8003a44 <http_get_404_file>
 8003fd8:	4606      	mov	r6, r0
 8003fda:	e78b      	b.n	8003ef4 <http_recv+0x1ac>
      hs->left = file->len;
 8003fdc:	6873      	ldr	r3, [r6, #4]
 8003fde:	e79f      	b.n	8003f20 <http_recv+0x1d8>
    hs->file = NULL;
 8003fe0:	61a6      	str	r6, [r4, #24]
    hs->left = 0;
 8003fe2:	6266      	str	r6, [r4, #36]	; 0x24
    hs->retries = 0;
 8003fe4:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
 8003fe8:	e7b1      	b.n	8003f4e <http_recv+0x206>
  if (strstr(uri, "404")) {
 8003fea:	492c      	ldr	r1, [pc, #176]	; (800409c <http_recv+0x354>)
 8003fec:	4638      	mov	r0, r7
 8003fee:	f006 fc0d 	bl	800a80c <strstr>
 8003ff2:	b320      	cbz	r0, 800403e <http_recv+0x2f6>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8003ff4:	4b27      	ldr	r3, [pc, #156]	; (8004094 <http_recv+0x34c>)
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 8003ff6:	62e3      	str	r3, [r4, #44]	; 0x2c
  vars = strchr(uri, '?');
 8003ff8:	213f      	movs	r1, #63	; 0x3f
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	f006 fbe6 	bl	800a7cc <strchr>
  if(vars) {
 8004000:	4680      	mov	r8, r0
 8004002:	b108      	cbz	r0, 8004008 <http_recv+0x2c0>
    *vars = '\0';
 8004004:	2300      	movs	r3, #0
 8004006:	7003      	strb	r3, [r0, #0]
  tmp = strchr(uri, '.');
 8004008:	4638      	mov	r0, r7
 800400a:	212e      	movs	r1, #46	; 0x2e
 800400c:	f006 fbde 	bl	800a7cc <strchr>
  ext = NULL;
 8004010:	2700      	movs	r7, #0
  while (tmp) {
 8004012:	bb20      	cbnz	r0, 800405e <http_recv+0x316>
  if (ext != NULL) {
 8004014:	b167      	cbz	r7, 8004030 <http_recv+0x2e8>
      if(!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 8004016:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80040bc <http_recv+0x374>
  if (ext != NULL) {
 800401a:	4606      	mov	r6, r0
      if(!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800401c:	4639      	mov	r1, r7
 800401e:	f859 0036 	ldr.w	r0, [r9, r6, lsl #3]
 8004022:	f000 f914 	bl	800424e <lwip_stricmp>
 8004026:	2800      	cmp	r0, #0
 8004028:	d07c      	beq.n	8004124 <http_recv+0x3dc>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800402a:	3601      	adds	r6, #1
 800402c:	2e14      	cmp	r6, #20
 800402e:	d1f5      	bne.n	800401c <http_recv+0x2d4>
  if (vars) {
 8004030:	f1b8 0f00 	cmp.w	r8, #0
 8004034:	d144      	bne.n	80040c0 <http_recv+0x378>
  } else if (!ext) {
 8004036:	2f00      	cmp	r7, #0
 8004038:	d15a      	bne.n	80040f0 <http_recv+0x3a8>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 800403a:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <http_recv+0x358>)
 800403c:	e04a      	b.n	80040d4 <http_recv+0x38c>
  } else if (strstr(uri, "400")) {
 800403e:	4919      	ldr	r1, [pc, #100]	; (80040a4 <http_recv+0x35c>)
 8004040:	4638      	mov	r0, r7
 8004042:	f006 fbe3 	bl	800a80c <strstr>
 8004046:	b108      	cbz	r0, 800404c <http_recv+0x304>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 8004048:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <http_recv+0x360>)
 800404a:	e7d4      	b.n	8003ff6 <http_recv+0x2ae>
  } else if (strstr(uri, "501")) {
 800404c:	4917      	ldr	r1, [pc, #92]	; (80040ac <http_recv+0x364>)
 800404e:	4638      	mov	r0, r7
 8004050:	f006 fbdc 	bl	800a80c <strstr>
 8004054:	b108      	cbz	r0, 800405a <http_recv+0x312>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 8004056:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <http_recv+0x368>)
 8004058:	e7cd      	b.n	8003ff6 <http_recv+0x2ae>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800405a:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <http_recv+0x36c>)
 800405c:	e7cb      	b.n	8003ff6 <http_recv+0x2ae>
    ext = tmp + 1;
 800405e:	1c47      	adds	r7, r0, #1
    tmp = strchr(ext, '.');
 8004060:	212e      	movs	r1, #46	; 0x2e
 8004062:	4638      	mov	r0, r7
 8004064:	f006 fbb2 	bl	800a7cc <strchr>
 8004068:	e7d3      	b.n	8004012 <http_recv+0x2ca>
 800406a:	bf00      	nop
 800406c:	20001c70 	.word	0x20001c70
 8004070:	0800b958 	.word	0x0800b958
 8004074:	0800b669 	.word	0x0800b669
 8004078:	0800d2e8 	.word	0x0800d2e8
 800407c:	0800b956 	.word	0x0800b956
 8004080:	20001c30 	.word	0x20001c30
 8004084:	0800b7eb 	.word	0x0800b7eb
 8004088:	0800b66e 	.word	0x0800b66e
 800408c:	0800b831 	.word	0x0800b831
 8004090:	0800b68c 	.word	0x0800b68c
 8004094:	0800b6cc 	.word	0x0800b6cc
 8004098:	0800b6ea 	.word	0x0800b6ea
 800409c:	0800b73a 	.word	0x0800b73a
 80040a0:	0800b792 	.word	0x0800b792
 80040a4:	0800b73e 	.word	0x0800b73e
 80040a8:	0800b742 	.word	0x0800b742
 80040ac:	0800b75d 	.word	0x0800b75d
 80040b0:	0800b761 	.word	0x0800b761
 80040b4:	0800b780 	.word	0x0800b780
 80040b8:	0800b54c 	.word	0x0800b54c
 80040bc:	0800b574 	.word	0x0800b574
  if (vars) {
 80040c0:	2614      	movs	r6, #20
    *vars = '?';
 80040c2:	233f      	movs	r3, #63	; 0x3f
  if(content_type < NUM_HTTP_HEADERS) {
 80040c4:	2e14      	cmp	r6, #20
    *vars = '?';
 80040c6:	f888 3000 	strb.w	r3, [r8]
  if(content_type < NUM_HTTP_HEADERS) {
 80040ca:	d0b4      	beq.n	8004036 <http_recv+0x2ee>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 80040cc:	4824      	ldr	r0, [pc, #144]	; (8004160 <http_recv+0x418>)
 80040ce:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80040d2:	6873      	ldr	r3, [r6, #4]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 80040d4:	63e3      	str	r3, [r4, #60]	; 0x3c
  if ((hs->handle == NULL) ||
 80040d6:	6963      	ldr	r3, [r4, #20]
 80040d8:	b123      	cbz	r3, 80040e4 <http_recv+0x39c>
 80040da:	7c1a      	ldrb	r2, [r3, #16]
 80040dc:	f002 0203 	and.w	r2, r2, #3
 80040e0:	2a01      	cmp	r2, #1
 80040e2:	d123      	bne.n	800412c <http_recv+0x3e4>
  hs->hdr_index = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  hs->hdr_pos = 0;
 80040ea:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 80040ee:	e742      	b.n	8003f76 <http_recv+0x22e>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 80040f0:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <http_recv+0x41c>)
 80040f2:	e7ef      	b.n	80040d4 <http_recv+0x38c>
  clen = pbuf_clen(hs->req);
 80040f4:	6a20      	ldr	r0, [r4, #32]
 80040f6:	f001 fff9 	bl	80060ec <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80040fa:	6a23      	ldr	r3, [r4, #32]
 80040fc:	891b      	ldrh	r3, [r3, #8]
 80040fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004102:	f4bf aee8 	bcs.w	8003ed6 <http_recv+0x18e>
 8004106:	2805      	cmp	r0, #5
 8004108:	f63f aee5 	bhi.w	8003ed6 <http_recv+0x18e>
 800410c:	f06f 0a04 	mvn.w	sl, #4
 8004110:	e737      	b.n	8003f82 <http_recv+0x23a>
      } else if (parsed == ERR_ARG) {
 8004112:	f11a 0f10 	cmn.w	sl, #16
 8004116:	f47f ae2f 	bne.w	8003d78 <http_recv+0x30>
 800411a:	e629      	b.n	8003d70 <http_recv+0x28>
      pbuf_free(p);
 800411c:	4628      	mov	r0, r5
 800411e:	f001 fe33 	bl	8005d88 <pbuf_free>
 8004122:	e629      	b.n	8003d78 <http_recv+0x30>
  if (vars) {
 8004124:	f1b8 0f00 	cmp.w	r8, #0
 8004128:	d1cb      	bne.n	80040c2 <http_recv+0x37a>
 800412a:	e7cf      	b.n	80040cc <http_recv+0x384>
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800412c:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	210c      	movs	r1, #12
 8004134:	4630      	mov	r0, r6
 8004136:	f000 f8a1 	bl	800427c <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800413a:	4630      	mov	r0, r6
 800413c:	f7fc f852 	bl	80001e4 <strlen>
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 8004140:	2809      	cmp	r0, #9
 8004142:	d8cf      	bhi.n	80040e4 <http_recv+0x39c>
      SMEMCPY(&hs->hdr_content_len[len], CRLF "\0", 3);
 8004144:	3040      	adds	r0, #64	; 0x40
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <http_recv+0x420>)
 8004148:	1822      	adds	r2, r4, r0
 800414a:	8819      	ldrh	r1, [r3, #0]
 800414c:	789b      	ldrb	r3, [r3, #2]
 800414e:	5221      	strh	r1, [r4, r0]
 8004150:	7093      	strb	r3, [r2, #2]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <http_recv+0x424>)
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 8004154:	63a6      	str	r6, [r4, #56]	; 0x38
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 8004156:	6363      	str	r3, [r4, #52]	; 0x34
 8004158:	e7c4      	b.n	80040e4 <http_recv+0x39c>
    return ERR_USE;
 800415a:	f06f 0a07 	mvn.w	sl, #7
 800415e:	e70a      	b.n	8003f76 <http_recv+0x22e>
 8004160:	0800b574 	.word	0x0800b574
 8004164:	0800b7bd 	.word	0x0800b7bd
 8004168:	0800b4a4 	.word	0x0800b4a4
 800416c:	0800b7da 	.word	0x0800b7da

08004170 <http_err>:
{
 8004170:	b510      	push	{r4, lr}
  if (hs != NULL) {
 8004172:	4604      	mov	r4, r0
 8004174:	b130      	cbz	r0, 8004184 <http_err+0x14>
    http_state_eof(hs);
 8004176:	f7ff fc55 	bl	8003a24 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 800417a:	4620      	mov	r0, r4
}
 800417c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8004180:	f001 ba80 	b.w	8005684 <mem_free>
 8004184:	bd10      	pop	{r4, pc}
	...

08004188 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8004188:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 800418a:	202e      	movs	r0, #46	; 0x2e
 800418c:	f002 ffb4 	bl	80070f8 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8004190:	4604      	mov	r4, r0
 8004192:	b930      	cbnz	r0, 80041a2 <httpd_init+0x1a>
 8004194:	4b15      	ldr	r3, [pc, #84]	; (80041ec <httpd_init+0x64>)
 8004196:	4916      	ldr	r1, [pc, #88]	; (80041f0 <httpd_init+0x68>)
 8004198:	4816      	ldr	r0, [pc, #88]	; (80041f4 <httpd_init+0x6c>)
 800419a:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 800419e:	f006 faed 	bl	800a77c <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 80041a2:	2101      	movs	r1, #1
 80041a4:	4620      	mov	r0, r4
 80041a6:	f002 fa47 	bl	8006638 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 80041aa:	2250      	movs	r2, #80	; 0x50
 80041ac:	4912      	ldr	r1, [pc, #72]	; (80041f8 <httpd_init+0x70>)
 80041ae:	4620      	mov	r0, r4
 80041b0:	f002 f91c 	bl	80063ec <tcp_bind>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80041b4:	b130      	cbz	r0, 80041c4 <httpd_init+0x3c>
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <httpd_init+0x64>)
 80041b8:	4910      	ldr	r1, [pc, #64]	; (80041fc <httpd_init+0x74>)
 80041ba:	480e      	ldr	r0, [pc, #56]	; (80041f4 <httpd_init+0x6c>)
 80041bc:	f640 2215 	movw	r2, #2581	; 0xa15
 80041c0:	f006 fadc 	bl	800a77c <iprintf>
  pcb = tcp_listen(pcb);
 80041c4:	4620      	mov	r0, r4
 80041c6:	21ff      	movs	r1, #255	; 0xff
 80041c8:	f002 f9b2 	bl	8006530 <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80041cc:	4604      	mov	r4, r0
 80041ce:	b930      	cbnz	r0, 80041de <httpd_init+0x56>
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <httpd_init+0x64>)
 80041d2:	490b      	ldr	r1, [pc, #44]	; (8004200 <httpd_init+0x78>)
 80041d4:	4807      	ldr	r0, [pc, #28]	; (80041f4 <httpd_init+0x6c>)
 80041d6:	f640 2217 	movw	r2, #2583	; 0xa17
 80041da:	f006 facf 	bl	800a77c <iprintf>
  tcp_accept(pcb, http_accept);
 80041de:	4620      	mov	r0, r4
 80041e0:	4908      	ldr	r1, [pc, #32]	; (8004204 <httpd_init+0x7c>)
}
 80041e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 80041e6:	f002 ba89 	b.w	80066fc <tcp_accept>
 80041ea:	bf00      	nop
 80041ec:	0800b7eb 	.word	0x0800b7eb
 80041f0:	0800b859 	.word	0x0800b859
 80041f4:	0800b831 	.word	0x0800b831
 80041f8:	0800be1c 	.word	0x0800be1c
 80041fc:	0800b874 	.word	0x0800b874
 8004200:	0800b890 	.word	0x0800b890
 8004204:	08003a81 	.word	0x08003a81

08004208 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8004208:	ba40      	rev16	r0, r0
}
 800420a:	b280      	uxth	r0, r0
 800420c:	4770      	bx	lr

0800420e <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 800420e:	ba00      	rev	r0, r0
 8004210:	4770      	bx	lr

08004212 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 8004212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004214:	4604      	mov	r4, r0
  const char* p;
  size_t tokenlen = strlen(token);
 8004216:	4608      	mov	r0, r1
{
 8004218:	460f      	mov	r7, r1
 800421a:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 800421c:	f7fb ffe2 	bl	80001e4 <strlen>
  if (tokenlen == 0) {
 8004220:	4606      	mov	r6, r0
 8004222:	b190      	cbz	r0, 800424a <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004224:	4425      	add	r5, r4
 8004226:	7820      	ldrb	r0, [r4, #0]
 8004228:	b180      	cbz	r0, 800424c <lwip_strnstr+0x3a>
 800422a:	19a3      	adds	r3, r4, r6
 800422c:	429d      	cmp	r5, r3
 800422e:	d201      	bcs.n	8004234 <lwip_strnstr+0x22>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 8004230:	2000      	movs	r0, #0
 8004232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8004234:	783b      	ldrb	r3, [r7, #0]
 8004236:	4283      	cmp	r3, r0
 8004238:	d105      	bne.n	8004246 <lwip_strnstr+0x34>
 800423a:	4632      	mov	r2, r6
 800423c:	4639      	mov	r1, r7
 800423e:	4620      	mov	r0, r4
 8004240:	f006 fad2 	bl	800a7e8 <strncmp>
 8004244:	b108      	cbz	r0, 800424a <lwip_strnstr+0x38>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004246:	3401      	adds	r4, #1
 8004248:	e7ed      	b.n	8004226 <lwip_strnstr+0x14>
 800424a:	4620      	mov	r0, r4
}
 800424c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800424e <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 800424e:	b530      	push	{r4, r5, lr}
  char c1, c2;

  do {
    c1 = *str1++;
 8004250:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8004254:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8004258:	4293      	cmp	r3, r2
 800425a:	d009      	beq.n	8004270 <lwip_stricmp+0x22>
      char c1_upc = c1 | 0x20;
 800425c:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8004260:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8004264:	2d19      	cmp	r5, #25
 8004266:	d807      	bhi.n	8004278 <lwip_stricmp+0x2a>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8004268:	f042 0220 	orr.w	r2, r2, #32
 800426c:	4294      	cmp	r4, r2
 800426e:	d103      	bne.n	8004278 <lwip_stricmp+0x2a>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1ed      	bne.n	8004250 <lwip_stricmp+0x2>
  return 0;
 8004274:	4618      	mov	r0, r3
 8004276:	bd30      	pop	{r4, r5, pc}
        return 1;
 8004278:	2001      	movs	r0, #1
}
 800427a:	bd30      	pop	{r4, r5, pc}

0800427c <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
    number /= base;
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 800427e:	4e13      	ldr	r6, [pc, #76]	; (80042cc <lwip_itoa+0x50>)
  char* ptr = result, *ptr1 = result, tmp_char;
 8004280:	4601      	mov	r1, r0
    number /= base;
 8004282:	f04f 0e0a 	mov.w	lr, #10
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 8004286:	f06f 0709 	mvn.w	r7, #9
    number /= base;
 800428a:	fb92 f4fe 	sdiv	r4, r2, lr
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 800428e:	fb07 6504 	mla	r5, r7, r4, r6
 8004292:	4415      	add	r5, r2
 8004294:	460b      	mov	r3, r1
 8004296:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 800429a:	f803 5b01 	strb.w	r5, [r3], #1
  } while(number);
 800429e:	b954      	cbnz	r4, 80042b6 <lwip_itoa+0x3a>

   /* Apply negative sign */
  if (tmp_value < 0) {
 80042a0:	2a00      	cmp	r2, #0
     *ptr++ = '-';
 80042a2:	bfbe      	ittt	lt
 80042a4:	222d      	movlt	r2, #45	; 0x2d
 80042a6:	701a      	strblt	r2, [r3, #0]
 80042a8:	1c8b      	addlt	r3, r1, #2
  }
  *ptr-- = '\0';
 80042aa:	2100      	movs	r1, #0
 80042ac:	1e5a      	subs	r2, r3, #1
 80042ae:	7019      	strb	r1, [r3, #0]
  while(ptr1 < ptr) {
 80042b0:	4282      	cmp	r2, r0
 80042b2:	d803      	bhi.n	80042bc <lwip_itoa+0x40>
    tmp_char = *ptr;
    *ptr--= *ptr1;
    *ptr1++ = tmp_char;
  }
}
 80042b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b6:	4619      	mov	r1, r3
 80042b8:	4622      	mov	r2, r4
 80042ba:	e7e6      	b.n	800428a <lwip_itoa+0xe>
    tmp_char = *ptr;
 80042bc:	7813      	ldrb	r3, [r2, #0]
    *ptr--= *ptr1;
 80042be:	7801      	ldrb	r1, [r0, #0]
 80042c0:	f802 1901 	strb.w	r1, [r2], #-1
    *ptr1++ = tmp_char;
 80042c4:	f800 3b01 	strb.w	r3, [r0], #1
 80042c8:	e7f2      	b.n	80042b0 <lwip_itoa+0x34>
 80042ca:	bf00      	nop
 80042cc:	0800baf2 	.word	0x0800baf2

080042d0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80042d0:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80042d2:	f001 f9b7 	bl	8005644 <mem_init>
  memp_init();
 80042d6:	f001 fbc9 	bl	8005a6c <memp_init>
  pbuf_init();
  netif_init();
 80042da:	f001 fc14 	bl	8005b06 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80042de:	f005 f9ed 	bl	80096bc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80042e2:	f002 f881 	bl	80063e8 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80042e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80042ea:	f005 b98d 	b.w	8009608 <sys_timeouts_init>
	...

080042f0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80042f0:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80042f2:	2618      	movs	r6, #24
 80042f4:	4c07      	ldr	r4, [pc, #28]	; (8004314 <etharp_free_entry+0x24>)
 80042f6:	4346      	muls	r6, r0
{
 80042f8:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 80042fa:	59a0      	ldr	r0, [r4, r6]
 80042fc:	b118      	cbz	r0, 8004306 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80042fe:	f001 fd43 	bl	8005d88 <pbuf_free>
    arp_table[i].q = NULL;
 8004302:	2300      	movs	r3, #0
 8004304:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8004306:	2318      	movs	r3, #24
 8004308:	fb03 4405 	mla	r4, r3, r5, r4
 800430c:	2300      	movs	r3, #0
 800430e:	7523      	strb	r3, [r4, #20]
 8004310:	bd70      	pop	{r4, r5, r6, pc}
 8004312:	bf00      	nop
 8004314:	20002070 	.word	0x20002070

08004318 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8004318:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800431c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800431e:	4689      	mov	r9, r1
 8004320:	4692      	mov	sl, r2
 8004322:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004324:	4607      	mov	r7, r0
 8004326:	b930      	cbnz	r0, 8004336 <etharp_raw+0x1e>
 8004328:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <etharp_raw+0xc4>)
 800432a:	492d      	ldr	r1, [pc, #180]	; (80043e0 <etharp_raw+0xc8>)
 800432c:	482d      	ldr	r0, [pc, #180]	; (80043e4 <etharp_raw+0xcc>)
 800432e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8004332:	f006 fa23 	bl	800a77c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8004336:	2200      	movs	r2, #0
 8004338:	211c      	movs	r1, #28
 800433a:	2002      	movs	r0, #2
 800433c:	f001 fd86 	bl	8005e4c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8004340:	4606      	mov	r6, r0
 8004342:	2800      	cmp	r0, #0
 8004344:	d047      	beq.n	80043d6 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8004346:	8943      	ldrh	r3, [r0, #10]
 8004348:	2b1b      	cmp	r3, #27
 800434a:	d806      	bhi.n	800435a <etharp_raw+0x42>
 800434c:	4b23      	ldr	r3, [pc, #140]	; (80043dc <etharp_raw+0xc4>)
 800434e:	4926      	ldr	r1, [pc, #152]	; (80043e8 <etharp_raw+0xd0>)
 8004350:	4824      	ldr	r0, [pc, #144]	; (80043e4 <etharp_raw+0xcc>)
 8004352:	f240 4264 	movw	r2, #1124	; 0x464
 8004356:	f006 fa11 	bl	800a77c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800435a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 800435e:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8004360:	f7ff ff52 	bl	8004208 <lwip_htons>
 8004364:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8004366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800436a:	2b06      	cmp	r3, #6
 800436c:	d006      	beq.n	800437c <etharp_raw+0x64>
 800436e:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <etharp_raw+0xc4>)
 8004370:	491e      	ldr	r1, [pc, #120]	; (80043ec <etharp_raw+0xd4>)
 8004372:	481c      	ldr	r0, [pc, #112]	; (80043e4 <etharp_raw+0xcc>)
 8004374:	f240 426b 	movw	r2, #1131	; 0x46b
 8004378:	f006 fa00 	bl	800a77c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800437c:	f8d8 3000 	ldr.w	r3, [r8]
 8004380:	60a3      	str	r3, [r4, #8]
 8004382:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8004386:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	f8c4 3012 	str.w	r3, [r4, #18]
 800438e:	88ab      	ldrh	r3, [r5, #4]
 8004390:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8004392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800439a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80043a0:	2301      	movs	r3, #1
 80043a2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80043a4:	2308      	movs	r3, #8
 80043a6:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80043a8:	2306      	movs	r3, #6
 80043aa:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80043ac:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80043ae:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 80043b0:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80043b2:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80043b6:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80043b8:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80043ba:	464a      	mov	r2, r9
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4631      	mov	r1, r6
 80043c0:	4653      	mov	r3, sl
 80043c2:	4638      	mov	r0, r7
 80043c4:	f005 fa76 	bl	80098b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80043c8:	4630      	mov	r0, r6
 80043ca:	f001 fcdd 	bl	8005d88 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80043ce:	4628      	mov	r0, r5
}
 80043d0:	b002      	add	sp, #8
 80043d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80043d6:	f04f 30ff 	mov.w	r0, #4294967295
 80043da:	e7f9      	b.n	80043d0 <etharp_raw+0xb8>
 80043dc:	0800bc2f 	.word	0x0800bc2f
 80043e0:	0800bc66 	.word	0x0800bc66
 80043e4:	0800b831 	.word	0x0800b831
 80043e8:	0800bc74 	.word	0x0800bc74
 80043ec:	0800bca5 	.word	0x0800bca5

080043f0 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80043f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f4:	4b3e      	ldr	r3, [pc, #248]	; (80044f0 <etharp_find_entry.isra.0+0x100>)
 80043f6:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 80043f8:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80043fa:	4605      	mov	r5, r0
 80043fc:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80043fe:	4694      	mov	ip, r2
 8004400:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8004402:	4681      	mov	r9, r0
 8004404:	4680      	mov	r8, r0
 8004406:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 8004408:	4696      	mov	lr, r2
 800440a:	461e      	mov	r6, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800440c:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 8004410:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004412:	d112      	bne.n	800443a <etharp_find_entry.isra.0+0x4a>
 8004414:	b99f      	cbnz	r7, 800443e <etharp_find_entry.isra.0+0x4e>
      empty = i;
 8004416:	fa4f fe80 	sxtb.w	lr, r0
 800441a:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800441c:	280a      	cmp	r0, #10
 800441e:	f103 0318 	add.w	r3, r3, #24
 8004422:	d1f3      	bne.n	800440c <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8004424:	9b01      	ldr	r3, [sp, #4]
 8004426:	0799      	lsls	r1, r3, #30
 8004428:	d404      	bmi.n	8004434 <etharp_find_entry.isra.0+0x44>
 800442a:	f1be 0f0a 	cmp.w	lr, #10
 800442e:	d11c      	bne.n	800446a <etharp_find_entry.isra.0+0x7a>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8004430:	07db      	lsls	r3, r3, #31
 8004432:	d435      	bmi.n	80044a0 <etharp_find_entry.isra.0+0xb0>
    return (s8_t)ERR_MEM;
 8004434:	f04f 30ff 	mov.w	r0, #4294967295
 8004438:	e009      	b.n	800444e <etharp_find_entry.isra.0+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 800443a:	2f00      	cmp	r7, #0
 800443c:	d0ed      	beq.n	800441a <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800443e:	2d00      	cmp	r5, #0
 8004440:	d04a      	beq.n	80044d8 <etharp_find_entry.isra.0+0xe8>
 8004442:	6829      	ldr	r1, [r5, #0]
 8004444:	468a      	mov	sl, r1
 8004446:	6859      	ldr	r1, [r3, #4]
 8004448:	458a      	cmp	sl, r1
 800444a:	d145      	bne.n	80044d8 <etharp_find_entry.isra.0+0xe8>
        return i;
 800444c:	b240      	sxtb	r0, r0
}
 800444e:	b003      	add	sp, #12
 8004450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8004454:	45c2      	cmp	sl, r8
 8004456:	d3e0      	bcc.n	800441a <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 8004458:	fa4f fc80 	sxtb.w	ip, r0
 800445c:	46d0      	mov	r8, sl
 800445e:	e7dc      	b.n	800441a <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 8004460:	45ca      	cmp	sl, r9
            old_stable = i;
 8004462:	bf24      	itt	cs
 8004464:	b244      	sxtbcs	r4, r0
 8004466:	46d1      	movcs	r9, sl
 8004468:	e7d7      	b.n	800441a <etharp_find_entry.isra.0+0x2a>
    i = empty;
 800446a:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800446e:	2318      	movs	r3, #24
 8004470:	fb03 6307 	mla	r3, r3, r7, r6
 8004474:	7d1b      	ldrb	r3, [r3, #20]
 8004476:	b133      	cbz	r3, 8004486 <etharp_find_entry.isra.0+0x96>
 8004478:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <etharp_find_entry.isra.0+0x104>)
 800447a:	491f      	ldr	r1, [pc, #124]	; (80044f8 <etharp_find_entry.isra.0+0x108>)
 800447c:	481f      	ldr	r0, [pc, #124]	; (80044fc <etharp_find_entry.isra.0+0x10c>)
 800447e:	f240 1287 	movw	r2, #391	; 0x187
 8004482:	f006 f97b 	bl	800a77c <iprintf>
  if (ipaddr != NULL) {
 8004486:	b125      	cbz	r5, 8004492 <etharp_find_entry.isra.0+0xa2>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8004488:	2318      	movs	r3, #24
 800448a:	fb03 6307 	mla	r3, r3, r7, r6
 800448e:	682a      	ldr	r2, [r5, #0]
 8004490:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8004492:	2318      	movs	r3, #24
 8004494:	fb03 6607 	mla	r6, r3, r7, r6
 8004498:	2300      	movs	r3, #0
 800449a:	8273      	strh	r3, [r6, #18]
  return (err_t)i;
 800449c:	b278      	sxtb	r0, r7
 800449e:	e7d6      	b.n	800444e <etharp_find_entry.isra.0+0x5e>
    if (old_stable < ARP_TABLE_SIZE) {
 80044a0:	2c0a      	cmp	r4, #10
 80044a2:	d00f      	beq.n	80044c4 <etharp_find_entry.isra.0+0xd4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80044a4:	2318      	movs	r3, #24
      i = old_stable;
 80044a6:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80044a8:	435c      	muls	r4, r3
 80044aa:	5933      	ldr	r3, [r6, r4]
 80044ac:	b133      	cbz	r3, 80044bc <etharp_find_entry.isra.0+0xcc>
 80044ae:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <etharp_find_entry.isra.0+0x104>)
 80044b0:	4913      	ldr	r1, [pc, #76]	; (8004500 <etharp_find_entry.isra.0+0x110>)
 80044b2:	4812      	ldr	r0, [pc, #72]	; (80044fc <etharp_find_entry.isra.0+0x10c>)
 80044b4:	f240 126f 	movw	r2, #367	; 0x16f
 80044b8:	f006 f960 	bl	800a77c <iprintf>
    etharp_free_entry(i);
 80044bc:	4638      	mov	r0, r7
 80044be:	f7ff ff17 	bl	80042f0 <etharp_free_entry>
 80044c2:	e7d4      	b.n	800446e <etharp_find_entry.isra.0+0x7e>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80044c4:	f1bc 0f0a 	cmp.w	ip, #10
 80044c8:	d002      	beq.n	80044d0 <etharp_find_entry.isra.0+0xe0>
      i = old_pending;
 80044ca:	fa5f f78c 	uxtb.w	r7, ip
 80044ce:	e7f5      	b.n	80044bc <etharp_find_entry.isra.0+0xcc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80044d0:	2a0a      	cmp	r2, #10
 80044d2:	d0af      	beq.n	8004434 <etharp_find_entry.isra.0+0x44>
      i = old_queue;
 80044d4:	b2d7      	uxtb	r7, r2
 80044d6:	e7f1      	b.n	80044bc <etharp_find_entry.isra.0+0xcc>
      if (state == ETHARP_STATE_PENDING) {
 80044d8:	2f01      	cmp	r7, #1
 80044da:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 80044de:	d1bf      	bne.n	8004460 <etharp_find_entry.isra.0+0x70>
        if (arp_table[i].q != NULL) {
 80044e0:	681f      	ldr	r7, [r3, #0]
 80044e2:	2f00      	cmp	r7, #0
 80044e4:	d0b6      	beq.n	8004454 <etharp_find_entry.isra.0+0x64>
          if (arp_table[i].ctime >= age_queue) {
 80044e6:	45da      	cmp	sl, fp
 80044e8:	d397      	bcc.n	800441a <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 80044ea:	b242      	sxtb	r2, r0
 80044ec:	46d3      	mov	fp, sl
 80044ee:	e794      	b.n	800441a <etharp_find_entry.isra.0+0x2a>
 80044f0:	20002070 	.word	0x20002070
 80044f4:	0800bc2f 	.word	0x0800bc2f
 80044f8:	0800bb51 	.word	0x0800bb51
 80044fc:	0800b831 	.word	0x0800b831
 8004500:	0800bb3a 	.word	0x0800bb3a

08004504 <etharp_cleanup_netif>:
{
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4d08      	ldr	r5, [pc, #32]	; (8004528 <etharp_cleanup_netif+0x24>)
 8004508:	4606      	mov	r6, r0
 800450a:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800450c:	7d2b      	ldrb	r3, [r5, #20]
 800450e:	b12b      	cbz	r3, 800451c <etharp_cleanup_netif+0x18>
 8004510:	68ab      	ldr	r3, [r5, #8]
 8004512:	42b3      	cmp	r3, r6
 8004514:	d102      	bne.n	800451c <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8004516:	4620      	mov	r0, r4
 8004518:	f7ff feea 	bl	80042f0 <etharp_free_entry>
 800451c:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800451e:	2c0a      	cmp	r4, #10
 8004520:	f105 0518 	add.w	r5, r5, #24
 8004524:	d1f2      	bne.n	800450c <etharp_cleanup_netif+0x8>
}
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	20002070 	.word	0x20002070

0800452c <etharp_input>:
{
 800452c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004530:	4680      	mov	r8, r0
 8004532:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004534:	460c      	mov	r4, r1
 8004536:	b949      	cbnz	r1, 800454c <etharp_input+0x20>
 8004538:	4b46      	ldr	r3, [pc, #280]	; (8004654 <etharp_input+0x128>)
 800453a:	4947      	ldr	r1, [pc, #284]	; (8004658 <etharp_input+0x12c>)
 800453c:	4847      	ldr	r0, [pc, #284]	; (800465c <etharp_input+0x130>)
 800453e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8004542:	f006 f91b 	bl	800a77c <iprintf>
}
 8004546:	b006      	add	sp, #24
 8004548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 800454c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800454e:	882b      	ldrh	r3, [r5, #0]
 8004550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004554:	d108      	bne.n	8004568 <etharp_input+0x3c>
 8004556:	792b      	ldrb	r3, [r5, #4]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d105      	bne.n	8004568 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800455c:	796b      	ldrb	r3, [r5, #5]
 800455e:	2b04      	cmp	r3, #4
 8004560:	d102      	bne.n	8004568 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8004562:	886b      	ldrh	r3, [r5, #2]
 8004564:	2b08      	cmp	r3, #8
 8004566:	d003      	beq.n	8004570 <etharp_input+0x44>
  pbuf_free(p);
 8004568:	4640      	mov	r0, r8
 800456a:	f001 fc0d 	bl	8005d88 <pbuf_free>
 800456e:	e7ea      	b.n	8004546 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004570:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8004572:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8004576:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8004578:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800457a:	b116      	cbz	r6, 8004582 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800457c:	1b9b      	subs	r3, r3, r6
 800457e:	425e      	negs	r6, r3
 8004580:	415e      	adcs	r6, r3
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8004582:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004586:	2e00      	cmp	r6, #0
 8004588:	bf14      	ite	ne
 800458a:	f04f 0901 	movne.w	r9, #1
 800458e:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8004592:	2b06      	cmp	r3, #6
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004594:	f105 0708 	add.w	r7, r5, #8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8004598:	d006      	beq.n	80045a8 <etharp_input+0x7c>
 800459a:	4b2e      	ldr	r3, [pc, #184]	; (8004654 <etharp_input+0x128>)
 800459c:	4930      	ldr	r1, [pc, #192]	; (8004660 <etharp_input+0x134>)
 800459e:	482f      	ldr	r0, [pc, #188]	; (800465c <etharp_input+0x130>)
 80045a0:	f240 12ab 	movw	r2, #427	; 0x1ab
 80045a4:	f006 f8ea 	bl	800a77c <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 80045a8:	9805      	ldr	r0, [sp, #20]
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d03c      	beq.n	8004628 <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80045ae:	4621      	mov	r1, r4
 80045b0:	f000 fc95 	bl	8004ede <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80045b4:	4682      	mov	sl, r0
 80045b6:	bbb8      	cbnz	r0, 8004628 <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 80045b8:	9b05      	ldr	r3, [sp, #20]
 80045ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80045be:	2be0      	cmp	r3, #224	; 0xe0
 80045c0:	d032      	beq.n	8004628 <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 80045c2:	4649      	mov	r1, r9
 80045c4:	a805      	add	r0, sp, #20
 80045c6:	f7ff ff13 	bl	80043f0 <etharp_find_entry.isra.0>
  if (i < 0) {
 80045ca:	2800      	cmp	r0, #0
 80045cc:	db2c      	blt.n	8004628 <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80045ce:	4b25      	ldr	r3, [pc, #148]	; (8004664 <etharp_input+0x138>)
 80045d0:	2218      	movs	r2, #24
 80045d2:	fb02 f100 	mul.w	r1, r2, r0
 80045d6:	eb03 0e01 	add.w	lr, r3, r1
 80045da:	f04f 0c02 	mov.w	ip, #2
 80045de:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80045e2:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 80045e6:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80045ea:	fb12 c200 	smlabb	r2, r2, r0, ip
 80045ee:	6838      	ldr	r0, [r7, #0]
 80045f0:	5098      	str	r0, [r3, r2]
 80045f2:	eb03 0c02 	add.w	ip, r3, r2
 80045f6:	88ba      	ldrh	r2, [r7, #4]
 80045f8:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 80045fc:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8004600:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8004604:	f1b9 0f00 	cmp.w	r9, #0
 8004608:	d00e      	beq.n	8004628 <etharp_input+0xfc>
    arp_table[i].q = NULL;
 800460a:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800460e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8004618:	463b      	mov	r3, r7
 800461a:	4649      	mov	r1, r9
 800461c:	4620      	mov	r0, r4
 800461e:	f005 f949 	bl	80098b4 <ethernet_output>
    pbuf_free(p);
 8004622:	4648      	mov	r0, r9
 8004624:	f001 fbb0 	bl	8005d88 <pbuf_free>
  switch (hdr->opcode) {
 8004628:	88eb      	ldrh	r3, [r5, #6]
 800462a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462e:	d19b      	bne.n	8004568 <etharp_input+0x3c>
    if (for_us) {
 8004630:	2e00      	cmp	r6, #0
 8004632:	d099      	beq.n	8004568 <etharp_input+0x3c>
      etharp_raw(netif,
 8004634:	2202      	movs	r2, #2
 8004636:	9203      	str	r2, [sp, #12]
 8004638:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800463a:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 800463e:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8004640:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8004642:	9200      	str	r2, [sp, #0]
 8004644:	9701      	str	r7, [sp, #4]
 8004646:	463a      	mov	r2, r7
 8004648:	4619      	mov	r1, r3
 800464a:	4620      	mov	r0, r4
 800464c:	f7ff fe64 	bl	8004318 <etharp_raw>
 8004650:	e78a      	b.n	8004568 <etharp_input+0x3c>
 8004652:	bf00      	nop
 8004654:	0800bc2f 	.word	0x0800bc2f
 8004658:	0800bc66 	.word	0x0800bc66
 800465c:	0800b831 	.word	0x0800b831
 8004660:	0800bb99 	.word	0x0800bb99
 8004664:	20002070 	.word	0x20002070

08004668 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800466a:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800466c:	f100 0325 	add.w	r3, r0, #37	; 0x25
 8004670:	9102      	str	r1, [sp, #8]
 8004672:	2401      	movs	r4, #1
 8004674:	4905      	ldr	r1, [pc, #20]	; (800468c <etharp_request+0x24>)
 8004676:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8004678:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800467a:	9200      	str	r2, [sp, #0]
 800467c:	9403      	str	r4, [sp, #12]
 800467e:	4a04      	ldr	r2, [pc, #16]	; (8004690 <etharp_request+0x28>)
 8004680:	4619      	mov	r1, r3
 8004682:	f7ff fe49 	bl	8004318 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8004686:	b004      	add	sp, #16
 8004688:	bd10      	pop	{r4, pc}
 800468a:	bf00      	nop
 800468c:	0800d244 	.word	0x0800d244
 8004690:	0800d1d8 	.word	0x0800d1d8

08004694 <etharp_tmr>:
{
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	4c13      	ldr	r4, [pc, #76]	; (80046e4 <etharp_tmr+0x50>)
 8004698:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800469a:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800469c:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 800469e:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 80046a0:	b16a      	cbz	r2, 80046be <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 80046a2:	89e3      	ldrh	r3, [r4, #14]
 80046a4:	3301      	adds	r3, #1
 80046a6:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80046a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80046ac:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80046ae:	d203      	bcs.n	80046b8 <etharp_tmr+0x24>
 80046b0:	2a01      	cmp	r2, #1
 80046b2:	d10a      	bne.n	80046ca <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d90c      	bls.n	80046d2 <etharp_tmr+0x3e>
        etharp_free_entry(i);
 80046b8:	4628      	mov	r0, r5
 80046ba:	f7ff fe19 	bl	80042f0 <etharp_free_entry>
 80046be:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80046c0:	2d0a      	cmp	r5, #10
 80046c2:	f104 0418 	add.w	r4, r4, #24
 80046c6:	d1ea      	bne.n	800469e <etharp_tmr+0xa>
 80046c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80046ca:	2a03      	cmp	r2, #3
 80046cc:	d106      	bne.n	80046dc <etharp_tmr+0x48>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80046ce:	7427      	strb	r7, [r4, #16]
 80046d0:	e7f5      	b.n	80046be <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80046d2:	4621      	mov	r1, r4
 80046d4:	6860      	ldr	r0, [r4, #4]
 80046d6:	f7ff ffc7 	bl	8004668 <etharp_request>
 80046da:	e7f0      	b.n	80046be <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80046dc:	2a04      	cmp	r2, #4
 80046de:	d1ee      	bne.n	80046be <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80046e0:	7426      	strb	r6, [r4, #16]
 80046e2:	e7ec      	b.n	80046be <etharp_tmr+0x2a>
 80046e4:	20002074 	.word	0x20002074

080046e8 <etharp_output_to_arp_index>:
{
 80046e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80046ec:	4d27      	ldr	r5, [pc, #156]	; (800478c <etharp_output_to_arp_index+0xa4>)
{
 80046ee:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80046f0:	2218      	movs	r2, #24
 80046f2:	fb02 5204 	mla	r2, r2, r4, r5
{
 80046f6:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80046f8:	7d12      	ldrb	r2, [r2, #20]
 80046fa:	2a01      	cmp	r2, #1
{
 80046fc:	4606      	mov	r6, r0
 80046fe:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004700:	d806      	bhi.n	8004710 <etharp_output_to_arp_index+0x28>
 8004702:	4b23      	ldr	r3, [pc, #140]	; (8004790 <etharp_output_to_arp_index+0xa8>)
 8004704:	4923      	ldr	r1, [pc, #140]	; (8004794 <etharp_output_to_arp_index+0xac>)
 8004706:	4824      	ldr	r0, [pc, #144]	; (8004798 <etharp_output_to_arp_index+0xb0>)
 8004708:	f240 22ed 	movw	r2, #749	; 0x2ed
 800470c:	f006 f836 	bl	800a77c <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8004710:	2118      	movs	r1, #24
 8004712:	fb01 5904 	mla	r9, r1, r4, r5
 8004716:	f106 0725 	add.w	r7, r6, #37	; 0x25
 800471a:	f899 3014 	ldrb.w	r3, [r9, #20]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d10d      	bne.n	800473e <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8004722:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8004726:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800472a:	d917      	bls.n	800475c <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800472c:	4649      	mov	r1, r9
 800472e:	3104      	adds	r1, #4
 8004730:	4630      	mov	r0, r6
 8004732:	f7ff ff99 	bl	8004668 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8004736:	b910      	cbnz	r0, 800473e <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8004738:	2303      	movs	r3, #3
 800473a:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800473e:	2318      	movs	r3, #24
 8004740:	fb03 5304 	mla	r3, r3, r4, r5
 8004744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004748:	9200      	str	r2, [sp, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	463a      	mov	r2, r7
 800474e:	4641      	mov	r1, r8
 8004750:	4630      	mov	r0, r6
 8004752:	f005 f8af 	bl	80098b4 <ethernet_output>
}
 8004756:	b005      	add	sp, #20
 8004758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800475c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004760:	d3ed      	bcc.n	800473e <etharp_output_to_arp_index+0x56>
 8004762:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004766:	00db      	lsls	r3, r3, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8004768:	f103 020c 	add.w	r2, r3, #12
 800476c:	3304      	adds	r3, #4
 800476e:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004770:	9302      	str	r3, [sp, #8]
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <etharp_output_to_arp_index+0xb4>)
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	2101      	movs	r1, #1
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8004778:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800477a:	9103      	str	r1, [sp, #12]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	442a      	add	r2, r5
 8004780:	463b      	mov	r3, r7
 8004782:	4639      	mov	r1, r7
 8004784:	4630      	mov	r0, r6
 8004786:	f7ff fdc7 	bl	8004318 <etharp_raw>
 800478a:	e7d4      	b.n	8004736 <etharp_output_to_arp_index+0x4e>
 800478c:	20002070 	.word	0x20002070
 8004790:	0800bc2f 	.word	0x0800bc2f
 8004794:	0800bbbd 	.word	0x0800bbbd
 8004798:	0800b831 	.word	0x0800b831
 800479c:	0800d244 	.word	0x0800d244

080047a0 <etharp_query>:
{
 80047a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	4689      	mov	r9, r1
 80047a6:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80047a8:	4601      	mov	r1, r0
 80047aa:	f8d9 0000 	ldr.w	r0, [r9]
{
 80047ae:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80047b0:	f000 fb95 	bl	8004ede <ip4_addr_isbroadcast_u32>
 80047b4:	4604      	mov	r4, r0
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d15e      	bne.n	8004878 <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 80047ba:	f8d9 3000 	ldr.w	r3, [r9]
 80047be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80047c2:	2ae0      	cmp	r2, #224	; 0xe0
 80047c4:	d058      	beq.n	8004878 <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d056      	beq.n	8004878 <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80047ca:	2101      	movs	r1, #1
 80047cc:	4648      	mov	r0, r9
 80047ce:	f7ff fe0f 	bl	80043f0 <etharp_find_entry.isra.0>
  if (i < 0) {
 80047d2:	1e05      	subs	r5, r0, #0
 80047d4:	db53      	blt.n	800487e <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80047d6:	4f40      	ldr	r7, [pc, #256]	; (80048d8 <etharp_query+0x138>)
 80047d8:	2318      	movs	r3, #24
 80047da:	fb03 7305 	mla	r3, r3, r5, r7
 80047de:	7d1a      	ldrb	r2, [r3, #20]
 80047e0:	b91a      	cbnz	r2, 80047ea <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 80047e2:	2401      	movs	r4, #1
 80047e4:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 80047e6:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80047ea:	2318      	movs	r3, #24
 80047ec:	fb03 7305 	mla	r3, r3, r5, r7
 80047f0:	7d1b      	ldrb	r3, [r3, #20]
 80047f2:	b933      	cbnz	r3, 8004802 <etharp_query+0x62>
 80047f4:	4b39      	ldr	r3, [pc, #228]	; (80048dc <etharp_query+0x13c>)
 80047f6:	493a      	ldr	r1, [pc, #232]	; (80048e0 <etharp_query+0x140>)
 80047f8:	483a      	ldr	r0, [pc, #232]	; (80048e4 <etharp_query+0x144>)
 80047fa:	f240 32c9 	movw	r2, #969	; 0x3c9
 80047fe:	f005 ffbd 	bl	800a77c <iprintf>
  if (is_new_entry || (q == NULL)) {
 8004802:	b90c      	cbnz	r4, 8004808 <etharp_query+0x68>
 8004804:	2e00      	cmp	r6, #0
 8004806:	d13c      	bne.n	8004882 <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 8004808:	4649      	mov	r1, r9
 800480a:	4640      	mov	r0, r8
 800480c:	f7ff ff2c 	bl	8004668 <etharp_request>
    if (q == NULL) {
 8004810:	2e00      	cmp	r6, #0
 8004812:	d138      	bne.n	8004886 <etharp_query+0xe6>
}
 8004814:	b002      	add	sp, #8
 8004816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800481a:	d1fb      	bne.n	8004814 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800481c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80048dc <etharp_query+0x13c>
 8004820:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80048ec <etharp_query+0x14c>
 8004824:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80048e4 <etharp_query+0x144>
 8004828:	4634      	mov	r4, r6
    while (p) {
 800482a:	b99c      	cbnz	r4, 8004854 <etharp_query+0xb4>
      pbuf_ref(p);
 800482c:	4630      	mov	r0, r6
 800482e:	f001 fc65 	bl	80060fc <pbuf_ref>
    if (p != NULL) {
 8004832:	2e00      	cmp	r6, #0
 8004834:	d04c      	beq.n	80048d0 <etharp_query+0x130>
 8004836:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8004838:	2318      	movs	r3, #24
 800483a:	fb03 f205 	mul.w	r2, r3, r5
 800483e:	461c      	mov	r4, r3
 8004840:	58b8      	ldr	r0, [r7, r2]
 8004842:	b108      	cbz	r0, 8004848 <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8004844:	f001 faa0 	bl	8005d88 <pbuf_free>
      arp_table[i].q = p;
 8004848:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 800484c:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800484e:	f847 8003 	str.w	r8, [r7, r3]
 8004852:	e7df      	b.n	8004814 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8004854:	8962      	ldrh	r2, [r4, #10]
 8004856:	8923      	ldrh	r3, [r4, #8]
 8004858:	429a      	cmp	r2, r3
 800485a:	d108      	bne.n	800486e <etharp_query+0xce>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	b133      	cbz	r3, 800486e <etharp_query+0xce>
 8004860:	4643      	mov	r3, r8
 8004862:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8004866:	4649      	mov	r1, r9
 8004868:	4650      	mov	r0, sl
 800486a:	f005 ff87 	bl	800a77c <iprintf>
      if (p->type != PBUF_ROM) {
 800486e:	7b23      	ldrb	r3, [r4, #12]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d11e      	bne.n	80048b2 <etharp_query+0x112>
      p = p->next;
 8004874:	6824      	ldr	r4, [r4, #0]
 8004876:	e7d8      	b.n	800482a <etharp_query+0x8a>
    return ERR_ARG;
 8004878:	f06f 000f 	mvn.w	r0, #15
 800487c:	e7ca      	b.n	8004814 <etharp_query+0x74>
 800487e:	4628      	mov	r0, r5
 8004880:	e7c8      	b.n	8004814 <etharp_query+0x74>
  err_t result = ERR_MEM;
 8004882:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8004886:	2318      	movs	r3, #24
 8004888:	fb03 7205 	mla	r2, r3, r5, r7
 800488c:	7d12      	ldrb	r2, [r2, #20]
 800488e:	2a01      	cmp	r2, #1
 8004890:	d9c3      	bls.n	800481a <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 8004892:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <etharp_query+0x148>)
 8004894:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8004896:	220c      	movs	r2, #12
 8004898:	fb13 2305 	smlabb	r3, r3, r5, r2
 800489c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048a0:	9200      	str	r2, [sp, #0]
 80048a2:	443b      	add	r3, r7
 80048a4:	f108 0225 	add.w	r2, r8, #37	; 0x25
 80048a8:	4631      	mov	r1, r6
 80048aa:	4640      	mov	r0, r8
 80048ac:	f005 f802 	bl	80098b4 <ethernet_output>
 80048b0:	e7b0      	b.n	8004814 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80048b2:	2200      	movs	r2, #0
 80048b4:	8921      	ldrh	r1, [r4, #8]
 80048b6:	2002      	movs	r0, #2
 80048b8:	f001 fac8 	bl	8005e4c <pbuf_alloc>
      if (p != NULL) {
 80048bc:	4680      	mov	r8, r0
 80048be:	b138      	cbz	r0, 80048d0 <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 80048c0:	4631      	mov	r1, r6
 80048c2:	f001 fc69 	bl	8006198 <pbuf_copy>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d0b6      	beq.n	8004838 <etharp_query+0x98>
          pbuf_free(p);
 80048ca:	4640      	mov	r0, r8
 80048cc:	f001 fa5c 	bl	8005d88 <pbuf_free>
      result = ERR_MEM;
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	e79e      	b.n	8004814 <etharp_query+0x74>
 80048d6:	bf00      	nop
 80048d8:	20002070 	.word	0x20002070
 80048dc:	0800bc2f 	.word	0x0800bc2f
 80048e0:	0800bbed 	.word	0x0800bbed
 80048e4:	0800b831 	.word	0x0800b831
 80048e8:	20002160 	.word	0x20002160
 80048ec:	0800bc15 	.word	0x0800bc15

080048f0 <etharp_output>:
{
 80048f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f2:	460e      	mov	r6, r1
 80048f4:	b085      	sub	sp, #20
 80048f6:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80048f8:	4604      	mov	r4, r0
 80048fa:	b930      	cbnz	r0, 800490a <etharp_output+0x1a>
 80048fc:	4b3e      	ldr	r3, [pc, #248]	; (80049f8 <etharp_output+0x108>)
 80048fe:	493f      	ldr	r1, [pc, #252]	; (80049fc <etharp_output+0x10c>)
 8004900:	483f      	ldr	r0, [pc, #252]	; (8004a00 <etharp_output+0x110>)
 8004902:	f240 321b 	movw	r2, #795	; 0x31b
 8004906:	f005 ff39 	bl	800a77c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800490a:	b936      	cbnz	r6, 800491a <etharp_output+0x2a>
 800490c:	4b3a      	ldr	r3, [pc, #232]	; (80049f8 <etharp_output+0x108>)
 800490e:	493d      	ldr	r1, [pc, #244]	; (8004a04 <etharp_output+0x114>)
 8004910:	483b      	ldr	r0, [pc, #236]	; (8004a00 <etharp_output+0x110>)
 8004912:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8004916:	f005 ff31 	bl	800a77c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800491a:	b935      	cbnz	r5, 800492a <etharp_output+0x3a>
 800491c:	4b36      	ldr	r3, [pc, #216]	; (80049f8 <etharp_output+0x108>)
 800491e:	493a      	ldr	r1, [pc, #232]	; (8004a08 <etharp_output+0x118>)
 8004920:	4837      	ldr	r0, [pc, #220]	; (8004a00 <etharp_output+0x110>)
 8004922:	f240 321d 	movw	r2, #797	; 0x31d
 8004926:	f005 ff29 	bl	800a77c <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800492a:	4621      	mov	r1, r4
 800492c:	6828      	ldr	r0, [r5, #0]
 800492e:	f000 fad6 	bl	8004ede <ip4_addr_isbroadcast_u32>
 8004932:	2800      	cmp	r0, #0
 8004934:	d15b      	bne.n	80049ee <etharp_output+0xfe>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8004936:	682b      	ldr	r3, [r5, #0]
 8004938:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800493c:	2ae0      	cmp	r2, #224	; 0xe0
 800493e:	d11d      	bne.n	800497c <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8004940:	2301      	movs	r3, #1
 8004942:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8004946:	235e      	movs	r3, #94	; 0x5e
 8004948:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800494c:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800494e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8004952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004956:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800495a:	78ab      	ldrb	r3, [r5, #2]
 800495c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8004960:	78eb      	ldrb	r3, [r5, #3]
 8004962:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8004966:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8004968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800496c:	9200      	str	r2, [sp, #0]
 800496e:	4631      	mov	r1, r6
 8004970:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8004974:	4620      	mov	r0, r4
 8004976:	f004 ff9d 	bl	80098b4 <ethernet_output>
 800497a:	e01f      	b.n	80049bc <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800497c:	6862      	ldr	r2, [r4, #4]
 800497e:	68a1      	ldr	r1, [r4, #8]
 8004980:	405a      	eors	r2, r3
 8004982:	420a      	tst	r2, r1
 8004984:	d008      	beq.n	8004998 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 8004986:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8004988:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8004990:	68e3      	ldr	r3, [r4, #12]
 8004992:	b373      	cbz	r3, 80049f2 <etharp_output+0x102>
            dst_addr = netif_ip4_gw(netif);
 8004994:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8004998:	4b1c      	ldr	r3, [pc, #112]	; (8004a0c <etharp_output+0x11c>)
 800499a:	491d      	ldr	r1, [pc, #116]	; (8004a10 <etharp_output+0x120>)
 800499c:	781a      	ldrb	r2, [r3, #0]
 800499e:	2018      	movs	r0, #24
 80049a0:	fb00 1002 	mla	r0, r0, r2, r1
 80049a4:	7d01      	ldrb	r1, [r0, #20]
 80049a6:	2901      	cmp	r1, #1
 80049a8:	4619      	mov	r1, r3
 80049aa:	d909      	bls.n	80049c0 <etharp_output+0xd0>
 80049ac:	682f      	ldr	r7, [r5, #0]
 80049ae:	6843      	ldr	r3, [r0, #4]
 80049b0:	429f      	cmp	r7, r3
 80049b2:	d105      	bne.n	80049c0 <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 80049b4:	4631      	mov	r1, r6
 80049b6:	4620      	mov	r0, r4
 80049b8:	f7ff fe96 	bl	80046e8 <etharp_output_to_arp_index>
}
 80049bc:	b005      	add	sp, #20
 80049be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c0:	4b13      	ldr	r3, [pc, #76]	; (8004a10 <etharp_output+0x120>)
{
 80049c2:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80049c4:	7d18      	ldrb	r0, [r3, #20]
 80049c6:	2801      	cmp	r0, #1
 80049c8:	d906      	bls.n	80049d8 <etharp_output+0xe8>
 80049ca:	682f      	ldr	r7, [r5, #0]
 80049cc:	6858      	ldr	r0, [r3, #4]
 80049ce:	4287      	cmp	r7, r0
 80049d0:	d102      	bne.n	80049d8 <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	700a      	strb	r2, [r1, #0]
 80049d6:	e7ed      	b.n	80049b4 <etharp_output+0xc4>
 80049d8:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80049da:	2a0a      	cmp	r2, #10
 80049dc:	f103 0318 	add.w	r3, r3, #24
 80049e0:	d1f0      	bne.n	80049c4 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 80049e2:	4632      	mov	r2, r6
 80049e4:	4629      	mov	r1, r5
 80049e6:	4620      	mov	r0, r4
 80049e8:	f7ff feda 	bl	80047a0 <etharp_query>
 80049ec:	e7e6      	b.n	80049bc <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <etharp_output+0x124>)
 80049f0:	e7ba      	b.n	8004968 <etharp_output+0x78>
            return ERR_RTE;
 80049f2:	f06f 0003 	mvn.w	r0, #3
 80049f6:	e7e1      	b.n	80049bc <etharp_output+0xcc>
 80049f8:	0800bc2f 	.word	0x0800bc2f
 80049fc:	0800bc66 	.word	0x0800bc66
 8004a00:	0800b831 	.word	0x0800b831
 8004a04:	0800c613 	.word	0x0800c613
 8004a08:	0800bb7a 	.word	0x0800bb7a
 8004a0c:	20002160 	.word	0x20002160
 8004a10:	20002070 	.word	0x20002070
 8004a14:	0800d1d8 	.word	0x0800d1d8

08004a18 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8004a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	b087      	sub	sp, #28
 8004a1e:	460f      	mov	r7, r1
 8004a20:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8004a22:	2124      	movs	r1, #36	; 0x24
 8004a24:	2200      	movs	r2, #0
 8004a26:	2001      	movs	r0, #1
 8004a28:	f001 fa10 	bl	8005e4c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	b3a0      	cbz	r0, 8004a9a <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8004a30:	8943      	ldrh	r3, [r0, #10]
 8004a32:	2b23      	cmp	r3, #35	; 0x23
 8004a34:	d806      	bhi.n	8004a44 <icmp_send_response.isra.0+0x2c>
 8004a36:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <icmp_send_response.isra.0+0x88>)
 8004a38:	491a      	ldr	r1, [pc, #104]	; (8004aa4 <icmp_send_response.isra.0+0x8c>)
 8004a3a:	481b      	ldr	r0, [pc, #108]	; (8004aa8 <icmp_send_response.isra.0+0x90>)
 8004a3c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8004a40:	f005 fe9c 	bl	800a77c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8004a44:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8004a46:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	7123      	strb	r3, [r4, #4]
 8004a4c:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8004a4e:	71a3      	strb	r3, [r4, #6]
 8004a50:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 8004a52:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8004a54:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004a56:	4613      	mov	r3, r2
 8004a58:	f104 0108 	add.w	r1, r4, #8
 8004a5c:	f102 001c 	add.w	r0, r2, #28
 8004a60:	f853 6b04 	ldr.w	r6, [r3], #4
 8004a64:	f841 6b04 	str.w	r6, [r1], #4
 8004a68:	4283      	cmp	r3, r0
 8004a6a:	d1f9      	bne.n	8004a60 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8004a6c:	ae06      	add	r6, sp, #24
 8004a6e:	68d3      	ldr	r3, [r2, #12]
 8004a70:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8004a74:	4630      	mov	r0, r6
 8004a76:	f000 f8bb 	bl	8004bf0 <ip4_route>
#endif
  if (netif != NULL) {
 8004a7a:	b158      	cbz	r0, 8004a94 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8004a7c:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8004a7e:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 8004a80:	70a1      	strb	r1, [r4, #2]
 8004a82:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8004a84:	4632      	mov	r2, r6
 8004a86:	9002      	str	r0, [sp, #8]
 8004a88:	e88d 000a 	stmia.w	sp, {r1, r3}
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	23ff      	movs	r3, #255	; 0xff
 8004a90:	f000 fa14 	bl	8004ebc <ip4_output_if>
  }
  pbuf_free(q);
 8004a94:	4628      	mov	r0, r5
 8004a96:	f001 f977 	bl	8005d88 <pbuf_free>
}
 8004a9a:	b007      	add	sp, #28
 8004a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	0800bd4d 	.word	0x0800bd4d
 8004aa4:	0800bd82 	.word	0x0800bd82
 8004aa8:	0800b831 	.word	0x0800b831

08004aac <icmp_input>:
{
 8004aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8004ab0:	4b44      	ldr	r3, [pc, #272]	; (8004bc4 <icmp_input+0x118>)
 8004ab2:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8004ab6:	f899 5000 	ldrb.w	r5, [r9]
 8004aba:	f005 050f 	and.w	r5, r5, #15
 8004abe:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8004ac0:	2d13      	cmp	r5, #19
{
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	4688      	mov	r8, r1
 8004ac8:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 8004aca:	d92a      	bls.n	8004b22 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 8004acc:	8942      	ldrh	r2, [r0, #10]
 8004ace:	2a03      	cmp	r2, #3
 8004ad0:	d927      	bls.n	8004b22 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 8004ad2:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	2a08      	cmp	r2, #8
 8004ad8:	d123      	bne.n	8004b22 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004ada:	6958      	ldr	r0, [r3, #20]
 8004adc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8004ae0:	2ae0      	cmp	r2, #224	; 0xe0
 8004ae2:	d01e      	beq.n	8004b22 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8004ae4:	6819      	ldr	r1, [r3, #0]
 8004ae6:	f000 f9fa 	bl	8004ede <ip4_addr_isbroadcast_u32>
 8004aea:	4606      	mov	r6, r0
 8004aec:	b9c8      	cbnz	r0, 8004b22 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8004aee:	8923      	ldrh	r3, [r4, #8]
 8004af0:	2b07      	cmp	r3, #7
 8004af2:	d916      	bls.n	8004b22 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8004af4:	f105 010e 	add.w	r1, r5, #14
 8004af8:	4620      	mov	r0, r4
 8004afa:	f001 f93f 	bl	8005d7c <pbuf_header>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d04f      	beq.n	8004ba2 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8004b02:	8921      	ldrh	r1, [r4, #8]
 8004b04:	4429      	add	r1, r5
 8004b06:	4632      	mov	r2, r6
 8004b08:	b289      	uxth	r1, r1
 8004b0a:	2002      	movs	r0, #2
 8004b0c:	f001 f99e 	bl	8005e4c <pbuf_alloc>
      if (r == NULL) {
 8004b10:	4606      	mov	r6, r0
 8004b12:	b130      	cbz	r0, 8004b22 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8004b14:	8942      	ldrh	r2, [r0, #10]
 8004b16:	f105 0308 	add.w	r3, r5, #8
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d207      	bcs.n	8004b2e <icmp_input+0x82>
        pbuf_free(r);
 8004b1e:	f001 f933 	bl	8005d88 <pbuf_free>
  pbuf_free(p);
 8004b22:	4620      	mov	r0, r4
}
 8004b24:	b005      	add	sp, #20
 8004b26:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8004b2a:	f001 b92d 	b.w	8005d88 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 8004b2e:	4649      	mov	r1, r9
 8004b30:	462a      	mov	r2, r5
 8004b32:	6840      	ldr	r0, [r0, #4]
 8004b34:	f005 fd63 	bl	800a5fe <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8004b38:	4269      	negs	r1, r5
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f001 f91e 	bl	8005d7c <pbuf_header>
 8004b40:	b138      	cbz	r0, 8004b52 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8004b42:	4b21      	ldr	r3, [pc, #132]	; (8004bc8 <icmp_input+0x11c>)
 8004b44:	4921      	ldr	r1, [pc, #132]	; (8004bcc <icmp_input+0x120>)
 8004b46:	4822      	ldr	r0, [pc, #136]	; (8004bd0 <icmp_input+0x124>)
 8004b48:	22af      	movs	r2, #175	; 0xaf
 8004b4a:	f005 fe17 	bl	800a77c <iprintf>
        pbuf_free(r);
 8004b4e:	4630      	mov	r0, r6
 8004b50:	e7e5      	b.n	8004b1e <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 8004b52:	4621      	mov	r1, r4
 8004b54:	4630      	mov	r0, r6
 8004b56:	f001 fb1f 	bl	8006198 <pbuf_copy>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d1f7      	bne.n	8004b4e <icmp_input+0xa2>
      pbuf_free(p);
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f001 f912 	bl	8005d88 <pbuf_free>
 8004b64:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 8004b66:	4629      	mov	r1, r5
 8004b68:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 8004b6a:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8004b6c:	f001 f906 	bl	8005d7c <pbuf_header>
 8004b70:	4602      	mov	r2, r0
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d1d5      	bne.n	8004b22 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8004b76:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8004b80:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8004b82:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 8004b84:	70b0      	strb	r0, [r6, #2]
 8004b86:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8004b88:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8004b8a:	7288      	strb	r0, [r1, #10]
 8004b8c:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8004b8e:	2101      	movs	r1, #1
 8004b90:	9101      	str	r1, [sp, #4]
 8004b92:	9000      	str	r0, [sp, #0]
 8004b94:	f8cd 8008 	str.w	r8, [sp, #8]
 8004b98:	490e      	ldr	r1, [pc, #56]	; (8004bd4 <icmp_input+0x128>)
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 f98e 	bl	8004ebc <ip4_output_if>
 8004ba0:	e7bf      	b.n	8004b22 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8004ba2:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 8004ba6:	31f2      	adds	r1, #242	; 0xf2
 8004ba8:	b209      	sxth	r1, r1
 8004baa:	4620      	mov	r0, r4
 8004bac:	f001 f8e6 	bl	8005d7c <pbuf_header>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d0d8      	beq.n	8004b66 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <icmp_input+0x11c>)
 8004bb6:	4908      	ldr	r1, [pc, #32]	; (8004bd8 <icmp_input+0x12c>)
 8004bb8:	4805      	ldr	r0, [pc, #20]	; (8004bd0 <icmp_input+0x124>)
 8004bba:	22c0      	movs	r2, #192	; 0xc0
 8004bbc:	f005 fdde 	bl	800a77c <iprintf>
        goto icmperr;
 8004bc0:	e7af      	b.n	8004b22 <icmp_input+0x76>
 8004bc2:	bf00      	nop
 8004bc4:	200021fc 	.word	0x200021fc
 8004bc8:	0800bd4d 	.word	0x0800bd4d
 8004bcc:	0800bce6 	.word	0x0800bce6
 8004bd0:	0800b831 	.word	0x0800b831
 8004bd4:	20002210 	.word	0x20002210
 8004bd8:	0800bd1b 	.word	0x0800bd1b

08004bdc <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8004bdc:	460a      	mov	r2, r1
 8004bde:	3004      	adds	r0, #4
 8004be0:	2103      	movs	r1, #3
 8004be2:	f7ff bf19 	b.w	8004a18 <icmp_send_response.isra.0>

08004be6 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8004be6:	460a      	mov	r2, r1
 8004be8:	3004      	adds	r0, #4
 8004bea:	210b      	movs	r1, #11
 8004bec:	f7ff bf14 	b.w	8004a18 <icmp_send_response.isra.0>

08004bf0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8004bf0:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8004bf2:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <ip4_route+0x50>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	b96b      	cbnz	r3, 8004c14 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8004bf8:	4a12      	ldr	r2, [pc, #72]	; (8004c44 <ip4_route+0x54>)
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	b1ea      	cbz	r2, 8004c3a <ip4_route+0x4a>
 8004bfe:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 8004c02:	f001 0105 	and.w	r1, r1, #5
 8004c06:	2905      	cmp	r1, #5
 8004c08:	d117      	bne.n	8004c3a <ip4_route+0x4a>
 8004c0a:	6851      	ldr	r1, [r2, #4]
 8004c0c:	2900      	cmp	r1, #0
 8004c0e:	bf18      	it	ne
 8004c10:	4613      	movne	r3, r2
 8004c12:	e012      	b.n	8004c3a <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004c14:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8004c18:	f004 0205 	and.w	r2, r4, #5
 8004c1c:	2a05      	cmp	r2, #5
 8004c1e:	d1e9      	bne.n	8004bf4 <ip4_route+0x4>
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	2a00      	cmp	r2, #0
 8004c24:	d0e6      	beq.n	8004bf4 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8004c26:	6801      	ldr	r1, [r0, #0]
 8004c28:	689d      	ldr	r5, [r3, #8]
 8004c2a:	404a      	eors	r2, r1
 8004c2c:	422a      	tst	r2, r5
 8004c2e:	d004      	beq.n	8004c3a <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8004c30:	07a2      	lsls	r2, r4, #30
 8004c32:	d4df      	bmi.n	8004bf4 <ip4_route+0x4>
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	4291      	cmp	r1, r2
 8004c38:	d1dc      	bne.n	8004bf4 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	bd30      	pop	{r4, r5, pc}
 8004c3e:	bf00      	nop
 8004c40:	20005714 	.word	0x20005714
 8004c44:	20005718 	.word	0x20005718

08004c48 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8004c48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8004c4c:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8004c4e:	f897 9000 	ldrb.w	r9, [r7]
 8004c52:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8004c56:	2b04      	cmp	r3, #4
{
 8004c58:	4605      	mov	r5, r0
 8004c5a:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 8004c5c:	d005      	beq.n	8004c6a <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f001 f892 	bl	8005d88 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8004c64:	2000      	movs	r0, #0
 8004c66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8004c6a:	8878      	ldrh	r0, [r7, #2]
 8004c6c:	f7ff facc 	bl	8004208 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8004c70:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 8004c72:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 8004c76:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 8004c78:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8004c7c:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8004c7e:	d903      	bls.n	8004c88 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 8004c80:	4601      	mov	r1, r0
 8004c82:	4628      	mov	r0, r5
 8004c84:	f001 f9c2 	bl	800600c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8004c88:	896b      	ldrh	r3, [r5, #10]
 8004c8a:	454b      	cmp	r3, r9
 8004c8c:	d3e7      	bcc.n	8004c5e <ip4_input+0x16>
 8004c8e:	892b      	ldrh	r3, [r5, #8]
 8004c90:	42a3      	cmp	r3, r4
 8004c92:	d3e4      	bcc.n	8004c5e <ip4_input+0x16>
 8004c94:	f1b9 0f13 	cmp.w	r9, #19
 8004c98:	d9e1      	bls.n	8004c5e <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4c49      	ldr	r4, [pc, #292]	; (8004dc4 <ip4_input+0x17c>)
 8004c9e:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004ca8:	2be0      	cmp	r3, #224	; 0xe0
 8004caa:	d139      	bne.n	8004d20 <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8004cac:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 8004cb0:	07da      	lsls	r2, r3, #31
 8004cb2:	d503      	bpl.n	8004cbc <ip4_input+0x74>
 8004cb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d158      	bne.n	8004d6e <ip4_input+0x126>
      netif = NULL;
 8004cbc:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	6920      	ldr	r0, [r4, #16]
 8004cc2:	f000 f90c 	bl	8004ede <ip4_addr_isbroadcast_u32>
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d1c9      	bne.n	8004c5e <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8004cca:	6923      	ldr	r3, [r4, #16]
 8004ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8004cd0:	2be0      	cmp	r3, #224	; 0xe0
 8004cd2:	d0c4      	beq.n	8004c5e <ip4_input+0x16>
  if (netif == NULL) {
 8004cd4:	2e00      	cmp	r6, #0
 8004cd6:	d0c2      	beq.n	8004c5e <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004cde:	b133      	cbz	r3, 8004cee <ip4_input+0xa6>
    p = ip4_reass(p);
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f000 fa2b 	bl	800513c <ip4_reass>
    if (p == NULL) {
 8004ce6:	4605      	mov	r5, r0
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d0bb      	beq.n	8004c64 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 8004cec:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8004cee:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 8004cf0:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8004cf4:	783b      	ldrb	r3, [r7, #0]
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8004cfc:	f1c9 0100 	rsb	r1, r9, #0
 8004d00:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8004d02:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8004d04:	f001 f83a 	bl	8005d7c <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8004d08:	7a7b      	ldrb	r3, [r7, #9]
 8004d0a:	2b06      	cmp	r3, #6
 8004d0c:	d03d      	beq.n	8004d8a <ip4_input+0x142>
 8004d0e:	2b11      	cmp	r3, #17
 8004d10:	d02f      	beq.n	8004d72 <ip4_input+0x12a>
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d13e      	bne.n	8004d94 <ip4_input+0x14c>
      icmp_input(p, inp);
 8004d16:	4641      	mov	r1, r8
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f7ff fec7 	bl	8004aac <icmp_input>
      break;
 8004d1e:	e02c      	b.n	8004d7a <ip4_input+0x132>
        netif = netif_list;
 8004d20:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8004dc8 <ip4_input+0x180>
 8004d24:	4646      	mov	r6, r8
 8004d26:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8004d2a:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 8004d2e:	07db      	lsls	r3, r3, #31
 8004d30:	d404      	bmi.n	8004d3c <ip4_input+0xf4>
      if (first) {
 8004d32:	f1ba 0f00 	cmp.w	sl, #0
 8004d36:	d10d      	bne.n	8004d54 <ip4_input+0x10c>
        netif = netif->next;
 8004d38:	6836      	ldr	r6, [r6, #0]
 8004d3a:	e010      	b.n	8004d5e <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8004d3c:	6873      	ldr	r3, [r6, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f7      	beq.n	8004d32 <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004d42:	6960      	ldr	r0, [r4, #20]
 8004d44:	4283      	cmp	r3, r0
 8004d46:	d0ba      	beq.n	8004cbe <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8004d48:	4631      	mov	r1, r6
 8004d4a:	f000 f8c8 	bl	8004ede <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d0ef      	beq.n	8004d32 <ip4_input+0xea>
 8004d52:	e7b4      	b.n	8004cbe <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8004d54:	7d23      	ldrb	r3, [r4, #20]
 8004d56:	2b7f      	cmp	r3, #127	; 0x7f
 8004d58:	d0b0      	beq.n	8004cbc <ip4_input+0x74>
        netif = netif_list;
 8004d5a:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 8004d5e:	4546      	cmp	r6, r8
        netif = netif->next;
 8004d60:	bf08      	it	eq
 8004d62:	6836      	ldreq	r6, [r6, #0]
 8004d64:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 8004d68:	2e00      	cmp	r6, #0
 8004d6a:	d1de      	bne.n	8004d2a <ip4_input+0xe2>
 8004d6c:	e7a6      	b.n	8004cbc <ip4_input+0x74>
 8004d6e:	4646      	mov	r6, r8
 8004d70:	e7a5      	b.n	8004cbe <ip4_input+0x76>
      udp_input(p, inp);
 8004d72:	4641      	mov	r1, r8
 8004d74:	4628      	mov	r0, r5
 8004d76:	f004 fca3 	bl	80096c0 <udp_input>
  ip_data.current_netif = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8004d7e:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8004d80:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8004d82:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8004d84:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8004d86:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8004d88:	e76c      	b.n	8004c64 <ip4_input+0x1c>
      tcp_input(p, inp);
 8004d8a:	4641      	mov	r1, r8
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	f002 ff7b 	bl	8007c88 <tcp_input>
      break;
 8004d92:	e7f2      	b.n	8004d7a <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8004d94:	4631      	mov	r1, r6
 8004d96:	6960      	ldr	r0, [r4, #20]
 8004d98:	f000 f8a1 	bl	8004ede <ip4_addr_isbroadcast_u32>
 8004d9c:	b968      	cbnz	r0, 8004dba <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004d9e:	6963      	ldr	r3, [r4, #20]
 8004da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8004da4:	2be0      	cmp	r3, #224	; 0xe0
 8004da6:	d008      	beq.n	8004dba <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8004da8:	4649      	mov	r1, r9
 8004daa:	4628      	mov	r0, r5
 8004dac:	f000 ffe9 	bl	8005d82 <pbuf_header_force>
        p->payload = iphdr;
 8004db0:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8004db2:	2102      	movs	r1, #2
 8004db4:	4628      	mov	r0, r5
 8004db6:	f7ff ff11 	bl	8004bdc <icmp_dest_unreach>
      pbuf_free(p);
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f000 ffe4 	bl	8005d88 <pbuf_free>
 8004dc0:	e7db      	b.n	8004d7a <ip4_input+0x132>
 8004dc2:	bf00      	nop
 8004dc4:	200021fc 	.word	0x200021fc
 8004dc8:	20005714 	.word	0x20005714

08004dcc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8004dcc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd0:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8004dd2:	89c3      	ldrh	r3, [r0, #14]
{
 8004dd4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8004dd8:	2b01      	cmp	r3, #1
{
 8004dda:	4605      	mov	r5, r0
 8004ddc:	468a      	mov	sl, r1
 8004dde:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8004de0:	d006      	beq.n	8004df0 <ip4_output_if_src+0x24>
 8004de2:	4b30      	ldr	r3, [pc, #192]	; (8004ea4 <ip4_output_if_src+0xd8>)
 8004de4:	4930      	ldr	r1, [pc, #192]	; (8004ea8 <ip4_output_if_src+0xdc>)
 8004de6:	4831      	ldr	r0, [pc, #196]	; (8004eac <ip4_output_if_src+0xe0>)
 8004de8:	f240 3233 	movw	r2, #819	; 0x333
 8004dec:	f005 fcc6 	bl	800a77c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8004df0:	2e00      	cmp	r6, #0
 8004df2:	d047      	beq.n	8004e84 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8004df4:	2114      	movs	r1, #20
 8004df6:	4628      	mov	r0, r5
 8004df8:	f000 ffc0 	bl	8005d7c <pbuf_header>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d14e      	bne.n	8004e9e <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004e00:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8004e02:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004e04:	2b13      	cmp	r3, #19
 8004e06:	d806      	bhi.n	8004e16 <ip4_output_if_src+0x4a>
 8004e08:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <ip4_output_if_src+0xd8>)
 8004e0a:	4929      	ldr	r1, [pc, #164]	; (8004eb0 <ip4_output_if_src+0xe4>)
 8004e0c:	4827      	ldr	r0, [pc, #156]	; (8004eac <ip4_output_if_src+0xe0>)
 8004e0e:	f240 3261 	movw	r2, #865	; 0x361
 8004e12:	f005 fcb3 	bl	800a77c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8004e16:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8004e1a:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8004e1c:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8004e1e:	6833      	ldr	r3, [r6, #0]
 8004e20:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8004e22:	2345      	movs	r3, #69	; 0x45
 8004e24:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8004e26:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004e2a:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004e2c:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004e2e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004eb8 <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004e32:	f7ff f9e9 	bl	8004208 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8004e36:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004e38:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8004e3a:	71a7      	strb	r7, [r4, #6]
 8004e3c:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004e3e:	f8b9 0000 	ldrh.w	r0, [r9]
 8004e42:	f7ff f9e1 	bl	8004208 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8004e46:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004e4a:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8004e52:	f1ba 0f00 	cmp.w	sl, #0
 8004e56:	d112      	bne.n	8004e7e <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8004e58:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <ip4_output_if_src+0xe8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8004e5c:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8004e5e:	72a7      	strb	r7, [r4, #10]
 8004e60:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8004e62:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8004e66:	b19b      	cbz	r3, 8004e90 <ip4_output_if_src+0xc4>
 8004e68:	892a      	ldrh	r2, [r5, #8]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d910      	bls.n	8004e90 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 8004e6e:	4632      	mov	r2, r6
 8004e70:	4641      	mov	r1, r8
 8004e72:	4628      	mov	r0, r5
 8004e74:	f000 fb0c 	bl	8005490 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8004e78:	b002      	add	sp, #8
 8004e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 8004e7e:	f8da 3000 	ldr.w	r3, [sl]
 8004e82:	e7eb      	b.n	8004e5c <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8004e84:	686b      	ldr	r3, [r5, #4]
 8004e86:	ae02      	add	r6, sp, #8
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f846 3d04 	str.w	r3, [r6, #-4]!
 8004e8e:	e7e8      	b.n	8004e62 <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 8004e90:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004e94:	4632      	mov	r2, r6
 8004e96:	4629      	mov	r1, r5
 8004e98:	4640      	mov	r0, r8
 8004e9a:	4798      	blx	r3
 8004e9c:	e7ec      	b.n	8004e78 <ip4_output_if_src+0xac>
      return ERR_BUF;
 8004e9e:	f06f 0001 	mvn.w	r0, #1
 8004ea2:	e7e9      	b.n	8004e78 <ip4_output_if_src+0xac>
 8004ea4:	0800bdae 	.word	0x0800bdae
 8004ea8:	0800bde2 	.word	0x0800bde2
 8004eac:	0800b831 	.word	0x0800b831
 8004eb0:	0800bdee 	.word	0x0800bdee
 8004eb4:	0800be1c 	.word	0x0800be1c
 8004eb8:	20002162 	.word	0x20002162

08004ebc <ip4_output_if>:
{
 8004ebc:	b4f0      	push	{r4, r5, r6, r7}
 8004ebe:	9c06      	ldr	r4, [sp, #24]
 8004ec0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8004ec4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8004ec8:	b11a      	cbz	r2, 8004ed2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8004eca:	b109      	cbz	r1, 8004ed0 <ip4_output_if+0x14>
 8004ecc:	680f      	ldr	r7, [r1, #0]
 8004ece:	b907      	cbnz	r7, 8004ed2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8004ed0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8004ed2:	9406      	str	r4, [sp, #24]
 8004ed4:	9605      	str	r6, [sp, #20]
 8004ed6:	9504      	str	r5, [sp, #16]
}
 8004ed8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8004eda:	f7ff bf77 	b.w	8004dcc <ip4_output_if_src>

08004ede <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8004ede:	1e43      	subs	r3, r0, #1
 8004ee0:	3303      	adds	r3, #3
 8004ee2:	d811      	bhi.n	8004f08 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8004ee4:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8004ee8:	f013 0302 	ands.w	r3, r3, #2
 8004eec:	d00e      	beq.n	8004f0c <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8004eee:	684a      	ldr	r2, [r1, #4]
 8004ef0:	4290      	cmp	r0, r2
 8004ef2:	d00b      	beq.n	8004f0c <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8004ef4:	688b      	ldr	r3, [r1, #8]
 8004ef6:	4042      	eors	r2, r0
 8004ef8:	421a      	tst	r2, r3
 8004efa:	d107      	bne.n	8004f0c <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8004efc:	43db      	mvns	r3, r3
 8004efe:	4383      	bics	r3, r0
    return 1;
 8004f00:	bf0c      	ite	eq
 8004f02:	2001      	moveq	r0, #1
 8004f04:	2000      	movne	r0, #0
 8004f06:	4770      	bx	lr
 8004f08:	2001      	movs	r0, #1
 8004f0a:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8004f0c:	2000      	movs	r0, #0
  }
}
 8004f0e:	4770      	bx	lr

08004f10 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8004f10:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8004f12:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <ip_reass_dequeue_datagram+0x34>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4282      	cmp	r2, r0
{
 8004f18:	4604      	mov	r4, r0
 8004f1a:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8004f1c:	d107      	bne.n	8004f2e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8004f1e:	6802      	ldr	r2, [r0, #0]
 8004f20:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8004f22:	4621      	mov	r1, r4
 8004f24:	2004      	movs	r0, #4
}
 8004f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8004f2a:	f000 bdc9 	b.w	8005ac0 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8004f2e:	b931      	cbnz	r1, 8004f3e <ip_reass_dequeue_datagram+0x2e>
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <ip_reass_dequeue_datagram+0x38>)
 8004f32:	4906      	ldr	r1, [pc, #24]	; (8004f4c <ip_reass_dequeue_datagram+0x3c>)
 8004f34:	4806      	ldr	r0, [pc, #24]	; (8004f50 <ip_reass_dequeue_datagram+0x40>)
 8004f36:	f240 1245 	movw	r2, #325	; 0x145
 8004f3a:	f005 fc1f 	bl	800a77c <iprintf>
    prev->next = ipr->next;
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	e7ee      	b.n	8004f22 <ip_reass_dequeue_datagram+0x12>
 8004f44:	20002168 	.word	0x20002168
 8004f48:	0800bf05 	.word	0x0800bf05
 8004f4c:	0800bf3e 	.word	0x0800bf3e
 8004f50:	0800b831 	.word	0x0800b831

08004f54 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8004f54:	4281      	cmp	r1, r0
{
 8004f56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5a:	4605      	mov	r5, r0
 8004f5c:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8004f5e:	d105      	bne.n	8004f6c <ip_reass_free_complete_datagram+0x18>
 8004f60:	4b2f      	ldr	r3, [pc, #188]	; (8005020 <ip_reass_free_complete_datagram+0xcc>)
 8004f62:	4930      	ldr	r1, [pc, #192]	; (8005024 <ip_reass_free_complete_datagram+0xd0>)
 8004f64:	4830      	ldr	r0, [pc, #192]	; (8005028 <ip_reass_free_complete_datagram+0xd4>)
 8004f66:	22ab      	movs	r2, #171	; 0xab
 8004f68:	f005 fc08 	bl	800a77c <iprintf>
  if (prev != NULL) {
 8004f6c:	b147      	cbz	r7, 8004f80 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	429d      	cmp	r5, r3
 8004f72:	d005      	beq.n	8004f80 <ip_reass_free_complete_datagram+0x2c>
 8004f74:	4b2a      	ldr	r3, [pc, #168]	; (8005020 <ip_reass_free_complete_datagram+0xcc>)
 8004f76:	492d      	ldr	r1, [pc, #180]	; (800502c <ip_reass_free_complete_datagram+0xd8>)
 8004f78:	482b      	ldr	r0, [pc, #172]	; (8005028 <ip_reass_free_complete_datagram+0xd4>)
 8004f7a:	22ad      	movs	r2, #173	; 0xad
 8004f7c:	f005 fbfe 	bl	800a77c <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8004f80:	686e      	ldr	r6, [r5, #4]
 8004f82:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8004f84:	889a      	ldrh	r2, [r3, #4]
 8004f86:	bb92      	cbnz	r2, 8004fee <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8004f8c:	f105 011c 	add.w	r1, r5, #28
 8004f90:	f105 0208 	add.w	r2, r5, #8
 8004f94:	f852 0b04 	ldr.w	r0, [r2], #4
 8004f98:	f843 0b04 	str.w	r0, [r3], #4
 8004f9c:	428a      	cmp	r2, r1
 8004f9e:	d1f9      	bne.n	8004f94 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f7ff fe1f 	bl	8004be6 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8004fa8:	4630      	mov	r0, r6
 8004faa:	f001 f89f 	bl	80060ec <pbuf_clen>
 8004fae:	4604      	mov	r4, r0
    pbuf_free(p);
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	f000 fee9 	bl	8005d88 <pbuf_free>
  p = ipr->p;
 8004fb6:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8004fb8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8005020 <ip_reass_free_complete_datagram+0xcc>
 8004fbc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8005038 <ip_reass_free_complete_datagram+0xe4>
 8004fc0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005028 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8004fc4:	b9ae      	cbnz	r6, 8004ff2 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8004fc6:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8004fc8:	4d19      	ldr	r5, [pc, #100]	; (8005030 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8004fca:	4639      	mov	r1, r7
 8004fcc:	f7ff ffa0 	bl	8004f10 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8004fd0:	882b      	ldrh	r3, [r5, #0]
 8004fd2:	42a3      	cmp	r3, r4
 8004fd4:	d205      	bcs.n	8004fe2 <ip_reass_free_complete_datagram+0x8e>
 8004fd6:	4b12      	ldr	r3, [pc, #72]	; (8005020 <ip_reass_free_complete_datagram+0xcc>)
 8004fd8:	4916      	ldr	r1, [pc, #88]	; (8005034 <ip_reass_free_complete_datagram+0xe0>)
 8004fda:	4813      	ldr	r0, [pc, #76]	; (8005028 <ip_reass_free_complete_datagram+0xd4>)
 8004fdc:	22d2      	movs	r2, #210	; 0xd2
 8004fde:	f005 fbcd 	bl	800a77c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8004fe2:	882b      	ldrh	r3, [r5, #0]
 8004fe4:	1b1b      	subs	r3, r3, r4
 8004fe6:	802b      	strh	r3, [r5, #0]
}
 8004fe8:	4620      	mov	r0, r4
 8004fea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8004fee:	2400      	movs	r4, #0
 8004ff0:	e7e1      	b.n	8004fb6 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8004ff2:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8004ff4:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8004ff6:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8004ffa:	f001 f877 	bl	80060ec <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8004ffe:	4404      	add	r4, r0
 8005000:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8005004:	db05      	blt.n	8005012 <ip_reass_free_complete_datagram+0xbe>
 8005006:	4643      	mov	r3, r8
 8005008:	22cc      	movs	r2, #204	; 0xcc
 800500a:	4649      	mov	r1, r9
 800500c:	4650      	mov	r0, sl
 800500e:	f005 fbb5 	bl	800a77c <iprintf>
    pbuf_free(pcur);
 8005012:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8005014:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8005016:	f000 feb7 	bl	8005d88 <pbuf_free>
    p = iprh->next_pbuf;
 800501a:	465e      	mov	r6, fp
 800501c:	e7d2      	b.n	8004fc4 <ip_reass_free_complete_datagram+0x70>
 800501e:	bf00      	nop
 8005020:	0800bf05 	.word	0x0800bf05
 8005024:	0800bf57 	.word	0x0800bf57
 8005028:	0800b831 	.word	0x0800b831
 800502c:	0800bf63 	.word	0x0800bf63
 8005030:	20002164 	.word	0x20002164
 8005034:	0800bf92 	.word	0x0800bf92
 8005038:	0800bf75 	.word	0x0800bf75

0800503c <ip_reass_remove_oldest_datagram>:
{
 800503c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 8005040:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80050b0 <ip_reass_remove_oldest_datagram+0x74>
{
 8005044:	4606      	mov	r6, r0
 8005046:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8005048:	2500      	movs	r5, #0
    other_datagrams = 0;
 800504a:	2400      	movs	r4, #0
    r = reassdatagrams;
 800504c:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8005050:	4621      	mov	r1, r4
    prev = NULL;
 8005052:	46a6      	mov	lr, r4
    oldest = NULL;
 8005054:	4620      	mov	r0, r4
    while (r != NULL) {
 8005056:	b953      	cbnz	r3, 800506e <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8005058:	b110      	cbz	r0, 8005060 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800505a:	f7ff ff7b 	bl	8004f54 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800505e:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8005060:	42bd      	cmp	r5, r7
 8005062:	da01      	bge.n	8005068 <ip_reass_remove_oldest_datagram+0x2c>
 8005064:	2c01      	cmp	r4, #1
 8005066:	dcf0      	bgt.n	800504a <ip_reass_remove_oldest_datagram+0xe>
}
 8005068:	4628      	mov	r0, r5
 800506a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800506e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8005072:	695a      	ldr	r2, [r3, #20]
 8005074:	4562      	cmp	r2, ip
 8005076:	d109      	bne.n	800508c <ip_reass_remove_oldest_datagram+0x50>
 8005078:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	4562      	cmp	r2, ip
 8005080:	d104      	bne.n	800508c <ip_reass_remove_oldest_datagram+0x50>
 8005082:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8005086:	88b2      	ldrh	r2, [r6, #4]
 8005088:	4594      	cmp	ip, r2
 800508a:	d008      	beq.n	800509e <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 800508c:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800508e:	b160      	cbz	r0, 80050aa <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8005090:	7fc2      	ldrb	r2, [r0, #31]
 8005092:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8005096:	4594      	cmp	ip, r2
 8005098:	bf9c      	itt	ls
 800509a:	4671      	movls	r1, lr
 800509c:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	2a00      	cmp	r2, #0
 80050a2:	bf18      	it	ne
 80050a4:	469e      	movne	lr, r3
 80050a6:	4613      	mov	r3, r2
 80050a8:	e7d5      	b.n	8005056 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80050aa:	4671      	mov	r1, lr
 80050ac:	4618      	mov	r0, r3
 80050ae:	e7f6      	b.n	800509e <ip_reass_remove_oldest_datagram+0x62>
 80050b0:	20002168 	.word	0x20002168

080050b4 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80050b4:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80050b6:	4604      	mov	r4, r0
 80050b8:	b930      	cbnz	r0, 80050c8 <ip_frag_free_pbuf_custom_ref+0x14>
 80050ba:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <ip_frag_free_pbuf_custom_ref+0x20>)
 80050bc:	4906      	ldr	r1, [pc, #24]	; (80050d8 <ip_frag_free_pbuf_custom_ref+0x24>)
 80050be:	4807      	ldr	r0, [pc, #28]	; (80050dc <ip_frag_free_pbuf_custom_ref+0x28>)
 80050c0:	f240 22ae 	movw	r2, #686	; 0x2ae
 80050c4:	f005 fb5a 	bl	800a77c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80050c8:	4621      	mov	r1, r4
 80050ca:	2005      	movs	r0, #5
}
 80050cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80050d0:	f000 bcf6 	b.w	8005ac0 <memp_free>
 80050d4:	0800bf05 	.word	0x0800bf05
 80050d8:	0800c5cf 	.word	0x0800c5cf
 80050dc:	0800b831 	.word	0x0800b831

080050e0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80050e0:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80050e2:	4604      	mov	r4, r0
 80050e4:	b930      	cbnz	r0, 80050f4 <ipfrag_free_pbuf_custom+0x14>
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <ipfrag_free_pbuf_custom+0x28>)
 80050e8:	4908      	ldr	r1, [pc, #32]	; (800510c <ipfrag_free_pbuf_custom+0x2c>)
 80050ea:	4809      	ldr	r0, [pc, #36]	; (8005110 <ipfrag_free_pbuf_custom+0x30>)
 80050ec:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80050f0:	f005 fb44 	bl	800a77c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 80050f4:	6960      	ldr	r0, [r4, #20]
 80050f6:	b108      	cbz	r0, 80050fc <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 80050f8:	f000 fe46 	bl	8005d88 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80050fc:	4620      	mov	r0, r4
}
 80050fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8005102:	f7ff bfd7 	b.w	80050b4 <ip_frag_free_pbuf_custom_ref>
 8005106:	bf00      	nop
 8005108:	0800bf05 	.word	0x0800bf05
 800510c:	0800bfad 	.word	0x0800bfad
 8005110:	0800b831 	.word	0x0800b831

08005114 <ip_reass_tmr>:
{
 8005114:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8005116:	4b08      	ldr	r3, [pc, #32]	; (8005138 <ip_reass_tmr+0x24>)
 8005118:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800511a:	2400      	movs	r4, #0
  while (r != NULL) {
 800511c:	b900      	cbnz	r0, 8005120 <ip_reass_tmr+0xc>
}
 800511e:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8005120:	7fc3      	ldrb	r3, [r0, #31]
 8005122:	6805      	ldr	r5, [r0, #0]
 8005124:	b123      	cbz	r3, 8005130 <ip_reass_tmr+0x1c>
      r->timer--;
 8005126:	3b01      	subs	r3, #1
 8005128:	77c3      	strb	r3, [r0, #31]
 800512a:	4604      	mov	r4, r0
      r = r->next;
 800512c:	4628      	mov	r0, r5
 800512e:	e7f5      	b.n	800511c <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8005130:	4621      	mov	r1, r4
 8005132:	f7ff ff0f 	bl	8004f54 <ip_reass_free_complete_datagram>
 8005136:	e7f9      	b.n	800512c <ip_reass_tmr+0x18>
 8005138:	20002168 	.word	0x20002168

0800513c <ip4_reass>:
{
 800513c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8005140:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8005142:	782b      	ldrb	r3, [r5, #0]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	2b05      	cmp	r3, #5
{
 800514a:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800514c:	f040 808c 	bne.w	8005268 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005150:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8005152:	4cb4      	ldr	r4, [pc, #720]	; (8005424 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005154:	f7ff f858 	bl	8004208 <lwip_htons>
 8005158:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800515c:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005160:	8868      	ldrh	r0, [r5, #2]
 8005162:	f7ff f851 	bl	8004208 <lwip_htons>
 8005166:	782b      	ldrb	r3, [r5, #0]
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8005170:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8005172:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005174:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8005176:	f000 ffb9 	bl	80060ec <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800517a:	8823      	ldrh	r3, [r4, #0]
 800517c:	4403      	add	r3, r0
 800517e:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 8005180:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8005182:	dc68      	bgt.n	8005256 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8005184:	4ea8      	ldr	r6, [pc, #672]	; (8005428 <ip4_reass+0x2ec>)
 8005186:	6834      	ldr	r4, [r6, #0]
 8005188:	2c00      	cmp	r4, #0
 800518a:	d172      	bne.n	8005272 <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800518c:	2004      	movs	r0, #4
 800518e:	f000 fc7b 	bl	8005a88 <memp_malloc>
  if (ipr == NULL) {
 8005192:	4604      	mov	r4, r0
 8005194:	b958      	cbnz	r0, 80051ae <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8005196:	4651      	mov	r1, sl
 8005198:	4628      	mov	r0, r5
 800519a:	f7ff ff4f 	bl	800503c <ip_reass_remove_oldest_datagram>
 800519e:	4582      	cmp	sl, r0
 80051a0:	dc62      	bgt.n	8005268 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80051a2:	2004      	movs	r0, #4
 80051a4:	f000 fc70 	bl	8005a88 <memp_malloc>
    if (ipr == NULL)
 80051a8:	4604      	mov	r4, r0
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d05c      	beq.n	8005268 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80051ae:	2220      	movs	r2, #32
 80051b0:	2100      	movs	r1, #0
 80051b2:	4620      	mov	r0, r4
 80051b4:	f005 fa2e 	bl	800a614 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80051b8:	2303      	movs	r3, #3
 80051ba:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 80051bc:	6833      	ldr	r3, [r6, #0]
 80051be:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 80051c0:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80051c2:	462b      	mov	r3, r5
 80051c4:	f104 0208 	add.w	r2, r4, #8
 80051c8:	f105 0114 	add.w	r1, r5, #20
 80051cc:	f853 0b04 	ldr.w	r0, [r3], #4
 80051d0:	f842 0b04 	str.w	r0, [r2], #4
 80051d4:	428b      	cmp	r3, r1
 80051d6:	d1f9      	bne.n	80051cc <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80051d8:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 80051dc:	f01b 0b20 	ands.w	fp, fp, #32
 80051e0:	d108      	bne.n	80051f4 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 80051e2:	9b01      	ldr	r3, [sp, #4]
 80051e4:	444b      	add	r3, r9
 80051e6:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80051e8:	4599      	cmp	r9, r3
 80051ea:	d83d      	bhi.n	8005268 <ip4_reass+0x12c>
 80051ec:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d839      	bhi.n	8005268 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 80051f4:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80051f6:	8868      	ldrh	r0, [r5, #2]
 80051f8:	f7ff f806 	bl	8004208 <lwip_htons>
 80051fc:	f895 8000 	ldrb.w	r8, [r5]
 8005200:	f008 080f 	and.w	r8, r8, #15
 8005204:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005208:	88e8      	ldrh	r0, [r5, #6]
 800520a:	f7fe fffd 	bl	8004208 <lwip_htons>
 800520e:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005212:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005216:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8005218:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 800521a:	f8d4 e004 	ldr.w	lr, [r4, #4]
  iprh->start = offset;
 800521e:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8005220:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 8005224:	2500      	movs	r5, #0
  iprh->end = offset + len;
 8005226:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8005228:	7035      	strb	r5, [r6, #0]
 800522a:	7075      	strb	r5, [r6, #1]
 800522c:	70b5      	strb	r5, [r6, #2]
 800522e:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 8005230:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8005232:	4672      	mov	r2, lr
  int valid = 1;
 8005234:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 8005238:	bb52      	cbnz	r2, 8005290 <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 800523a:	2d00      	cmp	r5, #0
 800523c:	f040 8092 	bne.w	8005364 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8005240:	f1be 0f00 	cmp.w	lr, #0
 8005244:	d07d      	beq.n	8005342 <ip4_reass+0x206>
 8005246:	4b79      	ldr	r3, [pc, #484]	; (800542c <ip4_reass+0x2f0>)
 8005248:	4979      	ldr	r1, [pc, #484]	; (8005430 <ip4_reass+0x2f4>)
 800524a:	487a      	ldr	r0, [pc, #488]	; (8005434 <ip4_reass+0x2f8>)
 800524c:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8005250:	f005 fa94 	bl	800a77c <iprintf>
 8005254:	e075      	b.n	8005342 <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8005256:	4601      	mov	r1, r0
 8005258:	4628      	mov	r0, r5
 800525a:	f7ff feef 	bl	800503c <ip_reass_remove_oldest_datagram>
 800525e:	b118      	cbz	r0, 8005268 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8005260:	8823      	ldrh	r3, [r4, #0]
 8005262:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8005264:	2b0a      	cmp	r3, #10
 8005266:	dd8d      	ble.n	8005184 <ip4_reass+0x48>
  pbuf_free(p);
 8005268:	4638      	mov	r0, r7
 800526a:	f000 fd8d 	bl	8005d88 <pbuf_free>
  return NULL;
 800526e:	2500      	movs	r5, #0
 8005270:	e0d4      	b.n	800541c <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8005272:	68eb      	ldr	r3, [r5, #12]
 8005274:	6962      	ldr	r2, [r4, #20]
 8005276:	429a      	cmp	r2, r3
 8005278:	d108      	bne.n	800528c <ip4_reass+0x150>
 800527a:	692b      	ldr	r3, [r5, #16]
 800527c:	69a2      	ldr	r2, [r4, #24]
 800527e:	429a      	cmp	r2, r3
 8005280:	d104      	bne.n	800528c <ip4_reass+0x150>
 8005282:	89a2      	ldrh	r2, [r4, #12]
 8005284:	88ab      	ldrh	r3, [r5, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	f000 80dc 	beq.w	8005444 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800528c:	6824      	ldr	r4, [r4, #0]
 800528e:	e77b      	b.n	8005188 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8005290:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8005294:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8005298:	4288      	cmp	r0, r1
 800529a:	d254      	bcs.n	8005346 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 800529c:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 800529e:	2d00      	cmp	r5, #0
 80052a0:	d04d      	beq.n	800533e <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80052a2:	88ea      	ldrh	r2, [r5, #6]
 80052a4:	4290      	cmp	r0, r2
 80052a6:	f0c0 8091 	bcc.w	80053cc <ip4_reass+0x290>
 80052aa:	428b      	cmp	r3, r1
 80052ac:	f200 808e 	bhi.w	80053cc <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 80052b0:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 80052b2:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 80052b4:	f040 80e4 	bne.w	8005480 <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80052b8:	f1bb 0f00 	cmp.w	fp, #0
 80052bc:	d004      	beq.n	80052c8 <ip4_reass+0x18c>
 80052be:	7fa3      	ldrb	r3, [r4, #30]
 80052c0:	f013 0301 	ands.w	r3, r3, #1
 80052c4:	f000 80da 	beq.w	800547c <ip4_reass+0x340>
    if (valid) {
 80052c8:	f1b8 0f00 	cmp.w	r8, #0
 80052cc:	d159      	bne.n	8005382 <ip4_reass+0x246>
          q = iprh->next_pbuf;
 80052ce:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80052d2:	4e54      	ldr	r6, [pc, #336]	; (8005424 <ip4_reass+0x2e8>)
 80052d4:	8833      	ldrh	r3, [r6, #0]
 80052d6:	449a      	add	sl, r3
 80052d8:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 80052dc:	f1bb 0f00 	cmp.w	fp, #0
 80052e0:	d107      	bne.n	80052f2 <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 80052e2:	9b01      	ldr	r3, [sp, #4]
 80052e4:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80052e6:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80052e8:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80052f2:	f1b8 0f01 	cmp.w	r8, #1
 80052f6:	d1ba      	bne.n	800526e <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 80052f8:	8ba3      	ldrh	r3, [r4, #28]
 80052fa:	3314      	adds	r3, #20
 80052fc:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80052fe:	6863      	ldr	r3, [r4, #4]
 8005300:	685d      	ldr	r5, [r3, #4]
 8005302:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8005304:	f104 0308 	add.w	r3, r4, #8
 8005308:	462a      	mov	r2, r5
 800530a:	f104 011c 	add.w	r1, r4, #28
 800530e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005312:	f842 0b04 	str.w	r0, [r2], #4
 8005316:	428b      	cmp	r3, r1
 8005318:	d1f9      	bne.n	800530e <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800531a:	8ba0      	ldrh	r0, [r4, #28]
 800531c:	f7fe ff74 	bl	8004208 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8005320:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8005322:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8005324:	71ab      	strb	r3, [r5, #6]
 8005326:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8005328:	72ab      	strb	r3, [r5, #10]
 800532a:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800532c:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800532e:	2f00      	cmp	r7, #0
 8005330:	d157      	bne.n	80053e2 <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 8005332:	4b3d      	ldr	r3, [pc, #244]	; (8005428 <ip4_reass+0x2ec>)
 8005334:	6819      	ldr	r1, [r3, #0]
 8005336:	428c      	cmp	r4, r1
 8005338:	d165      	bne.n	8005406 <ip4_reass+0x2ca>
      ipr_prev = NULL;
 800533a:	4639      	mov	r1, r7
 800533c:	e065      	b.n	800540a <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 800533e:	428b      	cmp	r3, r1
 8005340:	d844      	bhi.n	80053cc <ip4_reass+0x290>
      ipr->p = new_p;
 8005342:	6067      	str	r7, [r4, #4]
 8005344:	e7b8      	b.n	80052b8 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 8005346:	d041      	beq.n	80053cc <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 8005348:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800534c:	4282      	cmp	r2, r0
 800534e:	d83d      	bhi.n	80053cc <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 8005350:	b125      	cbz	r5, 800535c <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 8005352:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8005354:	428a      	cmp	r2, r1
 8005356:	bf18      	it	ne
 8005358:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 800535c:	f8dc 2000 	ldr.w	r2, [ip]
 8005360:	4665      	mov	r5, ip
 8005362:	e769      	b.n	8005238 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8005364:	88eb      	ldrh	r3, [r5, #6]
 8005366:	4283      	cmp	r3, r0
 8005368:	d906      	bls.n	8005378 <ip4_reass+0x23c>
 800536a:	4b30      	ldr	r3, [pc, #192]	; (800542c <ip4_reass+0x2f0>)
 800536c:	4932      	ldr	r1, [pc, #200]	; (8005438 <ip4_reass+0x2fc>)
 800536e:	4831      	ldr	r0, [pc, #196]	; (8005434 <ip4_reass+0x2f8>)
 8005370:	f240 12ab 	movw	r2, #427	; 0x1ab
 8005374:	f005 fa02 	bl	800a77c <iprintf>
      iprh_prev->next_pbuf = new_p;
 8005378:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800537a:	88ea      	ldrh	r2, [r5, #6]
 800537c:	88b3      	ldrh	r3, [r6, #4]
 800537e:	429a      	cmp	r2, r3
 8005380:	e798      	b.n	80052b4 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0a2      	beq.n	80052ce <ip4_reass+0x192>
 8005388:	6859      	ldr	r1, [r3, #4]
 800538a:	888b      	ldrh	r3, [r1, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d19e      	bne.n	80052ce <ip4_reass+0x192>
        q = iprh->next_pbuf;
 8005390:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8005392:	b99b      	cbnz	r3, 80053bc <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 8005394:	42b1      	cmp	r1, r6
 8005396:	d106      	bne.n	80053a6 <ip4_reass+0x26a>
 8005398:	4b24      	ldr	r3, [pc, #144]	; (800542c <ip4_reass+0x2f0>)
 800539a:	4928      	ldr	r1, [pc, #160]	; (800543c <ip4_reass+0x300>)
 800539c:	4825      	ldr	r0, [pc, #148]	; (8005434 <ip4_reass+0x2f8>)
 800539e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80053a2:	f005 f9eb 	bl	800a77c <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80053a6:	6833      	ldr	r3, [r6, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d092      	beq.n	80052d2 <ip4_reass+0x196>
 80053ac:	4b1f      	ldr	r3, [pc, #124]	; (800542c <ip4_reass+0x2f0>)
 80053ae:	4924      	ldr	r1, [pc, #144]	; (8005440 <ip4_reass+0x304>)
 80053b0:	4820      	ldr	r0, [pc, #128]	; (8005434 <ip4_reass+0x2f8>)
 80053b2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80053b6:	f005 f9e1 	bl	800a77c <iprintf>
 80053ba:	e78a      	b.n	80052d2 <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 80053bc:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80053be:	88f0      	ldrh	r0, [r6, #6]
 80053c0:	8893      	ldrh	r3, [r2, #4]
 80053c2:	4298      	cmp	r0, r3
 80053c4:	d183      	bne.n	80052ce <ip4_reass+0x192>
          q = iprh->next_pbuf;
 80053c6:	6813      	ldr	r3, [r2, #0]
 80053c8:	4616      	mov	r6, r2
 80053ca:	e7e2      	b.n	8005392 <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80053cc:	4638      	mov	r0, r7
 80053ce:	f000 fe8d 	bl	80060ec <pbuf_clen>
 80053d2:	4a14      	ldr	r2, [pc, #80]	; (8005424 <ip4_reass+0x2e8>)
 80053d4:	8813      	ldrh	r3, [r2, #0]
 80053d6:	1a18      	subs	r0, r3, r0
 80053d8:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 80053da:	4638      	mov	r0, r7
 80053dc:	f000 fcd4 	bl	8005d88 <pbuf_free>
 80053e0:	e742      	b.n	8005268 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 80053e2:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 80053e6:	f06f 0113 	mvn.w	r1, #19
 80053ea:	4638      	mov	r0, r7
 80053ec:	f000 fcc6 	bl	8005d7c <pbuf_header>
      pbuf_cat(p, r);
 80053f0:	4639      	mov	r1, r7
 80053f2:	4628      	mov	r0, r5
 80053f4:	f000 fe96 	bl	8006124 <pbuf_cat>
      r = iprh->next_pbuf;
 80053f8:	f8d8 7000 	ldr.w	r7, [r8]
 80053fc:	e797      	b.n	800532e <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 80053fe:	680b      	ldr	r3, [r1, #0]
 8005400:	429c      	cmp	r4, r3
 8005402:	d002      	beq.n	800540a <ip4_reass+0x2ce>
 8005404:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8005406:	2900      	cmp	r1, #0
 8005408:	d1f9      	bne.n	80053fe <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800540a:	4620      	mov	r0, r4
 800540c:	f7ff fd80 	bl	8004f10 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8005410:	4628      	mov	r0, r5
 8005412:	f000 fe6b 	bl	80060ec <pbuf_clen>
 8005416:	8833      	ldrh	r3, [r6, #0]
 8005418:	1a18      	subs	r0, r3, r0
 800541a:	8030      	strh	r0, [r6, #0]
}
 800541c:	4628      	mov	r0, r5
 800541e:	b003      	add	sp, #12
 8005420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005424:	20002164 	.word	0x20002164
 8005428:	20002168 	.word	0x20002168
 800542c:	0800bf05 	.word	0x0800bf05
 8005430:	0800be9f 	.word	0x0800be9f
 8005434:	0800b831 	.word	0x0800b831
 8005438:	0800be81 	.word	0x0800be81
 800543c:	0800bed6 	.word	0x0800bed6
 8005440:	0800bee3 	.word	0x0800bee3
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8005444:	88e8      	ldrh	r0, [r5, #6]
 8005446:	f7fe fedf 	bl	8004208 <lwip_htons>
 800544a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800544e:	2800      	cmp	r0, #0
 8005450:	f47f aec2 	bne.w	80051d8 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8005454:	89e0      	ldrh	r0, [r4, #14]
 8005456:	f7fe fed7 	bl	8004208 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800545a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800545e:	2800      	cmp	r0, #0
 8005460:	f43f aeba 	beq.w	80051d8 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8005464:	462b      	mov	r3, r5
 8005466:	f104 0208 	add.w	r2, r4, #8
 800546a:	f105 0114 	add.w	r1, r5, #20
 800546e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005472:	f842 0b04 	str.w	r0, [r2], #4
 8005476:	428b      	cmp	r3, r1
 8005478:	d1f9      	bne.n	800546e <ip4_reass+0x332>
 800547a:	e6ad      	b.n	80051d8 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800547c:	4698      	mov	r8, r3
 800547e:	e728      	b.n	80052d2 <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8005480:	f1bb 0f00 	cmp.w	fp, #0
 8005484:	f43f af23 	beq.w	80052ce <ip4_reass+0x192>
 8005488:	f04f 0800 	mov.w	r8, #0
 800548c:	e717      	b.n	80052be <ip4_reass+0x182>
 800548e:	bf00      	nop

08005490 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8005490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8005494:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
{
 8005498:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800549a:	2308      	movs	r3, #8
 800549c:	f1a8 0814 	sub.w	r8, r8, #20
 80054a0:	fb98 f8f3 	sdiv	r8, r8, r3
 80054a4:	fa1f f388 	uxth.w	r3, r8
 80054a8:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80054aa:	6843      	ldr	r3, [r0, #4]
{
 80054ac:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80054ae:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 80054b0:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80054b2:	f006 060f 	and.w	r6, r6, #15
 80054b6:	00b6      	lsls	r6, r6, #2
 80054b8:	2e14      	cmp	r6, #20
{
 80054ba:	4607      	mov	r7, r0
 80054bc:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80054be:	d00b      	beq.n	80054d8 <ip4_frag+0x48>
 80054c0:	4b5a      	ldr	r3, [pc, #360]	; (800562c <ip4_frag+0x19c>)
 80054c2:	495b      	ldr	r1, [pc, #364]	; (8005630 <ip4_frag+0x1a0>)
 80054c4:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80054c8:	485a      	ldr	r0, [pc, #360]	; (8005634 <ip4_frag+0x1a4>)
 80054ca:	f005 f957 	bl	800a77c <iprintf>
 80054ce:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80054d2:	b00b      	add	sp, #44	; 0x2c
 80054d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80054d8:	9b02      	ldr	r3, [sp, #8]
 80054da:	88d8      	ldrh	r0, [r3, #6]
 80054dc:	f7fe fe94 	bl	8004208 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 80054e0:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80054e4:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 80054e8:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80054ea:	d004      	beq.n	80054f6 <ip4_frag+0x66>
 80054ec:	4b4f      	ldr	r3, [pc, #316]	; (800562c <ip4_frag+0x19c>)
 80054ee:	4952      	ldr	r1, [pc, #328]	; (8005638 <ip4_frag+0x1a8>)
 80054f0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80054f4:	e7e8      	b.n	80054c8 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 80054f6:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 80054f8:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 80054fc:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 80054fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 8005502:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8005504:	9307      	str	r3, [sp, #28]
  while (left) {
 8005506:	b90d      	cbnz	r5, 800550c <ip4_frag+0x7c>
  return ERR_OK;
 8005508:	4628      	mov	r0, r5
 800550a:	e7e2      	b.n	80054d2 <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 800550c:	9b07      	ldr	r3, [sp, #28]
 800550e:	42ab      	cmp	r3, r5
 8005510:	bfa8      	it	ge
 8005512:	462b      	movge	r3, r5
 8005514:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8005516:	2200      	movs	r2, #0
 8005518:	2114      	movs	r1, #20
 800551a:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 800551c:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800551e:	f000 fc95 	bl	8005e4c <pbuf_alloc>
    if (rambuf == NULL) {
 8005522:	4680      	mov	r8, r0
 8005524:	b370      	cbz	r0, 8005584 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8005526:	897b      	ldrh	r3, [r7, #10]
 8005528:	2b13      	cmp	r3, #19
 800552a:	d806      	bhi.n	800553a <ip4_frag+0xaa>
 800552c:	4b3f      	ldr	r3, [pc, #252]	; (800562c <ip4_frag+0x19c>)
 800552e:	4943      	ldr	r1, [pc, #268]	; (800563c <ip4_frag+0x1ac>)
 8005530:	4840      	ldr	r0, [pc, #256]	; (8005634 <ip4_frag+0x1a4>)
 8005532:	f240 3209 	movw	r2, #777	; 0x309
 8005536:	f005 f921 	bl	800a77c <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800553a:	9b02      	ldr	r3, [sp, #8]
 800553c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005540:	4619      	mov	r1, r3
 8005542:	3114      	adds	r1, #20
 8005544:	f853 0b04 	ldr.w	r0, [r3], #4
 8005548:	f842 0b04 	str.w	r0, [r2], #4
 800554c:	428b      	cmp	r3, r1
 800554e:	d1f9      	bne.n	8005544 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8005550:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8005554:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8005558:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 800555a:	f1b9 0f00 	cmp.w	r9, #0
 800555e:	d037      	beq.n	80055d0 <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 8005560:	897c      	ldrh	r4, [r7, #10]
 8005562:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8005564:	b2a4      	uxth	r4, r4
 8005566:	454c      	cmp	r4, r9
 8005568:	bf28      	it	cs
 800556a:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 800556c:	b914      	cbnz	r4, 8005574 <ip4_frag+0xe4>
        p = p->next;
 800556e:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8005570:	2600      	movs	r6, #0
 8005572:	e7f2      	b.n	800555a <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8005574:	2005      	movs	r0, #5
 8005576:	f000 fa87 	bl	8005a88 <memp_malloc>
      if (pcr == NULL) {
 800557a:	4682      	mov	sl, r0
 800557c:	b928      	cbnz	r0, 800558a <ip4_frag+0xfa>
        pbuf_free(rambuf);
 800557e:	4640      	mov	r0, r8
 8005580:	f000 fc02 	bl	8005d88 <pbuf_free>
  return ERR_MEM;
 8005584:	f04f 30ff 	mov.w	r0, #4294967295
 8005588:	e7a3      	b.n	80054d2 <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800558a:	9401      	str	r4, [sp, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4433      	add	r3, r6
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	2202      	movs	r2, #2
 8005594:	4603      	mov	r3, r0
 8005596:	4621      	mov	r1, r4
 8005598:	2004      	movs	r0, #4
 800559a:	f000 fbb7 	bl	8005d0c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800559e:	b918      	cbnz	r0, 80055a8 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 80055a0:	4650      	mov	r0, sl
 80055a2:	f7ff fd87 	bl	80050b4 <ip_frag_free_pbuf_custom_ref>
 80055a6:	e7ea      	b.n	800557e <ip4_frag+0xee>
 80055a8:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 80055aa:	4638      	mov	r0, r7
 80055ac:	f000 fda6 	bl	80060fc <pbuf_ref>
      left_to_copy -= newpbuflen;
 80055b0:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80055b4:	4b22      	ldr	r3, [pc, #136]	; (8005640 <ip4_frag+0x1b0>)
      pcr->original = p;
 80055b6:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80055ba:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 80055be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055c0:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 80055c2:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 80055c6:	f000 fdad 	bl	8006124 <pbuf_cat>
      if (left_to_copy) {
 80055ca:	f1b9 0f00 	cmp.w	r9, #0
 80055ce:	d1ce      	bne.n	800556e <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 80055d0:	9b04      	ldr	r3, [sp, #16]
 80055d2:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 80055d6:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 80055da:	3b13      	subs	r3, #19
    if (!last) {
 80055dc:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 80055de:	bfa8      	it	ge
 80055e0:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80055e4:	f7fe fe10 	bl	8004208 <lwip_htons>
 80055e8:	9b03      	ldr	r3, [sp, #12]
 80055ea:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80055ec:	9b05      	ldr	r3, [sp, #20]
 80055ee:	f103 0014 	add.w	r0, r3, #20
 80055f2:	b280      	uxth	r0, r0
 80055f4:	f7fe fe08 	bl	8004208 <lwip_htons>
 80055f8:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 80055fa:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80055fc:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80055fe:	2300      	movs	r3, #0
 8005600:	7293      	strb	r3, [r2, #10]
 8005602:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8005604:	4641      	mov	r1, r8
 8005606:	f8db 3014 	ldr.w	r3, [fp, #20]
 800560a:	9a08      	ldr	r2, [sp, #32]
 800560c:	4658      	mov	r0, fp
 800560e:	4798      	blx	r3
    pbuf_free(rambuf);
 8005610:	4640      	mov	r0, r8
 8005612:	f000 fbb9 	bl	8005d88 <pbuf_free>
    left -= fragsize;
 8005616:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8005618:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 800561a:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 800561c:	9b04      	ldr	r3, [sp, #16]
 800561e:	4413      	add	r3, r2
    poff += newpbuflen;
 8005620:	4426      	add	r6, r4
    ofo += nfb;
 8005622:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 8005624:	b2b6      	uxth	r6, r6
    left -= fragsize;
 8005626:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8005628:	9304      	str	r3, [sp, #16]
 800562a:	e76c      	b.n	8005506 <ip4_frag+0x76>
 800562c:	0800bf05 	.word	0x0800bf05
 8005630:	0800be20 	.word	0x0800be20
 8005634:	0800b831 	.word	0x0800b831
 8005638:	0800be47 	.word	0x0800be47
 800563c:	0800be61 	.word	0x0800be61
 8005640:	080050e1 	.word	0x080050e1

08005644 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <mem_init+0x30>)
 8005646:	4a0c      	ldr	r2, [pc, #48]	; (8005678 <mem_init+0x34>)
 8005648:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 800564c:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800564e:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 8005650:	8059      	strh	r1, [r3, #2]
  mem->next = MEM_SIZE_ALIGNED;
 8005652:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->used = 0;
 8005656:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8005658:	4908      	ldr	r1, [pc, #32]	; (800567c <mem_init+0x38>)
  mem->next = MEM_SIZE_ALIGNED;
 800565a:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800565c:	1898      	adds	r0, r3, r2
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 800565e:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005662:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005666:	4a06      	ldr	r2, [pc, #24]	; (8005680 <mem_init+0x3c>)
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8005668:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 800566a:	2101      	movs	r1, #1
 800566c:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	4770      	bx	lr
 8005674:	20002217 	.word	0x20002217
 8005678:	20002170 	.word	0x20002170
 800567c:	20002174 	.word	0x20002174
 8005680:	2000216c 	.word	0x2000216c

08005684 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005688:	4604      	mov	r4, r0
 800568a:	2800      	cmp	r0, #0
 800568c:	f000 8088 	beq.w	80057a0 <mem_free+0x11c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8005690:	0783      	lsls	r3, r0, #30
 8005692:	d006      	beq.n	80056a2 <mem_free+0x1e>
 8005694:	4b43      	ldr	r3, [pc, #268]	; (80057a4 <mem_free+0x120>)
 8005696:	4944      	ldr	r1, [pc, #272]	; (80057a8 <mem_free+0x124>)
 8005698:	4844      	ldr	r0, [pc, #272]	; (80057ac <mem_free+0x128>)
 800569a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800569e:	f005 f86d 	bl	800a77c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80056a2:	4f43      	ldr	r7, [pc, #268]	; (80057b0 <mem_free+0x12c>)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	429c      	cmp	r4, r3
 80056a8:	d303      	bcc.n	80056b2 <mem_free+0x2e>
 80056aa:	4b42      	ldr	r3, [pc, #264]	; (80057b4 <mem_free+0x130>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429c      	cmp	r4, r3
 80056b0:	d306      	bcc.n	80056c0 <mem_free+0x3c>
 80056b2:	4b3c      	ldr	r3, [pc, #240]	; (80057a4 <mem_free+0x120>)
 80056b4:	4940      	ldr	r1, [pc, #256]	; (80057b8 <mem_free+0x134>)
 80056b6:	483d      	ldr	r0, [pc, #244]	; (80057ac <mem_free+0x128>)
 80056b8:	f240 12af 	movw	r2, #431	; 0x1af
 80056bc:	f005 f85e 	bl	800a77c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	429c      	cmp	r4, r3
 80056c4:	d36c      	bcc.n	80057a0 <mem_free+0x11c>
 80056c6:	4b3b      	ldr	r3, [pc, #236]	; (80057b4 <mem_free+0x130>)
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4294      	cmp	r4, r2
 80056cc:	4698      	mov	r8, r3
 80056ce:	d267      	bcs.n	80057a0 <mem_free+0x11c>
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80056d0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80056d4:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80056d8:	b933      	cbnz	r3, 80056e8 <mem_free+0x64>
 80056da:	4b32      	ldr	r3, [pc, #200]	; (80057a4 <mem_free+0x120>)
 80056dc:	4937      	ldr	r1, [pc, #220]	; (80057bc <mem_free+0x138>)
 80056de:	4833      	ldr	r0, [pc, #204]	; (80057ac <mem_free+0x128>)
 80056e0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80056e4:	f005 f84a 	bl	800a77c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
 80056e8:	4e35      	ldr	r6, [pc, #212]	; (80057c0 <mem_free+0x13c>)
  mem->used = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 80056f0:	6833      	ldr	r3, [r6, #0]
 80056f2:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80056f4:	683b      	ldr	r3, [r7, #0]
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80056f6:	bf38      	it	cc
 80056f8:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80056fa:	429d      	cmp	r5, r3
 80056fc:	d206      	bcs.n	800570c <mem_free+0x88>
 80056fe:	4b29      	ldr	r3, [pc, #164]	; (80057a4 <mem_free+0x120>)
 8005700:	4930      	ldr	r1, [pc, #192]	; (80057c4 <mem_free+0x140>)
 8005702:	482a      	ldr	r0, [pc, #168]	; (80057ac <mem_free+0x128>)
 8005704:	f240 125d 	movw	r2, #349	; 0x15d
 8005708:	f005 f838 	bl	800a77c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800570c:	f8d8 3000 	ldr.w	r3, [r8]
 8005710:	429d      	cmp	r5, r3
 8005712:	d306      	bcc.n	8005722 <mem_free+0x9e>
 8005714:	4b23      	ldr	r3, [pc, #140]	; (80057a4 <mem_free+0x120>)
 8005716:	492c      	ldr	r1, [pc, #176]	; (80057c8 <mem_free+0x144>)
 8005718:	4824      	ldr	r0, [pc, #144]	; (80057ac <mem_free+0x128>)
 800571a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800571e:	f005 f82d 	bl	800a77c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005722:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8005726:	b133      	cbz	r3, 8005736 <mem_free+0xb2>
 8005728:	4b1e      	ldr	r3, [pc, #120]	; (80057a4 <mem_free+0x120>)
 800572a:	4928      	ldr	r1, [pc, #160]	; (80057cc <mem_free+0x148>)
 800572c:	481f      	ldr	r0, [pc, #124]	; (80057ac <mem_free+0x128>)
 800572e:	f240 125f 	movw	r2, #351	; 0x15f
 8005732:	f005 f823 	bl	800a77c <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005736:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800573a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800573e:	d906      	bls.n	800574e <mem_free+0xca>
 8005740:	4b18      	ldr	r3, [pc, #96]	; (80057a4 <mem_free+0x120>)
 8005742:	4923      	ldr	r1, [pc, #140]	; (80057d0 <mem_free+0x14c>)
 8005744:	4819      	ldr	r0, [pc, #100]	; (80057ac <mem_free+0x128>)
 8005746:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800574a:	f005 f817 	bl	800a77c <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005754:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005756:	4295      	cmp	r5, r2
 8005758:	d010      	beq.n	800577c <mem_free+0xf8>
 800575a:	7910      	ldrb	r0, [r2, #4]
 800575c:	b970      	cbnz	r0, 800577c <mem_free+0xf8>
 800575e:	f8d8 0000 	ldr.w	r0, [r8]
 8005762:	4282      	cmp	r2, r0
 8005764:	d00a      	beq.n	800577c <mem_free+0xf8>
    if (lfree == nmem) {
 8005766:	6830      	ldr	r0, [r6, #0]
 8005768:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800576a:	5a5a      	ldrh	r2, [r3, r1]
 800576c:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005770:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8005772:	bf08      	it	eq
 8005774:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005776:	441a      	add	r2, r3
 8005778:	1ae9      	subs	r1, r5, r3
 800577a:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800577c:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 8005780:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8005782:	428d      	cmp	r5, r1
 8005784:	d00c      	beq.n	80057a0 <mem_free+0x11c>
 8005786:	7908      	ldrb	r0, [r1, #4]
 8005788:	b950      	cbnz	r0, 80057a0 <mem_free+0x11c>
    if (lfree == mem) {
 800578a:	6830      	ldr	r0, [r6, #0]
 800578c:	4285      	cmp	r5, r0
      lfree = pmem;
 800578e:	bf08      	it	eq
 8005790:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8005792:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005796:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8005798:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800579c:	440b      	add	r3, r1
 800579e:	805a      	strh	r2, [r3, #2]
 80057a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057a4:	0800bfb9 	.word	0x0800bfb9
 80057a8:	0800bfe8 	.word	0x0800bfe8
 80057ac:	0800b831 	.word	0x0800b831
 80057b0:	20002170 	.word	0x20002170
 80057b4:	20002174 	.word	0x20002174
 80057b8:	0800c009 	.word	0x0800c009
 80057bc:	0800c020 	.word	0x0800c020
 80057c0:	2000216c 	.word	0x2000216c
 80057c4:	0800c034 	.word	0x0800c034
 80057c8:	0800c04b 	.word	0x0800c04b
 80057cc:	0800c065 	.word	0x0800c065
 80057d0:	0800c080 	.word	0x0800c080

080057d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80057d6:	3103      	adds	r1, #3
 80057d8:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 80057dc:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 80057de:	2d0b      	cmp	r5, #11
{
 80057e0:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 80057e2:	d904      	bls.n	80057ee <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80057e4:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 80057e8:	d902      	bls.n	80057f0 <mem_trim+0x1c>
    return NULL;
 80057ea:	2400      	movs	r4, #0
 80057ec:	e059      	b.n	80058a2 <mem_trim+0xce>
    newsize = MIN_SIZE_ALIGNED;
 80057ee:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80057f0:	4e2d      	ldr	r6, [pc, #180]	; (80058a8 <mem_trim+0xd4>)
 80057f2:	6832      	ldr	r2, [r6, #0]
 80057f4:	42a2      	cmp	r2, r4
 80057f6:	d803      	bhi.n	8005800 <mem_trim+0x2c>
 80057f8:	4b2c      	ldr	r3, [pc, #176]	; (80058ac <mem_trim+0xd8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	429c      	cmp	r4, r3
 80057fe:	d306      	bcc.n	800580e <mem_trim+0x3a>
 8005800:	4b2b      	ldr	r3, [pc, #172]	; (80058b0 <mem_trim+0xdc>)
 8005802:	492c      	ldr	r1, [pc, #176]	; (80058b4 <mem_trim+0xe0>)
 8005804:	482c      	ldr	r0, [pc, #176]	; (80058b8 <mem_trim+0xe4>)
 8005806:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800580a:	f004 ffb7 	bl	800a77c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800580e:	6833      	ldr	r3, [r6, #0]
 8005810:	429c      	cmp	r4, r3
 8005812:	d346      	bcc.n	80058a2 <mem_trim+0xce>
 8005814:	4a25      	ldr	r2, [pc, #148]	; (80058ac <mem_trim+0xd8>)
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	4294      	cmp	r4, r2
 800581a:	d242      	bcs.n	80058a2 <mem_trim+0xce>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800581c:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005820:	f834 0c08 	ldrh.w	r0, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8005824:	1ad2      	subs	r2, r2, r3
 8005826:	b292      	uxth	r2, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005828:	f1a0 0108 	sub.w	r1, r0, #8
 800582c:	1a89      	subs	r1, r1, r2
 800582e:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005830:	42a9      	cmp	r1, r5
 8005832:	d219      	bcs.n	8005868 <mem_trim+0x94>
 8005834:	4b1e      	ldr	r3, [pc, #120]	; (80058b0 <mem_trim+0xdc>)
 8005836:	4921      	ldr	r1, [pc, #132]	; (80058bc <mem_trim+0xe8>)
 8005838:	481f      	ldr	r0, [pc, #124]	; (80058b8 <mem_trim+0xe4>)
 800583a:	f240 2206 	movw	r2, #518	; 0x206
 800583e:	f004 ff9d 	bl	800a77c <iprintf>
 8005842:	e7d2      	b.n	80057ea <mem_trim+0x16>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005844:	f105 0614 	add.w	r6, r5, #20
 8005848:	428e      	cmp	r6, r1
 800584a:	d82a      	bhi.n	80058a2 <mem_trim+0xce>
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 800584c:	4e1c      	ldr	r6, [pc, #112]	; (80058c0 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800584e:	f102 0108 	add.w	r1, r2, #8
 8005852:	440d      	add	r5, r1
    if (mem2 < lfree) {
 8005854:	6837      	ldr	r7, [r6, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005856:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005858:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 800585a:	42b9      	cmp	r1, r7
      lfree = mem2;
 800585c:	bf38      	it	cc
 800585e:	6031      	strcc	r1, [r6, #0]
    }
    mem2->used = 0;
 8005860:	2600      	movs	r6, #0
 8005862:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 8005864:	5358      	strh	r0, [r3, r5]
 8005866:	e013      	b.n	8005890 <mem_trim+0xbc>
  if (newsize == size) {
 8005868:	d01b      	beq.n	80058a2 <mem_trim+0xce>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 800586a:	181e      	adds	r6, r3, r0
  if (mem2->used == 0) {
 800586c:	7937      	ldrb	r7, [r6, #4]
 800586e:	2f00      	cmp	r7, #0
 8005870:	d1e8      	bne.n	8005844 <mem_trim+0x70>
    next = mem2->next;
 8005872:	5a1f      	ldrh	r7, [r3, r0]
    if (lfree == mem2) {
 8005874:	4812      	ldr	r0, [pc, #72]	; (80058c0 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005876:	f102 0108 	add.w	r1, r2, #8
 800587a:	440d      	add	r5, r1
    if (lfree == mem2) {
 800587c:	6801      	ldr	r1, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800587e:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 8005880:	428e      	cmp	r6, r1
 8005882:	eb03 0105 	add.w	r1, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 8005886:	bf08      	it	eq
 8005888:	6001      	streq	r1, [r0, #0]
    mem2->used = 0;
 800588a:	2000      	movs	r0, #0
 800588c:	7108      	strb	r0, [r1, #4]
    mem2->next = next;
 800588e:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 8005890:	804a      	strh	r2, [r1, #2]
    mem->next = ptr2;
 8005892:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005896:	5b5a      	ldrh	r2, [r3, r5]
 8005898:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 800589c:	d001      	beq.n	80058a2 <mem_trim+0xce>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800589e:	4413      	add	r3, r2
 80058a0:	805d      	strh	r5, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80058a2:	4620      	mov	r0, r4
 80058a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20002170 	.word	0x20002170
 80058ac:	20002174 	.word	0x20002174
 80058b0:	0800bfb9 	.word	0x0800bfb9
 80058b4:	0800c145 	.word	0x0800c145
 80058b8:	0800b831 	.word	0x0800b831
 80058bc:	0800c15c 	.word	0x0800c15c
 80058c0:	2000216c 	.word	0x2000216c

080058c4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80058c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80058c8:	b148      	cbz	r0, 80058de <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80058ca:	3003      	adds	r0, #3
 80058cc:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 80058d0:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 80058d2:	2d0b      	cmp	r5, #11
 80058d4:	d905      	bls.n	80058e2 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 80058d6:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 80058da:	d903      	bls.n	80058e4 <mem_malloc+0x20>
    return NULL;
 80058dc:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 80058de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 80058e2:	250c      	movs	r5, #12
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80058e4:	4837      	ldr	r0, [pc, #220]	; (80059c4 <mem_malloc+0x100>)
 80058e6:	4e38      	ldr	r6, [pc, #224]	; (80059c8 <mem_malloc+0x104>)
 80058e8:	6807      	ldr	r7, [r0, #0]
 80058ea:	6831      	ldr	r1, [r6, #0]
 80058ec:	1a7b      	subs	r3, r7, r1
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80058f4:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80058f8:	4543      	cmp	r3, r8
 80058fa:	d2ef      	bcs.n	80058dc <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 80058fc:	18cc      	adds	r4, r1, r3
 80058fe:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 8005902:	f894 c004 	ldrb.w	ip, [r4, #4]
 8005906:	f1bc 0f00 	cmp.w	ip, #0
 800590a:	d158      	bne.n	80059be <mem_malloc+0xfa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800590c:	eba9 0203 	sub.w	r2, r9, r3
 8005910:	4472      	add	r2, lr
      if ((!mem->used) &&
 8005912:	4295      	cmp	r5, r2
 8005914:	d853      	bhi.n	80059be <mem_malloc+0xfa>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005916:	f105 0814 	add.w	r8, r5, #20
 800591a:	4542      	cmp	r2, r8
 800591c:	d349      	bcc.n	80059b2 <mem_malloc+0xee>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800591e:	f105 0208 	add.w	r2, r5, #8
 8005922:	441a      	add	r2, r3
 8005924:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8005926:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 800592a:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 800592e:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 8005932:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 8005936:	2301      	movs	r3, #1
          mem->next = ptr2;
 8005938:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 800593a:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800593c:	5a8b      	ldrh	r3, [r1, r2]
 800593e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005942:	d001      	beq.n	8005948 <mem_malloc+0x84>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005944:	4419      	add	r1, r3
 8005946:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 8005948:	42a7      	cmp	r7, r4
 800594a:	4f20      	ldr	r7, [pc, #128]	; (80059cc <mem_malloc+0x108>)
 800594c:	d111      	bne.n	8005972 <mem_malloc+0xae>
          while (cur->used && cur != ram_end) {
 800594e:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 8005950:	6836      	ldr	r6, [r6, #0]
 8005952:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 8005954:	791a      	ldrb	r2, [r3, #4]
 8005956:	b10a      	cbz	r2, 800595c <mem_malloc+0x98>
 8005958:	428b      	cmp	r3, r1
 800595a:	d12d      	bne.n	80059b8 <mem_malloc+0xf4>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800595c:	428b      	cmp	r3, r1
          lfree = cur;
 800595e:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005960:	d007      	beq.n	8005972 <mem_malloc+0xae>
 8005962:	b132      	cbz	r2, 8005972 <mem_malloc+0xae>
 8005964:	4b1a      	ldr	r3, [pc, #104]	; (80059d0 <mem_malloc+0x10c>)
 8005966:	491b      	ldr	r1, [pc, #108]	; (80059d4 <mem_malloc+0x110>)
 8005968:	481b      	ldr	r0, [pc, #108]	; (80059d8 <mem_malloc+0x114>)
 800596a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800596e:	f004 ff05 	bl	800a77c <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005972:	3508      	adds	r5, #8
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	4425      	add	r5, r4
 8005978:	42ab      	cmp	r3, r5
 800597a:	d206      	bcs.n	800598a <mem_malloc+0xc6>
 800597c:	4b14      	ldr	r3, [pc, #80]	; (80059d0 <mem_malloc+0x10c>)
 800597e:	4917      	ldr	r1, [pc, #92]	; (80059dc <mem_malloc+0x118>)
 8005980:	4815      	ldr	r0, [pc, #84]	; (80059d8 <mem_malloc+0x114>)
 8005982:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8005986:	f004 fef9 	bl	800a77c <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800598a:	07a3      	lsls	r3, r4, #30
 800598c:	d00d      	beq.n	80059aa <mem_malloc+0xe6>
 800598e:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <mem_malloc+0x10c>)
 8005990:	4913      	ldr	r1, [pc, #76]	; (80059e0 <mem_malloc+0x11c>)
 8005992:	4811      	ldr	r0, [pc, #68]	; (80059d8 <mem_malloc+0x114>)
 8005994:	f240 22d6 	movw	r2, #726	; 0x2d6
 8005998:	f004 fef0 	bl	800a77c <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <mem_malloc+0x10c>)
 800599e:	4911      	ldr	r1, [pc, #68]	; (80059e4 <mem_malloc+0x120>)
 80059a0:	480d      	ldr	r0, [pc, #52]	; (80059d8 <mem_malloc+0x114>)
 80059a2:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 80059a6:	f004 fee9 	bl	800a77c <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80059aa:	f104 0008 	add.w	r0, r4, #8
 80059ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 80059b2:	2301      	movs	r3, #1
 80059b4:	7123      	strb	r3, [r4, #4]
 80059b6:	e7c7      	b.n	8005948 <mem_malloc+0x84>
            cur = (struct mem *)(void *)&ram[cur->next];
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	4433      	add	r3, r6
 80059bc:	e7ca      	b.n	8005954 <mem_malloc+0x90>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80059be:	4673      	mov	r3, lr
 80059c0:	e79a      	b.n	80058f8 <mem_malloc+0x34>
 80059c2:	bf00      	nop
 80059c4:	2000216c 	.word	0x2000216c
 80059c8:	20002170 	.word	0x20002170
 80059cc:	20002174 	.word	0x20002174
 80059d0:	0800bfb9 	.word	0x0800bfb9
 80059d4:	0800c0aa 	.word	0x0800c0aa
 80059d8:	0800b831 	.word	0x0800b831
 80059dc:	0800c0c3 	.word	0x0800c0c3
 80059e0:	0800c0f3 	.word	0x0800c0f3
 80059e4:	0800c122 	.word	0x0800c122

080059e8 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 80059e8:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80059ea:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80059ec:	b154      	cbz	r4, 8005a04 <do_memp_malloc_pool.isra.0+0x1c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80059f2:	07a3      	lsls	r3, r4, #30
 80059f4:	d006      	beq.n	8005a04 <do_memp_malloc_pool.isra.0+0x1c>
 80059f6:	4b04      	ldr	r3, [pc, #16]	; (8005a08 <do_memp_malloc_pool.isra.0+0x20>)
 80059f8:	4904      	ldr	r1, [pc, #16]	; (8005a0c <do_memp_malloc_pool.isra.0+0x24>)
 80059fa:	4805      	ldr	r0, [pc, #20]	; (8005a10 <do_memp_malloc_pool.isra.0+0x28>)
 80059fc:	f240 1249 	movw	r2, #329	; 0x149
 8005a00:	f004 febc 	bl	800a77c <iprintf>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 8005a04:	4620      	mov	r0, r4
 8005a06:	bd10      	pop	{r4, pc}
 8005a08:	0800c19c 	.word	0x0800c19c
 8005a0c:	0800c1cc 	.word	0x0800c1cc
 8005a10:	0800b831 	.word	0x0800b831

08005a14 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8005a14:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005a16:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8005a18:	4605      	mov	r5, r0
 8005a1a:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8005a1c:	d006      	beq.n	8005a2c <do_memp_free_pool.isra.1+0x18>
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <do_memp_free_pool.isra.1+0x24>)
 8005a20:	4906      	ldr	r1, [pc, #24]	; (8005a3c <do_memp_free_pool.isra.1+0x28>)
 8005a22:	4807      	ldr	r0, [pc, #28]	; (8005a40 <do_memp_free_pool.isra.1+0x2c>)
 8005a24:	f240 129d 	movw	r2, #413	; 0x19d
 8005a28:	f004 fea8 	bl	800a77c <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8005a32:	601c      	str	r4, [r3, #0]
 8005a34:	bd38      	pop	{r3, r4, r5, pc}
 8005a36:	bf00      	nop
 8005a38:	0800c19c 	.word	0x0800c19c
 8005a3c:	0800c17c 	.word	0x0800c17c
 8005a40:	0800b831 	.word	0x0800b831

08005a44 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005a44:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8005a46:	6881      	ldr	r1, [r0, #8]
{
 8005a48:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 8005a4a:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005a4c:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 8005a4e:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8005a50:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005a52:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8005a56:	42a2      	cmp	r2, r4
 8005a58:	db00      	blt.n	8005a5c <memp_init_pool+0x18>
}
 8005a5a:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8005a5c:	680d      	ldr	r5, [r1, #0]
 8005a5e:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005a60:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8005a62:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8005a64:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005a66:	442b      	add	r3, r5
 8005a68:	e7f5      	b.n	8005a56 <memp_init_pool+0x12>
	...

08005a6c <memp_init>:
{
 8005a6c:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 8005a6e:	4d05      	ldr	r5, [pc, #20]	; (8005a84 <memp_init+0x18>)
{
 8005a70:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8005a72:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8005a76:	3401      	adds	r4, #1
 8005a78:	f7ff ffe4 	bl	8005a44 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005a7c:	2c09      	cmp	r4, #9
 8005a7e:	d1f8      	bne.n	8005a72 <memp_init+0x6>
}
 8005a80:	bd38      	pop	{r3, r4, r5, pc}
 8005a82:	bf00      	nop
 8005a84:	0800c294 	.word	0x0800c294

08005a88 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005a88:	2808      	cmp	r0, #8
{
 8005a8a:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005a8c:	d807      	bhi.n	8005a9e <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005a8e:	4b08      	ldr	r3, [pc, #32]	; (8005ab0 <memp_malloc+0x28>)
 8005a90:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005a94:	6898      	ldr	r0, [r3, #8]
}
 8005a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005a9a:	f7ff bfa5 	b.w	80059e8 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005a9e:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <memp_malloc+0x2c>)
 8005aa0:	4905      	ldr	r1, [pc, #20]	; (8005ab8 <memp_malloc+0x30>)
 8005aa2:	4806      	ldr	r0, [pc, #24]	; (8005abc <memp_malloc+0x34>)
 8005aa4:	f240 1287 	movw	r2, #391	; 0x187
 8005aa8:	f004 fe68 	bl	800a77c <iprintf>
}
 8005aac:	2000      	movs	r0, #0
 8005aae:	bd08      	pop	{r3, pc}
 8005ab0:	0800c294 	.word	0x0800c294
 8005ab4:	0800c19c 	.word	0x0800c19c
 8005ab8:	0800c277 	.word	0x0800c277
 8005abc:	0800b831 	.word	0x0800b831

08005ac0 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005ac0:	2808      	cmp	r0, #8
 8005ac2:	d906      	bls.n	8005ad2 <memp_free+0x12>
 8005ac4:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <memp_free+0x24>)
 8005ac6:	4908      	ldr	r1, [pc, #32]	; (8005ae8 <memp_free+0x28>)
 8005ac8:	4808      	ldr	r0, [pc, #32]	; (8005aec <memp_free+0x2c>)
 8005aca:	f240 12db 	movw	r2, #475	; 0x1db
 8005ace:	f004 be55 	b.w	800a77c <iprintf>

  if (mem == NULL) {
 8005ad2:	b129      	cbz	r1, 8005ae0 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005ad4:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <memp_free+0x30>)
 8005ad6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005ada:	3008      	adds	r0, #8
 8005adc:	f7ff bf9a 	b.w	8005a14 <do_memp_free_pool.isra.1>
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	0800c19c 	.word	0x0800c19c
 8005ae8:	0800c25c 	.word	0x0800c25c
 8005aec:	0800b831 	.word	0x0800b831
 8005af0:	0800c294 	.word	0x0800c294

08005af4 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005af4:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8005af8:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 8005afa:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005afc:	d502      	bpl.n	8005b04 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8005afe:	3104      	adds	r1, #4
 8005b00:	f7fe bdb2 	b.w	8004668 <etharp_request>
 8005b04:	4770      	bx	lr

08005b06 <netif_init>:
{
 8005b06:	4770      	bx	lr

08005b08 <netif_set_ipaddr>:
{
 8005b08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b0a:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	b1b9      	cbz	r1, 8005b40 <netif_set_ipaddr+0x38>
 8005b10:	680b      	ldr	r3, [r1, #0]
 8005b12:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8005b14:	9a01      	ldr	r2, [sp, #4]
 8005b16:	686b      	ldr	r3, [r5, #4]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d00f      	beq.n	8005b3c <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005b1c:	1d2e      	adds	r6, r5, #4
 8005b1e:	a901      	add	r1, sp, #4
 8005b20:	4630      	mov	r0, r6
 8005b22:	f001 fb09 	bl	8007138 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005b26:	a901      	add	r1, sp, #4
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f003 fe61 	bl	80097f0 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005b2e:	b104      	cbz	r4, 8005b32 <netif_set_ipaddr+0x2a>
 8005b30:	6824      	ldr	r4, [r4, #0]
 8005b32:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005b34:	b114      	cbz	r4, 8005b3c <netif_set_ipaddr+0x34>
 8005b36:	4628      	mov	r0, r5
 8005b38:	f7ff ffdc 	bl	8005af4 <netif_issue_reports.part.0>
}
 8005b3c:	b002      	add	sp, #8
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005b40:	4b01      	ldr	r3, [pc, #4]	; (8005b48 <netif_set_ipaddr+0x40>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	e7e5      	b.n	8005b12 <netif_set_ipaddr+0xa>
 8005b46:	bf00      	nop
 8005b48:	0800be1c 	.word	0x0800be1c

08005b4c <netif_set_addr>:
{
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4606      	mov	r6, r0
 8005b50:	4615      	mov	r5, r2
 8005b52:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8005b54:	b109      	cbz	r1, 8005b5a <netif_set_addr+0xe>
 8005b56:	680b      	ldr	r3, [r1, #0]
 8005b58:	b94b      	cbnz	r3, 8005b6e <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f7ff ffd4 	bl	8005b08 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005b60:	b105      	cbz	r5, 8005b64 <netif_set_addr+0x18>
 8005b62:	682d      	ldr	r5, [r5, #0]
 8005b64:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005b66:	b104      	cbz	r4, 8005b6a <netif_set_addr+0x1e>
 8005b68:	6824      	ldr	r4, [r4, #0]
 8005b6a:	60f4      	str	r4, [r6, #12]
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005b6e:	b102      	cbz	r2, 8005b72 <netif_set_addr+0x26>
 8005b70:	6815      	ldr	r5, [r2, #0]
 8005b72:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005b74:	b104      	cbz	r4, 8005b78 <netif_set_addr+0x2c>
 8005b76:	6824      	ldr	r4, [r4, #0]
 8005b78:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8005b7a:	4630      	mov	r0, r6
}
 8005b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8005b80:	f7ff bfc2 	b.w	8005b08 <netif_set_ipaddr>

08005b84 <netif_add>:
{
 8005b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	460f      	mov	r7, r1
 8005b8e:	4690      	mov	r8, r2
 8005b90:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8005b92:	b92e      	cbnz	r6, 8005ba0 <netif_add+0x1c>
 8005b94:	4b15      	ldr	r3, [pc, #84]	; (8005bec <netif_add+0x68>)
 8005b96:	4916      	ldr	r1, [pc, #88]	; (8005bf0 <netif_add+0x6c>)
 8005b98:	4816      	ldr	r0, [pc, #88]	; (8005bf4 <netif_add+0x70>)
 8005b9a:	22fb      	movs	r2, #251	; 0xfb
 8005b9c:	f004 fdee 	bl	800a77c <iprintf>
  netif->num = netif_num++;
 8005ba0:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 8005ba8:	9b08      	ldr	r3, [sp, #32]
 8005baa:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8005bac:	7813      	ldrb	r3, [r2, #0]
 8005bae:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005bb2:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8005bb4:	1c59      	adds	r1, r3, #1
  netif->input = input;
 8005bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8005bb8:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 8005bba:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005bbc:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005bbe:	6065      	str	r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005bc0:	60a5      	str	r5, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005bc2:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 8005bc4:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005bc8:	464b      	mov	r3, r9
 8005bca:	4642      	mov	r2, r8
 8005bcc:	4639      	mov	r1, r7
 8005bce:	f7ff ffbd 	bl	8005b4c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	47b0      	blx	r6
 8005bd6:	b930      	cbnz	r0, 8005be6 <netif_add+0x62>
  netif->next = netif_list;
 8005bd8:	4b08      	ldr	r3, [pc, #32]	; (8005bfc <netif_add+0x78>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8005bde:	601c      	str	r4, [r3, #0]
}
 8005be0:	4620      	mov	r0, r4
 8005be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8005be6:	462c      	mov	r4, r5
 8005be8:	e7fa      	b.n	8005be0 <netif_add+0x5c>
 8005bea:	bf00      	nop
 8005bec:	0800c2b8 	.word	0x0800c2b8
 8005bf0:	0800c2e9 	.word	0x0800c2e9
 8005bf4:	0800b831 	.word	0x0800b831
 8005bf8:	2000219c 	.word	0x2000219c
 8005bfc:	20005714 	.word	0x20005714

08005c00 <netif_set_default>:
  netif_default = netif;
 8005c00:	4b01      	ldr	r3, [pc, #4]	; (8005c08 <netif_set_default+0x8>)
 8005c02:	6018      	str	r0, [r3, #0]
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20005718 	.word	0x20005718

08005c0c <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005c0c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8005c10:	07d1      	lsls	r1, r2, #31
 8005c12:	d409      	bmi.n	8005c28 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8005c14:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005c18:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8005c1a:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005c1e:	d503      	bpl.n	8005c28 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005c20:	6843      	ldr	r3, [r0, #4]
 8005c22:	b10b      	cbz	r3, 8005c28 <netif_set_up+0x1c>
 8005c24:	f7ff bf66 	b.w	8005af4 <netif_issue_reports.part.0>
 8005c28:	4770      	bx	lr

08005c2a <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8005c2a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8005c2e:	07d9      	lsls	r1, r3, #31
 8005c30:	d507      	bpl.n	8005c42 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8005c32:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005c36:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8005c38:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005c3c:	d501      	bpl.n	8005c42 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8005c3e:	f7fe bc61 	b.w	8004504 <etharp_cleanup_netif>
 8005c42:	4770      	bx	lr

08005c44 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005c44:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005c46:	4604      	mov	r4, r0
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d12f      	bne.n	8005cac <pbuf_header_impl+0x68>
 8005c4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ccc <pbuf_header_impl+0x88>)
 8005c4e:	4920      	ldr	r1, [pc, #128]	; (8005cd0 <pbuf_header_impl+0x8c>)
 8005c50:	4820      	ldr	r0, [pc, #128]	; (8005cd4 <pbuf_header_impl+0x90>)
 8005c52:	f240 223f 	movw	r2, #575	; 0x23f
 8005c56:	f004 fd91 	bl	800a77c <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8005c5e:	b288      	uxth	r0, r1
  type = p->type;
 8005c60:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 8005c62:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8005c64:	b10d      	cbz	r5, 8005c6a <pbuf_header_impl+0x26>
 8005c66:	2d03      	cmp	r5, #3
 8005c68:	d106      	bne.n	8005c78 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005c6a:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005c6c:	f104 0210 	add.w	r2, r4, #16
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d20a      	bcs.n	8005c8a <pbuf_header_impl+0x46>
      return 1;
 8005c74:	2001      	movs	r0, #1
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8005c78:	3d01      	subs	r5, #1
 8005c7a:	2d01      	cmp	r5, #1
 8005c7c:	d811      	bhi.n	8005ca2 <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005c7e:	2900      	cmp	r1, #0
 8005c80:	da0c      	bge.n	8005c9c <pbuf_header_impl+0x58>
 8005c82:	8962      	ldrh	r2, [r4, #10]
 8005c84:	4282      	cmp	r2, r0
 8005c86:	d3f5      	bcc.n	8005c74 <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005c88:	1a5b      	subs	r3, r3, r1
  p->tot_len += header_size_increment;
 8005c8a:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005c8c:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 8005c8e:	8963      	ldrh	r3, [r4, #10]
 8005c90:	b289      	uxth	r1, r1
 8005c92:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 8005c94:	4401      	add	r1, r0
  p->len += header_size_increment;
 8005c96:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 8005c98:	8121      	strh	r1, [r4, #8]
 8005c9a:	e7de      	b.n	8005c5a <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 8005c9c:	2a00      	cmp	r2, #0
 8005c9e:	d1f3      	bne.n	8005c88 <pbuf_header_impl+0x44>
 8005ca0:	e7e8      	b.n	8005c74 <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <pbuf_header_impl+0x88>)
 8005ca4:	490c      	ldr	r1, [pc, #48]	; (8005cd8 <pbuf_header_impl+0x94>)
 8005ca6:	f240 2277 	movw	r2, #631	; 0x277
 8005caa:	e00b      	b.n	8005cc4 <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d0d4      	beq.n	8005c5a <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 8005cb0:	dad5      	bge.n	8005c5e <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 8005cb2:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005cb4:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8005cb6:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005cb8:	4283      	cmp	r3, r0
 8005cba:	d2d1      	bcs.n	8005c60 <pbuf_header_impl+0x1c>
 8005cbc:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <pbuf_header_impl+0x88>)
 8005cbe:	4907      	ldr	r1, [pc, #28]	; (8005cdc <pbuf_header_impl+0x98>)
 8005cc0:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 8005cc4:	4803      	ldr	r0, [pc, #12]	; (8005cd4 <pbuf_header_impl+0x90>)
 8005cc6:	f004 fd59 	bl	800a77c <iprintf>
 8005cca:	e7d3      	b.n	8005c74 <pbuf_header_impl+0x30>
 8005ccc:	0800c565 	.word	0x0800c565
 8005cd0:	0800c5cf 	.word	0x0800c5cf
 8005cd4:	0800b831 	.word	0x0800b831
 8005cd8:	0800c5b3 	.word	0x0800c5b3
 8005cdc:	0800c595 	.word	0x0800c595

08005ce0 <pbuf_free_ooseq>:
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005ce0:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <pbuf_free_ooseq+0x24>)
 8005ce2:	2200      	movs	r2, #0
{
 8005ce4:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005ce6:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005ce8:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <pbuf_free_ooseq+0x28>)
 8005cea:	681c      	ldr	r4, [r3, #0]
 8005cec:	b904      	cbnz	r4, 8005cf0 <pbuf_free_ooseq+0x10>
 8005cee:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 8005cf0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005cf2:	b120      	cbz	r0, 8005cfe <pbuf_free_ooseq+0x1e>
      tcp_segs_free(pcb->ooseq);
 8005cf4:	f000 fc98 	bl	8006628 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 8005cfc:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005cfe:	68e4      	ldr	r4, [r4, #12]
 8005d00:	e7f4      	b.n	8005cec <pbuf_free_ooseq+0xc>
 8005d02:	bf00      	nop
 8005d04:	2000571c 	.word	0x2000571c
 8005d08:	20005724 	.word	0x20005724

08005d0c <pbuf_alloced_custom>:
{
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8005d10:	2804      	cmp	r0, #4
 8005d12:	d81e      	bhi.n	8005d52 <pbuf_alloced_custom+0x46>
 8005d14:	e8df f000 	tbb	[pc, r0]
 8005d18:	1b280326 	.word	0x1b280326
 8005d1c:	1b          	.byte	0x1b
 8005d1d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005d1e:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005d20:	3403      	adds	r4, #3
 8005d22:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8005d26:	f024 0403 	bic.w	r4, r4, #3
 8005d2a:	190e      	adds	r6, r1, r4
 8005d2c:	4286      	cmp	r6, r0
 8005d2e:	f04f 0000 	mov.w	r0, #0
 8005d32:	d80b      	bhi.n	8005d4c <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 8005d34:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8005d36:	b1cd      	cbz	r5, 8005d6c <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005d38:	442c      	add	r4, r5
 8005d3a:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005d3c:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8005d3e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005d40:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005d42:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8005d44:	8119      	strh	r1, [r3, #8]
 8005d46:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8005d48:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8005d4a:	4618      	mov	r0, r3
}
 8005d4c:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 8005d4e:	2400      	movs	r4, #0
    break;
 8005d50:	e7e6      	b.n	8005d20 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8005d52:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <pbuf_alloced_custom+0x64>)
 8005d54:	4907      	ldr	r1, [pc, #28]	; (8005d74 <pbuf_alloced_custom+0x68>)
 8005d56:	4808      	ldr	r0, [pc, #32]	; (8005d78 <pbuf_alloced_custom+0x6c>)
 8005d58:	f240 12c5 	movw	r2, #453	; 0x1c5
 8005d5c:	f004 fd0e 	bl	800a77c <iprintf>
    return NULL;
 8005d60:	2000      	movs	r0, #0
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005d64:	2436      	movs	r4, #54	; 0x36
 8005d66:	e7db      	b.n	8005d20 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005d68:	240e      	movs	r4, #14
 8005d6a:	e7d9      	b.n	8005d20 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8005d6c:	605d      	str	r5, [r3, #4]
 8005d6e:	e7e5      	b.n	8005d3c <pbuf_alloced_custom+0x30>
 8005d70:	0800c565 	.word	0x0800c565
 8005d74:	0800c3a8 	.word	0x0800c3a8
 8005d78:	0800b831 	.word	0x0800b831

08005d7c <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f7ff bf61 	b.w	8005c44 <pbuf_header_impl>

08005d82 <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 8005d82:	2201      	movs	r2, #1
 8005d84:	f7ff bf5e 	b.w	8005c44 <pbuf_header_impl>

08005d88 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	b950      	cbnz	r0, 8005da6 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005d90:	4b28      	ldr	r3, [pc, #160]	; (8005e34 <pbuf_free+0xac>)
 8005d92:	4929      	ldr	r1, [pc, #164]	; (8005e38 <pbuf_free+0xb0>)
 8005d94:	4829      	ldr	r0, [pc, #164]	; (8005e3c <pbuf_free+0xb4>)
 8005d96:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005d9a:	f004 fcef 	bl	800a77c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005d9e:	4626      	mov	r6, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8005da0:	4630      	mov	r0, r6
 8005da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8005da6:	7b03      	ldrb	r3, [r0, #12]
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d906      	bls.n	8005dba <pbuf_free+0x32>
 8005dac:	4b21      	ldr	r3, [pc, #132]	; (8005e34 <pbuf_free+0xac>)
 8005dae:	4924      	ldr	r1, [pc, #144]	; (8005e40 <pbuf_free+0xb8>)
 8005db0:	4822      	ldr	r0, [pc, #136]	; (8005e3c <pbuf_free+0xb4>)
 8005db2:	f240 22de 	movw	r2, #734	; 0x2de
 8005db6:	f004 fce1 	bl	800a77c <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005dba:	4f1e      	ldr	r7, [pc, #120]	; (8005e34 <pbuf_free+0xac>)
 8005dbc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005e48 <pbuf_free+0xc0>
 8005dc0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8005e3c <pbuf_free+0xb4>
{
 8005dc4:	2500      	movs	r5, #0
 8005dc6:	b2ee      	uxtb	r6, r5
  while (p != NULL) {
 8005dc8:	2c00      	cmp	r4, #0
 8005dca:	d0e9      	beq.n	8005da0 <pbuf_free+0x18>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005dcc:	89e3      	ldrh	r3, [r4, #14]
 8005dce:	b933      	cbnz	r3, 8005dde <pbuf_free+0x56>
 8005dd0:	463b      	mov	r3, r7
 8005dd2:	f240 22eb 	movw	r2, #747	; 0x2eb
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	4640      	mov	r0, r8
 8005dda:	f004 fccf 	bl	800a77c <iprintf>
    ref = --(p->ref);
 8005dde:	89e3      	ldrh	r3, [r4, #14]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1da      	bne.n	8005da0 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005dea:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8005dec:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005dee:	079b      	lsls	r3, r3, #30
 8005df0:	d50e      	bpl.n	8005e10 <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	b933      	cbnz	r3, 8005e04 <pbuf_free+0x7c>
 8005df6:	463b      	mov	r3, r7
 8005df8:	f240 22f9 	movw	r2, #761	; 0x2f9
 8005dfc:	4911      	ldr	r1, [pc, #68]	; (8005e44 <pbuf_free+0xbc>)
 8005dfe:	4640      	mov	r0, r8
 8005e00:	f004 fcbc 	bl	800a77c <iprintf>
        pc->custom_free_function(p);
 8005e04:	6923      	ldr	r3, [r4, #16]
 8005e06:	4620      	mov	r0, r4
 8005e08:	4798      	blx	r3
 8005e0a:	3501      	adds	r5, #1
      p = q;
 8005e0c:	4634      	mov	r4, r6
 8005e0e:	e7da      	b.n	8005dc6 <pbuf_free+0x3e>
      type = p->type;
 8005e10:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d104      	bne.n	8005e20 <pbuf_free+0x98>
          memp_free(MEMP_PBUF_POOL, p);
 8005e16:	4621      	mov	r1, r4
 8005e18:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 8005e1a:	f7ff fe51 	bl	8005ac0 <memp_free>
 8005e1e:	e7f4      	b.n	8005e0a <pbuf_free+0x82>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005e20:	3b01      	subs	r3, #1
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d802      	bhi.n	8005e2c <pbuf_free+0xa4>
          memp_free(MEMP_PBUF, p);
 8005e26:	4621      	mov	r1, r4
 8005e28:	2007      	movs	r0, #7
 8005e2a:	e7f6      	b.n	8005e1a <pbuf_free+0x92>
          mem_free(p);
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f7ff fc29 	bl	8005684 <mem_free>
 8005e32:	e7ea      	b.n	8005e0a <pbuf_free+0x82>
 8005e34:	0800c565 	.word	0x0800c565
 8005e38:	0800c5cf 	.word	0x0800c5cf
 8005e3c:	0800b831 	.word	0x0800b831
 8005e40:	0800c519 	.word	0x0800c519
 8005e44:	0800c544 	.word	0x0800c544
 8005e48:	0800c52e 	.word	0x0800c52e

08005e4c <pbuf_alloc>:
{
 8005e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e50:	460e      	mov	r6, r1
 8005e52:	4617      	mov	r7, r2
  switch (layer) {
 8005e54:	2804      	cmp	r0, #4
 8005e56:	d80e      	bhi.n	8005e76 <pbuf_alloc+0x2a>
 8005e58:	e8df f000 	tbb	[pc, r0]
 8005e5c:	0b170315 	.word	0x0b170315
 8005e60:	0b          	.byte	0x0b
 8005e61:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005e62:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8005e64:	2f03      	cmp	r7, #3
 8005e66:	f200 80bc 	bhi.w	8005fe2 <pbuf_alloc+0x196>
 8005e6a:	e8df f007 	tbb	[pc, r7]
 8005e6e:	ad92      	.short	0xad92
 8005e70:	10ad      	.short	0x10ad
    offset = 0;
 8005e72:	2500      	movs	r5, #0
    break;
 8005e74:	e7f6      	b.n	8005e64 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8005e76:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <pbuf_alloc+0x1a0>)
 8005e78:	495d      	ldr	r1, [pc, #372]	; (8005ff0 <pbuf_alloc+0x1a4>)
 8005e7a:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005e7e:	485d      	ldr	r0, [pc, #372]	; (8005ff4 <pbuf_alloc+0x1a8>)
 8005e80:	f004 fc7c 	bl	800a77c <iprintf>
 8005e84:	e04b      	b.n	8005f1e <pbuf_alloc+0xd2>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005e86:	2536      	movs	r5, #54	; 0x36
 8005e88:	e7ec      	b.n	8005e64 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005e8a:	250e      	movs	r5, #14
 8005e8c:	e7ea      	b.n	8005e64 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005e8e:	2008      	movs	r0, #8
 8005e90:	f7ff fdfa 	bl	8005a88 <memp_malloc>
    if (p == NULL) {
 8005e94:	4604      	mov	r4, r0
 8005e96:	b928      	cbnz	r0, 8005ea4 <pbuf_alloc+0x58>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005e98:	4b57      	ldr	r3, [pc, #348]	; (8005ff8 <pbuf_alloc+0x1ac>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
}
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005eac:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005eae:	3503      	adds	r5, #3
 8005eb0:	f025 0503 	bic.w	r5, r5, #3
 8005eb4:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 8005eb8:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005eba:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005ebe:	bf28      	it	cs
 8005ec0:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005ec8:	f500 7718 	add.w	r7, r0, #608	; 0x260
 8005ecc:	442b      	add	r3, r5
 8005ece:	429f      	cmp	r7, r3
    p->tot_len = length;
 8005ed0:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005ed2:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005ed4:	d206      	bcs.n	8005ee4 <pbuf_alloc+0x98>
 8005ed6:	4b45      	ldr	r3, [pc, #276]	; (8005fec <pbuf_alloc+0x1a0>)
 8005ed8:	4948      	ldr	r1, [pc, #288]	; (8005ffc <pbuf_alloc+0x1b0>)
 8005eda:	4846      	ldr	r0, [pc, #280]	; (8005ff4 <pbuf_alloc+0x1a8>)
 8005edc:	f44f 7298 	mov.w	r2, #304	; 0x130
 8005ee0:	f004 fc4c 	bl	800a77c <iprintf>
    p->ref = 1;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8005ee8:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005eea:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8005fec <pbuf_alloc+0x1a0>
 8005eee:	f8df a118 	ldr.w	sl, [pc, #280]	; 8006008 <pbuf_alloc+0x1bc>
 8005ef2:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005ff4 <pbuf_alloc+0x1a8>
    rem_len = length - p->len;
 8005ef6:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 8005ef8:	46a3      	mov	fp, r4
 8005efa:	2e00      	cmp	r6, #0
 8005efc:	dc04      	bgt.n	8005f08 <pbuf_alloc+0xbc>
  p->ref = 1;
 8005efe:	2301      	movs	r3, #1
 8005f00:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	7363      	strb	r3, [r4, #13]
  return p;
 8005f06:	e7ca      	b.n	8005e9e <pbuf_alloc+0x52>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005f08:	2008      	movs	r0, #8
 8005f0a:	f7ff fdbd 	bl	8005a88 <memp_malloc>
      if (q == NULL) {
 8005f0e:	4605      	mov	r5, r0
 8005f10:	b938      	cbnz	r0, 8005f22 <pbuf_alloc+0xd6>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005f12:	4b39      	ldr	r3, [pc, #228]	; (8005ff8 <pbuf_alloc+0x1ac>)
 8005f14:	2201      	movs	r2, #1
        pbuf_free(p);
 8005f16:	4620      	mov	r0, r4
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005f18:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 8005f1a:	f7ff ff35 	bl	8005d88 <pbuf_free>
    return NULL;
 8005f1e:	2400      	movs	r4, #0
 8005f20:	e7bd      	b.n	8005e9e <pbuf_alloc+0x52>
      q->type = type;
 8005f22:	2303      	movs	r3, #3
 8005f24:	7303      	strb	r3, [r0, #12]
      q->flags = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8005f2a:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f30:	429e      	cmp	r6, r3
      r->next = q;
 8005f32:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005f36:	d106      	bne.n	8005f46 <pbuf_alloc+0xfa>
 8005f38:	4643      	mov	r3, r8
 8005f3a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8005f3e:	4651      	mov	r1, sl
 8005f40:	4648      	mov	r0, r9
 8005f42:	f004 fc1b 	bl	800a77c <iprintf>
      q->tot_len = (u16_t)rem_len;
 8005f46:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8005f48:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 8005f4c:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8005f4e:	bf28      	it	cs
 8005f50:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8005f54:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8005f56:	f105 0310 	add.w	r3, r5, #16
 8005f5a:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005f5c:	079b      	lsls	r3, r3, #30
 8005f5e:	d006      	beq.n	8005f6e <pbuf_alloc+0x122>
 8005f60:	4643      	mov	r3, r8
 8005f62:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8005f66:	4926      	ldr	r1, [pc, #152]	; (8006000 <pbuf_alloc+0x1b4>)
 8005f68:	4648      	mov	r0, r9
 8005f6a:	f004 fc07 	bl	800a77c <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005f6e:	8962      	ldrh	r2, [r4, #10]
 8005f70:	6863      	ldr	r3, [r4, #4]
 8005f72:	4413      	add	r3, r2
 8005f74:	429f      	cmp	r7, r3
 8005f76:	d206      	bcs.n	8005f86 <pbuf_alloc+0x13a>
 8005f78:	4643      	mov	r3, r8
 8005f7a:	f240 1255 	movw	r2, #341	; 0x155
 8005f7e:	491f      	ldr	r1, [pc, #124]	; (8005ffc <pbuf_alloc+0x1b0>)
 8005f80:	4648      	mov	r0, r9
 8005f82:	f004 fbfb 	bl	800a77c <iprintf>
      q->ref = 1;
 8005f86:	2301      	movs	r3, #1
 8005f88:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 8005f8a:	896b      	ldrh	r3, [r5, #10]
 8005f8c:	46ab      	mov	fp, r5
 8005f8e:	1af6      	subs	r6, r6, r3
 8005f90:	e7b3      	b.n	8005efa <pbuf_alloc+0xae>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8005f92:	f105 0013 	add.w	r0, r5, #19
 8005f96:	1cf3      	adds	r3, r6, #3
 8005f98:	f023 0303 	bic.w	r3, r3, #3
 8005f9c:	f020 0003 	bic.w	r0, r0, #3
 8005fa0:	4418      	add	r0, r3
 8005fa2:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8005fa4:	4298      	cmp	r0, r3
 8005fa6:	d3ba      	bcc.n	8005f1e <pbuf_alloc+0xd2>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8005fa8:	f7ff fc8c 	bl	80058c4 <mem_malloc>
    if (p == NULL) {
 8005fac:	4604      	mov	r4, r0
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0b5      	beq.n	8005f1e <pbuf_alloc+0xd2>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005fb2:	4405      	add	r5, r0
 8005fb4:	3513      	adds	r5, #19
    p->next = NULL;
 8005fb6:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005fb8:	f025 0503 	bic.w	r5, r5, #3
 8005fbc:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 8005fbe:	8106      	strh	r6, [r0, #8]
 8005fc0:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8005fc2:	6003      	str	r3, [r0, #0]
    p->type = type;
 8005fc4:	7303      	strb	r3, [r0, #12]
 8005fc6:	e79a      	b.n	8005efe <pbuf_alloc+0xb2>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005fc8:	2007      	movs	r0, #7
 8005fca:	f7ff fd5d 	bl	8005a88 <memp_malloc>
    if (p == NULL) {
 8005fce:	4604      	mov	r4, r0
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d0a4      	beq.n	8005f1e <pbuf_alloc+0xd2>
    p->payload = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8005fd8:	8106      	strh	r6, [r0, #8]
 8005fda:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8005fdc:	6003      	str	r3, [r0, #0]
    p->type = type;
 8005fde:	7307      	strb	r7, [r0, #12]
    break;
 8005fe0:	e78d      	b.n	8005efe <pbuf_alloc+0xb2>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005fe2:	4b02      	ldr	r3, [pc, #8]	; (8005fec <pbuf_alloc+0x1a0>)
 8005fe4:	4907      	ldr	r1, [pc, #28]	; (8006004 <pbuf_alloc+0x1b8>)
 8005fe6:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8005fea:	e748      	b.n	8005e7e <pbuf_alloc+0x32>
 8005fec:	0800c565 	.word	0x0800c565
 8005ff0:	0800c300 	.word	0x0800c300
 8005ff4:	0800b831 	.word	0x0800b831
 8005ff8:	2000571c 	.word	0x2000571c
 8005ffc:	0800c31b 	.word	0x0800c31b
 8006000:	0800c360 	.word	0x0800c360
 8006004:	0800c38d 	.word	0x0800c38d
 8006008:	0800c34c 	.word	0x0800c34c

0800600c <pbuf_realloc>:
{
 800600c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006010:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006012:	4604      	mov	r4, r0
 8006014:	b930      	cbnz	r0, 8006024 <pbuf_realloc+0x18>
 8006016:	4b2e      	ldr	r3, [pc, #184]	; (80060d0 <pbuf_realloc+0xc4>)
 8006018:	492e      	ldr	r1, [pc, #184]	; (80060d4 <pbuf_realloc+0xc8>)
 800601a:	482f      	ldr	r0, [pc, #188]	; (80060d8 <pbuf_realloc+0xcc>)
 800601c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006020:	f004 fbac 	bl	800a77c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8006024:	7b23      	ldrb	r3, [r4, #12]
 8006026:	2b03      	cmp	r3, #3
 8006028:	d906      	bls.n	8006038 <pbuf_realloc+0x2c>
 800602a:	4b29      	ldr	r3, [pc, #164]	; (80060d0 <pbuf_realloc+0xc4>)
 800602c:	492b      	ldr	r1, [pc, #172]	; (80060dc <pbuf_realloc+0xd0>)
 800602e:	482a      	ldr	r0, [pc, #168]	; (80060d8 <pbuf_realloc+0xcc>)
 8006030:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006034:	f004 fba2 	bl	800a77c <iprintf>
  if (new_len >= p->tot_len) {
 8006038:	8926      	ldrh	r6, [r4, #8]
 800603a:	42ae      	cmp	r6, r5
 800603c:	d945      	bls.n	80060ca <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800603e:	4f24      	ldr	r7, [pc, #144]	; (80060d0 <pbuf_realloc+0xc4>)
 8006040:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80060e8 <pbuf_realloc+0xdc>
 8006044:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80060d8 <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 8006048:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 800604a:	8963      	ldrh	r3, [r4, #10]
 800604c:	429d      	cmp	r5, r3
 800604e:	d819      	bhi.n	8006084 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8006050:	7b22      	ldrb	r2, [r4, #12]
 8006052:	2a00      	cmp	r2, #0
 8006054:	d131      	bne.n	80060ba <pbuf_realloc+0xae>
 8006056:	429d      	cmp	r5, r3
 8006058:	d02f      	beq.n	80060ba <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800605a:	7b63      	ldrb	r3, [r4, #13]
 800605c:	079b      	lsls	r3, r3, #30
 800605e:	d42c      	bmi.n	80060ba <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8006060:	6861      	ldr	r1, [r4, #4]
 8006062:	1b09      	subs	r1, r1, r4
 8006064:	4429      	add	r1, r5
 8006066:	4620      	mov	r0, r4
 8006068:	b289      	uxth	r1, r1
 800606a:	f7ff fbb3 	bl	80057d4 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800606e:	4604      	mov	r4, r0
 8006070:	bb18      	cbnz	r0, 80060ba <pbuf_realloc+0xae>
 8006072:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <pbuf_realloc+0xc4>)
 8006074:	491a      	ldr	r1, [pc, #104]	; (80060e0 <pbuf_realloc+0xd4>)
 8006076:	4818      	ldr	r0, [pc, #96]	; (80060d8 <pbuf_realloc+0xcc>)
 8006078:	f240 221d 	movw	r2, #541	; 0x21d
 800607c:	f004 fb7e 	bl	800a77c <iprintf>
  q->len = rem_len;
 8006080:	8164      	strh	r4, [r4, #10]
 8006082:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 8006084:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8006086:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800608a:	429e      	cmp	r6, r3
    rem_len -= q->len;
 800608c:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800608e:	dd06      	ble.n	800609e <pbuf_realloc+0x92>
 8006090:	463b      	mov	r3, r7
 8006092:	f240 220b 	movw	r2, #523	; 0x20b
 8006096:	4649      	mov	r1, r9
 8006098:	4640      	mov	r0, r8
 800609a:	f004 fb6f 	bl	800a77c <iprintf>
    q->tot_len += (u16_t)grow;
 800609e:	8923      	ldrh	r3, [r4, #8]
 80060a0:	4433      	add	r3, r6
 80060a2:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80060a4:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80060a6:	2c00      	cmp	r4, #0
 80060a8:	d1cf      	bne.n	800604a <pbuf_realloc+0x3e>
 80060aa:	463b      	mov	r3, r7
 80060ac:	f240 220f 	movw	r2, #527	; 0x20f
 80060b0:	490c      	ldr	r1, [pc, #48]	; (80060e4 <pbuf_realloc+0xd8>)
 80060b2:	4640      	mov	r0, r8
 80060b4:	f004 fb62 	bl	800a77c <iprintf>
 80060b8:	e7c7      	b.n	800604a <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 80060ba:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80060bc:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80060be:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80060c0:	b108      	cbz	r0, 80060c6 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 80060c2:	f7ff fe61 	bl	8005d88 <pbuf_free>
  q->next = NULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ce:	bf00      	nop
 80060d0:	0800c565 	.word	0x0800c565
 80060d4:	0800c5c1 	.word	0x0800c5c1
 80060d8:	0800b831 	.word	0x0800b831
 80060dc:	0800c5d9 	.word	0x0800c5d9
 80060e0:	0800c61d 	.word	0x0800c61d
 80060e4:	0800c605 	.word	0x0800c605
 80060e8:	0800c5f4 	.word	0x0800c5f4

080060ec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80060ec:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 80060ee:	2200      	movs	r2, #0
 80060f0:	b290      	uxth	r0, r2
 80060f2:	3201      	adds	r2, #1
 80060f4:	b903      	cbnz	r3, 80060f8 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 80060f6:	4770      	bx	lr
    p = p->next;
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	e7f9      	b.n	80060f0 <pbuf_clen+0x4>

080060fc <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 80060fc:	b158      	cbz	r0, 8006116 <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 80060fe:	89c3      	ldrh	r3, [r0, #14]
 8006100:	3301      	adds	r3, #1
 8006102:	b29b      	uxth	r3, r3
 8006104:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006106:	b933      	cbnz	r3, 8006116 <pbuf_ref+0x1a>
 8006108:	4b03      	ldr	r3, [pc, #12]	; (8006118 <pbuf_ref+0x1c>)
 800610a:	4904      	ldr	r1, [pc, #16]	; (800611c <pbuf_ref+0x20>)
 800610c:	4804      	ldr	r0, [pc, #16]	; (8006120 <pbuf_ref+0x24>)
 800610e:	f240 3239 	movw	r2, #825	; 0x339
 8006112:	f004 bb33 	b.w	800a77c <iprintf>
 8006116:	4770      	bx	lr
 8006118:	0800c565 	.word	0x0800c565
 800611c:	0800c639 	.word	0x0800c639
 8006120:	0800b831 	.word	0x0800b831

08006124 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006128:	4604      	mov	r4, r0
 800612a:	b100      	cbz	r0, 800612e <pbuf_cat+0xa>
 800612c:	b969      	cbnz	r1, 800614a <pbuf_cat+0x26>
 800612e:	4b15      	ldr	r3, [pc, #84]	; (8006184 <pbuf_cat+0x60>)
 8006130:	4915      	ldr	r1, [pc, #84]	; (8006188 <pbuf_cat+0x64>)
 8006132:	4816      	ldr	r0, [pc, #88]	; (800618c <pbuf_cat+0x68>)
 8006134:	f240 324d 	movw	r2, #845	; 0x34d
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800613c:	f004 bb1e 	b.w	800a77c <iprintf>
    p->tot_len += t->tot_len;
 8006140:	8923      	ldrh	r3, [r4, #8]
 8006142:	8929      	ldrh	r1, [r5, #8]
 8006144:	440b      	add	r3, r1
 8006146:	8123      	strh	r3, [r4, #8]
 8006148:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800614a:	6822      	ldr	r2, [r4, #0]
 800614c:	2a00      	cmp	r2, #0
 800614e:	d1f7      	bne.n	8006140 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006150:	8922      	ldrh	r2, [r4, #8]
 8006152:	8963      	ldrh	r3, [r4, #10]
 8006154:	429a      	cmp	r2, r3
 8006156:	d006      	beq.n	8006166 <pbuf_cat+0x42>
 8006158:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <pbuf_cat+0x60>)
 800615a:	490d      	ldr	r1, [pc, #52]	; (8006190 <pbuf_cat+0x6c>)
 800615c:	480b      	ldr	r0, [pc, #44]	; (800618c <pbuf_cat+0x68>)
 800615e:	f240 3255 	movw	r2, #853	; 0x355
 8006162:	f004 fb0b 	bl	800a77c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	b133      	cbz	r3, 8006178 <pbuf_cat+0x54>
 800616a:	4b06      	ldr	r3, [pc, #24]	; (8006184 <pbuf_cat+0x60>)
 800616c:	4909      	ldr	r1, [pc, #36]	; (8006194 <pbuf_cat+0x70>)
 800616e:	4807      	ldr	r0, [pc, #28]	; (800618c <pbuf_cat+0x68>)
 8006170:	f240 3256 	movw	r2, #854	; 0x356
 8006174:	f004 fb02 	bl	800a77c <iprintf>
  p->tot_len += t->tot_len;
 8006178:	892a      	ldrh	r2, [r5, #8]
 800617a:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800617c:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 800617e:	4413      	add	r3, r2
 8006180:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	0800c565 	.word	0x0800c565
 8006188:	0800c3cc 	.word	0x0800c3cc
 800618c:	0800b831 	.word	0x0800b831
 8006190:	0800c401 	.word	0x0800c401
 8006194:	0800c42e 	.word	0x0800c42e

08006198 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800619e:	4605      	mov	r5, r0
 80061a0:	b120      	cbz	r0, 80061ac <pbuf_copy+0x14>
 80061a2:	b119      	cbz	r1, 80061ac <pbuf_copy+0x14>
 80061a4:	8902      	ldrh	r2, [r0, #8]
 80061a6:	890b      	ldrh	r3, [r1, #8]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d20a      	bcs.n	80061c2 <pbuf_copy+0x2a>
 80061ac:	4b38      	ldr	r3, [pc, #224]	; (8006290 <pbuf_copy+0xf8>)
 80061ae:	4939      	ldr	r1, [pc, #228]	; (8006294 <pbuf_copy+0xfc>)
 80061b0:	f240 32bd 	movw	r2, #957	; 0x3bd
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80061b4:	4838      	ldr	r0, [pc, #224]	; (8006298 <pbuf_copy+0x100>)
 80061b6:	f004 fae1 	bl	800a77c <iprintf>
 80061ba:	f06f 000f 	mvn.w	r0, #15
 80061be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c2:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80061c6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8006290 <pbuf_copy+0xf8>
 80061ca:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80062a8 <pbuf_copy+0x110>
 80061ce:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8006298 <pbuf_copy+0x100>
 80061d2:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80061d4:	896e      	ldrh	r6, [r5, #10]
 80061d6:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80061d8:	6868      	ldr	r0, [r5, #4]
 80061da:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80061dc:	1bf6      	subs	r6, r6, r7
 80061de:	eba3 030b 	sub.w	r3, r3, fp
 80061e2:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 80061e4:	bfac      	ite	ge
 80061e6:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 80061e8:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80061ea:	4632      	mov	r2, r6
 80061ec:	4459      	add	r1, fp
 80061ee:	4438      	add	r0, r7
 80061f0:	f004 fa05 	bl	800a5fe <memcpy>
    offset_to += len;
 80061f4:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80061f6:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 80061f8:	b2bf      	uxth	r7, r7
    offset_from += len;
 80061fa:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80061fc:	42bb      	cmp	r3, r7
    offset_from += len;
 80061fe:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006202:	d206      	bcs.n	8006212 <pbuf_copy+0x7a>
 8006204:	4643      	mov	r3, r8
 8006206:	f240 32cd 	movw	r2, #973	; 0x3cd
 800620a:	4651      	mov	r1, sl
 800620c:	4648      	mov	r0, r9
 800620e:	f004 fab5 	bl	800a77c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006212:	8963      	ldrh	r3, [r4, #10]
 8006214:	455b      	cmp	r3, fp
 8006216:	d206      	bcs.n	8006226 <pbuf_copy+0x8e>
 8006218:	4643      	mov	r3, r8
 800621a:	f240 32ce 	movw	r2, #974	; 0x3ce
 800621e:	491f      	ldr	r1, [pc, #124]	; (800629c <pbuf_copy+0x104>)
 8006220:	4648      	mov	r0, r9
 8006222:	f004 faab 	bl	800a77c <iprintf>
    if (offset_from >= p_from->len) {
 8006226:	8963      	ldrh	r3, [r4, #10]
 8006228:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 800622a:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800622c:	bf9c      	itt	ls
 800622e:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8006230:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8006234:	42bb      	cmp	r3, r7
 8006236:	d11e      	bne.n	8006276 <pbuf_copy+0xde>
      p_to = p_to->next;
 8006238:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800623a:	b9dd      	cbnz	r5, 8006274 <pbuf_copy+0xdc>
 800623c:	b1bc      	cbz	r4, 800626e <pbuf_copy+0xd6>
 800623e:	4b14      	ldr	r3, [pc, #80]	; (8006290 <pbuf_copy+0xf8>)
 8006240:	4917      	ldr	r1, [pc, #92]	; (80062a0 <pbuf_copy+0x108>)
 8006242:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8006246:	e7b5      	b.n	80061b4 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006248:	8962      	ldrh	r2, [r4, #10]
 800624a:	8923      	ldrh	r3, [r4, #8]
 800624c:	429a      	cmp	r2, r3
 800624e:	d114      	bne.n	800627a <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	b193      	cbz	r3, 800627a <pbuf_copy+0xe2>
 8006254:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <pbuf_copy+0xf8>)
 8006256:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800625a:	4912      	ldr	r1, [pc, #72]	; (80062a4 <pbuf_copy+0x10c>)
 800625c:	480e      	ldr	r0, [pc, #56]	; (8006298 <pbuf_copy+0x100>)
 800625e:	f004 fa8d 	bl	800a77c <iprintf>
 8006262:	f06f 0005 	mvn.w	r0, #5
 8006266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800626a:	2c00      	cmp	r4, #0
 800626c:	d1b2      	bne.n	80061d4 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800626e:	4620      	mov	r0, r4
 8006270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8006274:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006276:	2c00      	cmp	r4, #0
 8006278:	d1e6      	bne.n	8006248 <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800627a:	896a      	ldrh	r2, [r5, #10]
 800627c:	892b      	ldrh	r3, [r5, #8]
 800627e:	429a      	cmp	r2, r3
 8006280:	d1f3      	bne.n	800626a <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006282:	682b      	ldr	r3, [r5, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0f0      	beq.n	800626a <pbuf_copy+0xd2>
 8006288:	4b01      	ldr	r3, [pc, #4]	; (8006290 <pbuf_copy+0xf8>)
 800628a:	f240 32e3 	movw	r2, #995	; 0x3e3
 800628e:	e7e4      	b.n	800625a <pbuf_copy+0xc2>
 8006290:	0800c565 	.word	0x0800c565
 8006294:	0800c43e 	.word	0x0800c43e
 8006298:	0800b831 	.word	0x0800b831
 800629c:	0800c485 	.word	0x0800c485
 80062a0:	0800c4a0 	.word	0x0800c4a0
 80062a4:	0800c4ad 	.word	0x0800c4ad
 80062a8:	0800c46e 	.word	0x0800c46e

080062ac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80062ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b0:	460f      	mov	r7, r1
 80062b2:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80062b4:	4606      	mov	r6, r0
 80062b6:	b950      	cbnz	r0, 80062ce <pbuf_copy_partial+0x22>
 80062b8:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <pbuf_copy_partial+0x7c>)
 80062ba:	491c      	ldr	r1, [pc, #112]	; (800632c <pbuf_copy_partial+0x80>)
 80062bc:	481c      	ldr	r0, [pc, #112]	; (8006330 <pbuf_copy_partial+0x84>)
 80062be:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80062c2:	f004 fa5b 	bl	800a77c <iprintf>
 80062c6:	4635      	mov	r5, r6
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 80062c8:	4628      	mov	r0, r5
 80062ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80062ce:	b169      	cbz	r1, 80062ec <pbuf_copy_partial+0x40>
 80062d0:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80062d2:	f1b8 0f00 	cmp.w	r8, #0
 80062d6:	d0f7      	beq.n	80062c8 <pbuf_copy_partial+0x1c>
 80062d8:	2e00      	cmp	r6, #0
 80062da:	d0f5      	beq.n	80062c8 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 80062dc:	b17b      	cbz	r3, 80062fe <pbuf_copy_partial+0x52>
 80062de:	8971      	ldrh	r1, [r6, #10]
 80062e0:	428b      	cmp	r3, r1
 80062e2:	d30c      	bcc.n	80062fe <pbuf_copy_partial+0x52>
      offset -= p->len;
 80062e4:	1a5b      	subs	r3, r3, r1
 80062e6:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80062e8:	6836      	ldr	r6, [r6, #0]
 80062ea:	e7f2      	b.n	80062d2 <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80062ec:	4b0e      	ldr	r3, [pc, #56]	; (8006328 <pbuf_copy_partial+0x7c>)
 80062ee:	4911      	ldr	r1, [pc, #68]	; (8006334 <pbuf_copy_partial+0x88>)
 80062f0:	480f      	ldr	r0, [pc, #60]	; (8006330 <pbuf_copy_partial+0x84>)
 80062f2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80062f6:	f004 fa41 	bl	800a77c <iprintf>
 80062fa:	463d      	mov	r5, r7
 80062fc:	e7e4      	b.n	80062c8 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 80062fe:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8006300:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 8006302:	1ae4      	subs	r4, r4, r3
 8006304:	b2a4      	uxth	r4, r4
 8006306:	4544      	cmp	r4, r8
 8006308:	bf28      	it	cs
 800630a:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800630c:	4622      	mov	r2, r4
 800630e:	4419      	add	r1, r3
 8006310:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 8006312:	4425      	add	r5, r4
      len -= buf_copy_len;
 8006314:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8006318:	f004 f971 	bl	800a5fe <memcpy>
      copied_total += buf_copy_len;
 800631c:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 800631e:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	e7e0      	b.n	80062e8 <pbuf_copy_partial+0x3c>
 8006326:	bf00      	nop
 8006328:	0800c565 	.word	0x0800c565
 800632c:	0800c4d7 	.word	0x0800c4d7
 8006330:	0800b831 	.word	0x0800b831
 8006334:	0800c4f6 	.word	0x0800c4f6

08006338 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006338:	4a11      	ldr	r2, [pc, #68]	; (8006380 <tcp_new_port+0x48>)
 800633a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800633c:	8810      	ldrh	r0, [r2, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800633e:	4e11      	ldr	r6, [pc, #68]	; (8006384 <tcp_new_port+0x4c>)
{
 8006340:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8006344:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006348:	42a8      	cmp	r0, r5
 800634a:	bf1a      	itte	ne
 800634c:	3001      	addne	r0, #1
 800634e:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006350:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 8006354:	2100      	movs	r1, #0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006356:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 800635a:	6824      	ldr	r4, [r4, #0]
 800635c:	b924      	cbnz	r4, 8006368 <tcp_new_port+0x30>
 800635e:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006360:	2904      	cmp	r1, #4
 8006362:	d1f8      	bne.n	8006356 <tcp_new_port+0x1e>
 8006364:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8006366:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 8006368:	8ae7      	ldrh	r7, [r4, #22]
 800636a:	4287      	cmp	r7, r0
 800636c:	d106      	bne.n	800637c <tcp_new_port+0x44>
 800636e:	3b01      	subs	r3, #1
 8006370:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e8      	bne.n	8006348 <tcp_new_port+0x10>
 8006376:	8010      	strh	r0, [r2, #0]
          return 0;
 8006378:	4618      	mov	r0, r3
 800637a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800637c:	68e4      	ldr	r4, [r4, #12]
 800637e:	e7ed      	b.n	800635c <tcp_new_port+0x24>
 8006380:	20001ba4 	.word	0x20001ba4
 8006384:	0800c75c 	.word	0x0800c75c

08006388 <tcp_close_shutdown_fin>:
{
 8006388:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800638a:	4604      	mov	r4, r0
 800638c:	b930      	cbnz	r0, 800639c <tcp_close_shutdown_fin+0x14>
 800638e:	4b13      	ldr	r3, [pc, #76]	; (80063dc <tcp_close_shutdown_fin+0x54>)
 8006390:	4913      	ldr	r1, [pc, #76]	; (80063e0 <tcp_close_shutdown_fin+0x58>)
 8006392:	4814      	ldr	r0, [pc, #80]	; (80063e4 <tcp_close_shutdown_fin+0x5c>)
 8006394:	f240 124d 	movw	r2, #333	; 0x14d
 8006398:	f004 f9f0 	bl	800a77c <iprintf>
  switch (pcb->state) {
 800639c:	7d23      	ldrb	r3, [r4, #20]
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d003      	beq.n	80063aa <tcp_close_shutdown_fin+0x22>
 80063a2:	2b07      	cmp	r3, #7
 80063a4:	d00c      	beq.n	80063c0 <tcp_close_shutdown_fin+0x38>
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d108      	bne.n	80063bc <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 80063aa:	4620      	mov	r0, r4
 80063ac:	f002 fd7e 	bl	8008eac <tcp_send_fin>
    if (err == ERR_OK) {
 80063b0:	b988      	cbnz	r0, 80063d6 <tcp_close_shutdown_fin+0x4e>
      pcb->state = FIN_WAIT_1;
 80063b2:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 80063b4:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80063b6:	4620      	mov	r0, r4
 80063b8:	f002 fdd0 	bl	8008f5c <tcp_output>
 80063bc:	2000      	movs	r0, #0
 80063be:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 80063c0:	4620      	mov	r0, r4
 80063c2:	f002 fd73 	bl	8008eac <tcp_send_fin>
    if (err == ERR_OK) {
 80063c6:	b930      	cbnz	r0, 80063d6 <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 80063c8:	2309      	movs	r3, #9
 80063ca:	e7f3      	b.n	80063b4 <tcp_close_shutdown_fin+0x2c>
    pcb->flags |= TF_CLOSEPEND;
 80063cc:	7ea3      	ldrb	r3, [r4, #26]
 80063ce:	f043 0308 	orr.w	r3, r3, #8
 80063d2:	76a3      	strb	r3, [r4, #26]
 80063d4:	e7f2      	b.n	80063bc <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	d0f8      	beq.n	80063cc <tcp_close_shutdown_fin+0x44>
}
 80063da:	bd10      	pop	{r4, pc}
 80063dc:	0800c6ca 	.word	0x0800c6ca
 80063e0:	0800c6f9 	.word	0x0800c6f9
 80063e4:	0800b831 	.word	0x0800b831

080063e8 <tcp_init>:
{
 80063e8:	4770      	bx	lr
	...

080063ec <tcp_bind>:
{
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 80063ee:	4d1e      	ldr	r5, [pc, #120]	; (8006468 <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80063f0:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 80063f2:	2900      	cmp	r1, #0
 80063f4:	bf18      	it	ne
 80063f6:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80063f8:	b140      	cbz	r0, 800640c <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80063fa:	7d03      	ldrb	r3, [r0, #20]
 80063fc:	b14b      	cbz	r3, 8006412 <tcp_bind+0x26>
 80063fe:	4b1b      	ldr	r3, [pc, #108]	; (800646c <tcp_bind+0x80>)
 8006400:	491b      	ldr	r1, [pc, #108]	; (8006470 <tcp_bind+0x84>)
 8006402:	481c      	ldr	r0, [pc, #112]	; (8006474 <tcp_bind+0x88>)
 8006404:	f44f 7211 	mov.w	r2, #580	; 0x244
 8006408:	f004 f9b8 	bl	800a77c <iprintf>
    return ERR_VAL;
 800640c:	f06f 0005 	mvn.w	r0, #5
}
 8006410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 8006412:	b932      	cbnz	r2, 8006422 <tcp_bind+0x36>
    port = tcp_new_port();
 8006414:	f7ff ff90 	bl	8006338 <tcp_new_port>
    if (port == 0) {
 8006418:	4602      	mov	r2, r0
 800641a:	b950      	cbnz	r0, 8006432 <tcp_bind+0x46>
      return ERR_BUF;
 800641c:	f06f 0001 	mvn.w	r0, #1
 8006420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006422:	4f15      	ldr	r7, [pc, #84]	; (8006478 <tcp_bind+0x8c>)
 8006424:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8006428:	6808      	ldr	r0, [r1, #0]
 800642a:	b970      	cbnz	r0, 800644a <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 800642c:	3301      	adds	r3, #1
 800642e:	2b04      	cmp	r3, #4
 8006430:	d1f8      	bne.n	8006424 <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 8006432:	682b      	ldr	r3, [r5, #0]
 8006434:	b103      	cbz	r3, 8006438 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006436:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006438:	4b10      	ldr	r3, [pc, #64]	; (800647c <tcp_bind+0x90>)
  pcb->local_port = port;
 800643a:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	60e2      	str	r2, [r4, #12]
 8006440:	601c      	str	r4, [r3, #0]
 8006442:	f003 f8ab 	bl	800959c <tcp_timer_needed>
  return ERR_OK;
 8006446:	2000      	movs	r0, #0
 8006448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 800644a:	8ac1      	ldrh	r1, [r0, #22]
 800644c:	4291      	cmp	r1, r2
 800644e:	d105      	bne.n	800645c <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006450:	6806      	ldr	r6, [r0, #0]
 8006452:	b12e      	cbz	r6, 8006460 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 8006454:	6829      	ldr	r1, [r5, #0]
 8006456:	b119      	cbz	r1, 8006460 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006458:	428e      	cmp	r6, r1
 800645a:	d001      	beq.n	8006460 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800645c:	68c0      	ldr	r0, [r0, #12]
 800645e:	e7e4      	b.n	800642a <tcp_bind+0x3e>
              return ERR_USE;
 8006460:	f06f 0007 	mvn.w	r0, #7
 8006464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006466:	bf00      	nop
 8006468:	0800be1c 	.word	0x0800be1c
 800646c:	0800c6ca 	.word	0x0800c6ca
 8006470:	0800c689 	.word	0x0800c689
 8006474:	0800b831 	.word	0x0800b831
 8006478:	0800c75c 	.word	0x0800c75c
 800647c:	20005730 	.word	0x20005730

08006480 <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006480:	7d03      	ldrb	r3, [r0, #20]
{
 8006482:	b570      	push	{r4, r5, r6, lr}
 8006484:	4605      	mov	r5, r0
 8006486:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006488:	b16b      	cbz	r3, 80064a6 <tcp_listen_with_backlog_and_err+0x26>
 800648a:	4b23      	ldr	r3, [pc, #140]	; (8006518 <tcp_listen_with_backlog_and_err+0x98>)
 800648c:	4923      	ldr	r1, [pc, #140]	; (800651c <tcp_listen_with_backlog_and_err+0x9c>)
 800648e:	4824      	ldr	r0, [pc, #144]	; (8006520 <tcp_listen_with_backlog_and_err+0xa0>)
 8006490:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8006494:	f004 f972 	bl	800a77c <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8006498:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800649a:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 800649e:	b106      	cbz	r6, 80064a2 <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 80064a0:	7033      	strb	r3, [r6, #0]
}
 80064a2:	4620      	mov	r0, r4
 80064a4:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80064a6:	2002      	movs	r0, #2
 80064a8:	f7ff faee 	bl	8005a88 <memp_malloc>
  if (lpcb == NULL) {
 80064ac:	4604      	mov	r4, r0
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d02f      	beq.n	8006512 <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
 80064b2:	692b      	ldr	r3, [r5, #16]
 80064b4:	6103      	str	r3, [r0, #16]
  lpcb->state = LISTEN;
 80064b6:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 80064b8:	8aeb      	ldrh	r3, [r5, #22]
 80064ba:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 80064bc:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 80064be:	7d6a      	ldrb	r2, [r5, #21]
 80064c0:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 80064c2:	7a2a      	ldrb	r2, [r5, #8]
 80064c4:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 80064c6:	7aaa      	ldrb	r2, [r5, #10]
 80064c8:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 80064ca:	7a6a      	ldrb	r2, [r5, #9]
 80064cc:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80064ce:	682a      	ldr	r2, [r5, #0]
 80064d0:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 80064d2:	b13b      	cbz	r3, 80064e4 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80064d4:	4a13      	ldr	r2, [pc, #76]	; (8006524 <tcp_listen_with_backlog_and_err+0xa4>)
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	429d      	cmp	r5, r3
 80064da:	d112      	bne.n	8006502 <tcp_listen_with_backlog_and_err+0x82>
 80064dc:	68eb      	ldr	r3, [r5, #12]
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	2300      	movs	r3, #0
 80064e2:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 80064e4:	4629      	mov	r1, r5
 80064e6:	2001      	movs	r0, #1
 80064e8:	f7ff faea 	bl	8005ac0 <memp_free>
  lpcb->accept = tcp_accept_null;
 80064ec:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <tcp_listen_with_backlog_and_err+0xa8>)
 80064ee:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80064f0:	4b0e      	ldr	r3, [pc, #56]	; (800652c <tcp_listen_with_backlog_and_err+0xac>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	60e2      	str	r2, [r4, #12]
 80064f6:	601c      	str	r4, [r3, #0]
 80064f8:	f003 f850 	bl	800959c <tcp_timer_needed>
  res = ERR_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	e7ce      	b.n	800649e <tcp_listen_with_backlog_and_err+0x1e>
 8006500:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0ec      	beq.n	80064e0 <tcp_listen_with_backlog_and_err+0x60>
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	4295      	cmp	r5, r2
 800650a:	d1f9      	bne.n	8006500 <tcp_listen_with_backlog_and_err+0x80>
 800650c:	68ea      	ldr	r2, [r5, #12]
 800650e:	60da      	str	r2, [r3, #12]
 8006510:	e7e6      	b.n	80064e0 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 8006512:	f04f 33ff 	mov.w	r3, #4294967295
 8006516:	e7c2      	b.n	800649e <tcp_listen_with_backlog_and_err+0x1e>
 8006518:	0800c6ca 	.word	0x0800c6ca
 800651c:	0800c739 	.word	0x0800c739
 8006520:	0800b831 	.word	0x0800b831
 8006524:	20005730 	.word	0x20005730
 8006528:	08006f5f 	.word	0x08006f5f
 800652c:	2000572c 	.word	0x2000572c

08006530 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006530:	2200      	movs	r2, #0
 8006532:	f7ff bfa5 	b.w	8006480 <tcp_listen_with_backlog_and_err>
	...

08006538 <tcp_update_rcv_ann_wnd>:
{
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800653c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800653e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006540:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006542:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006544:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006546:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800654a:	4428      	add	r0, r5
 800654c:	bf94      	ite	ls
 800654e:	1a82      	subls	r2, r0, r2
 8006550:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 8006554:	2a00      	cmp	r2, #0
 8006556:	db01      	blt.n	800655c <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006558:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800655a:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800655c:	1aea      	subs	r2, r5, r3
 800655e:	2a00      	cmp	r2, #0
 8006560:	dd02      	ble.n	8006568 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 8006562:	2000      	movs	r0, #0
 8006564:	8560      	strh	r0, [r4, #42]	; 0x2a
 8006566:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006568:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800656a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800656e:	d306      	bcc.n	800657e <tcp_update_rcv_ann_wnd+0x46>
 8006570:	4b04      	ldr	r3, [pc, #16]	; (8006584 <tcp_update_rcv_ann_wnd+0x4c>)
 8006572:	4905      	ldr	r1, [pc, #20]	; (8006588 <tcp_update_rcv_ann_wnd+0x50>)
 8006574:	4805      	ldr	r0, [pc, #20]	; (800658c <tcp_update_rcv_ann_wnd+0x54>)
 8006576:	f44f 7242 	mov.w	r2, #776	; 0x308
 800657a:	f004 f8ff 	bl	800a77c <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800657e:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8006580:	2000      	movs	r0, #0
}
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	0800c6ca 	.word	0x0800c6ca
 8006588:	0800c9c0 	.word	0x0800c9c0
 800658c:	0800b831 	.word	0x0800b831

08006590 <tcp_recved>:
{
 8006590:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006592:	7d03      	ldrb	r3, [r0, #20]
 8006594:	2b01      	cmp	r3, #1
{
 8006596:	4604      	mov	r4, r0
 8006598:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800659a:	d106      	bne.n	80065aa <tcp_recved+0x1a>
 800659c:	4b17      	ldr	r3, [pc, #92]	; (80065fc <tcp_recved+0x6c>)
 800659e:	4918      	ldr	r1, [pc, #96]	; (8006600 <tcp_recved+0x70>)
 80065a0:	4818      	ldr	r0, [pc, #96]	; (8006604 <tcp_recved+0x74>)
 80065a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80065a6:	f004 f8e9 	bl	800a77c <iprintf>
  pcb->rcv_wnd += len;
 80065aa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80065ac:	4429      	add	r1, r5
 80065ae:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80065b0:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 80065b4:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80065b6:	d911      	bls.n	80065dc <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80065b8:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80065bc:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80065be:	4620      	mov	r0, r4
 80065c0:	f7ff ffba 	bl	8006538 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80065c4:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80065c8:	db17      	blt.n	80065fa <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 80065ca:	7ea3      	ldrb	r3, [r4, #26]
 80065cc:	f043 0302 	orr.w	r3, r3, #2
 80065d0:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80065d2:	4620      	mov	r0, r4
}
 80065d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 80065d8:	f002 bcc0 	b.w	8008f5c <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 80065dc:	2900      	cmp	r1, #0
 80065de:	d1ee      	bne.n	80065be <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80065e0:	7d23      	ldrb	r3, [r4, #20]
 80065e2:	2b07      	cmp	r3, #7
 80065e4:	d0e8      	beq.n	80065b8 <tcp_recved+0x28>
 80065e6:	2b09      	cmp	r3, #9
 80065e8:	d0e6      	beq.n	80065b8 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80065ea:	4b04      	ldr	r3, [pc, #16]	; (80065fc <tcp_recved+0x6c>)
 80065ec:	4906      	ldr	r1, [pc, #24]	; (8006608 <tcp_recved+0x78>)
 80065ee:	4805      	ldr	r0, [pc, #20]	; (8006604 <tcp_recved+0x74>)
 80065f0:	f240 322d 	movw	r2, #813	; 0x32d
 80065f4:	f004 f8c2 	bl	800a77c <iprintf>
 80065f8:	e7e1      	b.n	80065be <tcp_recved+0x2e>
 80065fa:	bd38      	pop	{r3, r4, r5, pc}
 80065fc:	0800c6ca 	.word	0x0800c6ca
 8006600:	0800c800 	.word	0x0800c800
 8006604:	0800b831 	.word	0x0800b831
 8006608:	0800c826 	.word	0x0800c826

0800660c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800660c:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800660e:	4604      	mov	r4, r0
 8006610:	b148      	cbz	r0, 8006626 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8006612:	6840      	ldr	r0, [r0, #4]
 8006614:	b108      	cbz	r0, 800661a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8006616:	f7ff fbb7 	bl	8005d88 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800661a:	4621      	mov	r1, r4
 800661c:	2003      	movs	r0, #3
  }
}
 800661e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8006622:	f7ff ba4d 	b.w	8005ac0 <memp_free>
 8006626:	bd10      	pop	{r4, pc}

08006628 <tcp_segs_free>:
{
 8006628:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800662a:	b900      	cbnz	r0, 800662e <tcp_segs_free+0x6>
}
 800662c:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800662e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8006630:	f7ff ffec 	bl	800660c <tcp_seg_free>
    seg = next;
 8006634:	4620      	mov	r0, r4
 8006636:	e7f8      	b.n	800662a <tcp_segs_free+0x2>

08006638 <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
 8006638:	7541      	strb	r1, [r0, #21]
 800663a:	4770      	bx	lr

0800663c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006640:	2003      	movs	r0, #3
 8006642:	f7ff fa21 	bl	8005a88 <memp_malloc>
  if (cseg == NULL) {
 8006646:	4605      	mov	r5, r0
 8006648:	b160      	cbz	r0, 8006664 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800664a:	4620      	mov	r0, r4
 800664c:	462b      	mov	r3, r5
 800664e:	f104 0210 	add.w	r2, r4, #16
 8006652:	f850 1b04 	ldr.w	r1, [r0], #4
 8006656:	f843 1b04 	str.w	r1, [r3], #4
 800665a:	4290      	cmp	r0, r2
 800665c:	d1f9      	bne.n	8006652 <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 800665e:	6868      	ldr	r0, [r5, #4]
 8006660:	f7ff fd4c 	bl	80060fc <pbuf_ref>
  return cseg;
}
 8006664:	4628      	mov	r0, r5
 8006666:	bd38      	pop	{r3, r4, r5, pc}

08006668 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006668:	b100      	cbz	r0, 800666c <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800666a:	6101      	str	r1, [r0, #16]
 800666c:	4770      	bx	lr
	...

08006670 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8006674:	4604      	mov	r4, r0
 8006676:	b158      	cbz	r0, 8006690 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006678:	7d03      	ldrb	r3, [r0, #20]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d106      	bne.n	800668c <tcp_recv+0x1c>
 800667e:	4b05      	ldr	r3, [pc, #20]	; (8006694 <tcp_recv+0x24>)
 8006680:	4905      	ldr	r1, [pc, #20]	; (8006698 <tcp_recv+0x28>)
 8006682:	4806      	ldr	r0, [pc, #24]	; (800669c <tcp_recv+0x2c>)
 8006684:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8006688:	f004 f878 	bl	800a77c <iprintf>
    pcb->recv = recv;
 800668c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8006690:	bd38      	pop	{r3, r4, r5, pc}
 8006692:	bf00      	nop
 8006694:	0800c6ca 	.word	0x0800c6ca
 8006698:	0800c7d9 	.word	0x0800c7d9
 800669c:	0800b831 	.word	0x0800b831

080066a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	460d      	mov	r5, r1
  if (pcb != NULL) {
 80066a4:	4604      	mov	r4, r0
 80066a6:	b150      	cbz	r0, 80066be <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80066a8:	7d03      	ldrb	r3, [r0, #20]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d106      	bne.n	80066bc <tcp_sent+0x1c>
 80066ae:	4b04      	ldr	r3, [pc, #16]	; (80066c0 <tcp_sent+0x20>)
 80066b0:	4904      	ldr	r1, [pc, #16]	; (80066c4 <tcp_sent+0x24>)
 80066b2:	4805      	ldr	r0, [pc, #20]	; (80066c8 <tcp_sent+0x28>)
 80066b4:	f240 62cc 	movw	r2, #1740	; 0x6cc
 80066b8:	f004 f860 	bl	800a77c <iprintf>
    pcb->sent = sent;
 80066bc:	67e5      	str	r5, [r4, #124]	; 0x7c
 80066be:	bd38      	pop	{r3, r4, r5, pc}
 80066c0:	0800c6ca 	.word	0x0800c6ca
 80066c4:	0800c847 	.word	0x0800c847
 80066c8:	0800b831 	.word	0x0800b831

080066cc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	460d      	mov	r5, r1
  if (pcb != NULL) {
 80066d0:	4604      	mov	r4, r0
 80066d2:	b158      	cbz	r0, 80066ec <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80066d4:	7d03      	ldrb	r3, [r0, #20]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d106      	bne.n	80066e8 <tcp_err+0x1c>
 80066da:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <tcp_err+0x24>)
 80066dc:	4905      	ldr	r1, [pc, #20]	; (80066f4 <tcp_err+0x28>)
 80066de:	4806      	ldr	r0, [pc, #24]	; (80066f8 <tcp_err+0x2c>)
 80066e0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80066e4:	f004 f84a 	bl	800a77c <iprintf>
    pcb->errf = err;
 80066e8:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 80066ec:	bd38      	pop	{r3, r4, r5, pc}
 80066ee:	bf00      	nop
 80066f0:	0800c6ca 	.word	0x0800c6ca
 80066f4:	0800c705 	.word	0x0800c705
 80066f8:	0800b831 	.word	0x0800b831

080066fc <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80066fc:	b118      	cbz	r0, 8006706 <tcp_accept+0xa>
 80066fe:	7d03      	ldrb	r3, [r0, #20]
 8006700:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8006702:	bf08      	it	eq
 8006704:	6181      	streq	r1, [r0, #24]
 8006706:	4770      	bx	lr

08006708 <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006708:	7d03      	ldrb	r3, [r0, #20]
 800670a:	2b01      	cmp	r3, #1
{
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	4604      	mov	r4, r0
 8006710:	460e      	mov	r6, r1
 8006712:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006714:	d106      	bne.n	8006724 <tcp_poll+0x1c>
 8006716:	4b05      	ldr	r3, [pc, #20]	; (800672c <tcp_poll+0x24>)
 8006718:	4905      	ldr	r1, [pc, #20]	; (8006730 <tcp_poll+0x28>)
 800671a:	4806      	ldr	r0, [pc, #24]	; (8006734 <tcp_poll+0x2c>)
 800671c:	f240 7203 	movw	r2, #1795	; 0x703
 8006720:	f004 f82c 	bl	800a77c <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006724:	7725      	strb	r5, [r4, #28]
  pcb->poll = poll;
 8006726:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	0800c6ca 	.word	0x0800c6ca
 8006730:	0800c7bb 	.word	0x0800c7bb
 8006734:	0800b831 	.word	0x0800b831

08006738 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006738:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 800673a:	7d03      	ldrb	r3, [r0, #20]
 800673c:	2b01      	cmp	r3, #1
{
 800673e:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8006740:	d919      	bls.n	8006776 <tcp_pcb_purge+0x3e>
 8006742:	2b0a      	cmp	r3, #10
 8006744:	d017      	beq.n	8006776 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006746:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8006748:	b118      	cbz	r0, 8006752 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800674a:	f7ff fb1d 	bl	8005d88 <pbuf_free>
      pcb->refused_data = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006752:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006754:	f7ff ff68 	bl	8006628 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006758:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800675a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800675e:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006760:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 8006762:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8006764:	f7ff ff60 	bl	8006628 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006768:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800676a:	f7ff ff5d 	bl	8006628 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800676e:	66a5      	str	r5, [r4, #104]	; 0x68
 8006770:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006772:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8006776:	bd38      	pop	{r3, r4, r5, pc}

08006778 <tcp_slowtmr>:
{
 8006778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800677c:	4eb0      	ldr	r6, [pc, #704]	; (8006a40 <tcp_slowtmr+0x2c8>)
      tcp_active_pcbs_changed = 0;
 800677e:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8006a74 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 8006782:	6833      	ldr	r3, [r6, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8006788:	4bae      	ldr	r3, [pc, #696]	; (8006a44 <tcp_slowtmr+0x2cc>)
 800678a:	781a      	ldrb	r2, [r3, #0]
{
 800678c:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 800678e:	3201      	adds	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 8006794:	4fac      	ldr	r7, [pc, #688]	; (8006a48 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006796:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8006a78 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 800679a:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 800679c:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 80067a0:	b96c      	cbnz	r4, 80067be <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 80067a2:	4faa      	ldr	r7, [pc, #680]	; (8006a4c <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80067a4:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8006a78 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 80067a8:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80067aa:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8006a7c <tcp_slowtmr+0x304>
 80067ae:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8006a54 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 80067b2:	2d00      	cmp	r5, #0
 80067b4:	f040 8185 	bne.w	8006ac2 <tcp_slowtmr+0x34a>
}
 80067b8:	b005      	add	sp, #20
 80067ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80067be:	7d23      	ldrb	r3, [r4, #20]
 80067c0:	b933      	cbnz	r3, 80067d0 <tcp_slowtmr+0x58>
 80067c2:	464b      	mov	r3, r9
 80067c4:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80067c8:	49a1      	ldr	r1, [pc, #644]	; (8006a50 <tcp_slowtmr+0x2d8>)
 80067ca:	48a2      	ldr	r0, [pc, #648]	; (8006a54 <tcp_slowtmr+0x2dc>)
 80067cc:	f003 ffd6 	bl	800a77c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80067d0:	7d23      	ldrb	r3, [r4, #20]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d106      	bne.n	80067e4 <tcp_slowtmr+0x6c>
 80067d6:	464b      	mov	r3, r9
 80067d8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80067dc:	499e      	ldr	r1, [pc, #632]	; (8006a58 <tcp_slowtmr+0x2e0>)
 80067de:	489d      	ldr	r0, [pc, #628]	; (8006a54 <tcp_slowtmr+0x2dc>)
 80067e0:	f003 ffcc 	bl	800a77c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80067e4:	7d23      	ldrb	r3, [r4, #20]
 80067e6:	2b0a      	cmp	r3, #10
 80067e8:	d106      	bne.n	80067f8 <tcp_slowtmr+0x80>
 80067ea:	464b      	mov	r3, r9
 80067ec:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80067f0:	499a      	ldr	r1, [pc, #616]	; (8006a5c <tcp_slowtmr+0x2e4>)
 80067f2:	4898      	ldr	r0, [pc, #608]	; (8006a54 <tcp_slowtmr+0x2dc>)
 80067f4:	f003 ffc2 	bl	800a77c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80067f8:	9b02      	ldr	r3, [sp, #8]
 80067fa:	7f62      	ldrb	r2, [r4, #29]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d104      	bne.n	800680c <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8006802:	68e5      	ldr	r5, [r4, #12]
 8006804:	4644      	mov	r4, r8
      continue;
 8006806:	46a0      	mov	r8, r4
 8006808:	462c      	mov	r4, r5
 800680a:	e7c9      	b.n	80067a0 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800680c:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800680e:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006810:	2902      	cmp	r1, #2
 8006812:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8006816:	d102      	bne.n	800681e <tcp_slowtmr+0xa6>
 8006818:	2a05      	cmp	r2, #5
 800681a:	f200 80e6 	bhi.w	80069ea <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800681e:	2a0b      	cmp	r2, #11
 8006820:	f200 80e3 	bhi.w	80069ea <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 8006824:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8006828:	f1bb 0f00 	cmp.w	fp, #0
 800682c:	f000 80a6 	beq.w	800697c <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006830:	488b      	ldr	r0, [pc, #556]	; (8006a60 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 8006832:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006836:	4483      	add	fp, r0
 8006838:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 800683c:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 800683e:	bf84      	itt	hi
 8006840:	3301      	addhi	r3, #1
 8006842:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8006846:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800684a:	4293      	cmp	r3, r2
 800684c:	f080 8085 	bcs.w	800695a <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 8006850:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8006854:	7d23      	ldrb	r3, [r4, #20]
 8006856:	2b06      	cmp	r3, #6
 8006858:	d10b      	bne.n	8006872 <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 800685a:	7ea2      	ldrb	r2, [r4, #26]
 800685c:	06d2      	lsls	r2, r2, #27
 800685e:	d508      	bpl.n	8006872 <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006860:	6832      	ldr	r2, [r6, #0]
 8006862:	6a21      	ldr	r1, [r4, #32]
 8006864:	1a52      	subs	r2, r2, r1
 8006866:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8006868:	bf84      	itt	hi
 800686a:	f10b 0b01 	addhi.w	fp, fp, #1
 800686e:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006872:	7a25      	ldrb	r5, [r4, #8]
 8006874:	f015 0508 	ands.w	r5, r5, #8
 8006878:	d019      	beq.n	80068ae <tcp_slowtmr+0x136>
 800687a:	2b04      	cmp	r3, #4
 800687c:	d002      	beq.n	8006884 <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 800687e:	2b07      	cmp	r3, #7
 8006880:	f040 80c8 	bne.w	8006a14 <tcp_slowtmr+0x29c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006884:	6831      	ldr	r1, [r6, #0]
 8006886:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006888:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800688c:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800688e:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 8006892:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 8006896:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800689a:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800689e:	4291      	cmp	r1, r2
 80068a0:	f240 80a6 	bls.w	80069f0 <tcp_slowtmr+0x278>
        ++pcb_remove;
 80068a4:	f10b 0b01 	add.w	fp, fp, #1
 80068a8:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 80068ac:	2501      	movs	r5, #1
    if (pcb->ooseq != NULL &&
 80068ae:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80068b0:	b168      	cbz	r0, 80068ce <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80068b2:	6833      	ldr	r3, [r6, #0]
 80068b4:	6a22      	ldr	r2, [r4, #32]
 80068b6:	1a9a      	subs	r2, r3, r2
 80068b8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80068bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 80068c0:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80068c4:	d303      	bcc.n	80068ce <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 80068c6:	f7ff feaf 	bl	8006628 <tcp_segs_free>
      pcb->ooseq = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 80068ce:	7d23      	ldrb	r3, [r4, #20]
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	f040 80a1 	bne.w	8006a18 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068d6:	6833      	ldr	r3, [r6, #0]
 80068d8:	6a22      	ldr	r2, [r4, #32]
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80068de:	d803      	bhi.n	80068e8 <tcp_slowtmr+0x170>
    if (pcb_remove) {
 80068e0:	f1bb 0f00 	cmp.w	fp, #0
 80068e4:	f000 80cc 	beq.w	8006a80 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 80068e8:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80068ea:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 80068ee:	f7ff ff23 	bl	8006738 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80068f2:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 80068f4:	f1b8 0f00 	cmp.w	r8, #0
 80068f8:	f000 8096 	beq.w	8006a28 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80068fc:	429c      	cmp	r4, r3
 80068fe:	d106      	bne.n	800690e <tcp_slowtmr+0x196>
 8006900:	464b      	mov	r3, r9
 8006902:	f240 4289 	movw	r2, #1161	; 0x489
 8006906:	4957      	ldr	r1, [pc, #348]	; (8006a64 <tcp_slowtmr+0x2ec>)
 8006908:	4852      	ldr	r0, [pc, #328]	; (8006a54 <tcp_slowtmr+0x2dc>)
 800690a:	f003 ff37 	bl	800a77c <iprintf>
        prev->next = pcb->next;
 800690e:	68e3      	ldr	r3, [r4, #12]
 8006910:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8006914:	b14d      	cbz	r5, 800692a <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006916:	8b23      	ldrh	r3, [r4, #24]
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	8ae3      	ldrh	r3, [r4, #22]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	4622      	mov	r2, r4
 8006920:	1d23      	adds	r3, r4, #4
 8006922:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006924:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006926:	f002 fc97 	bl	8009258 <tcp_rst>
      err_arg = pcb->callback_arg;
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800692e:	4621      	mov	r1, r4
 8006930:	2001      	movs	r0, #1
      pcb = pcb->next;
 8006932:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006934:	f7ff f8c4 	bl	8005ac0 <memp_free>
      tcp_active_pcbs_changed = 0;
 8006938:	2200      	movs	r2, #0
 800693a:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800693e:	f1bb 0f00 	cmp.w	fp, #0
 8006942:	d004      	beq.n	800694e <tcp_slowtmr+0x1d6>
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	f06f 010c 	mvn.w	r1, #12
 800694a:	4618      	mov	r0, r3
 800694c:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800694e:	f89a 3000 	ldrb.w	r3, [sl]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f43f af56 	beq.w	8006804 <tcp_slowtmr+0x8c>
 8006958:	e71c      	b.n	8006794 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800695a:	4620      	mov	r0, r4
 800695c:	f002 fd6c 	bl	8009438 <tcp_zero_window_probe>
 8006960:	2800      	cmp	r0, #0
 8006962:	f47f af75 	bne.w	8006850 <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006966:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 800696a:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800696e:	2b06      	cmp	r3, #6
 8006970:	f63f af6e 	bhi.w	8006850 <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 8006974:	3301      	adds	r3, #1
 8006976:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800697a:	e769      	b.n	8006850 <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 800697c:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8006980:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 8006982:	bfa4      	itt	ge
 8006984:	3301      	addge	r3, #1
 8006986:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8006988:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800698a:	2b00      	cmp	r3, #0
 800698c:	f43f af60 	beq.w	8006850 <tcp_slowtmr+0xd8>
 8006990:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8006994:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8006998:	4298      	cmp	r0, r3
 800699a:	f6ff af59 	blt.w	8006850 <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 800699e:	2902      	cmp	r1, #2
 80069a0:	d00a      	beq.n	80069b8 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80069a2:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 80069a6:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80069aa:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80069ae:	492e      	ldr	r1, [pc, #184]	; (8006a68 <tcp_slowtmr+0x2f0>)
 80069b0:	5c8a      	ldrb	r2, [r1, r2]
 80069b2:	4093      	lsls	r3, r2
 80069b4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 80069b8:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80069ba:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 80069be:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80069c0:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80069c4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 80069c6:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 80069ca:	4293      	cmp	r3, r2
 80069cc:	bf28      	it	cs
 80069ce:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80069d0:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 80069d2:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80069d4:	b292      	uxth	r2, r2
 80069d6:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 80069d8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 80069dc:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 80069de:	bf38      	it	cc
 80069e0:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 80069e4:	f002 fc92 	bl	800930c <tcp_rexmit_rto>
 80069e8:	e734      	b.n	8006854 <tcp_slowtmr+0xdc>
      ++pcb_remove;
 80069ea:	f04f 0b01 	mov.w	fp, #1
 80069ee:	e731      	b.n	8006854 <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80069f0:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 80069f4:	4a1d      	ldr	r2, [pc, #116]	; (8006a6c <tcp_slowtmr+0x2f4>)
 80069f6:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 80069fa:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80069fe:	4299      	cmp	r1, r3
 8006a00:	d908      	bls.n	8006a14 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 8006a02:	4620      	mov	r0, r4
 8006a04:	f002 fcee 	bl	80093e4 <tcp_keepalive>
        if (err == ERR_OK) {
 8006a08:	b920      	cbnz	r0, 8006a14 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 8006a0a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8006a0e:	3301      	adds	r3, #1
 8006a10:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8006a14:	2500      	movs	r5, #0
 8006a16:	e74a      	b.n	80068ae <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 8006a18:	2b09      	cmp	r3, #9
 8006a1a:	f47f af61 	bne.w	80068e0 <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006a1e:	6833      	ldr	r3, [r6, #0]
 8006a20:	6a22      	ldr	r2, [r4, #32]
 8006a22:	1a9b      	subs	r3, r3, r2
 8006a24:	2bf0      	cmp	r3, #240	; 0xf0
 8006a26:	e75a      	b.n	80068de <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006a28:	429c      	cmp	r4, r3
 8006a2a:	d006      	beq.n	8006a3a <tcp_slowtmr+0x2c2>
 8006a2c:	464b      	mov	r3, r9
 8006a2e:	f240 428d 	movw	r2, #1165	; 0x48d
 8006a32:	490f      	ldr	r1, [pc, #60]	; (8006a70 <tcp_slowtmr+0x2f8>)
 8006a34:	4807      	ldr	r0, [pc, #28]	; (8006a54 <tcp_slowtmr+0x2dc>)
 8006a36:	f003 fea1 	bl	800a77c <iprintf>
        tcp_active_pcbs = pcb->next;
 8006a3a:	68e3      	ldr	r3, [r4, #12]
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	e769      	b.n	8006914 <tcp_slowtmr+0x19c>
 8006a40:	20005728 	.word	0x20005728
 8006a44:	2000219e 	.word	0x2000219e
 8006a48:	20005724 	.word	0x20005724
 8006a4c:	20005734 	.word	0x20005734
 8006a50:	0800c86e 	.word	0x0800c86e
 8006a54:	0800b831 	.word	0x0800b831
 8006a58:	0800c898 	.word	0x0800c898
 8006a5c:	0800c8c2 	.word	0x0800c8c2
 8006a60:	0800c7b4 	.word	0x0800c7b4
 8006a64:	0800c8ef 	.word	0x0800c8ef
 8006a68:	0800c67c 	.word	0x0800c67c
 8006a6c:	000124f8 	.word	0x000124f8
 8006a70:	0800c91a 	.word	0x0800c91a
 8006a74:	20005720 	.word	0x20005720
 8006a78:	0800c6ca 	.word	0x0800c6ca
 8006a7c:	0800c944 	.word	0x0800c944
      ++prev->polltmr;
 8006a80:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006a82:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 8006a84:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8006a86:	3301      	adds	r3, #1
 8006a88:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8006a8a:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8006a8c:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006a8e:	f63f aeba 	bhi.w	8006806 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8006a92:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8006a96:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8006a9a:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8006a9e:	b173      	cbz	r3, 8006abe <tcp_slowtmr+0x346>
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	6920      	ldr	r0, [r4, #16]
 8006aa4:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8006aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f47f ae72 	bne.w	8006794 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	f47f aea8 	bne.w	8006806 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f002 fa50 	bl	8008f5c <tcp_output>
 8006abc:	e6a3      	b.n	8006806 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8006abe:	4658      	mov	r0, fp
 8006ac0:	e7f1      	b.n	8006aa6 <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006ac2:	7d2b      	ldrb	r3, [r5, #20]
 8006ac4:	2b0a      	cmp	r3, #10
 8006ac6:	d006      	beq.n	8006ad6 <tcp_slowtmr+0x35e>
 8006ac8:	4643      	mov	r3, r8
 8006aca:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006ace:	4651      	mov	r1, sl
 8006ad0:	4648      	mov	r0, r9
 8006ad2:	f003 fe53 	bl	800a77c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006ad6:	6833      	ldr	r3, [r6, #0]
 8006ad8:	6a2a      	ldr	r2, [r5, #32]
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	2bf0      	cmp	r3, #240	; 0xf0
 8006ade:	d816      	bhi.n	8006b0e <tcp_slowtmr+0x396>
      pcb = pcb->next;
 8006ae0:	462c      	mov	r4, r5
 8006ae2:	68ed      	ldr	r5, [r5, #12]
 8006ae4:	e665      	b.n	80067b2 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	429d      	cmp	r5, r3
 8006aea:	d106      	bne.n	8006afa <tcp_slowtmr+0x382>
 8006aec:	4643      	mov	r3, r8
 8006aee:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006af2:	4910      	ldr	r1, [pc, #64]	; (8006b34 <tcp_slowtmr+0x3bc>)
 8006af4:	4648      	mov	r0, r9
 8006af6:	f003 fe41 	bl	800a77c <iprintf>
        prev->next = pcb->next;
 8006afa:	68eb      	ldr	r3, [r5, #12]
 8006afc:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8006afe:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006b02:	4629      	mov	r1, r5
 8006b04:	2001      	movs	r0, #1
 8006b06:	f7fe ffdb 	bl	8005ac0 <memp_free>
      pcb = pcb->next;
 8006b0a:	465d      	mov	r5, fp
 8006b0c:	e651      	b.n	80067b2 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f7ff fe12 	bl	8006738 <tcp_pcb_purge>
      if (prev != NULL) {
 8006b14:	2c00      	cmp	r4, #0
 8006b16:	d1e6      	bne.n	8006ae6 <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	429d      	cmp	r5, r3
 8006b1c:	d006      	beq.n	8006b2c <tcp_slowtmr+0x3b4>
 8006b1e:	4643      	mov	r3, r8
 8006b20:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006b24:	4904      	ldr	r1, [pc, #16]	; (8006b38 <tcp_slowtmr+0x3c0>)
 8006b26:	4648      	mov	r0, r9
 8006b28:	f003 fe28 	bl	800a77c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006b2c:	68eb      	ldr	r3, [r5, #12]
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	e7e5      	b.n	8006afe <tcp_slowtmr+0x386>
 8006b32:	bf00      	nop
 8006b34:	0800c973 	.word	0x0800c973
 8006b38:	0800c99a 	.word	0x0800c99a

08006b3c <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8006b3c:	6803      	ldr	r3, [r0, #0]
 8006b3e:	428b      	cmp	r3, r1
{
 8006b40:	b510      	push	{r4, lr}
 8006b42:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8006b44:	d137      	bne.n	8006bb6 <tcp_pcb_remove+0x7a>
 8006b46:	68cb      	ldr	r3, [r1, #12]
 8006b48:	6003      	str	r3, [r0, #0]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f7ff fdf2 	bl	8006738 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006b54:	7d23      	ldrb	r3, [r4, #20]
 8006b56:	2b0a      	cmp	r3, #10
 8006b58:	d00a      	beq.n	8006b70 <tcp_pcb_remove+0x34>
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d008      	beq.n	8006b70 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8006b5e:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8006b60:	07da      	lsls	r2, r3, #31
 8006b62:	d505      	bpl.n	8006b70 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8006b64:	f043 0302 	orr.w	r3, r3, #2
 8006b68:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f002 f9f6 	bl	8008f5c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006b70:	7d23      	ldrb	r3, [r4, #20]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d01a      	beq.n	8006bac <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006b76:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006b78:	b133      	cbz	r3, 8006b88 <tcp_pcb_remove+0x4c>
 8006b7a:	4b13      	ldr	r3, [pc, #76]	; (8006bc8 <tcp_pcb_remove+0x8c>)
 8006b7c:	4913      	ldr	r1, [pc, #76]	; (8006bcc <tcp_pcb_remove+0x90>)
 8006b7e:	4814      	ldr	r0, [pc, #80]	; (8006bd0 <tcp_pcb_remove+0x94>)
 8006b80:	f240 7253 	movw	r2, #1875	; 0x753
 8006b84:	f003 fdfa 	bl	800a77c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006b88:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006b8a:	b133      	cbz	r3, 8006b9a <tcp_pcb_remove+0x5e>
 8006b8c:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <tcp_pcb_remove+0x8c>)
 8006b8e:	4911      	ldr	r1, [pc, #68]	; (8006bd4 <tcp_pcb_remove+0x98>)
 8006b90:	480f      	ldr	r0, [pc, #60]	; (8006bd0 <tcp_pcb_remove+0x94>)
 8006b92:	f240 7254 	movw	r2, #1876	; 0x754
 8006b96:	f003 fdf1 	bl	800a77c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006b9a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006b9c:	b133      	cbz	r3, 8006bac <tcp_pcb_remove+0x70>
 8006b9e:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <tcp_pcb_remove+0x8c>)
 8006ba0:	490d      	ldr	r1, [pc, #52]	; (8006bd8 <tcp_pcb_remove+0x9c>)
 8006ba2:	480b      	ldr	r0, [pc, #44]	; (8006bd0 <tcp_pcb_remove+0x94>)
 8006ba4:	f240 7256 	movw	r2, #1878	; 0x756
 8006ba8:	f003 fde8 	bl	800a77c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006bac:	2300      	movs	r3, #0
 8006bae:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006bb0:	82e3      	strh	r3, [r4, #22]
 8006bb2:	bd10      	pop	{r4, pc}
 8006bb4:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0c7      	beq.n	8006b4a <tcp_pcb_remove+0xe>
 8006bba:	68da      	ldr	r2, [r3, #12]
 8006bbc:	4294      	cmp	r4, r2
 8006bbe:	d1f9      	bne.n	8006bb4 <tcp_pcb_remove+0x78>
 8006bc0:	68e2      	ldr	r2, [r4, #12]
 8006bc2:	60da      	str	r2, [r3, #12]
 8006bc4:	e7c1      	b.n	8006b4a <tcp_pcb_remove+0xe>
 8006bc6:	bf00      	nop
 8006bc8:	0800c6ca 	.word	0x0800c6ca
 8006bcc:	0800c76c 	.word	0x0800c76c
 8006bd0:	0800b831 	.word	0x0800b831
 8006bd4:	0800c784 	.word	0x0800c784
 8006bd8:	0800c79d 	.word	0x0800c79d

08006bdc <tcp_close_shutdown>:
{
 8006bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bde:	7d03      	ldrb	r3, [r0, #20]
 8006be0:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006be2:	2900      	cmp	r1, #0
 8006be4:	d049      	beq.n	8006c7a <tcp_close_shutdown+0x9e>
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d001      	beq.n	8006bee <tcp_close_shutdown+0x12>
 8006bea:	2b07      	cmp	r3, #7
 8006bec:	d145      	bne.n	8006c7a <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006bee:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006bf0:	b91a      	cbnz	r2, 8006bfa <tcp_close_shutdown+0x1e>
 8006bf2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006bf4:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8006bf8:	d03f      	beq.n	8006c7a <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006bfa:	7ea3      	ldrb	r3, [r4, #26]
 8006bfc:	06db      	lsls	r3, r3, #27
 8006bfe:	d406      	bmi.n	8006c0e <tcp_close_shutdown+0x32>
 8006c00:	4b3f      	ldr	r3, [pc, #252]	; (8006d00 <tcp_close_shutdown+0x124>)
 8006c02:	4940      	ldr	r1, [pc, #256]	; (8006d04 <tcp_close_shutdown+0x128>)
 8006c04:	4840      	ldr	r0, [pc, #256]	; (8006d08 <tcp_close_shutdown+0x12c>)
 8006c06:	f240 120f 	movw	r2, #271	; 0x10f
 8006c0a:	f003 fdb7 	bl	800a77c <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006c0e:	8b23      	ldrh	r3, [r4, #24]
 8006c10:	9301      	str	r3, [sp, #4]
 8006c12:	8ae3      	ldrh	r3, [r4, #22]
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	4622      	mov	r2, r4
 8006c18:	1d23      	adds	r3, r4, #4
 8006c1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c1c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006c1e:	f002 fb1b 	bl	8009258 <tcp_rst>
      tcp_pcb_purge(pcb);
 8006c22:	4620      	mov	r0, r4
 8006c24:	f7ff fd88 	bl	8006738 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006c28:	4a38      	ldr	r2, [pc, #224]	; (8006d0c <tcp_close_shutdown+0x130>)
 8006c2a:	6813      	ldr	r3, [r2, #0]
 8006c2c:	429c      	cmp	r4, r3
 8006c2e:	d115      	bne.n	8006c5c <tcp_close_shutdown+0x80>
 8006c30:	68e3      	ldr	r3, [r4, #12]
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	2300      	movs	r3, #0
 8006c36:	60e3      	str	r3, [r4, #12]
 8006c38:	4b35      	ldr	r3, [pc, #212]	; (8006d10 <tcp_close_shutdown+0x134>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8006c3e:	7d23      	ldrb	r3, [r4, #20]
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	d113      	bne.n	8006c6c <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8006c44:	230a      	movs	r3, #10
 8006c46:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006c48:	4b32      	ldr	r3, [pc, #200]	; (8006d14 <tcp_close_shutdown+0x138>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	60e2      	str	r2, [r4, #12]
 8006c4e:	601c      	str	r4, [r3, #0]
 8006c50:	f002 fca4 	bl	800959c <tcp_timer_needed>
}
 8006c54:	2000      	movs	r0, #0
 8006c56:	b003      	add	sp, #12
 8006c58:	bd30      	pop	{r4, r5, pc}
 8006c5a:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d0e9      	beq.n	8006c34 <tcp_close_shutdown+0x58>
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	4294      	cmp	r4, r2
 8006c64:	d1f9      	bne.n	8006c5a <tcp_close_shutdown+0x7e>
 8006c66:	68e2      	ldr	r2, [r4, #12]
 8006c68:	60da      	str	r2, [r3, #12]
 8006c6a:	e7e3      	b.n	8006c34 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 8006c6c:	4b2a      	ldr	r3, [pc, #168]	; (8006d18 <tcp_close_shutdown+0x13c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	429c      	cmp	r4, r3
 8006c72:	d117      	bne.n	8006ca4 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8006c74:	f001 fd06 	bl	8008684 <tcp_trigger_input_pcb_close>
 8006c78:	e7ec      	b.n	8006c54 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d020      	beq.n	8006cc0 <tcp_close_shutdown+0xe4>
 8006c7e:	d307      	bcc.n	8006c90 <tcp_close_shutdown+0xb4>
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d033      	beq.n	8006cec <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 8006c84:	4620      	mov	r0, r4
}
 8006c86:	b003      	add	sp, #12
 8006c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8006c8c:	f7ff bb7c 	b.w	8006388 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 8006c90:	8ae3      	ldrh	r3, [r4, #22]
 8006c92:	b13b      	cbz	r3, 8006ca4 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006c94:	4a21      	ldr	r2, [pc, #132]	; (8006d1c <tcp_close_shutdown+0x140>)
 8006c96:	6813      	ldr	r3, [r2, #0]
 8006c98:	429c      	cmp	r4, r3
 8006c9a:	d109      	bne.n	8006cb0 <tcp_close_shutdown+0xd4>
 8006c9c:	68e3      	ldr	r3, [r4, #12]
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8006ca8:	f7fe ff0a 	bl	8005ac0 <memp_free>
    break;
 8006cac:	e7d2      	b.n	8006c54 <tcp_close_shutdown+0x78>
 8006cae:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0f5      	beq.n	8006ca0 <tcp_close_shutdown+0xc4>
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	4294      	cmp	r4, r2
 8006cb8:	d1f9      	bne.n	8006cae <tcp_close_shutdown+0xd2>
 8006cba:	68e2      	ldr	r2, [r4, #12]
 8006cbc:	60da      	str	r2, [r3, #12]
 8006cbe:	e7ef      	b.n	8006ca0 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8006cc0:	4917      	ldr	r1, [pc, #92]	; (8006d20 <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 8006cc2:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8006cc4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8006cc8:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006cca:	b94a      	cbnz	r2, 8006ce0 <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006ccc:	3301      	adds	r3, #1
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d1f8      	bne.n	8006cc4 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	4813      	ldr	r0, [pc, #76]	; (8006d24 <tcp_close_shutdown+0x148>)
 8006cd6:	f7ff ff31 	bl	8006b3c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006cda:	4621      	mov	r1, r4
 8006cdc:	2002      	movs	r0, #2
 8006cde:	e7e3      	b.n	8006ca8 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8006ce0:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8006ce2:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8006ce4:	bf08      	it	eq
 8006ce6:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006ce8:	68d2      	ldr	r2, [r2, #12]
 8006cea:	e7ee      	b.n	8006cca <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8006cec:	4621      	mov	r1, r4
 8006cee:	4807      	ldr	r0, [pc, #28]	; (8006d0c <tcp_close_shutdown+0x130>)
 8006cf0:	f7ff ff24 	bl	8006b3c <tcp_pcb_remove>
 8006cf4:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <tcp_close_shutdown+0x134>)
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	e7d4      	b.n	8006ca8 <tcp_close_shutdown+0xcc>
 8006cfe:	bf00      	nop
 8006d00:	0800c6ca 	.word	0x0800c6ca
 8006d04:	0800c6b1 	.word	0x0800c6b1
 8006d08:	0800b831 	.word	0x0800b831
 8006d0c:	20005724 	.word	0x20005724
 8006d10:	20005720 	.word	0x20005720
 8006d14:	20005734 	.word	0x20005734
 8006d18:	20005738 	.word	0x20005738
 8006d1c:	20005730 	.word	0x20005730
 8006d20:	0800c75c 	.word	0x0800c75c
 8006d24:	2000572c 	.word	0x2000572c

08006d28 <tcp_close>:
  if (pcb->state != LISTEN) {
 8006d28:	7d03      	ldrb	r3, [r0, #20]
 8006d2a:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8006d2c:	bf1e      	ittt	ne
 8006d2e:	7e83      	ldrbne	r3, [r0, #26]
 8006d30:	f043 0310 	orrne.w	r3, r3, #16
 8006d34:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8006d36:	2101      	movs	r1, #1
 8006d38:	f7ff bf50 	b.w	8006bdc <tcp_close_shutdown>

08006d3c <tcp_recv_null>:
{
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	4608      	mov	r0, r1
  if (p != NULL) {
 8006d40:	4614      	mov	r4, r2
 8006d42:	b13a      	cbz	r2, 8006d54 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8006d44:	8911      	ldrh	r1, [r2, #8]
 8006d46:	f7ff fc23 	bl	8006590 <tcp_recved>
    pbuf_free(p);
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f7ff f81c 	bl	8005d88 <pbuf_free>
}
 8006d50:	2000      	movs	r0, #0
 8006d52:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1fb      	bne.n	8006d50 <tcp_recv_null+0x14>
}
 8006d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8006d5c:	f7ff bfe4 	b.w	8006d28 <tcp_close>

08006d60 <tcp_process_refused_data>:
{
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8006d62:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006d64:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8006d68:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8006d6a:	2300      	movs	r3, #0
{
 8006d6c:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 8006d6e:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006d70:	b1dd      	cbz	r5, 8006daa <tcp_process_refused_data+0x4a>
 8006d72:	4601      	mov	r1, r0
 8006d74:	4632      	mov	r2, r6
 8006d76:	6900      	ldr	r0, [r0, #16]
 8006d78:	47a8      	blx	r5
 8006d7a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8006d7c:	b9e0      	cbnz	r0, 8006db8 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8006d7e:	06bb      	lsls	r3, r7, #26
 8006d80:	d511      	bpl.n	8006da6 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006d82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8006d84:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006d88:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8006d8c:	bf1c      	itt	ne
 8006d8e:	3301      	addne	r3, #1
 8006d90:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8006d92:	b146      	cbz	r6, 8006da6 <tcp_process_refused_data+0x46>
 8006d94:	2300      	movs	r3, #0
 8006d96:	461a      	mov	r2, r3
 8006d98:	4621      	mov	r1, r4
 8006d9a:	6920      	ldr	r0, [r4, #16]
 8006d9c:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8006d9e:	300d      	adds	r0, #13
 8006da0:	d101      	bne.n	8006da6 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 8006da2:	f06f 050c 	mvn.w	r5, #12
}
 8006da6:	4628      	mov	r0, r5
 8006da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006daa:	4601      	mov	r1, r0
 8006dac:	462b      	mov	r3, r5
 8006dae:	4632      	mov	r2, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	f7ff ffc3 	bl	8006d3c <tcp_recv_null>
 8006db6:	e7e0      	b.n	8006d7a <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8006db8:	f110 050d 	adds.w	r5, r0, #13
 8006dbc:	d0f1      	beq.n	8006da2 <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 8006dbe:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8006dc0:	f06f 0504 	mvn.w	r5, #4
 8006dc4:	e7ef      	b.n	8006da6 <tcp_process_refused_data+0x46>
	...

08006dc8 <tcp_fasttmr>:
{
 8006dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8006dcc:	4d1b      	ldr	r5, [pc, #108]	; (8006e3c <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8006dce:	4f1c      	ldr	r7, [pc, #112]	; (8006e40 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8006dd0:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8006dd2:	4e1c      	ldr	r6, [pc, #112]	; (8006e44 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8006dd8:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8006dda:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8006dde:	b90c      	cbnz	r4, 8006de4 <tcp_fasttmr+0x1c>
}
 8006de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8006de4:	782b      	ldrb	r3, [r5, #0]
 8006de6:	7f62      	ldrb	r2, [r4, #29]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d024      	beq.n	8006e36 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8006dec:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8006dee:	7ea3      	ldrb	r3, [r4, #26]
 8006df0:	07d9      	lsls	r1, r3, #31
 8006df2:	d509      	bpl.n	8006e08 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8006df4:	f043 0302 	orr.w	r3, r3, #2
 8006df8:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f002 f8ae 	bl	8008f5c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006e00:	7ea3      	ldrb	r3, [r4, #26]
 8006e02:	f023 0303 	bic.w	r3, r3, #3
 8006e06:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8006e08:	7ea3      	ldrb	r3, [r4, #26]
 8006e0a:	071a      	lsls	r2, r3, #28
 8006e0c:	d505      	bpl.n	8006e1a <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 8006e0e:	f023 0308 	bic.w	r3, r3, #8
 8006e12:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8006e14:	4620      	mov	r0, r4
 8006e16:	f7ff fab7 	bl	8006388 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8006e1a:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8006e1c:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8006e20:	b13b      	cbz	r3, 8006e32 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8006e22:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8006e24:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8006e28:	f7ff ff9a 	bl	8006d60 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006e2c:	7833      	ldrb	r3, [r6, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1d2      	bne.n	8006dd8 <tcp_fasttmr+0x10>
{
 8006e32:	464c      	mov	r4, r9
 8006e34:	e7d3      	b.n	8006dde <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8006e36:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8006e3a:	e7fa      	b.n	8006e32 <tcp_fasttmr+0x6a>
 8006e3c:	2000219e 	.word	0x2000219e
 8006e40:	20005724 	.word	0x20005724
 8006e44:	20005720 	.word	0x20005720

08006e48 <tcp_tmr>:
{
 8006e48:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8006e4a:	f7ff ffbd 	bl	8006dc8 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8006e4e:	4a06      	ldr	r2, [pc, #24]	; (8006e68 <tcp_tmr+0x20>)
 8006e50:	7813      	ldrb	r3, [r2, #0]
 8006e52:	3301      	adds	r3, #1
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	7013      	strb	r3, [r2, #0]
 8006e58:	07db      	lsls	r3, r3, #31
 8006e5a:	d503      	bpl.n	8006e64 <tcp_tmr+0x1c>
}
 8006e5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8006e60:	f7ff bc8a 	b.w	8006778 <tcp_slowtmr>
 8006e64:	bd08      	pop	{r3, pc}
 8006e66:	bf00      	nop
 8006e68:	2000219d 	.word	0x2000219d

08006e6c <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006e6c:	7d03      	ldrb	r3, [r0, #20]
 8006e6e:	2b01      	cmp	r3, #1
{
 8006e70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e74:	4604      	mov	r4, r0
 8006e76:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006e78:	d106      	bne.n	8006e88 <tcp_abandon+0x1c>
 8006e7a:	4b30      	ldr	r3, [pc, #192]	; (8006f3c <tcp_abandon+0xd0>)
 8006e7c:	4930      	ldr	r1, [pc, #192]	; (8006f40 <tcp_abandon+0xd4>)
 8006e7e:	4831      	ldr	r0, [pc, #196]	; (8006f44 <tcp_abandon+0xd8>)
 8006e80:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006e84:	f003 fc7a 	bl	800a77c <iprintf>
  if (pcb->state == TIME_WAIT) {
 8006e88:	7d23      	ldrb	r3, [r4, #20]
 8006e8a:	2b0a      	cmp	r3, #10
 8006e8c:	d10a      	bne.n	8006ea4 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006e8e:	4621      	mov	r1, r4
 8006e90:	482d      	ldr	r0, [pc, #180]	; (8006f48 <tcp_abandon+0xdc>)
 8006e92:	f7ff fe53 	bl	8006b3c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006e96:	4621      	mov	r1, r4
 8006e98:	2001      	movs	r0, #1
}
 8006e9a:	b002      	add	sp, #8
 8006e9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8006ea0:	f7fe be0e 	b.w	8005ac0 <memp_free>
    seqno = pcb->snd_nxt;
 8006ea4:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8006ea8:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8006eac:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8006eb0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8006eb4:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8006eb6:	b99b      	cbnz	r3, 8006ee0 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8006eb8:	b13d      	cbz	r5, 8006eca <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006eba:	4a24      	ldr	r2, [pc, #144]	; (8006f4c <tcp_abandon+0xe0>)
 8006ebc:	6813      	ldr	r3, [r2, #0]
 8006ebe:	429c      	cmp	r4, r3
 8006ec0:	d106      	bne.n	8006ed0 <tcp_abandon+0x64>
 8006ec2:	68e3      	ldr	r3, [r4, #12]
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	2500      	movs	r5, #0
 8006ec8:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8006eca:	462e      	mov	r6, r5
 8006ecc:	e00f      	b.n	8006eee <tcp_abandon+0x82>
 8006ece:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0f8      	beq.n	8006ec6 <tcp_abandon+0x5a>
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	4294      	cmp	r4, r2
 8006ed8:	d1f9      	bne.n	8006ece <tcp_abandon+0x62>
 8006eda:	68e2      	ldr	r2, [r4, #12]
 8006edc:	60da      	str	r2, [r3, #12]
 8006ede:	e7f2      	b.n	8006ec6 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	481b      	ldr	r0, [pc, #108]	; (8006f50 <tcp_abandon+0xe4>)
 8006ee4:	f7ff fe2a 	bl	8006b3c <tcp_pcb_remove>
 8006ee8:	4b1a      	ldr	r3, [pc, #104]	; (8006f54 <tcp_abandon+0xe8>)
 8006eea:	2201      	movs	r2, #1
 8006eec:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8006eee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006ef0:	b108      	cbz	r0, 8006ef6 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8006ef2:	f7ff fb99 	bl	8006628 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8006ef6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006ef8:	b108      	cbz	r0, 8006efe <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8006efa:	f7ff fb95 	bl	8006628 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8006efe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006f00:	b108      	cbz	r0, 8006f06 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 8006f02:	f7ff fb91 	bl	8006628 <tcp_segs_free>
    if (send_rst) {
 8006f06:	b146      	cbz	r6, 8006f1a <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006f08:	8b23      	ldrh	r3, [r4, #24]
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	9500      	str	r5, [sp, #0]
 8006f0e:	1d23      	adds	r3, r4, #4
 8006f10:	4622      	mov	r2, r4
 8006f12:	4651      	mov	r1, sl
 8006f14:	4648      	mov	r0, r9
 8006f16:	f002 f99f 	bl	8009258 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	f7fe fdcf 	bl	8005ac0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006f22:	b13f      	cbz	r7, 8006f34 <tcp_abandon+0xc8>
 8006f24:	f06f 010c 	mvn.w	r1, #12
 8006f28:	4640      	mov	r0, r8
 8006f2a:	463b      	mov	r3, r7
}
 8006f2c:	b002      	add	sp, #8
 8006f2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006f32:	4718      	bx	r3
}
 8006f34:	b002      	add	sp, #8
 8006f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3a:	bf00      	nop
 8006f3c:	0800c6ca 	.word	0x0800c6ca
 8006f40:	0800c64b 	.word	0x0800c64b
 8006f44:	0800b831 	.word	0x0800b831
 8006f48:	20005734 	.word	0x20005734
 8006f4c:	20005730 	.word	0x20005730
 8006f50:	20005724 	.word	0x20005724
 8006f54:	20005720 	.word	0x20005720

08006f58 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8006f58:	2101      	movs	r1, #1
 8006f5a:	f7ff bf87 	b.w	8006e6c <tcp_abandon>

08006f5e <tcp_accept_null>:
{
 8006f5e:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8006f60:	4608      	mov	r0, r1
 8006f62:	f7ff fff9 	bl	8006f58 <tcp_abort>
}
 8006f66:	f06f 000c 	mvn.w	r0, #12
 8006f6a:	bd08      	pop	{r3, pc}

08006f6c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8006f70:	b901      	cbnz	r1, 8006f74 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006f74:	680a      	ldr	r2, [r1, #0]
 8006f76:	682b      	ldr	r3, [r5, #0]
 8006f78:	68cc      	ldr	r4, [r1, #12]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d102      	bne.n	8006f84 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 8006f7e:	4608      	mov	r0, r1
 8006f80:	f7ff ffea 	bl	8006f58 <tcp_abort>
      pcb = pcb->next;
 8006f84:	4621      	mov	r1, r4
 8006f86:	e7f3      	b.n	8006f70 <tcp_netif_ip_addr_changed_pcblist+0x4>

08006f88 <tcp_kill_state>:
{
 8006f88:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006f8a:	f1a0 0308 	sub.w	r3, r0, #8
 8006f8e:	2b01      	cmp	r3, #1
{
 8006f90:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006f92:	d906      	bls.n	8006fa2 <tcp_kill_state+0x1a>
 8006f94:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <tcp_kill_state+0x4c>)
 8006f96:	4910      	ldr	r1, [pc, #64]	; (8006fd8 <tcp_kill_state+0x50>)
 8006f98:	4810      	ldr	r0, [pc, #64]	; (8006fdc <tcp_kill_state+0x54>)
 8006f9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006f9e:	f003 fbed 	bl	800a77c <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fa2:	4b0f      	ldr	r3, [pc, #60]	; (8006fe0 <tcp_kill_state+0x58>)
 8006fa4:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006fa6:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <tcp_kill_state+0x5c>)
  inactivity = 0;
 8006fa8:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006faa:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8006fac:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fae:	b921      	cbnz	r1, 8006fba <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8006fb0:	b170      	cbz	r0, 8006fd0 <tcp_kill_state+0x48>
}
 8006fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 8006fb6:	f7ff bf59 	b.w	8006e6c <tcp_abandon>
    if (pcb->state == state) {
 8006fba:	7d0b      	ldrb	r3, [r1, #20]
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	d105      	bne.n	8006fcc <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006fc0:	6a0b      	ldr	r3, [r1, #32]
 8006fc2:	1aeb      	subs	r3, r5, r3
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	bf9c      	itt	ls
 8006fc8:	461a      	movls	r2, r3
 8006fca:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fcc:	68c9      	ldr	r1, [r1, #12]
 8006fce:	e7ee      	b.n	8006fae <tcp_kill_state+0x26>
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
 8006fd2:	bf00      	nop
 8006fd4:	0800c6ca 	.word	0x0800c6ca
 8006fd8:	0800c72b 	.word	0x0800c72b
 8006fdc:	0800b831 	.word	0x0800b831
 8006fe0:	20005724 	.word	0x20005724
 8006fe4:	20005728 	.word	0x20005728

08006fe8 <tcp_alloc>:
{
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006fec:	2001      	movs	r0, #1
 8006fee:	f7fe fd4b 	bl	8005a88 <memp_malloc>
 8006ff2:	4d3b      	ldr	r5, [pc, #236]	; (80070e0 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	bb90      	cbnz	r0, 800705e <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ff8:	4b3a      	ldr	r3, [pc, #232]	; (80070e4 <tcp_alloc+0xfc>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006ffa:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ffc:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8006ffe:	4621      	mov	r1, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007000:	2b00      	cmp	r3, #0
 8007002:	d158      	bne.n	80070b6 <tcp_alloc+0xce>
  if (inactive != NULL) {
 8007004:	b114      	cbz	r4, 800700c <tcp_alloc+0x24>
    tcp_abort(inactive);
 8007006:	4620      	mov	r0, r4
 8007008:	f7ff ffa6 	bl	8006f58 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800700c:	2001      	movs	r0, #1
 800700e:	f7fe fd3b 	bl	8005a88 <memp_malloc>
    if (pcb == NULL) {
 8007012:	4604      	mov	r4, r0
 8007014:	bb18      	cbnz	r0, 800705e <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8007016:	2009      	movs	r0, #9
 8007018:	f7ff ffb6 	bl	8006f88 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800701c:	2001      	movs	r0, #1
 800701e:	f7fe fd33 	bl	8005a88 <memp_malloc>
      if (pcb == NULL) {
 8007022:	4604      	mov	r4, r0
 8007024:	b9d8      	cbnz	r0, 800705e <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8007026:	2008      	movs	r0, #8
 8007028:	f7ff ffae 	bl	8006f88 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800702c:	2001      	movs	r0, #1
 800702e:	f7fe fd2b 	bl	8005a88 <memp_malloc>
        if (pcb == NULL) {
 8007032:	4604      	mov	r4, r0
 8007034:	b998      	cbnz	r0, 800705e <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007036:	4b2c      	ldr	r3, [pc, #176]	; (80070e8 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007038:	f8d5 e000 	ldr.w	lr, [r5]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800703c:	681b      	ldr	r3, [r3, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800703e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8007042:	bf0c      	ite	eq
 8007044:	4631      	moveq	r1, r6
 8007046:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007048:	2b00      	cmp	r3, #0
 800704a:	d13c      	bne.n	80070c6 <tcp_alloc+0xde>
  if (inactive != NULL) {
 800704c:	b114      	cbz	r4, 8007054 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 800704e:	4620      	mov	r0, r4
 8007050:	f7ff ff82 	bl	8006f58 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007054:	2001      	movs	r0, #1
 8007056:	f7fe fd17 	bl	8005a88 <memp_malloc>
  if (pcb != NULL) {
 800705a:	4604      	mov	r4, r0
 800705c:	b348      	cbz	r0, 80070b2 <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800705e:	2298      	movs	r2, #152	; 0x98
 8007060:	2100      	movs	r1, #0
 8007062:	4620      	mov	r0, r4
 8007064:	f003 fad6 	bl	800a614 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007068:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800706c:	8562      	strh	r2, [r4, #42]	; 0x2a
 800706e:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007070:	22ff      	movs	r2, #255	; 0xff
 8007072:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8007074:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007078:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800707a:	2206      	movs	r2, #6
 800707c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007080:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8007082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007086:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8007088:	2201      	movs	r2, #1
 800708a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800708e:	682a      	ldr	r2, [r5, #0]
 8007090:	6222      	str	r2, [r4, #32]
    pcb->snd_buf = TCP_SND_BUF;
 8007092:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->last_timer = tcp_timer_ctr;
 8007096:	4a15      	ldr	r2, [pc, #84]	; (80070ec <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 8007098:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 800709c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 80070a0:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 80070a2:	7812      	ldrb	r2, [r2, #0]
    pcb->recv = tcp_recv_null;
 80070a4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80070a8:	4b12      	ldr	r3, [pc, #72]	; (80070f4 <tcp_alloc+0x10c>)
    pcb->prio = prio;
 80070aa:	7566      	strb	r6, [r4, #21]
    pcb->last_timer = tcp_timer_ctr;
 80070ac:	7762      	strb	r2, [r4, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80070ae:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 80070b2:	4620      	mov	r0, r4
 80070b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80070b6:	6a1a      	ldr	r2, [r3, #32]
 80070b8:	1a82      	subs	r2, r0, r2
 80070ba:	428a      	cmp	r2, r1
 80070bc:	bf24      	itt	cs
 80070be:	461c      	movcs	r4, r3
 80070c0:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	e79c      	b.n	8007000 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 80070c6:	7d5f      	ldrb	r7, [r3, #21]
 80070c8:	428f      	cmp	r7, r1
 80070ca:	d807      	bhi.n	80070dc <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80070cc:	6a1a      	ldr	r2, [r3, #32]
 80070ce:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 80070d2:	4282      	cmp	r2, r0
 80070d4:	bf22      	ittt	cs
 80070d6:	4639      	movcs	r1, r7
 80070d8:	4610      	movcs	r0, r2
 80070da:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	e7b3      	b.n	8007048 <tcp_alloc+0x60>
 80070e0:	20005728 	.word	0x20005728
 80070e4:	20005734 	.word	0x20005734
 80070e8:	20005724 	.word	0x20005724
 80070ec:	2000219e 	.word	0x2000219e
 80070f0:	08006d3d 	.word	0x08006d3d
 80070f4:	006ddd00 	.word	0x006ddd00

080070f8 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80070f8:	2040      	movs	r0, #64	; 0x40
 80070fa:	f7ff bf75 	b.w	8006fe8 <tcp_alloc>
	...

08007100 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8007100:	4b03      	ldr	r3, [pc, #12]	; (8007110 <tcp_next_iss+0x10>)
 8007102:	4a04      	ldr	r2, [pc, #16]	; (8007114 <tcp_next_iss+0x14>)
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	4410      	add	r0, r2
 800710a:	6018      	str	r0, [r3, #0]
}
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	20001ba0 	.word	0x20001ba0
 8007114:	20005728 	.word	0x20005728

08007118 <tcp_eff_send_mss_impl>:
{
 8007118:	b510      	push	{r4, lr}
 800711a:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 800711c:	4608      	mov	r0, r1
 800711e:	f7fd fd67 	bl	8004bf0 <ip4_route>
    if (outif == NULL) {
 8007122:	b130      	cbz	r0, 8007132 <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8007124:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8007126:	b123      	cbz	r3, 8007132 <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8007128:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800712a:	b29b      	uxth	r3, r3
 800712c:	429c      	cmp	r4, r3
 800712e:	bf28      	it	cs
 8007130:	461c      	movcs	r4, r3
}
 8007132:	4620      	mov	r0, r4
 8007134:	bd10      	pop	{r4, pc}
	...

08007138 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800713c:	4604      	mov	r4, r0
 800713e:	b180      	cbz	r0, 8007162 <tcp_netif_ip_addr_changed+0x2a>
 8007140:	6803      	ldr	r3, [r0, #0]
 8007142:	b173      	cbz	r3, 8007162 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007144:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <tcp_netif_ip_addr_changed+0x40>)
 8007146:	6819      	ldr	r1, [r3, #0]
 8007148:	f7ff ff10 	bl	8006f6c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800714c:	4b0b      	ldr	r3, [pc, #44]	; (800717c <tcp_netif_ip_addr_changed+0x44>)
 800714e:	4620      	mov	r0, r4
 8007150:	6819      	ldr	r1, [r3, #0]
 8007152:	f7ff ff0b 	bl	8006f6c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007156:	b125      	cbz	r5, 8007162 <tcp_netif_ip_addr_changed+0x2a>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	b113      	cbz	r3, 8007162 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800715c:	4b08      	ldr	r3, [pc, #32]	; (8007180 <tcp_netif_ip_addr_changed+0x48>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	b903      	cbnz	r3, 8007164 <tcp_netif_ip_addr_changed+0x2c>
 8007162:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8007168:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800716a:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800716c:	bf04      	itt	eq
 800716e:	6829      	ldreq	r1, [r5, #0]
 8007170:	6019      	streq	r1, [r3, #0]
{
 8007172:	4613      	mov	r3, r2
 8007174:	e7f4      	b.n	8007160 <tcp_netif_ip_addr_changed+0x28>
 8007176:	bf00      	nop
 8007178:	20005724 	.word	0x20005724
 800717c:	20005730 	.word	0x20005730
 8007180:	2000572c 	.word	0x2000572c

08007184 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007188:	68c3      	ldr	r3, [r0, #12]
{
 800718a:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800718c:	8998      	ldrh	r0, [r3, #12]
{
 800718e:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007190:	f7fd f83a 	bl	8004208 <lwip_htons>
 8007194:	07c2      	lsls	r2, r0, #31
 8007196:	d415      	bmi.n	80071c4 <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007198:	4e18      	ldr	r6, [pc, #96]	; (80071fc <tcp_oos_insert_segment+0x78>)
    while (next &&
 800719a:	b1bc      	cbz	r4, 80071cc <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800719c:	68e7      	ldr	r7, [r4, #12]
 800719e:	6830      	ldr	r0, [r6, #0]
 80071a0:	892b      	ldrh	r3, [r5, #8]
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	8922      	ldrh	r2, [r4, #8]
 80071a6:	4403      	add	r3, r0
 80071a8:	440a      	add	r2, r1
 80071aa:	1a9a      	subs	r2, r3, r2
    while (next &&
 80071ac:	2a00      	cmp	r2, #0
 80071ae:	da10      	bge.n	80071d2 <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80071b0:	1a5b      	subs	r3, r3, r1
    if (next &&
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	dd0a      	ble.n	80071cc <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80071b6:	1a09      	subs	r1, r1, r0
 80071b8:	b289      	uxth	r1, r1
 80071ba:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80071bc:	6868      	ldr	r0, [r5, #4]
 80071be:	f7fe ff25 	bl	800600c <pbuf_realloc>
 80071c2:	e003      	b.n	80071cc <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 80071c4:	4620      	mov	r0, r4
 80071c6:	f7ff fa2f 	bl	8006628 <tcp_segs_free>
    next = NULL;
 80071ca:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 80071cc:	602c      	str	r4, [r5, #0]
}
 80071ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80071d2:	89b8      	ldrh	r0, [r7, #12]
 80071d4:	f7fd f818 	bl	8004208 <lwip_htons>
 80071d8:	07c3      	lsls	r3, r0, #31
 80071da:	d509      	bpl.n	80071f0 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80071dc:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80071e0:	2001      	movs	r0, #1
 80071e2:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 80071e6:	f7fd f80f 	bl	8004208 <lwip_htons>
 80071ea:	4338      	orrs	r0, r7
 80071ec:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 80071f0:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 80071f2:	4620      	mov	r0, r4
 80071f4:	f7ff fa0a 	bl	800660c <tcp_seg_free>
      next = next->next;
 80071f8:	463c      	mov	r4, r7
 80071fa:	e7ce      	b.n	800719a <tcp_oos_insert_segment+0x16>
 80071fc:	200021c4 	.word	0x200021c4

08007200 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007200:	7d03      	ldrb	r3, [r0, #20]
 8007202:	2b03      	cmp	r3, #3
{
 8007204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800720a:	d806      	bhi.n	800721a <tcp_receive+0x1a>
 800720c:	4b87      	ldr	r3, [pc, #540]	; (800742c <tcp_receive+0x22c>)
 800720e:	4988      	ldr	r1, [pc, #544]	; (8007430 <tcp_receive+0x230>)
 8007210:	4888      	ldr	r0, [pc, #544]	; (8007434 <tcp_receive+0x234>)
 8007212:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8007216:	f003 fab1 	bl	800a77c <iprintf>

  if (flags & TCP_ACK) {
 800721a:	4b87      	ldr	r3, [pc, #540]	; (8007438 <tcp_receive+0x238>)
 800721c:	4e87      	ldr	r6, [pc, #540]	; (800743c <tcp_receive+0x23c>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	f013 0f10 	tst.w	r3, #16
 8007224:	f000 817c 	beq.w	8007520 <tcp_receive+0x320>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007228:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800722a:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800722c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8007230:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007232:	1a1d      	subs	r5, r3, r0
 8007234:	2d00      	cmp	r5, #0
 8007236:	4d82      	ldr	r5, [pc, #520]	; (8007440 <tcp_receive+0x240>)
 8007238:	db0d      	blt.n	8007256 <tcp_receive+0x56>
 800723a:	4283      	cmp	r3, r0
 800723c:	d103      	bne.n	8007246 <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800723e:	682b      	ldr	r3, [r5, #0]
 8007240:	1acb      	subs	r3, r1, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	db07      	blt.n	8007256 <tcp_receive+0x56>
 8007246:	682b      	ldr	r3, [r5, #0]
 8007248:	4299      	cmp	r1, r3
 800724a:	d11c      	bne.n	8007286 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800724c:	4b7d      	ldr	r3, [pc, #500]	; (8007444 <tcp_receive+0x244>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	89db      	ldrh	r3, [r3, #14]
 8007252:	4293      	cmp	r3, r2
 8007254:	d917      	bls.n	8007286 <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007256:	4b7b      	ldr	r3, [pc, #492]	; (8007444 <tcp_receive+0x244>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007258:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 8007260:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007262:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 8007264:	6828      	ldr	r0, [r5, #0]
 8007266:	6560      	str	r0, [r4, #84]	; 0x54
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007268:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 800726c:	bf38      	it	cc
 800726e:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 8007272:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8007276:	2f00      	cmp	r7, #0
 8007278:	d13c      	bne.n	80072f4 <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 800727a:	b920      	cbnz	r0, 8007286 <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800727c:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8007280:	2301      	movs	r3, #1
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8007282:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007286:	682b      	ldr	r3, [r5, #0]
 8007288:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 800728c:	4f6e      	ldr	r7, [pc, #440]	; (8007448 <tcp_receive+0x248>)
 800728e:	eba3 000e 	sub.w	r0, r3, lr
 8007292:	2800      	cmp	r0, #0
 8007294:	dc37      	bgt.n	8007306 <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 8007296:	486d      	ldr	r0, [pc, #436]	; (800744c <tcp_receive+0x24c>)
 8007298:	8800      	ldrh	r0, [r0, #0]
 800729a:	2800      	cmp	r0, #0
 800729c:	f040 846f 	bne.w	8007b7e <tcp_receive+0x97e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80072a0:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80072a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072a4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80072a8:	4401      	add	r1, r0
 80072aa:	428a      	cmp	r2, r1
 80072ac:	f040 8467 	bne.w	8007b7e <tcp_receive+0x97e>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80072b0:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80072b4:	2a00      	cmp	r2, #0
 80072b6:	f2c0 8462 	blt.w	8007b7e <tcp_receive+0x97e>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80072ba:	4573      	cmp	r3, lr
 80072bc:	f040 845f 	bne.w	8007b7e <tcp_receive+0x97e>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80072c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072c4:	1c53      	adds	r3, r2, #1
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 80072ca:	bf38      	it	cc
 80072cc:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80072d0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d911      	bls.n	80072fc <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80072d8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80072dc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80072de:	4413      	add	r3, r2
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d201      	bcs.n	80072ea <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 80072e6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80072ea:	f8df a140 	ldr.w	sl, [pc, #320]	; 800742c <tcp_receive+0x22c>
 80072ee:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8007434 <tcp_receive+0x234>
 80072f2:	e108      	b.n	8007506 <tcp_receive+0x306>
      } else if (pcb->persist_backoff > 0) {
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d0c6      	beq.n	8007286 <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	e7c2      	b.n	8007282 <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 80072fc:	d1f5      	bne.n	80072ea <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 80072fe:	4620      	mov	r0, r4
 8007300:	f002 f849 	bl	8009396 <tcp_rexmit_fast>
 8007304:	e7f1      	b.n	80072ea <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007306:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007308:	1a9a      	subs	r2, r3, r2
 800730a:	2a00      	cmp	r2, #0
 800730c:	f300 808a 	bgt.w	8007424 <tcp_receive+0x224>
      if (pcb->flags & TF_INFR) {
 8007310:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007312:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 8007316:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 8007318:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 800731a:	bf41      	itttt	mi
 800731c:	f022 0204 	bicmi.w	r2, r2, #4
 8007320:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8007322:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 8007326:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 800732a:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800732c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 800732e:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007330:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8007334:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 8007336:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800733a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800733e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 8007342:	d90f      	bls.n	8007364 <tcp_receive+0x164>
        if (pcb->cwnd < pcb->ssthresh) {
 8007344:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8007348:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800734c:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800734e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8007350:	bf9c      	itt	ls
 8007352:	435b      	mulls	r3, r3
 8007354:	fb93 f3f2 	sdivls	r3, r3, r2
 8007358:	4413      	add	r3, r2
 800735a:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 800735c:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 800735e:	bf38      	it	cc
 8007360:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007364:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800742c <tcp_receive+0x22c>
 8007368:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007434 <tcp_receive+0x234>
      while (pcb->unacked != NULL &&
 800736c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800736e:	b943      	cbnz	r3, 8007382 <tcp_receive+0x182>
      if (pcb->unacked == NULL) {
 8007370:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007372:	2300      	movs	r3, #0
 8007374:	2a00      	cmp	r2, #0
 8007376:	d153      	bne.n	8007420 <tcp_receive+0x220>
        pcb->rtime = -1;
 8007378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800737c:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800737e:	76e3      	strb	r3, [r4, #27]
 8007380:	e7b3      	b.n	80072ea <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	6858      	ldr	r0, [r3, #4]
 8007386:	f7fc ff42 	bl	800420e <lwip_htonl>
 800738a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800738c:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	4683      	mov	fp, r0
 8007394:	8998      	ldrh	r0, [r3, #12]
 8007396:	f7fc ff37 	bl	8004208 <lwip_htons>
 800739a:	682b      	ldr	r3, [r5, #0]
 800739c:	f010 0003 	ands.w	r0, r0, #3
 80073a0:	eba8 0803 	sub.w	r8, r8, r3
 80073a4:	bf18      	it	ne
 80073a6:	2001      	movne	r0, #1
 80073a8:	44d8      	add	r8, fp
 80073aa:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 80073ac:	f1b8 0f00 	cmp.w	r8, #0
 80073b0:	dcde      	bgt.n	8007370 <tcp_receive+0x170>
        next = pcb->unacked;
 80073b2:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80073b6:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 80073ba:	f8d8 3000 	ldr.w	r3, [r8]
 80073be:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80073c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80073c4:	f7fe fe92 	bl	80060ec <pbuf_clen>
 80073c8:	4583      	cmp	fp, r0
 80073ca:	d206      	bcs.n	80073da <tcp_receive+0x1da>
 80073cc:	464b      	mov	r3, r9
 80073ce:	f240 429e 	movw	r2, #1182	; 0x49e
 80073d2:	491f      	ldr	r1, [pc, #124]	; (8007450 <tcp_receive+0x250>)
 80073d4:	4650      	mov	r0, sl
 80073d6:	f003 f9d1 	bl	800a77c <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80073da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80073de:	f7fe fe85 	bl	80060ec <pbuf_clen>
 80073e2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 80073e6:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80073e8:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 80073ea:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80073ee:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 80073f2:	4413      	add	r3, r2
        tcp_seg_free(next);
 80073f4:	4640      	mov	r0, r8
        recv_acked += next->len;
 80073f6:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 80073f8:	f7ff f908 	bl	800660c <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 80073fc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0b3      	beq.n	800736c <tcp_receive+0x16c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8007404:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1b0      	bne.n	800736c <tcp_receive+0x16c>
 800740a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1ad      	bne.n	800736c <tcp_receive+0x16c>
 8007410:	464b      	mov	r3, r9
 8007412:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8007416:	490f      	ldr	r1, [pc, #60]	; (8007454 <tcp_receive+0x254>)
 8007418:	4650      	mov	r0, sl
 800741a:	f003 f9af 	bl	800a77c <iprintf>
 800741e:	e7a5      	b.n	800736c <tcp_receive+0x16c>
        pcb->rtime = 0;
 8007420:	8623      	strh	r3, [r4, #48]	; 0x30
 8007422:	e7ac      	b.n	800737e <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 8007424:	4620      	mov	r0, r4
 8007426:	f001 fd63 	bl	8008ef0 <tcp_send_empty_ack>
 800742a:	e75e      	b.n	80072ea <tcp_receive+0xea>
 800742c:	0800cb90 	.word	0x0800cb90
 8007430:	0800cbc2 	.word	0x0800cbc2
 8007434:	0800b831 	.word	0x0800b831
 8007438:	200021a4 	.word	0x200021a4
 800743c:	200021c4 	.word	0x200021c4
 8007440:	200021a0 	.word	0x200021a0
 8007444:	200021cc 	.word	0x200021cc
 8007448:	200021b8 	.word	0x200021b8
 800744c:	200021da 	.word	0x200021da
 8007450:	0800cbdb 	.word	0x0800cbdb
 8007454:	0800cc03 	.word	0x0800cc03
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007458:	682a      	ldr	r2, [r5, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	9201      	str	r2, [sp, #4]
 800745e:	6858      	ldr	r0, [r3, #4]
 8007460:	f7fc fed5 	bl	800420e <lwip_htonl>
 8007464:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007466:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4683      	mov	fp, r0
 800746e:	8998      	ldrh	r0, [r3, #12]
 8007470:	f7fc feca 	bl	8004208 <lwip_htons>
 8007474:	9a01      	ldr	r2, [sp, #4]
 8007476:	f010 0003 	ands.w	r0, r0, #3
 800747a:	eba2 0808 	sub.w	r8, r2, r8
 800747e:	bf18      	it	ne
 8007480:	2001      	movne	r0, #1
 8007482:	eba8 080b 	sub.w	r8, r8, fp
 8007486:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 800748a:	f1b8 0f00 	cmp.w	r8, #0
 800748e:	db3d      	blt.n	800750c <tcp_receive+0x30c>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007494:	1a9b      	subs	r3, r3, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	dc38      	bgt.n	800750c <tcp_receive+0x30c>
      next = pcb->unsent;
 800749a:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 800749e:	f8d8 3000 	ldr.w	r3, [r8]
 80074a2:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 80074a4:	b90b      	cbnz	r3, 80074aa <tcp_receive+0x2aa>
        pcb->unsent_oversize = 0;
 80074a6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80074aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80074ae:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 80074b2:	f7fe fe1b 	bl	80060ec <pbuf_clen>
 80074b6:	4583      	cmp	fp, r0
 80074b8:	d206      	bcs.n	80074c8 <tcp_receive+0x2c8>
 80074ba:	4653      	mov	r3, sl
 80074bc:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80074c0:	49ba      	ldr	r1, [pc, #744]	; (80077ac <tcp_receive+0x5ac>)
 80074c2:	4648      	mov	r0, r9
 80074c4:	f003 f95a 	bl	800a77c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80074c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80074cc:	f7fe fe0e 	bl	80060ec <pbuf_clen>
 80074d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 80074d4:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80074d6:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 80074d8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80074dc:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 80074e0:	4413      	add	r3, r2
      tcp_seg_free(next);
 80074e2:	4640      	mov	r0, r8
      recv_acked += next->len;
 80074e4:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 80074e6:	f7ff f891 	bl	800660c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80074ea:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80074ee:	b153      	cbz	r3, 8007506 <tcp_receive+0x306>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80074f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80074f2:	b943      	cbnz	r3, 8007506 <tcp_receive+0x306>
 80074f4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80074f6:	b933      	cbnz	r3, 8007506 <tcp_receive+0x306>
 80074f8:	4653      	mov	r3, sl
 80074fa:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80074fe:	49ac      	ldr	r1, [pc, #688]	; (80077b0 <tcp_receive+0x5b0>)
 8007500:	4648      	mov	r0, r9
 8007502:	f003 f93b 	bl	800a77c <iprintf>
    while (pcb->unsent != NULL &&
 8007506:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1a5      	bne.n	8007458 <tcp_receive+0x258>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800750c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8007510:	883a      	ldrh	r2, [r7, #0]
 8007512:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007514:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8007516:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800751a:	2a00      	cmp	r2, #0
 800751c:	f040 8119 	bne.w	8007752 <tcp_receive+0x552>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8007520:	4fa4      	ldr	r7, [pc, #656]	; (80077b4 <tcp_receive+0x5b4>)
 8007522:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007524:	8838      	ldrh	r0, [r7, #0]
 8007526:	2800      	cmp	r0, #0
 8007528:	f000 831c 	beq.w	8007b64 <tcp_receive+0x964>
 800752c:	7d23      	ldrb	r3, [r4, #20]
 800752e:	2b06      	cmp	r3, #6
 8007530:	f200 8318 	bhi.w	8007b64 <tcp_receive+0x964>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007534:	6833      	ldr	r3, [r6, #0]
 8007536:	1ad5      	subs	r5, r2, r3
 8007538:	2d01      	cmp	r5, #1
 800753a:	f100 815c 	bmi.w	80077f6 <tcp_receive+0x5f6>
 800753e:	f1c3 0101 	rsb	r1, r3, #1
 8007542:	1a09      	subs	r1, r1, r0
 8007544:	4411      	add	r1, r2
 8007546:	2900      	cmp	r1, #0
 8007548:	f300 8155 	bgt.w	80077f6 <tcp_receive+0x5f6>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800754c:	4b9a      	ldr	r3, [pc, #616]	; (80077b8 <tcp_receive+0x5b8>)
 800754e:	f8d3 9004 	ldr.w	r9, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 8007552:	46aa      	mov	sl, r5
 8007554:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8007556:	f1b9 0f00 	cmp.w	r9, #0
 800755a:	d106      	bne.n	800756a <tcp_receive+0x36a>
 800755c:	4b97      	ldr	r3, [pc, #604]	; (80077bc <tcp_receive+0x5bc>)
 800755e:	4998      	ldr	r1, [pc, #608]	; (80077c0 <tcp_receive+0x5c0>)
 8007560:	4898      	ldr	r0, [pc, #608]	; (80077c4 <tcp_receive+0x5c4>)
 8007562:	f240 523c 	movw	r2, #1340	; 0x53c
 8007566:	f003 f909 	bl	800a77c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800756a:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800756e:	429d      	cmp	r5, r3
 8007570:	dd06      	ble.n	8007580 <tcp_receive+0x380>
 8007572:	4b92      	ldr	r3, [pc, #584]	; (80077bc <tcp_receive+0x5bc>)
 8007574:	4994      	ldr	r1, [pc, #592]	; (80077c8 <tcp_receive+0x5c8>)
 8007576:	4893      	ldr	r0, [pc, #588]	; (80077c4 <tcp_receive+0x5c4>)
 8007578:	f240 523d 	movw	r2, #1341	; 0x53d
 800757c:	f003 f8fe 	bl	800a77c <iprintf>
      if (inseg.p->len < off) {
 8007580:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007584:	8943      	ldrh	r3, [r0, #10]
 8007586:	429d      	cmp	r5, r3
 8007588:	f340 812a 	ble.w	80077e0 <tcp_receive+0x5e0>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800758c:	8903      	ldrh	r3, [r0, #8]
 800758e:	429d      	cmp	r5, r3
 8007590:	dd06      	ble.n	80075a0 <tcp_receive+0x3a0>
 8007592:	4b8a      	ldr	r3, [pc, #552]	; (80077bc <tcp_receive+0x5bc>)
 8007594:	498d      	ldr	r1, [pc, #564]	; (80077cc <tcp_receive+0x5cc>)
 8007596:	488b      	ldr	r0, [pc, #556]	; (80077c4 <tcp_receive+0x5c4>)
 8007598:	f240 523f 	movw	r2, #1343	; 0x53f
 800759c:	f003 f8ee 	bl	800a77c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80075a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80075a4:	8919      	ldrh	r1, [r3, #8]
 80075a6:	1b4d      	subs	r5, r1, r5
 80075a8:	b2ad      	uxth	r5, r5
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 80075aa:	2200      	movs	r2, #0
        while (p->len < off) {
 80075ac:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 80075b0:	459a      	cmp	sl, r3
 80075b2:	f300 80f2 	bgt.w	800779a <tcp_receive+0x59a>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80075b6:	f1ca 0100 	rsb	r1, sl, #0
 80075ba:	b209      	sxth	r1, r1
 80075bc:	4648      	mov	r0, r9
 80075be:	f7fe fbdd 	bl	8005d7c <pbuf_header>
 80075c2:	b130      	cbz	r0, 80075d2 <tcp_receive+0x3d2>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80075c4:	4b7d      	ldr	r3, [pc, #500]	; (80077bc <tcp_receive+0x5bc>)
 80075c6:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80075ca:	4981      	ldr	r1, [pc, #516]	; (80077d0 <tcp_receive+0x5d0>)
 80075cc:	487d      	ldr	r0, [pc, #500]	; (80077c4 <tcp_receive+0x5c4>)
 80075ce:	f003 f8d5 	bl	800a77c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80075d2:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 80075d6:	6833      	ldr	r3, [r6, #0]
 80075d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80075da:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80075dc:	440b      	add	r3, r1
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80075e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80075e8:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80075ea:	6831      	ldr	r1, [r6, #0]
 80075ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80075ee:	1a8b      	subs	r3, r1, r2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f2c0 82b1 	blt.w	8007b58 <tcp_receive+0x958>
 80075f6:	1c4b      	adds	r3, r1, #1
 80075f8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80075fa:	1a9b      	subs	r3, r3, r2
 80075fc:	1a1b      	subs	r3, r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f300 82aa 	bgt.w	8007b58 <tcp_receive+0x958>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8007604:	4291      	cmp	r1, r2
 8007606:	f040 81c9 	bne.w	800799c <tcp_receive+0x79c>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800760a:	4d6b      	ldr	r5, [pc, #428]	; (80077b8 <tcp_receive+0x5b8>)
 800760c:	68eb      	ldr	r3, [r5, #12]
 800760e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8007612:	8998      	ldrh	r0, [r3, #12]
 8007614:	f7fc fdf8 	bl	8004208 <lwip_htons>
 8007618:	f010 0003 	ands.w	r0, r0, #3
 800761c:	bf18      	it	ne
 800761e:	2001      	movne	r0, #1
 8007620:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 8007622:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8007624:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8007626:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8007628:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800762a:	d242      	bcs.n	80076b2 <tcp_receive+0x4b2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800762c:	68eb      	ldr	r3, [r5, #12]
 800762e:	8998      	ldrh	r0, [r3, #12]
 8007630:	f7fc fdea 	bl	8004208 <lwip_htons>
 8007634:	07c2      	lsls	r2, r0, #31
 8007636:	d510      	bpl.n	800765a <tcp_receive+0x45a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007638:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800763c:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8007640:	4640      	mov	r0, r8
 8007642:	f7fc fde1 	bl	8004208 <lwip_htons>
 8007646:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800764a:	f7fc fddd 	bl	8004208 <lwip_htons>
 800764e:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8007652:	ea40 0808 	orr.w	r8, r0, r8
 8007656:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800765a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800765c:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800765e:	68eb      	ldr	r3, [r5, #12]
 8007660:	8998      	ldrh	r0, [r3, #12]
 8007662:	f7fc fdd1 	bl	8004208 <lwip_htons>
 8007666:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 8007668:	bf48      	it	mi
 800766a:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800766c:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 800766e:	bf44      	itt	mi
 8007670:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8007674:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8007676:	8929      	ldrh	r1, [r5, #8]
 8007678:	f7fe fcc8 	bl	800600c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800767c:	68eb      	ldr	r3, [r5, #12]
 800767e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8007682:	8998      	ldrh	r0, [r3, #12]
 8007684:	f7fc fdc0 	bl	8004208 <lwip_htons>
 8007688:	f010 0003 	ands.w	r0, r0, #3
 800768c:	bf18      	it	ne
 800768e:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007690:	6833      	ldr	r3, [r6, #0]
 8007692:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8007694:	4440      	add	r0, r8
 8007696:	b280      	uxth	r0, r0
 8007698:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800769a:	4418      	add	r0, r3
 800769c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800769e:	4413      	add	r3, r2
 80076a0:	4298      	cmp	r0, r3
 80076a2:	d006      	beq.n	80076b2 <tcp_receive+0x4b2>
 80076a4:	4b45      	ldr	r3, [pc, #276]	; (80077bc <tcp_receive+0x5bc>)
 80076a6:	494b      	ldr	r1, [pc, #300]	; (80077d4 <tcp_receive+0x5d4>)
 80076a8:	4846      	ldr	r0, [pc, #280]	; (80077c4 <tcp_receive+0x5c4>)
 80076aa:	f240 527f 	movw	r2, #1407	; 0x57f
 80076ae:	f003 f865 	bl	800a77c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80076b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 80ad 	beq.w	8007814 <tcp_receive+0x614>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80076ba:	68eb      	ldr	r3, [r5, #12]
 80076bc:	8998      	ldrh	r0, [r3, #12]
 80076be:	f7fc fda3 	bl	8004208 <lwip_htons>
 80076c2:	07c0      	lsls	r0, r0, #31
 80076c4:	f100 80a3 	bmi.w	800780e <tcp_receive+0x60e>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 80076c8:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80076cc:	f1b8 0f00 	cmp.w	r8, #0
 80076d0:	d03c      	beq.n	800774c <tcp_receive+0x54c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80076d2:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 80076d6:	6830      	ldr	r0, [r6, #0]
 80076d8:	883b      	ldrh	r3, [r7, #0]
 80076da:	f8de 2004 	ldr.w	r2, [lr, #4]
 80076de:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 80076e2:	4403      	add	r3, r0
 80076e4:	4411      	add	r1, r2
 80076e6:	1a59      	subs	r1, r3, r1
            while (next &&
 80076e8:	2900      	cmp	r1, #0
 80076ea:	f280 80cf 	bge.w	800788c <tcp_receive+0x68c>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 80076ee:	1a9b      	subs	r3, r3, r2
            if (next &&
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	dd2b      	ble.n	800774c <tcp_receive+0x54c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80076f4:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80076f6:	1a12      	subs	r2, r2, r0
 80076f8:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80076fa:	8998      	ldrh	r0, [r3, #12]
 80076fc:	f7fc fd84 	bl	8004208 <lwip_htons>
 8007700:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 8007702:	bf48      	it	mi
 8007704:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8007706:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8007708:	bf44      	itt	mi
 800770a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800770e:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8007710:	8929      	ldrh	r1, [r5, #8]
 8007712:	f7fe fc7b 	bl	800600c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8007716:	68eb      	ldr	r3, [r5, #12]
 8007718:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800771c:	8998      	ldrh	r0, [r3, #12]
 800771e:	f7fc fd73 	bl	8004208 <lwip_htons>
 8007722:	f010 0003 	ands.w	r0, r0, #3
 8007726:	bf18      	it	ne
 8007728:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800772a:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 800772c:	4448      	add	r0, r9
 800772e:	b280      	uxth	r0, r0
 8007730:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8007732:	4418      	add	r0, r3
 8007734:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	4298      	cmp	r0, r3
 800773c:	d006      	beq.n	800774c <tcp_receive+0x54c>
 800773e:	4b1f      	ldr	r3, [pc, #124]	; (80077bc <tcp_receive+0x5bc>)
 8007740:	4925      	ldr	r1, [pc, #148]	; (80077d8 <tcp_receive+0x5d8>)
 8007742:	4820      	ldr	r0, [pc, #128]	; (80077c4 <tcp_receive+0x5c4>)
 8007744:	f240 52af 	movw	r2, #1455	; 0x5af
 8007748:	f003 f818 	bl	800a77c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800774c:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 8007750:	e060      	b.n	8007814 <tcp_receive+0x614>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007754:	6829      	ldr	r1, [r5, #0]
 8007756:	1a5b      	subs	r3, r3, r1
 8007758:	2b00      	cmp	r3, #0
 800775a:	f6bf aee1 	bge.w	8007520 <tcp_receive+0x320>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800775e:	4b1f      	ldr	r3, [pc, #124]	; (80077dc <tcp_receive+0x5dc>)
      m = m - (pcb->sa >> 3);
 8007760:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007764:	6819      	ldr	r1, [r3, #0]
 8007766:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 8007768:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 800776c:	b289      	uxth	r1, r1
 800776e:	b20b      	sxth	r3, r1
      if (m < 0) {
 8007770:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 8007772:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 8007776:	4408      	add	r0, r1
        m = -m;
 8007778:	bfbc      	itt	lt
 800777a:	4249      	neglt	r1, r1
 800777c:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 800777e:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8007782:	4413      	add	r3, r2
      pcb->sa += m;
 8007784:	b200      	sxth	r0, r0
      pcb->sv += m;
 8007786:	b29b      	uxth	r3, r3
 8007788:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800778a:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 800778e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8007792:	2300      	movs	r3, #0
      pcb->sa += m;
 8007794:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 8007796:	6363      	str	r3, [r4, #52]	; 0x34
 8007798:	e6c2      	b.n	8007520 <tcp_receive+0x320>
          p->tot_len = new_tot_len;
 800779a:	f8a9 5008 	strh.w	r5, [r9, #8]
          p->len = 0;
 800779e:	f8a9 200a 	strh.w	r2, [r9, #10]
          off -= p->len;
 80077a2:	ebaa 0a03 	sub.w	sl, sl, r3
          p = p->next;
 80077a6:	f8d9 9000 	ldr.w	r9, [r9]
 80077aa:	e6ff      	b.n	80075ac <tcp_receive+0x3ac>
 80077ac:	0800cbdb 	.word	0x0800cbdb
 80077b0:	0800cc03 	.word	0x0800cc03
 80077b4:	200021da 	.word	0x200021da
 80077b8:	200021a8 	.word	0x200021a8
 80077bc:	0800cb90 	.word	0x0800cb90
 80077c0:	0800cc23 	.word	0x0800cc23
 80077c4:	0800b831 	.word	0x0800b831
 80077c8:	0800cc33 	.word	0x0800cc33
 80077cc:	0800cc42 	.word	0x0800cc42
 80077d0:	0800cc52 	.word	0x0800cc52
 80077d4:	0800cc65 	.word	0x0800cc65
 80077d8:	0800cc9c 	.word	0x0800cc9c
 80077dc:	20005728 	.word	0x20005728
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80077e0:	4269      	negs	r1, r5
 80077e2:	b209      	sxth	r1, r1
 80077e4:	f7fe faca 	bl	8005d7c <pbuf_header>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f43f aef2 	beq.w	80075d2 <tcp_receive+0x3d2>
          LWIP_ASSERT("pbuf_header failed", 0);
 80077ee:	4b9c      	ldr	r3, [pc, #624]	; (8007a60 <tcp_receive+0x860>)
 80077f0:	f240 5251 	movw	r2, #1361	; 0x551
 80077f4:	e6e9      	b.n	80075ca <tcp_receive+0x3ca>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80077f6:	1a9b      	subs	r3, r3, r2
 80077f8:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 80077fa:	bfbe      	ittt	lt
 80077fc:	7ea3      	ldrblt	r3, [r4, #26]
 80077fe:	f043 0302 	orrlt.w	r3, r3, #2
 8007802:	76a3      	strblt	r3, [r4, #26]
 8007804:	e6f1      	b.n	80075ea <tcp_receive+0x3ea>
              pcb->ooseq = pcb->ooseq->next;
 8007806:	6803      	ldr	r3, [r0, #0]
 8007808:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800780a:	f7fe feff 	bl	800660c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800780e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007810:	2800      	cmp	r0, #0
 8007812:	d1f8      	bne.n	8007806 <tcp_receive+0x606>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8007814:	883a      	ldrh	r2, [r7, #0]
 8007816:	6833      	ldr	r3, [r6, #0]
 8007818:	4413      	add	r3, r2
 800781a:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800781c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800781e:	4293      	cmp	r3, r2
 8007820:	d206      	bcs.n	8007830 <tcp_receive+0x630>
 8007822:	4b8f      	ldr	r3, [pc, #572]	; (8007a60 <tcp_receive+0x860>)
 8007824:	498f      	ldr	r1, [pc, #572]	; (8007a64 <tcp_receive+0x864>)
 8007826:	4890      	ldr	r0, [pc, #576]	; (8007a68 <tcp_receive+0x868>)
 8007828:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800782c:	f002 ffa6 	bl	800a77c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8007830:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007832:	883a      	ldrh	r2, [r7, #0]
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8007838:	4620      	mov	r0, r4
 800783a:	f7fe fe7d 	bl	8006538 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800783e:	686b      	ldr	r3, [r5, #4]
 8007840:	891a      	ldrh	r2, [r3, #8]
 8007842:	b11a      	cbz	r2, 800784c <tcp_receive+0x64c>
          recv_data = inseg.p;
 8007844:	4a89      	ldr	r2, [pc, #548]	; (8007a6c <tcp_receive+0x86c>)
 8007846:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8007848:	2300      	movs	r3, #0
 800784a:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800784c:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800784e:	4f84      	ldr	r7, [pc, #528]	; (8007a60 <tcp_receive+0x860>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007850:	8998      	ldrh	r0, [r3, #12]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007852:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8007a78 <tcp_receive+0x878>
 8007856:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8007a68 <tcp_receive+0x868>
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800785a:	f7fc fcd5 	bl	8004208 <lwip_htons>
 800785e:	07c5      	lsls	r5, r0, #31
          recv_flags |= TF_GOT_FIN;
 8007860:	bf41      	itttt	mi
 8007862:	4a83      	ldrmi	r2, [pc, #524]	; (8007a70 <tcp_receive+0x870>)
 8007864:	7813      	ldrbmi	r3, [r2, #0]
 8007866:	f043 0320 	orrmi.w	r3, r3, #32
 800786a:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800786c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800786e:	b125      	cbz	r5, 800787a <tcp_receive+0x67a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007870:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8007872:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007874:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8007876:	428b      	cmp	r3, r1
 8007878:	d033      	beq.n	80078e2 <tcp_receive+0x6e2>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800787a:	7ea3      	ldrb	r3, [r4, #26]
 800787c:	07d9      	lsls	r1, r3, #31
 800787e:	f140 8087 	bpl.w	8007990 <tcp_receive+0x790>
 8007882:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8007886:	f043 0302 	orr.w	r3, r3, #2
 800788a:	e083      	b.n	8007994 <tcp_receive+0x794>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800788c:	f8be 000c 	ldrh.w	r0, [lr, #12]
 8007890:	f7fc fcba 	bl	8004208 <lwip_htons>
 8007894:	07c1      	lsls	r1, r0, #31
 8007896:	d51d      	bpl.n	80078d4 <tcp_receive+0x6d4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8007898:	68eb      	ldr	r3, [r5, #12]
 800789a:	8998      	ldrh	r0, [r3, #12]
 800789c:	f7fc fcb4 	bl	8004208 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80078a0:	0782      	lsls	r2, r0, #30
 80078a2:	d417      	bmi.n	80078d4 <tcp_receive+0x6d4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80078a4:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80078a8:	2001      	movs	r0, #1
 80078aa:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 80078ae:	f7fc fcab 	bl	8004208 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 80078b2:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80078b4:	ea49 0000 	orr.w	r0, r9, r0
 80078b8:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80078bc:	8998      	ldrh	r0, [r3, #12]
 80078be:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80078c2:	f7fc fca1 	bl	8004208 <lwip_htons>
 80078c6:	f010 0003 	ands.w	r0, r0, #3
 80078ca:	bf18      	it	ne
 80078cc:	2001      	movne	r0, #1
 80078ce:	4481      	add	r9, r0
 80078d0:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 80078d4:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 80078d8:	4640      	mov	r0, r8
 80078da:	f7fe fe97 	bl	800660c <tcp_seg_free>
              next = next->next;
 80078de:	46c8      	mov	r8, r9
 80078e0:	e6f4      	b.n	80076cc <tcp_receive+0x4cc>
          seqno = pcb->ooseq->tcphdr->seqno;
 80078e2:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80078e4:	8990      	ldrh	r0, [r2, #12]
 80078e6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80078ea:	f7fc fc8d 	bl	8004208 <lwip_htons>
 80078ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80078f0:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80078f4:	f010 0003 	ands.w	r0, r0, #3
 80078f8:	bf18      	it	ne
 80078fa:	2001      	movne	r0, #1
 80078fc:	449a      	add	sl, r3
 80078fe:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007900:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007902:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007904:	8998      	ldrh	r0, [r3, #12]
 8007906:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 800790a:	f7fc fc7d 	bl	8004208 <lwip_htons>
 800790e:	f010 0003 	ands.w	r0, r0, #3
 8007912:	bf18      	it	ne
 8007914:	2001      	movne	r0, #1
 8007916:	4458      	add	r0, fp
 8007918:	4582      	cmp	sl, r0
 800791a:	d206      	bcs.n	800792a <tcp_receive+0x72a>
 800791c:	463b      	mov	r3, r7
 800791e:	f240 52de 	movw	r2, #1502	; 0x5de
 8007922:	4641      	mov	r1, r8
 8007924:	4648      	mov	r0, r9
 8007926:	f002 ff29 	bl	800a77c <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800792a:	68eb      	ldr	r3, [r5, #12]
 800792c:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8007930:	8998      	ldrh	r0, [r3, #12]
 8007932:	f7fc fc69 	bl	8004208 <lwip_htons>
 8007936:	f010 0003 	ands.w	r0, r0, #3
 800793a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800793c:	bf18      	it	ne
 800793e:	2001      	movne	r0, #1
 8007940:	4450      	add	r0, sl
 8007942:	1a18      	subs	r0, r3, r0
 8007944:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8007946:	4620      	mov	r0, r4
 8007948:	f7fe fdf6 	bl	8006538 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800794c:	6869      	ldr	r1, [r5, #4]
 800794e:	890b      	ldrh	r3, [r1, #8]
 8007950:	b133      	cbz	r3, 8007960 <tcp_receive+0x760>
            if (recv_data) {
 8007952:	4b46      	ldr	r3, [pc, #280]	; (8007a6c <tcp_receive+0x86c>)
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	b1c8      	cbz	r0, 800798c <tcp_receive+0x78c>
              pbuf_cat(recv_data, cseg->p);
 8007958:	f7fe fbe4 	bl	8006124 <pbuf_cat>
            cseg->p = NULL;
 800795c:	2300      	movs	r3, #0
 800795e:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007960:	68eb      	ldr	r3, [r5, #12]
 8007962:	8998      	ldrh	r0, [r3, #12]
 8007964:	f7fc fc50 	bl	8004208 <lwip_htons>
 8007968:	07c0      	lsls	r0, r0, #31
 800796a:	d509      	bpl.n	8007980 <tcp_receive+0x780>
            recv_flags |= TF_GOT_FIN;
 800796c:	4a40      	ldr	r2, [pc, #256]	; (8007a70 <tcp_receive+0x870>)
 800796e:	7813      	ldrb	r3, [r2, #0]
 8007970:	f043 0320 	orr.w	r3, r3, #32
 8007974:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8007976:	7d23      	ldrb	r3, [r4, #20]
 8007978:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800797a:	bf04      	itt	eq
 800797c:	2307      	moveq	r3, #7
 800797e:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8007984:	4628      	mov	r0, r5
 8007986:	f7fe fe41 	bl	800660c <tcp_seg_free>
 800798a:	e76f      	b.n	800786c <tcp_receive+0x66c>
              recv_data = cseg->p;
 800798c:	6019      	str	r1, [r3, #0]
 800798e:	e7e5      	b.n	800795c <tcp_receive+0x75c>
        tcp_ack(pcb);
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8007996:	b003      	add	sp, #12
 8007998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 800799c:	4620      	mov	r0, r4
 800799e:	f001 faa7 	bl	8008ef0 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 80079a2:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80079a4:	b925      	cbnz	r5, 80079b0 <tcp_receive+0x7b0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80079a6:	4833      	ldr	r0, [pc, #204]	; (8007a74 <tcp_receive+0x874>)
 80079a8:	f7fe fe48 	bl	800663c <tcp_seg_copy>
 80079ac:	6720      	str	r0, [r4, #112]	; 0x70
 80079ae:	e7f2      	b.n	8007996 <tcp_receive+0x796>
            if (seqno == next->tcphdr->seqno) {
 80079b0:	6833      	ldr	r3, [r6, #0]
 80079b2:	f04f 0800 	mov.w	r8, #0
 80079b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80079ba:	f103 0c01 	add.w	ip, r3, #1
 80079be:	68e8      	ldr	r0, [r5, #12]
 80079c0:	6842      	ldr	r2, [r0, #4]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d117      	bne.n	80079f6 <tcp_receive+0x7f6>
              if (inseg.len > next->len) {
 80079c6:	482b      	ldr	r0, [pc, #172]	; (8007a74 <tcp_receive+0x874>)
 80079c8:	892b      	ldrh	r3, [r5, #8]
 80079ca:	8902      	ldrh	r2, [r0, #8]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d9e2      	bls.n	8007996 <tcp_receive+0x796>
                cseg = tcp_seg_copy(&inseg);
 80079d0:	f7fe fe34 	bl	800663c <tcp_seg_copy>
                if (cseg != NULL) {
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d0de      	beq.n	8007996 <tcp_receive+0x796>
                  if (prev != NULL) {
 80079d8:	f1b8 0f00 	cmp.w	r8, #0
 80079dc:	d009      	beq.n	80079f2 <tcp_receive+0x7f2>
                    prev->next = cseg;
 80079de:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 80079e2:	4629      	mov	r1, r5
}
 80079e4:	b003      	add	sp, #12
 80079e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 80079ea:	f7ff bbcb 	b.w	8007184 <tcp_oos_insert_segment>
 80079ee:	460d      	mov	r5, r1
 80079f0:	e7e5      	b.n	80079be <tcp_receive+0x7be>
                    pcb->ooseq = cseg;
 80079f2:	6720      	str	r0, [r4, #112]	; 0x70
 80079f4:	e7f5      	b.n	80079e2 <tcp_receive+0x7e2>
              if (prev == NULL) {
 80079f6:	f1b8 0f00 	cmp.w	r8, #0
 80079fa:	d109      	bne.n	8007a10 <tcp_receive+0x810>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80079fc:	1a99      	subs	r1, r3, r2
 80079fe:	2900      	cmp	r1, #0
 8007a00:	da3c      	bge.n	8007a7c <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8007a02:	481c      	ldr	r0, [pc, #112]	; (8007a74 <tcp_receive+0x874>)
 8007a04:	f7fe fe1a 	bl	800663c <tcp_seg_copy>
                  if (cseg != NULL) {
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d0c4      	beq.n	8007996 <tcp_receive+0x796>
                    pcb->ooseq = cseg;
 8007a0c:	6720      	str	r0, [r4, #112]	; 0x70
 8007a0e:	e7e8      	b.n	80079e2 <tcp_receive+0x7e2>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8007a10:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007a14:	6849      	ldr	r1, [r1, #4]
 8007a16:	ebae 0101 	sub.w	r1, lr, r1
 8007a1a:	2900      	cmp	r1, #0
 8007a1c:	db2e      	blt.n	8007a7c <tcp_receive+0x87c>
 8007a1e:	ebac 0102 	sub.w	r1, ip, r2
 8007a22:	2900      	cmp	r1, #0
 8007a24:	dc2a      	bgt.n	8007a7c <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8007a26:	4813      	ldr	r0, [pc, #76]	; (8007a74 <tcp_receive+0x874>)
 8007a28:	f7fe fe08 	bl	800663c <tcp_seg_copy>
                  if (cseg != NULL) {
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d0b1      	beq.n	8007996 <tcp_receive+0x796>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8007a32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a36:	6831      	ldr	r1, [r6, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007a3e:	4413      	add	r3, r2
 8007a40:	1a5b      	subs	r3, r3, r1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dd07      	ble.n	8007a56 <tcp_receive+0x856>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007a46:	1a89      	subs	r1, r1, r2
 8007a48:	b289      	uxth	r1, r1
 8007a4a:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8007a4e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007a52:	f7fe fadb 	bl	800600c <pbuf_realloc>
                    prev->next = cseg;
 8007a56:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	e7c1      	b.n	80079e4 <tcp_receive+0x7e4>
 8007a60:	0800cb90 	.word	0x0800cb90
 8007a64:	0800ccd7 	.word	0x0800ccd7
 8007a68:	0800b831 	.word	0x0800b831
 8007a6c:	200021bc 	.word	0x200021bc
 8007a70:	200021c0 	.word	0x200021c0
 8007a74:	200021a8 	.word	0x200021a8
 8007a78:	0800ccf6 	.word	0x0800ccf6
              if (next->next == NULL &&
 8007a7c:	6829      	ldr	r1, [r5, #0]
 8007a7e:	46a8      	mov	r8, r5
 8007a80:	2900      	cmp	r1, #0
 8007a82:	d1b4      	bne.n	80079ee <tcp_receive+0x7ee>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8007a84:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dd85      	ble.n	8007996 <tcp_receive+0x796>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007a8a:	8980      	ldrh	r0, [r0, #12]
 8007a8c:	f7fc fbbc 	bl	8004208 <lwip_htons>
 8007a90:	07c2      	lsls	r2, r0, #31
 8007a92:	d480      	bmi.n	8007996 <tcp_receive+0x796>
                next->next = tcp_seg_copy(&inseg);
 8007a94:	483c      	ldr	r0, [pc, #240]	; (8007b88 <tcp_receive+0x988>)
 8007a96:	f7fe fdd1 	bl	800663c <tcp_seg_copy>
 8007a9a:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	f43f af7a 	beq.w	8007996 <tcp_receive+0x796>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8007aa2:	68eb      	ldr	r3, [r5, #12]
 8007aa4:	6831      	ldr	r1, [r6, #0]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	892b      	ldrh	r3, [r5, #8]
 8007aaa:	4413      	add	r3, r2
 8007aac:	1a5b      	subs	r3, r3, r1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	dd05      	ble.n	8007abe <tcp_receive+0x8be>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8007ab2:	1a89      	subs	r1, r1, r2
 8007ab4:	b289      	uxth	r1, r1
 8007ab6:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8007ab8:	6868      	ldr	r0, [r5, #4]
 8007aba:	f7fe faa7 	bl	800600c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8007abe:	6832      	ldr	r2, [r6, #0]
 8007ac0:	883b      	ldrh	r3, [r7, #0]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007ac6:	1a9b      	subs	r3, r3, r2
 8007ac8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007aca:	1a9b      	subs	r3, r3, r2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f77f af62 	ble.w	8007996 <tcp_receive+0x796>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8007ad2:	682b      	ldr	r3, [r5, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	8998      	ldrh	r0, [r3, #12]
 8007ad8:	f7fc fb96 	bl	8004208 <lwip_htons>
 8007adc:	07c3      	lsls	r3, r0, #31
 8007ade:	d511      	bpl.n	8007b04 <tcp_receive+0x904>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8007ae6:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8007aea:	4640      	mov	r0, r8
 8007aec:	f7fc fb8c 	bl	8004208 <lwip_htons>
 8007af0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8007af4:	f7fc fb88 	bl	8004208 <lwip_htons>
 8007af8:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8007afc:	ea40 0808 	orr.w	r8, r0, r8
 8007b00:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007b04:	6832      	ldr	r2, [r6, #0]
 8007b06:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	1a89      	subs	r1, r1, r2
 8007b0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8007b0e:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007b10:	4411      	add	r1, r2
 8007b12:	b289      	uxth	r1, r1
 8007b14:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007b16:	f7fe fa79 	bl	800600c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007b1a:	682b      	ldr	r3, [r5, #0]
 8007b1c:	891d      	ldrh	r5, [r3, #8]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	8998      	ldrh	r0, [r3, #12]
 8007b22:	f7fc fb71 	bl	8004208 <lwip_htons>
 8007b26:	f010 0003 	ands.w	r0, r0, #3
 8007b2a:	bf18      	it	ne
 8007b2c:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007b2e:	6833      	ldr	r3, [r6, #0]
 8007b30:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8007b32:	4428      	add	r0, r5
 8007b34:	b280      	uxth	r0, r0
 8007b36:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007b38:	4418      	add	r0, r3
 8007b3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007b3c:	4413      	add	r3, r2
 8007b3e:	4298      	cmp	r0, r3
 8007b40:	f43f af29 	beq.w	8007996 <tcp_receive+0x796>
 8007b44:	4b11      	ldr	r3, [pc, #68]	; (8007b8c <tcp_receive+0x98c>)
 8007b46:	4912      	ldr	r1, [pc, #72]	; (8007b90 <tcp_receive+0x990>)
 8007b48:	4812      	ldr	r0, [pc, #72]	; (8007b94 <tcp_receive+0x994>)
 8007b4a:	f240 627b 	movw	r2, #1659	; 0x67b
}
 8007b4e:	b003      	add	sp, #12
 8007b50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007b54:	f002 be12 	b.w	800a77c <iprintf>
      tcp_send_empty_ack(pcb);
 8007b58:	4620      	mov	r0, r4
}
 8007b5a:	b003      	add	sp, #12
 8007b5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 8007b60:	f001 b9c6 	b.w	8008ef0 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8007b64:	6833      	ldr	r3, [r6, #0]
 8007b66:	1a99      	subs	r1, r3, r2
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	db06      	blt.n	8007b7a <tcp_receive+0x97a>
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	1a9b      	subs	r3, r3, r2
 8007b70:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007b72:	1a9b      	subs	r3, r3, r2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f77f af0e 	ble.w	8007996 <tcp_receive+0x796>
      tcp_ack_now(pcb);
 8007b7a:	7ea3      	ldrb	r3, [r4, #26]
 8007b7c:	e683      	b.n	8007886 <tcp_receive+0x686>
        pcb->dupacks = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b84:	f7ff bbb1 	b.w	80072ea <tcp_receive+0xea>
 8007b88:	200021a8 	.word	0x200021a8
 8007b8c:	0800cb90 	.word	0x0800cb90
 8007b90:	0800cc65 	.word	0x0800cc65
 8007b94:	0800b831 	.word	0x0800b831

08007b98 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007b98:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <tcp_getoptbyte+0x30>)
 8007b9a:	4a0c      	ldr	r2, [pc, #48]	; (8007bcc <tcp_getoptbyte+0x34>)
 8007b9c:	6819      	ldr	r1, [r3, #0]
{
 8007b9e:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007ba0:	b121      	cbz	r1, 8007bac <tcp_getoptbyte+0x14>
 8007ba2:	480b      	ldr	r0, [pc, #44]	; (8007bd0 <tcp_getoptbyte+0x38>)
 8007ba4:	8813      	ldrh	r3, [r2, #0]
 8007ba6:	8800      	ldrh	r0, [r0, #0]
 8007ba8:	4283      	cmp	r3, r0
 8007baa:	d207      	bcs.n	8007bbc <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8007bae:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007bb0:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8007bb2:	440b      	add	r3, r1
 8007bb4:	1c48      	adds	r0, r1, #1
 8007bb6:	8010      	strh	r0, [r2, #0]
 8007bb8:	7d18      	ldrb	r0, [r3, #20]
 8007bba:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007bbc:	1c5c      	adds	r4, r3, #1
 8007bbe:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8007bc0:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007bc2:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8007bc4:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8007bc6:	bd10      	pop	{r4, pc}
 8007bc8:	200021d4 	.word	0x200021d4
 8007bcc:	200021c8 	.word	0x200021c8
 8007bd0:	200021d0 	.word	0x200021d0
 8007bd4:	200021cc 	.word	0x200021cc

08007bd8 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007bda:	4d19      	ldr	r5, [pc, #100]	; (8007c40 <tcp_parseopt.isra.1.part.2+0x68>)
 8007bdc:	4e19      	ldr	r6, [pc, #100]	; (8007c44 <tcp_parseopt.isra.1.part.2+0x6c>)
 8007bde:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8007be0:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007be2:	802b      	strh	r3, [r5, #0]
 8007be4:	8834      	ldrh	r4, [r6, #0]
 8007be6:	882b      	ldrh	r3, [r5, #0]
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	d300      	bcc.n	8007bee <tcp_parseopt.isra.1.part.2+0x16>
 8007bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 8007bee:	f7ff ffd3 	bl	8007b98 <tcp_getoptbyte>
      switch (opt) {
 8007bf2:	2801      	cmp	r0, #1
 8007bf4:	d0f6      	beq.n	8007be4 <tcp_parseopt.isra.1.part.2+0xc>
 8007bf6:	d3f9      	bcc.n	8007bec <tcp_parseopt.isra.1.part.2+0x14>
 8007bf8:	2802      	cmp	r0, #2
 8007bfa:	d117      	bne.n	8007c2c <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007bfc:	f7ff ffcc 	bl	8007b98 <tcp_getoptbyte>
 8007c00:	2804      	cmp	r0, #4
 8007c02:	d1f3      	bne.n	8007bec <tcp_parseopt.isra.1.part.2+0x14>
 8007c04:	882b      	ldrh	r3, [r5, #0]
 8007c06:	3301      	adds	r3, #1
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	daef      	bge.n	8007bec <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8007c0c:	f7ff ffc4 	bl	8007b98 <tcp_getoptbyte>
 8007c10:	0200      	lsls	r0, r0, #8
 8007c12:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8007c14:	f7ff ffc0 	bl	8007b98 <tcp_getoptbyte>
 8007c18:	4320      	orrs	r0, r4
 8007c1a:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007c1c:	1e43      	subs	r3, r0, #1
 8007c1e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007c22:	bf28      	it	cs
 8007c24:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8007c28:	8038      	strh	r0, [r7, #0]
 8007c2a:	e7db      	b.n	8007be4 <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8007c2c:	f7ff ffb4 	bl	8007b98 <tcp_getoptbyte>
        if (data < 2) {
 8007c30:	2801      	cmp	r0, #1
 8007c32:	d9db      	bls.n	8007bec <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8007c34:	882b      	ldrh	r3, [r5, #0]
 8007c36:	3b02      	subs	r3, #2
 8007c38:	4418      	add	r0, r3
 8007c3a:	8028      	strh	r0, [r5, #0]
 8007c3c:	e7d2      	b.n	8007be4 <tcp_parseopt.isra.1.part.2+0xc>
 8007c3e:	bf00      	nop
 8007c40:	200021c8 	.word	0x200021c8
 8007c44:	200021d8 	.word	0x200021d8

08007c48 <tcp_input_delayed_close>:
{
 8007c48:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 8007c4a:	4b0d      	ldr	r3, [pc, #52]	; (8007c80 <tcp_input_delayed_close+0x38>)
{
 8007c4c:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8007c4e:	7818      	ldrb	r0, [r3, #0]
 8007c50:	f010 0010 	ands.w	r0, r0, #16
 8007c54:	d012      	beq.n	8007c7c <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007c56:	7ea3      	ldrb	r3, [r4, #26]
 8007c58:	06db      	lsls	r3, r3, #27
 8007c5a:	d406      	bmi.n	8007c6a <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007c5c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007c60:	b11b      	cbz	r3, 8007c6a <tcp_input_delayed_close+0x22>
 8007c62:	f06f 010e 	mvn.w	r1, #14
 8007c66:	6920      	ldr	r0, [r4, #16]
 8007c68:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4805      	ldr	r0, [pc, #20]	; (8007c84 <tcp_input_delayed_close+0x3c>)
 8007c6e:	f7fe ff65 	bl	8006b3c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007c72:	2001      	movs	r0, #1
 8007c74:	4621      	mov	r1, r4
 8007c76:	f7fd ff23 	bl	8005ac0 <memp_free>
 8007c7a:	2001      	movs	r0, #1
}
 8007c7c:	bd10      	pop	{r4, pc}
 8007c7e:	bf00      	nop
 8007c80:	200021c0 	.word	0x200021c0
 8007c84:	20005724 	.word	0x20005724

08007c88 <tcp_input>:
{
 8007c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8007c8c:	4e9f      	ldr	r6, [pc, #636]	; (8007f0c <tcp_input+0x284>)
 8007c8e:	6843      	ldr	r3, [r0, #4]
 8007c90:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8007c92:	8943      	ldrh	r3, [r0, #10]
 8007c94:	2b13      	cmp	r3, #19
{
 8007c96:	b089      	sub	sp, #36	; 0x24
 8007c98:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 8007c9a:	f240 81b2 	bls.w	8008002 <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c9e:	4f9c      	ldr	r7, [pc, #624]	; (8007f10 <tcp_input+0x288>)
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6978      	ldr	r0, [r7, #20]
 8007ca4:	f7fd f91b 	bl	8004ede <ip4_addr_isbroadcast_u32>
 8007ca8:	46b8      	mov	r8, r7
 8007caa:	4604      	mov	r4, r0
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f040 81a8 	bne.w	8008002 <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007cb8:	2be0      	cmp	r3, #224	; 0xe0
 8007cba:	f000 81a2 	beq.w	8008002 <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8007cbe:	6833      	ldr	r3, [r6, #0]
 8007cc0:	8998      	ldrh	r0, [r3, #12]
 8007cc2:	f7fc faa1 	bl	8004208 <lwip_htons>
 8007cc6:	0a81      	lsrs	r1, r0, #10
 8007cc8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007ccc:	2913      	cmp	r1, #19
 8007cce:	f240 8198 	bls.w	8008002 <tcp_input+0x37a>
 8007cd2:	892b      	ldrh	r3, [r5, #8]
 8007cd4:	b289      	uxth	r1, r1
 8007cd6:	428b      	cmp	r3, r1
 8007cd8:	f0c0 8193 	bcc.w	8008002 <tcp_input+0x37a>
  if (p->len >= hdrlen_bytes) {
 8007cdc:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007cde:	4a8d      	ldr	r2, [pc, #564]	; (8007f14 <tcp_input+0x28c>)
  tcphdr_opt2 = NULL;
 8007ce0:	4f8d      	ldr	r7, [pc, #564]	; (8007f18 <tcp_input+0x290>)
 8007ce2:	9206      	str	r2, [sp, #24]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007ce4:	f1a1 0314 	sub.w	r3, r1, #20
 8007ce8:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8007cea:	4288      	cmp	r0, r1
  tcphdr_opt2 = NULL;
 8007cec:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007cee:	8013      	strh	r3, [r2, #0]
 8007cf0:	4c8a      	ldr	r4, [pc, #552]	; (8007f1c <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 8007cf2:	d344      	bcc.n	8007d7e <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007cf4:	4249      	negs	r1, r1
 8007cf6:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8007cf8:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007cfa:	f7fe f83f 	bl	8005d7c <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007cfe:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007d00:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8007f70 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007d04:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007d06:	4f86      	ldr	r7, [pc, #536]	; (8007f20 <tcp_input+0x298>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007d08:	f7fc fa7e 	bl	8004208 <lwip_htons>
 8007d0c:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007d0e:	6834      	ldr	r4, [r6, #0]
 8007d10:	8860      	ldrh	r0, [r4, #2]
 8007d12:	f7fc fa79 	bl	8004208 <lwip_htons>
 8007d16:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007d18:	6834      	ldr	r4, [r6, #0]
 8007d1a:	6860      	ldr	r0, [r4, #4]
 8007d1c:	f7fc fa77 	bl	800420e <lwip_htonl>
 8007d20:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007d22:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007d24:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007d28:	68a0      	ldr	r0, [r4, #8]
 8007d2a:	f7fc fa70 	bl	800420e <lwip_htonl>
 8007d2e:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007d30:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007d32:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007d34:	89e0      	ldrh	r0, [r4, #14]
 8007d36:	f7fc fa67 	bl	8004208 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8007d3a:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007d3c:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8007d3e:	8998      	ldrh	r0, [r3, #12]
 8007d40:	f7fc fa62 	bl	8004208 <lwip_htons>
 8007d44:	b2c0      	uxtb	r0, r0
 8007d46:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007d4a:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8007d4c:	4a75      	ldr	r2, [pc, #468]	; (8007f24 <tcp_input+0x29c>)
 8007d4e:	9203      	str	r2, [sp, #12]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007d50:	f010 0003 	ands.w	r0, r0, #3
 8007d54:	bf18      	it	ne
 8007d56:	2001      	movne	r0, #1
 8007d58:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d5a:	4973      	ldr	r1, [pc, #460]	; (8007f28 <tcp_input+0x2a0>)
  flags = TCPH_FLAGS(tcphdr);
 8007d5c:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007d5e:	4b73      	ldr	r3, [pc, #460]	; (8007f2c <tcp_input+0x2a4>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d60:	680c      	ldr	r4, [r1, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007d62:	8018      	strh	r0, [r3, #0]
  prev = NULL;
 8007d64:	f04f 0a00 	mov.w	sl, #0
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	4689      	mov	r9, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d6c:	2c00      	cmp	r4, #0
 8007d6e:	d140      	bne.n	8007df2 <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d70:	4b6f      	ldr	r3, [pc, #444]	; (8007f30 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007d72:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8007f34 <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d76:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007d78:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8007f74 <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d7c:	e148      	b.n	8008010 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007d7e:	682b      	ldr	r3, [r5, #0]
 8007d80:	b92b      	cbnz	r3, 8007d8e <tcp_input+0x106>
 8007d82:	4b6c      	ldr	r3, [pc, #432]	; (8007f34 <tcp_input+0x2ac>)
 8007d84:	496c      	ldr	r1, [pc, #432]	; (8007f38 <tcp_input+0x2b0>)
 8007d86:	486d      	ldr	r0, [pc, #436]	; (8007f3c <tcp_input+0x2b4>)
 8007d88:	22b2      	movs	r2, #178	; 0xb2
 8007d8a:	f002 fcf7 	bl	800a77c <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8007d8e:	f06f 0113 	mvn.w	r1, #19
 8007d92:	4628      	mov	r0, r5
 8007d94:	f7fd fff2 	bl	8005d7c <pbuf_header>
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007d98:	9b06      	ldr	r3, [sp, #24]
    tcphdr_opt1len = p->len;
 8007d9a:	8969      	ldrh	r1, [r5, #10]
 8007d9c:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007d9e:	881c      	ldrh	r4, [r3, #0]
 8007da0:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8007da2:	4249      	negs	r1, r1
 8007da4:	b209      	sxth	r1, r1
 8007da6:	4628      	mov	r0, r5
 8007da8:	f7fd ffe8 	bl	8005d7c <pbuf_header>
    if (opt2len > p->next->len) {
 8007dac:	6828      	ldr	r0, [r5, #0]
 8007dae:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007db0:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8007db2:	42a3      	cmp	r3, r4
 8007db4:	f0c0 8125 	bcc.w	8008002 <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8007db8:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8007dba:	6843      	ldr	r3, [r0, #4]
 8007dbc:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8007dbe:	b209      	sxth	r1, r1
 8007dc0:	f7fd ffdc 	bl	8005d7c <pbuf_header>
    p->tot_len -= opt2len;
 8007dc4:	892b      	ldrh	r3, [r5, #8]
 8007dc6:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007dc8:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8007dca:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007dcc:	b12b      	cbz	r3, 8007dda <tcp_input+0x152>
 8007dce:	4b59      	ldr	r3, [pc, #356]	; (8007f34 <tcp_input+0x2ac>)
 8007dd0:	495b      	ldr	r1, [pc, #364]	; (8007f40 <tcp_input+0x2b8>)
 8007dd2:	485a      	ldr	r0, [pc, #360]	; (8007f3c <tcp_input+0x2b4>)
 8007dd4:	22cf      	movs	r2, #207	; 0xcf
 8007dd6:	f002 fcd1 	bl	800a77c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007dda:	682b      	ldr	r3, [r5, #0]
 8007ddc:	892a      	ldrh	r2, [r5, #8]
 8007dde:	891b      	ldrh	r3, [r3, #8]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d08c      	beq.n	8007cfe <tcp_input+0x76>
 8007de4:	4b53      	ldr	r3, [pc, #332]	; (8007f34 <tcp_input+0x2ac>)
 8007de6:	4957      	ldr	r1, [pc, #348]	; (8007f44 <tcp_input+0x2bc>)
 8007de8:	4854      	ldr	r0, [pc, #336]	; (8007f3c <tcp_input+0x2b4>)
 8007dea:	22d0      	movs	r2, #208	; 0xd0
 8007dec:	f002 fcc6 	bl	800a77c <iprintf>
 8007df0:	e785      	b.n	8007cfe <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007df2:	7d23      	ldrb	r3, [r4, #20]
 8007df4:	b92b      	cbnz	r3, 8007e02 <tcp_input+0x17a>
 8007df6:	4b4f      	ldr	r3, [pc, #316]	; (8007f34 <tcp_input+0x2ac>)
 8007df8:	4953      	ldr	r1, [pc, #332]	; (8007f48 <tcp_input+0x2c0>)
 8007dfa:	4850      	ldr	r0, [pc, #320]	; (8007f3c <tcp_input+0x2b4>)
 8007dfc:	22e2      	movs	r2, #226	; 0xe2
 8007dfe:	f002 fcbd 	bl	800a77c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007e02:	7d23      	ldrb	r3, [r4, #20]
 8007e04:	2b0a      	cmp	r3, #10
 8007e06:	d105      	bne.n	8007e14 <tcp_input+0x18c>
 8007e08:	4b4a      	ldr	r3, [pc, #296]	; (8007f34 <tcp_input+0x2ac>)
 8007e0a:	4950      	ldr	r1, [pc, #320]	; (8007f4c <tcp_input+0x2c4>)
 8007e0c:	484b      	ldr	r0, [pc, #300]	; (8007f3c <tcp_input+0x2b4>)
 8007e0e:	22e3      	movs	r2, #227	; 0xe3
 8007e10:	f002 fcb4 	bl	800a77c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007e14:	7d23      	ldrb	r3, [r4, #20]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d105      	bne.n	8007e26 <tcp_input+0x19e>
 8007e1a:	4b46      	ldr	r3, [pc, #280]	; (8007f34 <tcp_input+0x2ac>)
 8007e1c:	494c      	ldr	r1, [pc, #304]	; (8007f50 <tcp_input+0x2c8>)
 8007e1e:	4847      	ldr	r0, [pc, #284]	; (8007f3c <tcp_input+0x2b4>)
 8007e20:	22e4      	movs	r2, #228	; 0xe4
 8007e22:	f002 fcab 	bl	800a77c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8007e26:	6832      	ldr	r2, [r6, #0]
 8007e28:	8b21      	ldrh	r1, [r4, #24]
 8007e2a:	8813      	ldrh	r3, [r2, #0]
 8007e2c:	4299      	cmp	r1, r3
 8007e2e:	68e3      	ldr	r3, [r4, #12]
 8007e30:	d169      	bne.n	8007f06 <tcp_input+0x27e>
 8007e32:	8ae1      	ldrh	r1, [r4, #22]
 8007e34:	8852      	ldrh	r2, [r2, #2]
 8007e36:	4291      	cmp	r1, r2
 8007e38:	d165      	bne.n	8007f06 <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 8007e3a:	6861      	ldr	r1, [r4, #4]
 8007e3c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007e40:	4291      	cmp	r1, r2
 8007e42:	d160      	bne.n	8007f06 <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007e44:	6821      	ldr	r1, [r4, #0]
 8007e46:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8007e4a:	4291      	cmp	r1, r2
 8007e4c:	d15b      	bne.n	8007f06 <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007e4e:	429c      	cmp	r4, r3
 8007e50:	f040 8406 	bne.w	8008660 <tcp_input+0x9d8>
 8007e54:	4b37      	ldr	r3, [pc, #220]	; (8007f34 <tcp_input+0x2ac>)
 8007e56:	493f      	ldr	r1, [pc, #252]	; (8007f54 <tcp_input+0x2cc>)
 8007e58:	4838      	ldr	r0, [pc, #224]	; (8007f3c <tcp_input+0x2b4>)
 8007e5a:	22ec      	movs	r2, #236	; 0xec
 8007e5c:	f002 fc8e 	bl	800a77c <iprintf>
      if (prev != NULL) {
 8007e60:	f1ba 0f00 	cmp.w	sl, #0
 8007e64:	d007      	beq.n	8007e76 <tcp_input+0x1ee>
        prev->next = pcb->next;
 8007e66:	68e3      	ldr	r3, [r4, #12]
 8007e68:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 8007e6c:	f8d9 3000 	ldr.w	r3, [r9]
 8007e70:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 8007e72:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007e76:	68e3      	ldr	r3, [r4, #12]
 8007e78:	429c      	cmp	r4, r3
 8007e7a:	d105      	bne.n	8007e88 <tcp_input+0x200>
 8007e7c:	4b2d      	ldr	r3, [pc, #180]	; (8007f34 <tcp_input+0x2ac>)
 8007e7e:	4936      	ldr	r1, [pc, #216]	; (8007f58 <tcp_input+0x2d0>)
 8007e80:	482e      	ldr	r0, [pc, #184]	; (8007f3c <tcp_input+0x2b4>)
 8007e82:	22f4      	movs	r2, #244	; 0xf4
 8007e84:	f002 fc7a 	bl	800a77c <iprintf>
    inseg.next = NULL;
 8007e88:	4b34      	ldr	r3, [pc, #208]	; (8007f5c <tcp_input+0x2d4>)
    inseg.len = p->tot_len;
 8007e8a:	8929      	ldrh	r1, [r5, #8]
 8007e8c:	8119      	strh	r1, [r3, #8]
    inseg.next = NULL;
 8007e8e:	2200      	movs	r2, #0
    inseg.tcphdr = tcphdr;
 8007e90:	6831      	ldr	r1, [r6, #0]
    inseg.next = NULL;
 8007e92:	601a      	str	r2, [r3, #0]
    inseg.tcphdr = tcphdr;
 8007e94:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 8007e96:	4832      	ldr	r0, [pc, #200]	; (8007f60 <tcp_input+0x2d8>)
    recv_acked = 0;
 8007e98:	4932      	ldr	r1, [pc, #200]	; (8007f64 <tcp_input+0x2dc>)
    inseg.p = p;
 8007e9a:	605d      	str	r5, [r3, #4]
    recv_data = NULL;
 8007e9c:	4b32      	ldr	r3, [pc, #200]	; (8007f68 <tcp_input+0x2e0>)
    recv_flags = 0;
 8007e9e:	7002      	strb	r2, [r0, #0]
    recv_data = NULL;
 8007ea0:	601a      	str	r2, [r3, #0]
    recv_acked = 0;
 8007ea2:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 8007ea4:	9a03      	ldr	r2, [sp, #12]
 8007ea6:	9105      	str	r1, [sp, #20]
 8007ea8:	7812      	ldrb	r2, [r2, #0]
 8007eaa:	f012 0f08 	tst.w	r2, #8
 8007eae:	4680      	mov	r8, r0
 8007eb0:	469a      	mov	sl, r3
 8007eb2:	d003      	beq.n	8007ebc <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 8007eb4:	7b6b      	ldrb	r3, [r5, #13]
 8007eb6:	f043 0301 	orr.w	r3, r3, #1
 8007eba:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8007ebc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007ebe:	4d2b      	ldr	r5, [pc, #172]	; (8007f6c <tcp_input+0x2e4>)
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8137 	beq.w	8008134 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f7fe ff4a 	bl	8006d60 <tcp_process_refused_data>
 8007ecc:	300d      	adds	r0, #13
 8007ece:	d008      	beq.n	8007ee2 <tcp_input+0x25a>
 8007ed0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 812e 	beq.w	8008134 <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007ed8:	9b04      	ldr	r3, [sp, #16]
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 8129 	beq.w	8008134 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8007ee2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ee4:	b913      	cbnz	r3, 8007eec <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f001 f802 	bl	8008ef0 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 8007eec:	2400      	movs	r4, #0
 8007eee:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8007ef0:	4d1a      	ldr	r5, [pc, #104]	; (8007f5c <tcp_input+0x2d4>)
    recv_data = NULL;
 8007ef2:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8007ef6:	6868      	ldr	r0, [r5, #4]
 8007ef8:	b110      	cbz	r0, 8007f00 <tcp_input+0x278>
      pbuf_free(inseg.p);
 8007efa:	f7fd ff45 	bl	8005d88 <pbuf_free>
      inseg.p = NULL;
 8007efe:	606c      	str	r4, [r5, #4]
}
 8007f00:	b009      	add	sp, #36	; 0x24
 8007f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f06:	46a2      	mov	sl, r4
 8007f08:	461c      	mov	r4, r3
 8007f0a:	e72f      	b.n	8007d6c <tcp_input+0xe4>
 8007f0c:	200021cc 	.word	0x200021cc
 8007f10:	200021fc 	.word	0x200021fc
 8007f14:	200021d8 	.word	0x200021d8
 8007f18:	200021d4 	.word	0x200021d4
 8007f1c:	200021d0 	.word	0x200021d0
 8007f20:	200021a0 	.word	0x200021a0
 8007f24:	200021a4 	.word	0x200021a4
 8007f28:	20005724 	.word	0x20005724
 8007f2c:	200021da 	.word	0x200021da
 8007f30:	20005734 	.word	0x20005734
 8007f34:	0800cb90 	.word	0x0800cb90
 8007f38:	0800c9da 	.word	0x0800c9da
 8007f3c:	0800b831 	.word	0x0800b831
 8007f40:	0800c9ea 	.word	0x0800c9ea
 8007f44:	0800c9f6 	.word	0x0800c9f6
 8007f48:	0800ca15 	.word	0x0800ca15
 8007f4c:	0800ca3c 	.word	0x0800ca3c
 8007f50:	0800ca66 	.word	0x0800ca66
 8007f54:	0800ca8d 	.word	0x0800ca8d
 8007f58:	0800cab8 	.word	0x0800cab8
 8007f5c:	200021a8 	.word	0x200021a8
 8007f60:	200021c0 	.word	0x200021c0
 8007f64:	200021b8 	.word	0x200021b8
 8007f68:	200021bc 	.word	0x200021bc
 8007f6c:	20005738 	.word	0x20005738
 8007f70:	200021c4 	.word	0x200021c4
 8007f74:	0800cae2 	.word	0x0800cae2
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007f78:	7d23      	ldrb	r3, [r4, #20]
 8007f7a:	2b0a      	cmp	r3, #10
 8007f7c:	d005      	beq.n	8007f8a <tcp_input+0x302>
 8007f7e:	4653      	mov	r3, sl
 8007f80:	22fe      	movs	r2, #254	; 0xfe
 8007f82:	4649      	mov	r1, r9
 8007f84:	489d      	ldr	r0, [pc, #628]	; (80081fc <tcp_input+0x574>)
 8007f86:	f002 fbf9 	bl	800a77c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8007f8a:	6833      	ldr	r3, [r6, #0]
 8007f8c:	8b22      	ldrh	r2, [r4, #24]
 8007f8e:	8818      	ldrh	r0, [r3, #0]
 8007f90:	4290      	cmp	r0, r2
 8007f92:	d13c      	bne.n	800800e <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8007f94:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 8007f96:	885a      	ldrh	r2, [r3, #2]
 8007f98:	428a      	cmp	r2, r1
 8007f9a:	d138      	bne.n	800800e <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8007f9c:	6861      	ldr	r1, [r4, #4]
 8007f9e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007fa2:	4299      	cmp	r1, r3
 8007fa4:	d133      	bne.n	800800e <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007fa6:	6821      	ldr	r1, [r4, #0]
 8007fa8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007fac:	4299      	cmp	r1, r3
 8007fae:	d12e      	bne.n	800800e <tcp_input+0x386>
  if (flags & TCP_RST) {
 8007fb0:	9b03      	ldr	r3, [sp, #12]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	0759      	lsls	r1, r3, #29
 8007fb6:	d424      	bmi.n	8008002 <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 8007fb8:	079e      	lsls	r6, r3, #30
 8007fba:	d513      	bpl.n	8007fe4 <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007fbc:	f8db 1000 	ldr.w	r1, [fp]
 8007fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fc2:	1acb      	subs	r3, r1, r3
 8007fc4:	d413      	bmi.n	8007fee <tcp_input+0x366>
 8007fc6:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8007fc8:	1b9b      	subs	r3, r3, r6
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	dc0f      	bgt.n	8007fee <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fce:	9b04      	ldr	r3, [sp, #16]
 8007fd0:	881c      	ldrh	r4, [r3, #0]
 8007fd2:	9001      	str	r0, [sp, #4]
 8007fd4:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fd6:	4b8a      	ldr	r3, [pc, #552]	; (8008200 <tcp_input+0x578>)
 8007fd8:	4421      	add	r1, r4
 8007fda:	1d1a      	adds	r2, r3, #4
 8007fdc:	6838      	ldr	r0, [r7, #0]
 8007fde:	f001 f93b 	bl	8009258 <tcp_rst>
 8007fe2:	e00e      	b.n	8008002 <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 8007fe4:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 8007fe6:	bf42      	ittt	mi
 8007fe8:	4b86      	ldrmi	r3, [pc, #536]	; (8008204 <tcp_input+0x57c>)
 8007fea:	681b      	ldrmi	r3, [r3, #0]
 8007fec:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8007fee:	9b04      	ldr	r3, [sp, #16]
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b133      	cbz	r3, 8008002 <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 8007ff4:	7ea3      	ldrb	r3, [r4, #26]
 8007ff6:	f043 0302 	orr.w	r3, r3, #2
 8007ffa:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 ffad 	bl	8008f5c <tcp_output>
  pbuf_free(p);
 8008002:	4628      	mov	r0, r5
}
 8008004:	b009      	add	sp, #36	; 0x24
 8008006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800800a:	f7fd bebd 	b.w	8005d88 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800800e:	68e4      	ldr	r4, [r4, #12]
 8008010:	2c00      	cmp	r4, #0
 8008012:	d1b1      	bne.n	8007f78 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008014:	4b7c      	ldr	r3, [pc, #496]	; (8008208 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 8008016:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008018:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800801a:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800801e:	4689      	mov	r9, r1
 8008020:	f1b9 0f00 	cmp.w	r9, #0
 8008024:	d111      	bne.n	800804a <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008026:	8990      	ldrh	r0, [r2, #12]
 8008028:	f7fc f8ee 	bl	8004208 <lwip_htons>
 800802c:	0743      	lsls	r3, r0, #29
 800802e:	d4e8      	bmi.n	8008002 <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008030:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008032:	9a04      	ldr	r2, [sp, #16]
 8008034:	f8db 1000 	ldr.w	r1, [fp]
 8008038:	8810      	ldrh	r0, [r2, #0]
 800803a:	881a      	ldrh	r2, [r3, #0]
 800803c:	9201      	str	r2, [sp, #4]
 800803e:	885b      	ldrh	r3, [r3, #2]
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	4b6f      	ldr	r3, [pc, #444]	; (8008200 <tcp_input+0x578>)
 8008044:	4401      	add	r1, r0
 8008046:	1d1a      	adds	r2, r3, #4
 8008048:	e7c8      	b.n	8007fdc <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 800804a:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800804e:	8853      	ldrh	r3, [r2, #2]
 8008050:	4283      	cmp	r3, r0
 8008052:	d107      	bne.n	8008064 <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008054:	f8d9 3000 	ldr.w	r3, [r9]
 8008058:	4573      	cmp	r3, lr
 800805a:	f000 82dd 	beq.w	8008618 <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 82da 	beq.w	8008618 <tcp_input+0x990>
 8008064:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008066:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800806a:	e7d9      	b.n	8008020 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 800806c:	0798      	lsls	r0, r3, #30
 800806e:	d5c8      	bpl.n	8008002 <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 8008070:	f899 0015 	ldrb.w	r0, [r9, #21]
 8008074:	f7fe ffb8 	bl	8006fe8 <tcp_alloc>
    if (npcb == NULL) {
 8008078:	4604      	mov	r4, r0
 800807a:	b950      	cbnz	r0, 8008092 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800807c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0be      	beq.n	8008002 <tcp_input+0x37a>
 8008084:	4601      	mov	r1, r0
 8008086:	f04f 32ff 	mov.w	r2, #4294967295
 800808a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800808e:	4798      	blx	r3
 8008090:	e7b7      	b.n	8008002 <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008092:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8008096:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008098:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800809a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800809e:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 80080a0:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 80080a4:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 80080a6:	7813      	ldrb	r3, [r2, #0]
 80080a8:	7852      	ldrb	r2, [r2, #1]
 80080aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80080ae:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 80080b0:	2303      	movs	r3, #3
 80080b2:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 80080b4:	f8db 3000 	ldr.w	r3, [fp]
 80080b8:	3301      	adds	r3, #1
 80080ba:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80080bc:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80080be:	f7ff f81f 	bl	8007100 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80080c2:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 80080c6:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80080c8:	3b01      	subs	r3, #1
 80080ca:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80080cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_nxt = iss;
 80080d0:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 80080d2:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 80080d4:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 80080d6:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 80080d8:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80080dc:	f899 3008 	ldrb.w	r3, [r9, #8]
 80080e0:	f003 030c 	and.w	r3, r3, #12
 80080e4:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 80080e6:	4b49      	ldr	r3, [pc, #292]	; (800820c <tcp_input+0x584>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	60e2      	str	r2, [r4, #12]
 80080ec:	601c      	str	r4, [r3, #0]
 80080ee:	f001 fa55 	bl	800959c <tcp_timer_needed>
 80080f2:	4b47      	ldr	r3, [pc, #284]	; (8008210 <tcp_input+0x588>)
 80080f4:	2201      	movs	r2, #1
 80080f6:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 80080f8:	9b06      	ldr	r3, [sp, #24]
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	b11b      	cbz	r3, 8008106 <tcp_input+0x47e>
 80080fe:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8008102:	f7ff fd69 	bl	8007bd8 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 8008106:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008108:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800810a:	89db      	ldrh	r3, [r3, #14]
 800810c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008110:	1d21      	adds	r1, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008112:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008116:	f7fe ffff 	bl	8007118 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800811a:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800811c:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fe2c 	bl	8008d7c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8008124:	2800      	cmp	r0, #0
 8008126:	f43f af69 	beq.w	8007ffc <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 800812a:	2100      	movs	r1, #0
 800812c:	4620      	mov	r0, r4
 800812e:	f7fe fe9d 	bl	8006e6c <tcp_abandon>
 8008132:	e766      	b.n	8008002 <tcp_input+0x37a>
  if (flags & TCP_RST) {
 8008134:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 8008136:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	0759      	lsls	r1, r3, #29
 800813c:	d535      	bpl.n	80081aa <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 800813e:	7d21      	ldrb	r1, [r4, #20]
 8008140:	2902      	cmp	r1, #2
 8008142:	d122      	bne.n	800818a <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 8008144:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d109      	bne.n	8008160 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 800814c:	f898 3000 	ldrb.w	r3, [r8]
 8008150:	f043 0308 	orr.w	r3, r3, #8
 8008154:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 8008158:	7ea3      	ldrb	r3, [r4, #26]
 800815a:	f023 0301 	bic.w	r3, r3, #1
 800815e:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8008160:	f898 3000 	ldrb.w	r3, [r8]
 8008164:	0719      	lsls	r1, r3, #28
 8008166:	f140 81ed 	bpl.w	8008544 <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800816a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800816e:	b11b      	cbz	r3, 8008178 <tcp_input+0x4f0>
 8008170:	f06f 010d 	mvn.w	r1, #13
 8008174:	6920      	ldr	r0, [r4, #16]
 8008176:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008178:	4621      	mov	r1, r4
 800817a:	4824      	ldr	r0, [pc, #144]	; (800820c <tcp_input+0x584>)
 800817c:	f7fe fcde 	bl	8006b3c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8008180:	4621      	mov	r1, r4
 8008182:	2001      	movs	r0, #1
 8008184:	f7fd fc9c 	bl	8005ac0 <memp_free>
 8008188:	e6b0      	b.n	8007eec <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 800818a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800818c:	f8db 3000 	ldr.w	r3, [fp]
 8008190:	429a      	cmp	r2, r3
 8008192:	f000 825a 	beq.w	800864a <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008196:	1a9b      	subs	r3, r3, r2
 8008198:	d4e2      	bmi.n	8008160 <tcp_input+0x4d8>
 800819a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800819c:	1a9b      	subs	r3, r3, r2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	dcde      	bgt.n	8008160 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80081a2:	7ea3      	ldrb	r3, [r4, #26]
 80081a4:	f043 0302 	orr.w	r3, r3, #2
 80081a8:	e7d9      	b.n	800815e <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80081aa:	f013 0102 	ands.w	r1, r3, #2
 80081ae:	d003      	beq.n	80081b8 <tcp_input+0x530>
 80081b0:	7d22      	ldrb	r2, [r4, #20]
 80081b2:	3a02      	subs	r2, #2
 80081b4:	2a01      	cmp	r2, #1
 80081b6:	d8f4      	bhi.n	80081a2 <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80081b8:	7ea2      	ldrb	r2, [r4, #26]
 80081ba:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 80081bc:	bf5e      	ittt	pl
 80081be:	4a11      	ldrpl	r2, [pc, #68]	; (8008204 <tcp_input+0x57c>)
 80081c0:	6812      	ldrpl	r2, [r2, #0]
 80081c2:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 80081c4:	2200      	movs	r2, #0
 80081c6:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 80081ca:	9a06      	ldr	r2, [sp, #24]
 80081cc:	8812      	ldrh	r2, [r2, #0]
 80081ce:	b13a      	cbz	r2, 80081e0 <tcp_input+0x558>
 80081d0:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80081d4:	9107      	str	r1, [sp, #28]
 80081d6:	9306      	str	r3, [sp, #24]
 80081d8:	f7ff fcfe 	bl	8007bd8 <tcp_parseopt.isra.1.part.2>
 80081dc:	9907      	ldr	r1, [sp, #28]
 80081de:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 80081e0:	7d22      	ldrb	r2, [r4, #20]
 80081e2:	3a02      	subs	r2, #2
 80081e4:	2a07      	cmp	r2, #7
 80081e6:	d8bb      	bhi.n	8008160 <tcp_input+0x4d8>
 80081e8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80081ec:	00940014 	.word	0x00940014
 80081f0:	010000fc 	.word	0x010000fc
 80081f4:	00fc014a 	.word	0x00fc014a
 80081f8:	01830164 	.word	0x01830164
 80081fc:	0800b831 	.word	0x0800b831
 8008200:	2000220c 	.word	0x2000220c
 8008204:	20005728 	.word	0x20005728
 8008208:	2000572c 	.word	0x2000572c
 800820c:	20005724 	.word	0x20005724
 8008210:	20005720 	.word	0x20005720
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008214:	f003 0212 	and.w	r2, r3, #18
 8008218:	2a12      	cmp	r2, #18
 800821a:	d15e      	bne.n	80082da <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 800821c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	3201      	adds	r2, #1
 8008222:	428a      	cmp	r2, r1
 8008224:	d159      	bne.n	80082da <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 8008226:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 800822a:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 800822c:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 800822e:	6832      	ldr	r2, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8008230:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008232:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008234:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8008236:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008238:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800823a:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 800823c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8008240:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 8008244:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008246:	18e1      	adds	r1, r4, r3
 8008248:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800824a:	f7fe ff65 	bl	8007118 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800824e:	f241 121c 	movw	r2, #4380	; 0x111c
 8008252:	0043      	lsls	r3, r0, #1
 8008254:	4293      	cmp	r3, r2
 8008256:	bf38      	it	cc
 8008258:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800825a:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800825c:	0080      	lsls	r0, r0, #2
 800825e:	4283      	cmp	r3, r0
 8008260:	bf28      	it	cs
 8008262:	4603      	movcs	r3, r0
 8008264:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008268:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800826c:	b933      	cbnz	r3, 800827c <tcp_input+0x5f4>
 800826e:	4bad      	ldr	r3, [pc, #692]	; (8008524 <tcp_input+0x89c>)
 8008270:	49ad      	ldr	r1, [pc, #692]	; (8008528 <tcp_input+0x8a0>)
 8008272:	48ae      	ldr	r0, [pc, #696]	; (800852c <tcp_input+0x8a4>)
 8008274:	f240 321a 	movw	r2, #794	; 0x31a
 8008278:	f002 fa80 	bl	800a77c <iprintf>
      --pcb->snd_queuelen;
 800827c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8008280:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8008282:	3b01      	subs	r3, #1
 8008284:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8008288:	b9fe      	cbnz	r6, 80082ca <tcp_input+0x642>
        rseg = pcb->unsent;
 800828a:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800828c:	b936      	cbnz	r6, 800829c <tcp_input+0x614>
 800828e:	4ba5      	ldr	r3, [pc, #660]	; (8008524 <tcp_input+0x89c>)
 8008290:	49a7      	ldr	r1, [pc, #668]	; (8008530 <tcp_input+0x8a8>)
 8008292:	48a6      	ldr	r0, [pc, #664]	; (800852c <tcp_input+0x8a4>)
 8008294:	f240 3222 	movw	r2, #802	; 0x322
 8008298:	f002 fa70 	bl	800a77c <iprintf>
        pcb->unsent = rseg->next;
 800829c:	6833      	ldr	r3, [r6, #0]
 800829e:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 80082a0:	4630      	mov	r0, r6
 80082a2:	f7fe f9b3 	bl	800660c <tcp_seg_free>
      if (pcb->unacked == NULL) {
 80082a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80082a8:	b993      	cbnz	r3, 80082d0 <tcp_input+0x648>
        pcb->rtime = -1;
 80082aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082ae:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80082b0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f43f af74 	beq.w	80081a2 <tcp_input+0x51a>
 80082ba:	2200      	movs	r2, #0
 80082bc:	4621      	mov	r1, r4
 80082be:	6920      	ldr	r0, [r4, #16]
 80082c0:	4798      	blx	r3
      if (err == ERR_ABRT) {
 80082c2:	300d      	adds	r0, #13
 80082c4:	f47f af6d 	bne.w	80081a2 <tcp_input+0x51a>
 80082c8:	e610      	b.n	8007eec <tcp_input+0x264>
        pcb->unacked = rseg->next;
 80082ca:	6833      	ldr	r3, [r6, #0]
 80082cc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80082ce:	e7e7      	b.n	80082a0 <tcp_input+0x618>
        pcb->rtime = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 80082d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082d8:	e7ea      	b.n	80082b0 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 80082da:	06db      	lsls	r3, r3, #27
 80082dc:	f57f af40 	bpl.w	8008160 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082e0:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80082e2:	9a04      	ldr	r2, [sp, #16]
 80082e4:	f8db 1000 	ldr.w	r1, [fp]
 80082e8:	8810      	ldrh	r0, [r2, #0]
 80082ea:	881a      	ldrh	r2, [r3, #0]
 80082ec:	9201      	str	r2, [sp, #4]
 80082ee:	885b      	ldrh	r3, [r3, #2]
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	4b90      	ldr	r3, [pc, #576]	; (8008534 <tcp_input+0x8ac>)
 80082f4:	4401      	add	r1, r0
 80082f6:	1d1a      	adds	r2, r3, #4
 80082f8:	6838      	ldr	r0, [r7, #0]
 80082fa:	f000 ffad 	bl	8009258 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80082fe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8008302:	2b05      	cmp	r3, #5
 8008304:	f63f af2c 	bhi.w	8008160 <tcp_input+0x4d8>
        pcb->rtime = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800830c:	4620      	mov	r0, r4
 800830e:	f000 fffd 	bl	800930c <tcp_rexmit_rto>
 8008312:	e725      	b.n	8008160 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 8008314:	06d8      	lsls	r0, r3, #27
 8008316:	d557      	bpl.n	80083c8 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008318:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800831a:	6838      	ldr	r0, [r7, #0]
 800831c:	43db      	mvns	r3, r3
 800831e:	42c3      	cmn	r3, r0
 8008320:	d443      	bmi.n	80083aa <tcp_input+0x722>
 8008322:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008324:	1ac3      	subs	r3, r0, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	dc3f      	bgt.n	80083aa <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 800832a:	2304      	movs	r3, #4
 800832c:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800832e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008330:	b143      	cbz	r3, 8008344 <tcp_input+0x6bc>
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	b933      	cbnz	r3, 8008344 <tcp_input+0x6bc>
 8008336:	4b7b      	ldr	r3, [pc, #492]	; (8008524 <tcp_input+0x89c>)
 8008338:	497f      	ldr	r1, [pc, #508]	; (8008538 <tcp_input+0x8b0>)
 800833a:	487c      	ldr	r0, [pc, #496]	; (800852c <tcp_input+0x8a4>)
 800833c:	f240 3251 	movw	r2, #849	; 0x351
 8008340:	f002 fa1c 	bl	800a77c <iprintf>
        if (pcb->listener == NULL) {
 8008344:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008346:	b91b      	cbnz	r3, 8008350 <tcp_input+0x6c8>
            tcp_abort(pcb);
 8008348:	4620      	mov	r0, r4
 800834a:	f7fe fe05 	bl	8006f58 <tcp_abort>
            goto aborted;
 800834e:	e5cd      	b.n	8007eec <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0f8      	beq.n	8008348 <tcp_input+0x6c0>
 8008356:	2200      	movs	r2, #0
 8008358:	4621      	mov	r1, r4
 800835a:	6920      	ldr	r0, [r4, #16]
 800835c:	4798      	blx	r3
        if (err != ERR_OK) {
 800835e:	b110      	cbz	r0, 8008366 <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 8008360:	300d      	adds	r0, #13
 8008362:	d1f1      	bne.n	8008348 <tcp_input+0x6c0>
 8008364:	e5c2      	b.n	8007eec <tcp_input+0x264>
        tcp_receive(pcb);
 8008366:	4620      	mov	r0, r4
 8008368:	f7fe ff4a 	bl	8007200 <tcp_receive>
        if (recv_acked != 0) {
 800836c:	9b05      	ldr	r3, [sp, #20]
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b113      	cbz	r3, 8008378 <tcp_input+0x6f0>
          recv_acked--;
 8008372:	9a05      	ldr	r2, [sp, #20]
 8008374:	3b01      	subs	r3, #1
 8008376:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008378:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800837a:	f241 111c 	movw	r1, #4380	; 0x111c
 800837e:	0053      	lsls	r3, r2, #1
 8008380:	428b      	cmp	r3, r1
 8008382:	bf38      	it	cc
 8008384:	460b      	movcc	r3, r1
 8008386:	0092      	lsls	r2, r2, #2
 8008388:	4293      	cmp	r3, r2
 800838a:	bf28      	it	cs
 800838c:	4613      	movcs	r3, r2
 800838e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008392:	f898 3000 	ldrb.w	r3, [r8]
 8008396:	069a      	lsls	r2, r3, #26
 8008398:	f57f aee2 	bpl.w	8008160 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 800839c:	7ea3      	ldrb	r3, [r4, #26]
 800839e:	f043 0302 	orr.w	r3, r3, #2
 80083a2:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 80083a4:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 80083a6:	7523      	strb	r3, [r4, #20]
 80083a8:	e6da      	b.n	8008160 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083aa:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80083ac:	9a04      	ldr	r2, [sp, #16]
 80083ae:	f8db 1000 	ldr.w	r1, [fp]
 80083b2:	8816      	ldrh	r6, [r2, #0]
 80083b4:	881a      	ldrh	r2, [r3, #0]
 80083b6:	9201      	str	r2, [sp, #4]
 80083b8:	885b      	ldrh	r3, [r3, #2]
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	4b5d      	ldr	r3, [pc, #372]	; (8008534 <tcp_input+0x8ac>)
 80083be:	4431      	add	r1, r6
 80083c0:	1d1a      	adds	r2, r3, #4
 80083c2:	f000 ff49 	bl	8009258 <tcp_rst>
 80083c6:	e6cb      	b.n	8008160 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80083c8:	2900      	cmp	r1, #0
 80083ca:	f43f aec9 	beq.w	8008160 <tcp_input+0x4d8>
 80083ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d0:	f8db 2000 	ldr.w	r2, [fp]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	4293      	cmp	r3, r2
 80083d8:	f47f aec2 	bne.w	8008160 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 80083dc:	4620      	mov	r0, r4
 80083de:	f000 ffb1 	bl	8009344 <tcp_rexmit>
 80083e2:	e6bd      	b.n	8008160 <tcp_input+0x4d8>
    tcp_receive(pcb);
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7fe ff0b 	bl	8007200 <tcp_receive>
 80083ea:	e7d2      	b.n	8008392 <tcp_input+0x70a>
    tcp_receive(pcb);
 80083ec:	4620      	mov	r0, r4
 80083ee:	f7fe ff07 	bl	8007200 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80083f2:	f898 3000 	ldrb.w	r3, [r8]
 80083f6:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 80083fe:	d031      	beq.n	8008464 <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008400:	f013 0f10 	tst.w	r3, #16
 8008404:	7ea3      	ldrb	r3, [r4, #26]
 8008406:	d028      	beq.n	800845a <tcp_input+0x7d2>
 8008408:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	4291      	cmp	r1, r2
 800840e:	d124      	bne.n	800845a <tcp_input+0x7d2>
 8008410:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8008412:	bb12      	cbnz	r2, 800845a <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 8008414:	f043 0302 	orr.w	r3, r3, #2
 8008418:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800841a:	4620      	mov	r0, r4
 800841c:	f7fe f98c 	bl	8006738 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008420:	f8d9 3000 	ldr.w	r3, [r9]
 8008424:	429c      	cmp	r4, r3
 8008426:	d10a      	bne.n	800843e <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 8008428:	68e3      	ldr	r3, [r4, #12]
 800842a:	f8c9 3000 	str.w	r3, [r9]
 800842e:	e008      	b.n	8008442 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	4294      	cmp	r4, r2
 8008434:	d102      	bne.n	800843c <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 8008436:	68e2      	ldr	r2, [r4, #12]
 8008438:	60da      	str	r2, [r3, #12]
 800843a:	e002      	b.n	8008442 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 800843c:	4613      	mov	r3, r2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f6      	bne.n	8008430 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 8008442:	4b3e      	ldr	r3, [pc, #248]	; (800853c <tcp_input+0x8b4>)
 8008444:	2201      	movs	r2, #1
 8008446:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008448:	230a      	movs	r3, #10
 800844a:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800844c:	4b3c      	ldr	r3, [pc, #240]	; (8008540 <tcp_input+0x8b8>)
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	60e2      	str	r2, [r4, #12]
 8008452:	601c      	str	r4, [r3, #0]
 8008454:	f001 f8a2 	bl	800959c <tcp_timer_needed>
 8008458:	e682      	b.n	8008160 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 800845a:	f043 0302 	orr.w	r3, r3, #2
 800845e:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8008460:	2308      	movs	r3, #8
 8008462:	e7a0      	b.n	80083a6 <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008464:	06db      	lsls	r3, r3, #27
 8008466:	f57f ae7b 	bpl.w	8008160 <tcp_input+0x4d8>
 800846a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	f47f ae76 	bne.w	8008160 <tcp_input+0x4d8>
 8008474:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008476:	2b00      	cmp	r3, #0
 8008478:	f47f ae72 	bne.w	8008160 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 800847c:	2306      	movs	r3, #6
 800847e:	e792      	b.n	80083a6 <tcp_input+0x71e>
    tcp_receive(pcb);
 8008480:	4620      	mov	r0, r4
 8008482:	f7fe febd 	bl	8007200 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008486:	f898 3000 	ldrb.w	r3, [r8]
 800848a:	069f      	lsls	r7, r3, #26
 800848c:	f57f ae68 	bpl.w	8008160 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8008490:	7ea3      	ldrb	r3, [r4, #26]
 8008492:	f043 0302 	orr.w	r3, r3, #2
 8008496:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8008498:	4620      	mov	r0, r4
 800849a:	f7fe f94d 	bl	8006738 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800849e:	f8d9 3000 	ldr.w	r3, [r9]
 80084a2:	429c      	cmp	r4, r3
 80084a4:	d0c0      	beq.n	8008428 <tcp_input+0x7a0>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0cb      	beq.n	8008442 <tcp_input+0x7ba>
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	4294      	cmp	r4, r2
 80084ae:	d0c2      	beq.n	8008436 <tcp_input+0x7ae>
 80084b0:	4613      	mov	r3, r2
 80084b2:	e7f8      	b.n	80084a6 <tcp_input+0x81e>
    tcp_receive(pcb);
 80084b4:	4620      	mov	r0, r4
 80084b6:	f7fe fea3 	bl	8007200 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80084ba:	9b03      	ldr	r3, [sp, #12]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	06de      	lsls	r6, r3, #27
 80084c0:	f57f ae4e 	bpl.w	8008160 <tcp_input+0x4d8>
 80084c4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	f47f ae49 	bne.w	8008160 <tcp_input+0x4d8>
 80084ce:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f47f ae45 	bne.w	8008160 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 80084d6:	4620      	mov	r0, r4
 80084d8:	f7fe f92e 	bl	8006738 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80084dc:	f8d9 3000 	ldr.w	r3, [r9]
 80084e0:	429c      	cmp	r4, r3
 80084e2:	d0a1      	beq.n	8008428 <tcp_input+0x7a0>
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0ac      	beq.n	8008442 <tcp_input+0x7ba>
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	4294      	cmp	r4, r2
 80084ec:	d0a3      	beq.n	8008436 <tcp_input+0x7ae>
 80084ee:	4613      	mov	r3, r2
 80084f0:	e7f8      	b.n	80084e4 <tcp_input+0x85c>
    tcp_receive(pcb);
 80084f2:	4620      	mov	r0, r4
 80084f4:	f7fe fe84 	bl	8007200 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80084f8:	9b03      	ldr	r3, [sp, #12]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	06d8      	lsls	r0, r3, #27
 80084fe:	f57f ae2f 	bpl.w	8008160 <tcp_input+0x4d8>
 8008502:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	429a      	cmp	r2, r3
 8008508:	f47f ae2a 	bne.w	8008160 <tcp_input+0x4d8>
 800850c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800850e:	2b00      	cmp	r3, #0
 8008510:	f47f ae26 	bne.w	8008160 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 8008514:	f898 3000 	ldrb.w	r3, [r8]
 8008518:	f043 0310 	orr.w	r3, r3, #16
 800851c:	f888 3000 	strb.w	r3, [r8]
 8008520:	e61e      	b.n	8008160 <tcp_input+0x4d8>
 8008522:	bf00      	nop
 8008524:	0800cb90 	.word	0x0800cb90
 8008528:	0800cb2f 	.word	0x0800cb2f
 800852c:	0800b831 	.word	0x0800b831
 8008530:	0800cb45 	.word	0x0800cb45
 8008534:	2000220c 	.word	0x2000220c
 8008538:	0800cb58 	.word	0x0800cb58
 800853c:	20005720 	.word	0x20005720
 8008540:	20005734 	.word	0x20005734
        if (recv_acked > 0) {
 8008544:	9b05      	ldr	r3, [sp, #20]
 8008546:	881a      	ldrh	r2, [r3, #0]
 8008548:	b122      	cbz	r2, 8008554 <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800854a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800854c:	b9eb      	cbnz	r3, 800858a <tcp_input+0x902>
          recv_acked = 0;
 800854e:	9a05      	ldr	r2, [sp, #20]
 8008550:	2300      	movs	r3, #0
 8008552:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008554:	4620      	mov	r0, r4
 8008556:	f7ff fb77 	bl	8007c48 <tcp_input_delayed_close>
 800855a:	2800      	cmp	r0, #0
 800855c:	f47f acc6 	bne.w	8007eec <tcp_input+0x264>
        if (recv_data != NULL) {
 8008560:	f8da 3000 	ldr.w	r3, [sl]
 8008564:	b33b      	cbz	r3, 80085b6 <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008566:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008568:	b133      	cbz	r3, 8008578 <tcp_input+0x8f0>
 800856a:	4b40      	ldr	r3, [pc, #256]	; (800866c <tcp_input+0x9e4>)
 800856c:	4940      	ldr	r1, [pc, #256]	; (8008670 <tcp_input+0x9e8>)
 800856e:	4841      	ldr	r0, [pc, #260]	; (8008674 <tcp_input+0x9ec>)
 8008570:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8008574:	f002 f902 	bl	800a77c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008578:	7ea3      	ldrb	r3, [r4, #26]
 800857a:	f013 0310 	ands.w	r3, r3, #16
 800857e:	d00a      	beq.n	8008596 <tcp_input+0x90e>
            pbuf_free(recv_data);
 8008580:	f8da 0000 	ldr.w	r0, [sl]
 8008584:	f7fd fc00 	bl	8005d88 <pbuf_free>
 8008588:	e6de      	b.n	8008348 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800858a:	4621      	mov	r1, r4
 800858c:	6920      	ldr	r0, [r4, #16]
 800858e:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8008590:	300d      	adds	r0, #13
 8008592:	d1dc      	bne.n	800854e <tcp_input+0x8c6>
 8008594:	e4aa      	b.n	8007eec <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008596:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800859a:	b31e      	cbz	r6, 80085e4 <tcp_input+0x95c>
 800859c:	f8da 2000 	ldr.w	r2, [sl]
 80085a0:	6920      	ldr	r0, [r4, #16]
 80085a2:	4621      	mov	r1, r4
 80085a4:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 80085a6:	f110 0f0d 	cmn.w	r0, #13
 80085aa:	f43f ac9f 	beq.w	8007eec <tcp_input+0x264>
          if (err != ERR_OK) {
 80085ae:	b110      	cbz	r0, 80085b6 <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 80085b0:	f8da 3000 	ldr.w	r3, [sl]
 80085b4:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 80085b6:	f898 3000 	ldrb.w	r3, [r8]
 80085ba:	069a      	lsls	r2, r3, #26
 80085bc:	d505      	bpl.n	80085ca <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 80085be:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80085c0:	b1c3      	cbz	r3, 80085f4 <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80085c2:	7b5a      	ldrb	r2, [r3, #13]
 80085c4:	f042 0220 	orr.w	r2, r2, #32
 80085c8:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80085ca:	4b2b      	ldr	r3, [pc, #172]	; (8008678 <tcp_input+0x9f0>)
 80085cc:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 80085ce:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 80085d0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80085d2:	f7ff fb39 	bl	8007c48 <tcp_input_delayed_close>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f47f ac88 	bne.w	8007eec <tcp_input+0x264>
        tcp_output(pcb);
 80085dc:	4620      	mov	r0, r4
 80085de:	f000 fcbd 	bl	8008f5c <tcp_output>
 80085e2:	e483      	b.n	8007eec <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80085e4:	4633      	mov	r3, r6
 80085e6:	f8da 2000 	ldr.w	r2, [sl]
 80085ea:	4621      	mov	r1, r4
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7fe fba5 	bl	8006d3c <tcp_recv_null>
 80085f2:	e7d8      	b.n	80085a6 <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80085f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80085f6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80085fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 80085fe:	bf1c      	itt	ne
 8008600:	3301      	addne	r3, #1
 8008602:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8008604:	2e00      	cmp	r6, #0
 8008606:	d0e0      	beq.n	80085ca <tcp_input+0x942>
 8008608:	2300      	movs	r3, #0
 800860a:	461a      	mov	r2, r3
 800860c:	4621      	mov	r1, r4
 800860e:	6920      	ldr	r0, [r4, #16]
 8008610:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8008612:	300d      	adds	r0, #13
 8008614:	d1d9      	bne.n	80085ca <tcp_input+0x942>
 8008616:	e469      	b.n	8007eec <tcp_input+0x264>
      if (prev != NULL) {
 8008618:	b13c      	cbz	r4, 800862a <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800861a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800861e:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008620:	4b16      	ldr	r3, [pc, #88]	; (800867c <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008622:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008626:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 800862a:	9b03      	ldr	r3, [sp, #12]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	0759      	lsls	r1, r3, #29
 8008630:	f53f ace7 	bmi.w	8008002 <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 8008634:	06dc      	lsls	r4, r3, #27
 8008636:	f57f ad19 	bpl.w	800806c <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800863a:	9b04      	ldr	r3, [sp, #16]
 800863c:	f8db 1000 	ldr.w	r1, [fp]
 8008640:	881c      	ldrh	r4, [r3, #0]
 8008642:	8813      	ldrh	r3, [r2, #0]
 8008644:	e88d 0009 	stmia.w	sp, {r0, r3}
 8008648:	e4c5      	b.n	8007fd6 <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800864a:	2900      	cmp	r1, #0
 800864c:	f47f ad7e 	bne.w	800814c <tcp_input+0x4c4>
 8008650:	4b06      	ldr	r3, [pc, #24]	; (800866c <tcp_input+0x9e4>)
 8008652:	490b      	ldr	r1, [pc, #44]	; (8008680 <tcp_input+0x9f8>)
 8008654:	4807      	ldr	r0, [pc, #28]	; (8008674 <tcp_input+0x9ec>)
 8008656:	f240 22e7 	movw	r2, #743	; 0x2e7
 800865a:	f002 f88f 	bl	800a77c <iprintf>
 800865e:	e575      	b.n	800814c <tcp_input+0x4c4>
      if (prev != NULL) {
 8008660:	f1ba 0f00 	cmp.w	sl, #0
 8008664:	f47f abff 	bne.w	8007e66 <tcp_input+0x1de>
 8008668:	e40e      	b.n	8007e88 <tcp_input+0x200>
 800866a:	bf00      	nop
 800866c:	0800cb90 	.word	0x0800cb90
 8008670:	0800cb76 	.word	0x0800cb76
 8008674:	0800b831 	.word	0x0800b831
 8008678:	20005738 	.word	0x20005738
 800867c:	2000572c 	.word	0x2000572c
 8008680:	0800cb0f 	.word	0x0800cb0f

08008684 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8008684:	4a02      	ldr	r2, [pc, #8]	; (8008690 <tcp_trigger_input_pcb_close+0xc>)
 8008686:	7813      	ldrb	r3, [r2, #0]
 8008688:	f043 0310 	orr.w	r3, r3, #16
 800868c:	7013      	strb	r3, [r2, #0]
 800868e:	4770      	bx	lr
 8008690:	200021c0 	.word	0x200021c0

08008694 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8008698:	4294      	cmp	r4, r2
{
 800869a:	461e      	mov	r6, r3
 800869c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80086a0:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 80086a2:	d228      	bcs.n	80086f6 <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80086a4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80086a8:	07ad      	lsls	r5, r5, #30
 80086aa:	d407      	bmi.n	80086bc <tcp_pbuf_prealloc+0x28>
 80086ac:	7e9d      	ldrb	r5, [r3, #26]
 80086ae:	066d      	lsls	r5, r5, #25
 80086b0:	d421      	bmi.n	80086f6 <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 80086b2:	b119      	cbz	r1, 80086bc <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 80086b4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80086b6:	b909      	cbnz	r1, 80086bc <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 80086b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ba:	b1e3      	cbz	r3, 80086f6 <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80086bc:	f204 231b 	addw	r3, r4, #539	; 0x21b
 80086c0:	f023 0103 	bic.w	r1, r3, #3
 80086c4:	428a      	cmp	r2, r1
 80086c6:	bf28      	it	cs
 80086c8:	460a      	movcs	r2, r1
 80086ca:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80086cc:	2200      	movs	r2, #0
 80086ce:	f7fd fbbd 	bl	8005e4c <pbuf_alloc>
  if (p == NULL) {
 80086d2:	4605      	mov	r5, r0
 80086d4:	b168      	cbz	r0, 80086f2 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80086d6:	6803      	ldr	r3, [r0, #0]
 80086d8:	b133      	cbz	r3, 80086e8 <tcp_pbuf_prealloc+0x54>
 80086da:	4b08      	ldr	r3, [pc, #32]	; (80086fc <tcp_pbuf_prealloc+0x68>)
 80086dc:	4908      	ldr	r1, [pc, #32]	; (8008700 <tcp_pbuf_prealloc+0x6c>)
 80086de:	4809      	ldr	r0, [pc, #36]	; (8008704 <tcp_pbuf_prealloc+0x70>)
 80086e0:	f44f 7288 	mov.w	r2, #272	; 0x110
 80086e4:	f002 f84a 	bl	800a77c <iprintf>
  *oversize = p->len - length;
 80086e8:	896b      	ldrh	r3, [r5, #10]
 80086ea:	1b1b      	subs	r3, r3, r4
 80086ec:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80086ee:	812c      	strh	r4, [r5, #8]
 80086f0:	816c      	strh	r4, [r5, #10]
  return p;
}
 80086f2:	4628      	mov	r0, r5
 80086f4:	bd70      	pop	{r4, r5, r6, pc}
 80086f6:	4621      	mov	r1, r4
 80086f8:	e7e8      	b.n	80086cc <tcp_pbuf_prealloc+0x38>
 80086fa:	bf00      	nop
 80086fc:	0800ce93 	.word	0x0800ce93
 8008700:	0800cec6 	.word	0x0800cec6
 8008704:	0800b831 	.word	0x0800b831

08008708 <tcp_create_segment>:
{
 8008708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800870c:	f89d a020 	ldrb.w	sl, [sp, #32]
 8008710:	4680      	mov	r8, r0
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008712:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008716:	f04f 0003 	mov.w	r0, #3
{
 800871a:	460f      	mov	r7, r1
 800871c:	4616      	mov	r6, r2
 800871e:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008720:	bf14      	ite	ne
 8008722:	2504      	movne	r5, #4
 8008724:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008726:	f7fd f9af 	bl	8005a88 <memp_malloc>
 800872a:	4604      	mov	r4, r0
 800872c:	b928      	cbnz	r0, 800873a <tcp_create_segment+0x32>
    pbuf_free(p);
 800872e:	4638      	mov	r0, r7
 8008730:	f7fd fb2a 	bl	8005d88 <pbuf_free>
}
 8008734:	4620      	mov	r0, r4
 8008736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 800873a:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800873e:	2300      	movs	r3, #0
  seg->p = p;
 8008740:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008744:	893b      	ldrh	r3, [r7, #8]
 8008746:	fa1f fa85 	uxth.w	sl, r5
 800874a:	4553      	cmp	r3, sl
 800874c:	d205      	bcs.n	800875a <tcp_create_segment+0x52>
 800874e:	4b1f      	ldr	r3, [pc, #124]	; (80087cc <tcp_create_segment+0xc4>)
 8008750:	491f      	ldr	r1, [pc, #124]	; (80087d0 <tcp_create_segment+0xc8>)
 8008752:	4820      	ldr	r0, [pc, #128]	; (80087d4 <tcp_create_segment+0xcc>)
 8008754:	22ba      	movs	r2, #186	; 0xba
 8008756:	f002 f811 	bl	800a77c <iprintf>
  seg->len = p->tot_len - optlen;
 800875a:	893b      	ldrh	r3, [r7, #8]
 800875c:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_header(p, TCP_HLEN)) {
 8008760:	4638      	mov	r0, r7
  seg->len = p->tot_len - optlen;
 8008762:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8008764:	2114      	movs	r1, #20
 8008766:	f7fd fb09 	bl	8005d7c <pbuf_header>
 800876a:	4607      	mov	r7, r0
 800876c:	b120      	cbz	r0, 8008778 <tcp_create_segment+0x70>
    tcp_seg_free(seg);
 800876e:	4620      	mov	r0, r4
 8008770:	f7fd ff4c 	bl	800660c <tcp_seg_free>
    return NULL;
 8008774:	2400      	movs	r4, #0
 8008776:	e7dd      	b.n	8008734 <tcp_create_segment+0x2c>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008778:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800877a:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800877e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8008782:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008786:	f7fb fd3f 	bl	8004208 <lwip_htons>
 800878a:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800878e:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8008792:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8008796:	f7fb fd37 	bl	8004208 <lwip_htons>
 800879a:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800879e:	4648      	mov	r0, r9
 80087a0:	f8d4 800c 	ldr.w	r8, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80087a4:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80087a6:	f7fb fd32 	bl	800420e <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80087aa:	3505      	adds	r5, #5
 80087ac:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80087b0:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80087b4:	b2a8      	uxth	r0, r5
 80087b6:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80087ba:	f7fb fd25 	bl	8004208 <lwip_htons>
  seg->tcphdr->urgp = 0;
 80087be:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80087c0:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 80087c4:	749f      	strb	r7, [r3, #18]
 80087c6:	74df      	strb	r7, [r3, #19]
  return seg;
 80087c8:	e7b4      	b.n	8008734 <tcp_create_segment+0x2c>
 80087ca:	bf00      	nop
 80087cc:	0800ce93 	.word	0x0800ce93
 80087d0:	0800cd1b 	.word	0x0800cd1b
 80087d4:	0800b831 	.word	0x0800b831

080087d8 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80087d8:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 80087da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80087dc:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 80087de:	4605      	mov	r5, r0
 80087e0:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80087e2:	2001      	movs	r0, #1
 80087e4:	2200      	movs	r2, #0
 80087e6:	f7fd fb31 	bl	8005e4c <pbuf_alloc>
  if (p != NULL) {
 80087ea:	4606      	mov	r6, r0
 80087ec:	b340      	cbz	r0, 8008840 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80087ee:	8943      	ldrh	r3, [r0, #10]
 80087f0:	2b13      	cmp	r3, #19
 80087f2:	dc05      	bgt.n	8008800 <tcp_output_alloc_header.constprop.0+0x28>
 80087f4:	4b13      	ldr	r3, [pc, #76]	; (8008844 <tcp_output_alloc_header.constprop.0+0x6c>)
 80087f6:	4914      	ldr	r1, [pc, #80]	; (8008848 <tcp_output_alloc_header.constprop.0+0x70>)
 80087f8:	4814      	ldr	r0, [pc, #80]	; (800884c <tcp_output_alloc_header.constprop.0+0x74>)
 80087fa:	2273      	movs	r2, #115	; 0x73
 80087fc:	f001 ffbe 	bl	800a77c <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 8008800:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 8008802:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8008804:	f7fb fd00 	bl	8004208 <lwip_htons>
 8008808:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800880a:	8b28      	ldrh	r0, [r5, #24]
 800880c:	f7fb fcfc 	bl	8004208 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8008810:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008812:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008814:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008816:	f7fb fcfa 	bl	800420e <lwip_htonl>
 800881a:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800881c:	f245 0010 	movw	r0, #20496	; 0x5010
 8008820:	f7fb fcf2 	bl	8004208 <lwip_htons>
 8008824:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008826:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8008828:	f7fb fcee 	bl	8004208 <lwip_htons>
    tcphdr->chksum = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	7423      	strb	r3, [r4, #16]
 8008830:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8008832:	74a3      	strb	r3, [r4, #18]
 8008834:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008836:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8008838:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800883a:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800883c:	4413      	add	r3, r2
 800883e:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8008840:	4630      	mov	r0, r6
 8008842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008844:	0800ce93 	.word	0x0800ce93
 8008848:	0800ce65 	.word	0x0800ce65
 800884c:	0800b831 	.word	0x0800b831

08008850 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8008850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	b091      	sub	sp, #68	; 0x44
 8008856:	4605      	mov	r5, r0
 8008858:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8008860:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
{
 8008864:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8008866:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8008868:	9108      	str	r1, [sp, #32]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800886a:	085b      	lsrs	r3, r3, #1
 800886c:	4293      	cmp	r3, r2
 800886e:	bf28      	it	cs
 8008870:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 8008872:	2b00      	cmp	r3, #0
 8008874:	bf08      	it	eq
 8008876:	4613      	moveq	r3, r2
 8008878:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800887a:	b959      	cbnz	r1, 8008894 <tcp_write+0x44>
 800887c:	4ba1      	ldr	r3, [pc, #644]	; (8008b04 <tcp_write+0x2b4>)
 800887e:	49a2      	ldr	r1, [pc, #648]	; (8008b08 <tcp_write+0x2b8>)
 8008880:	48a2      	ldr	r0, [pc, #648]	; (8008b0c <tcp_write+0x2bc>)
 8008882:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8008886:	f001 ff79 	bl	800a77c <iprintf>
 800888a:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 800888e:	b011      	add	sp, #68	; 0x44
 8008890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 8008894:	7d2b      	ldrb	r3, [r5, #20]
 8008896:	2b07      	cmp	r3, #7
 8008898:	d003      	beq.n	80088a2 <tcp_write+0x52>
      (pcb->state != CLOSE_WAIT) &&
 800889a:	3b02      	subs	r3, #2
 800889c:	2b02      	cmp	r3, #2
 800889e:	f200 8254 	bhi.w	8008d4a <tcp_write+0x4fa>
  } else if (len == 0) {
 80088a2:	9b05      	ldr	r3, [sp, #20]
 80088a4:	b1db      	cbz	r3, 80088de <tcp_write+0x8e>
  if (len > pcb->snd_buf) {
 80088a6:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 80088aa:	9a05      	ldr	r2, [sp, #20]
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d206      	bcs.n	80088be <tcp_write+0x6e>
    pcb->flags |= TF_NAGLEMEMERR;
 80088b0:	7eab      	ldrb	r3, [r5, #26]
 80088b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088b6:	76ab      	strb	r3, [r5, #26]
  return ERR_MEM;
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	e7e7      	b.n	800888e <tcp_write+0x3e>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80088be:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 80088c2:	2a08      	cmp	r2, #8
 80088c4:	d8f4      	bhi.n	80088b0 <tcp_write+0x60>
 80088c6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 80088c8:	b30a      	cbz	r2, 800890e <tcp_write+0xbe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80088ca:	b943      	cbnz	r3, 80088de <tcp_write+0x8e>
 80088cc:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80088ce:	b933      	cbnz	r3, 80088de <tcp_write+0x8e>
 80088d0:	4b8c      	ldr	r3, [pc, #560]	; (8008b04 <tcp_write+0x2b4>)
 80088d2:	498f      	ldr	r1, [pc, #572]	; (8008b10 <tcp_write+0x2c0>)
 80088d4:	f44f 72ab 	mov.w	r2, #342	; 0x156
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80088d8:	488c      	ldr	r0, [pc, #560]	; (8008b0c <tcp_write+0x2bc>)
 80088da:	f001 ff4f 	bl	800a77c <iprintf>
  if (pcb->unsent != NULL) {
 80088de:	6eac      	ldr	r4, [r5, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 80088e0:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 80088e4:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 80088e6:	b9dc      	cbnz	r4, 8008920 <tcp_write+0xd0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80088e8:	f8b5 8064 	ldrh.w	r8, [r5, #100]	; 0x64
 80088ec:	f1b8 0f00 	cmp.w	r8, #0
 80088f0:	f000 8103 	beq.w	8008afa <tcp_write+0x2aa>
 80088f4:	4b83      	ldr	r3, [pc, #524]	; (8008b04 <tcp_write+0x2b4>)
 80088f6:	4987      	ldr	r1, [pc, #540]	; (8008b14 <tcp_write+0x2c4>)
 80088f8:	4884      	ldr	r0, [pc, #528]	; (8008b0c <tcp_write+0x2bc>)
 80088fa:	f240 2225 	movw	r2, #549	; 0x225
 80088fe:	f001 ff3d 	bl	800a77c <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008902:	4627      	mov	r7, r4
  u16_t extendlen = 0;
 8008904:	46a2      	mov	sl, r4
  u16_t oversize_used = 0;
 8008906:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 8008908:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 800890a:	46a1      	mov	r9, r4
 800890c:	e094      	b.n	8008a38 <tcp_write+0x1e8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800890e:	b913      	cbnz	r3, 8008916 <tcp_write+0xc6>
 8008910:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0e3      	beq.n	80088de <tcp_write+0x8e>
 8008916:	4b7b      	ldr	r3, [pc, #492]	; (8008b04 <tcp_write+0x2b4>)
 8008918:	497f      	ldr	r1, [pc, #508]	; (8008b18 <tcp_write+0x2c8>)
 800891a:	f240 1259 	movw	r2, #345	; 0x159
 800891e:	e7db      	b.n	80088d8 <tcp_write+0x88>
  if (pcb->unsent != NULL) {
 8008920:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008922:	f8d7 b000 	ldr.w	fp, [r7]
 8008926:	f1bb 0f00 	cmp.w	fp, #0
 800892a:	f040 80b6 	bne.w	8008a9a <tcp_write+0x24a>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800892e:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008930:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008932:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008936:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008938:	bf14      	ite	ne
 800893a:	2404      	movne	r4, #4
 800893c:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800893e:	4423      	add	r3, r4
 8008940:	429a      	cmp	r2, r3
 8008942:	da06      	bge.n	8008952 <tcp_write+0x102>
 8008944:	4b6f      	ldr	r3, [pc, #444]	; (8008b04 <tcp_write+0x2b4>)
 8008946:	4975      	ldr	r1, [pc, #468]	; (8008b1c <tcp_write+0x2cc>)
 8008948:	4870      	ldr	r0, [pc, #448]	; (8008b0c <tcp_write+0x2bc>)
 800894a:	f240 12c7 	movw	r2, #455	; 0x1c7
 800894e:	f001 ff15 	bl	800a77c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8008952:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 8008956:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 8008958:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
 800895c:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 8008960:	eba3 0909 	sub.w	r9, r3, r9
 8008964:	eba9 0904 	sub.w	r9, r9, r4
 8008968:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 800896c:	2e00      	cmp	r6, #0
 800896e:	f000 8096 	beq.w	8008a9e <tcp_write+0x24e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8008972:	45b1      	cmp	r9, r6
 8008974:	d206      	bcs.n	8008984 <tcp_write+0x134>
 8008976:	4b63      	ldr	r3, [pc, #396]	; (8008b04 <tcp_write+0x2b4>)
 8008978:	4969      	ldr	r1, [pc, #420]	; (8008b20 <tcp_write+0x2d0>)
 800897a:	4864      	ldr	r0, [pc, #400]	; (8008b0c <tcp_write+0x2bc>)
 800897c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8008980:	f001 fefc 	bl	800a77c <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8008984:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008988:	9a05      	ldr	r2, [sp, #20]
 800898a:	429a      	cmp	r2, r3
 800898c:	bf28      	it	cs
 800898e:	461a      	movcs	r2, r3
 8008990:	454a      	cmp	r2, r9
 8008992:	4616      	mov	r6, r2
 8008994:	bfa8      	it	ge
 8008996:	464e      	movge	r6, r9
      oversize -= oversize_used;
 8008998:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 800899a:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 800899e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 80089a2:	fa1f f989 	uxth.w	r9, r9
 80089a6:	463c      	mov	r4, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80089a8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80089ac:	b153      	cbz	r3, 80089c4 <tcp_write+0x174>
 80089ae:	9b05      	ldr	r3, [sp, #20]
 80089b0:	429e      	cmp	r6, r3
 80089b2:	f000 81cd 	beq.w	8008d50 <tcp_write+0x500>
 80089b6:	4b53      	ldr	r3, [pc, #332]	; (8008b04 <tcp_write+0x2b4>)
 80089b8:	495a      	ldr	r1, [pc, #360]	; (8008b24 <tcp_write+0x2d4>)
 80089ba:	4854      	ldr	r0, [pc, #336]	; (8008b0c <tcp_write+0x2bc>)
 80089bc:	f240 12e1 	movw	r2, #481	; 0x1e1
 80089c0:	f001 fedc 	bl	800a77c <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80089c4:	9b05      	ldr	r3, [sp, #20]
 80089c6:	429e      	cmp	r6, r3
 80089c8:	f080 81c2 	bcs.w	8008d50 <tcp_write+0x500>
 80089cc:	f1b9 0f00 	cmp.w	r9, #0
 80089d0:	f000 808f 	beq.w	8008af2 <tcp_write+0x2a2>
 80089d4:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 80089d8:	f1ba 0f00 	cmp.w	sl, #0
 80089dc:	f000 808a 	beq.w	8008af4 <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80089e0:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80089e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 80089e4:	454c      	cmp	r4, r9
 80089e6:	bfa8      	it	ge
 80089e8:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80089ea:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 80089ec:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80089f0:	d557      	bpl.n	8008aa2 <tcp_write+0x252>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80089f2:	2301      	movs	r3, #1
 80089f4:	9302      	str	r3, [sp, #8]
 80089f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	464a      	mov	r2, r9
 80089fc:	9500      	str	r5, [sp, #0]
 80089fe:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008a02:	4641      	mov	r1, r8
 8008a04:	2004      	movs	r0, #4
 8008a06:	f7ff fe45 	bl	8008694 <tcp_pbuf_prealloc>
 8008a0a:	4681      	mov	r9, r0
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f000 8199 	beq.w	8008d44 <tcp_write+0x4f4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8008a12:	9b08      	ldr	r3, [sp, #32]
 8008a14:	6840      	ldr	r0, [r0, #4]
 8008a16:	4642      	mov	r2, r8
 8008a18:	1999      	adds	r1, r3, r6
 8008a1a:	f001 fdf0 	bl	800a5fe <memcpy>
        queuelen += pbuf_clen(concat_p);
 8008a1e:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 8008a20:	f7fd fb64 	bl	80060ec <pbuf_clen>
 8008a24:	9b06      	ldr	r3, [sp, #24]
 8008a26:	4403      	add	r3, r0
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	9306      	str	r3, [sp, #24]
  u16_t extendlen = 0;
 8008a2c:	f04f 0a00 	mov.w	sl, #0
      pos += seglen;
 8008a30:	44b0      	add	r8, r6
 8008a32:	fa1f f888 	uxth.w	r8, r8
 8008a36:	463c      	mov	r4, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3a:	f04f 0b00 	mov.w	fp, #0
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008a46:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 8008a48:	9b05      	ldr	r3, [sp, #20]
 8008a4a:	4598      	cmp	r8, r3
 8008a4c:	d370      	bcc.n	8008b30 <tcp_write+0x2e0>
  if (oversize_used > 0) {
 8008a4e:	b146      	cbz	r6, 8008a62 <tcp_write+0x212>
    for (p = last_unsent->p; p; p = p->next) {
 8008a50:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8008a54:	f1b8 0f00 	cmp.w	r8, #0
 8008a58:	f040 8110 	bne.w	8008c7c <tcp_write+0x42c>
    last_unsent->len += oversize_used;
 8008a5c:	893b      	ldrh	r3, [r7, #8]
 8008a5e:	441e      	add	r6, r3
 8008a60:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 8008a62:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008a66:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if (concat_p != NULL) {
 8008a6a:	f1b9 0f00 	cmp.w	r9, #0
 8008a6e:	f000 811e 	beq.w	8008cae <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8008a72:	b937      	cbnz	r7, 8008a82 <tcp_write+0x232>
 8008a74:	4b23      	ldr	r3, [pc, #140]	; (8008b04 <tcp_write+0x2b4>)
 8008a76:	492c      	ldr	r1, [pc, #176]	; (8008b28 <tcp_write+0x2d8>)
 8008a78:	4824      	ldr	r0, [pc, #144]	; (8008b0c <tcp_write+0x2bc>)
 8008a7a:	f240 22bb 	movw	r2, #699	; 0x2bb
 8008a7e:	f001 fe7d 	bl	800a77c <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 8008a82:	4649      	mov	r1, r9
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7fd fb4d 	bl	8006124 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8008a8a:	893b      	ldrh	r3, [r7, #8]
 8008a8c:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8008a90:	4413      	add	r3, r2
 8008a92:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 8008a94:	f8c7 b000 	str.w	fp, [r7]
 8008a98:	e12b      	b.n	8008cf2 <tcp_write+0x4a2>
 8008a9a:	465f      	mov	r7, fp
 8008a9c:	e741      	b.n	8008922 <tcp_write+0xd2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008a9e:	4634      	mov	r4, r6
 8008aa0:	e782      	b.n	80089a8 <tcp_write+0x158>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 9000 	ldr.w	r9, [r3]
 8008aa8:	f1b9 0f00 	cmp.w	r9, #0
 8008aac:	d112      	bne.n	8008ad4 <tcp_write+0x284>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8008aae:	7b1a      	ldrb	r2, [r3, #12]
 8008ab0:	2a01      	cmp	r2, #1
 8008ab2:	d111      	bne.n	8008ad8 <tcp_write+0x288>
 8008ab4:	895a      	ldrh	r2, [r3, #10]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	4413      	add	r3, r2
 8008aba:	9a08      	ldr	r2, [sp, #32]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d10b      	bne.n	8008ad8 <tcp_write+0x288>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8008ac0:	b136      	cbz	r6, 8008ad0 <tcp_write+0x280>
 8008ac2:	4b10      	ldr	r3, [pc, #64]	; (8008b04 <tcp_write+0x2b4>)
 8008ac4:	4919      	ldr	r1, [pc, #100]	; (8008b2c <tcp_write+0x2dc>)
 8008ac6:	4811      	ldr	r0, [pc, #68]	; (8008b0c <tcp_write+0x2bc>)
 8008ac8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8008acc:	f001 fe56 	bl	800a77c <iprintf>
          extendlen = seglen;
 8008ad0:	46c2      	mov	sl, r8
 8008ad2:	e7ad      	b.n	8008a30 <tcp_write+0x1e0>
 8008ad4:	464b      	mov	r3, r9
 8008ad6:	e7e5      	b.n	8008aa4 <tcp_write+0x254>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8008ad8:	2201      	movs	r2, #1
 8008ada:	4641      	mov	r1, r8
 8008adc:	2004      	movs	r0, #4
 8008ade:	f7fd f9b5 	bl	8005e4c <pbuf_alloc>
 8008ae2:	4681      	mov	r9, r0
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	f000 812d 	beq.w	8008d44 <tcp_write+0x4f4>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8008aea:	9b08      	ldr	r3, [sp, #32]
 8008aec:	4433      	add	r3, r6
 8008aee:	6043      	str	r3, [r0, #4]
 8008af0:	e796      	b.n	8008a20 <tcp_write+0x1d0>
  u16_t extendlen = 0;
 8008af2:	46ca      	mov	sl, r9
 8008af4:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 8008af6:	46d1      	mov	r9, sl
 8008af8:	e79e      	b.n	8008a38 <tcp_write+0x1e8>
  u16_t extendlen = 0;
 8008afa:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 8008afc:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008afe:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 8008b00:	46c1      	mov	r9, r8
 8008b02:	e799      	b.n	8008a38 <tcp_write+0x1e8>
 8008b04:	0800ce93 	.word	0x0800ce93
 8008b08:	0800ceda 	.word	0x0800ceda
 8008b0c:	0800b831 	.word	0x0800b831
 8008b10:	0800cf0b 	.word	0x0800cf0b
 8008b14:	0800cff5 	.word	0x0800cff5
 8008b18:	0800cf45 	.word	0x0800cf45
 8008b1c:	0800cf77 	.word	0x0800cf77
 8008b20:	0800cf8e 	.word	0x0800cf8e
 8008b24:	0800cfae 	.word	0x0800cfae
 8008b28:	0800d081 	.word	0x0800d081
 8008b2c:	0800cfcc 	.word	0x0800cfcc
    u16_t left = len - pos;
 8008b30:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 8008b32:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 8008b34:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	bf28      	it	cs
 8008b3e:	4613      	movcs	r3, r2
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b46:	b363      	cbz	r3, 8008ba2 <tcp_write+0x352>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8008b48:	fabb f38b 	clz	r3, fp
 8008b4c:	095b      	lsrs	r3, r3, #5
 8008b4e:	9302      	str	r3, [sp, #8]
 8008b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b52:	9301      	str	r3, [sp, #4]
 8008b54:	9500      	str	r5, [sp, #0]
 8008b56:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	f7ff fd99 	bl	8008694 <tcp_pbuf_prealloc>
 8008b62:	4604      	mov	r4, r0
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d03b      	beq.n	8008be0 <tcp_write+0x390>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8008b68:	8943      	ldrh	r3, [r0, #10]
 8008b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d206      	bcs.n	8008b7e <tcp_write+0x32e>
 8008b70:	4b7b      	ldr	r3, [pc, #492]	; (8008d60 <tcp_write+0x510>)
 8008b72:	497c      	ldr	r1, [pc, #496]	; (8008d64 <tcp_write+0x514>)
 8008b74:	487c      	ldr	r0, [pc, #496]	; (8008d68 <tcp_write+0x518>)
 8008b76:	f240 2241 	movw	r2, #577	; 0x241
 8008b7a:	f001 fdff 	bl	800a77c <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8008b7e:	9b08      	ldr	r3, [sp, #32]
 8008b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b82:	6860      	ldr	r0, [r4, #4]
 8008b84:	eb03 0108 	add.w	r1, r3, r8
 8008b88:	f001 fd39 	bl	800a5fe <memcpy>
    queuelen += pbuf_clen(p);
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f7fd faad 	bl	80060ec <pbuf_clen>
 8008b92:	9b06      	ldr	r3, [sp, #24]
 8008b94:	4403      	add	r3, r0
 8008b96:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008b98:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 8008b9a:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008b9c:	d949      	bls.n	8008c32 <tcp_write+0x3e2>
      pbuf_free(p);
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	e01c      	b.n	8008bdc <tcp_write+0x38c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8008ba2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008ba6:	b133      	cbz	r3, 8008bb6 <tcp_write+0x366>
 8008ba8:	4b6d      	ldr	r3, [pc, #436]	; (8008d60 <tcp_write+0x510>)
 8008baa:	4970      	ldr	r1, [pc, #448]	; (8008d6c <tcp_write+0x51c>)
 8008bac:	486e      	ldr	r0, [pc, #440]	; (8008d68 <tcp_write+0x518>)
 8008bae:	f240 224b 	movw	r2, #587	; 0x24b
 8008bb2:	f001 fde3 	bl	800a77c <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bba:	2000      	movs	r0, #0
 8008bbc:	f7fd f946 	bl	8005e4c <pbuf_alloc>
 8008bc0:	b170      	cbz	r0, 8008be0 <tcp_write+0x390>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8008bc2:	9a08      	ldr	r2, [sp, #32]
 8008bc4:	900d      	str	r0, [sp, #52]	; 0x34
 8008bc6:	4442      	add	r2, r8
 8008bc8:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008bca:	2200      	movs	r2, #0
 8008bcc:	4611      	mov	r1, r2
 8008bce:	4610      	mov	r0, r2
 8008bd0:	f7fd f93c 	bl	8005e4c <pbuf_alloc>
 8008bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	bb38      	cbnz	r0, 8008c2a <tcp_write+0x3da>
        pbuf_free(p2);
 8008bda:	4618      	mov	r0, r3
      pbuf_free(p);
 8008bdc:	f7fd f8d4 	bl	8005d88 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8008be0:	7eab      	ldrb	r3, [r5, #26]
 8008be2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008be6:	76ab      	strb	r3, [r5, #26]
  if (concat_p != NULL) {
 8008be8:	f1b9 0f00 	cmp.w	r9, #0
 8008bec:	d002      	beq.n	8008bf4 <tcp_write+0x3a4>
    pbuf_free(concat_p);
 8008bee:	4648      	mov	r0, r9
 8008bf0:	f7fd f8ca 	bl	8005d88 <pbuf_free>
  if (queue != NULL) {
 8008bf4:	f1bb 0f00 	cmp.w	fp, #0
 8008bf8:	d002      	beq.n	8008c00 <tcp_write+0x3b0>
    tcp_segs_free(queue);
 8008bfa:	4658      	mov	r0, fp
 8008bfc:	f7fd fd14 	bl	8006628 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8008c00:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f43f ae57 	beq.w	80088b8 <tcp_write+0x68>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8008c0a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f47f ae53 	bne.w	80088b8 <tcp_write+0x68>
 8008c12:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f47f ae4f 	bne.w	80088b8 <tcp_write+0x68>
 8008c1a:	4b51      	ldr	r3, [pc, #324]	; (8008d60 <tcp_write+0x510>)
 8008c1c:	4954      	ldr	r1, [pc, #336]	; (8008d70 <tcp_write+0x520>)
 8008c1e:	4852      	ldr	r0, [pc, #328]	; (8008d68 <tcp_write+0x518>)
 8008c20:	f240 3202 	movw	r2, #770	; 0x302
 8008c24:	f001 fdaa 	bl	800a77c <iprintf>
 8008c28:	e646      	b.n	80088b8 <tcp_write+0x68>
      pbuf_cat(p/*header*/, p2/*data*/);
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	f7fd fa7a 	bl	8006124 <pbuf_cat>
 8008c30:	e7ac      	b.n	8008b8c <tcp_write+0x33c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8008c32:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008c34:	2200      	movs	r2, #0
 8008c36:	4621      	mov	r1, r4
 8008c38:	9200      	str	r2, [sp, #0]
 8008c3a:	4443      	add	r3, r8
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	f7ff fd63 	bl	8008708 <tcp_create_segment>
 8008c42:	4604      	mov	r4, r0
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d0cb      	beq.n	8008be0 <tcp_write+0x390>
    if (queue == NULL) {
 8008c48:	f1bb 0f00 	cmp.w	fp, #0
 8008c4c:	d010      	beq.n	8008c70 <tcp_write+0x420>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8008c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c50:	b933      	cbnz	r3, 8008c60 <tcp_write+0x410>
 8008c52:	4b43      	ldr	r3, [pc, #268]	; (8008d60 <tcp_write+0x510>)
 8008c54:	4947      	ldr	r1, [pc, #284]	; (8008d74 <tcp_write+0x524>)
 8008c56:	4844      	ldr	r0, [pc, #272]	; (8008d68 <tcp_write+0x518>)
 8008c58:	f240 2285 	movw	r2, #645	; 0x285
 8008c5c:	f001 fd8e 	bl	800a77c <iprintf>
      prev_seg->next = seg;
 8008c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c62:	601c      	str	r4, [r3, #0]
    pos += seglen;
 8008c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c66:	940b      	str	r4, [sp, #44]	; 0x2c
 8008c68:	4498      	add	r8, r3
 8008c6a:	fa1f f888 	uxth.w	r8, r8
 8008c6e:	e6eb      	b.n	8008a48 <tcp_write+0x1f8>
 8008c70:	4683      	mov	fp, r0
 8008c72:	e7f7      	b.n	8008c64 <tcp_write+0x414>
  if (oversize_used > 0) {
 8008c74:	f04f 0a00 	mov.w	sl, #0
 8008c78:	46d1      	mov	r9, sl
 8008c7a:	e6e9      	b.n	8008a50 <tcp_write+0x200>
      p->tot_len += oversize_used;
 8008c7c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008c80:	4433      	add	r3, r6
 8008c82:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 8008c86:	f8d8 3000 	ldr.w	r3, [r8]
 8008c8a:	b96b      	cbnz	r3, 8008ca8 <tcp_write+0x458>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8008c8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c90:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 8008c94:	9908      	ldr	r1, [sp, #32]
 8008c96:	4418      	add	r0, r3
 8008c98:	4632      	mov	r2, r6
 8008c9a:	f001 fcb0 	bl	800a5fe <memcpy>
        p->len += oversize_used;
 8008c9e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8008ca2:	4433      	add	r3, r6
 8008ca4:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8008ca8:	f8d8 8000 	ldr.w	r8, [r8]
 8008cac:	e6d2      	b.n	8008a54 <tcp_write+0x204>
  } else if (extendlen > 0) {
 8008cae:	f1ba 0f00 	cmp.w	sl, #0
 8008cb2:	d019      	beq.n	8008ce8 <tcp_write+0x498>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8008cb4:	b10f      	cbz	r7, 8008cba <tcp_write+0x46a>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	b933      	cbnz	r3, 8008cc8 <tcp_write+0x478>
 8008cba:	4b29      	ldr	r3, [pc, #164]	; (8008d60 <tcp_write+0x510>)
 8008cbc:	492e      	ldr	r1, [pc, #184]	; (8008d78 <tcp_write+0x528>)
 8008cbe:	482a      	ldr	r0, [pc, #168]	; (8008d68 <tcp_write+0x518>)
 8008cc0:	f240 22c1 	movw	r2, #705	; 0x2c1
 8008cc4:	f001 fd5a 	bl	800a77c <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	891a      	ldrh	r2, [r3, #8]
 8008ccc:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 8008cce:	4452      	add	r2, sl
 8008cd0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008cd2:	b939      	cbnz	r1, 8008ce4 <tcp_write+0x494>
    p->len += extendlen;
 8008cd4:	895a      	ldrh	r2, [r3, #10]
 8008cd6:	4452      	add	r2, sl
 8008cd8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8008cda:	893b      	ldrh	r3, [r7, #8]
 8008cdc:	449a      	add	sl, r3
 8008cde:	f8a7 a008 	strh.w	sl, [r7, #8]
 8008ce2:	e6d7      	b.n	8008a94 <tcp_write+0x244>
      p->tot_len += extendlen;
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e7f0      	b.n	8008cca <tcp_write+0x47a>
  if (last_unsent == NULL) {
 8008ce8:	2f00      	cmp	r7, #0
 8008cea:	f47f aed3 	bne.w	8008a94 <tcp_write+0x244>
    pcb->unsent = queue;
 8008cee:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  pcb->snd_lbb += len;
 8008cf2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008cf4:	9a05      	ldr	r2, [sp, #20]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->snd_buf -= len;
 8008cfa:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8008cfe:	1a9b      	subs	r3, r3, r2
 8008d00:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8008d04:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8008d08:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8008d0c:	9b06      	ldr	r3, [sp, #24]
 8008d0e:	b153      	cbz	r3, 8008d26 <tcp_write+0x4d6>
    LWIP_ASSERT("tcp_write: valid queue length",
 8008d10:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8008d12:	b943      	cbnz	r3, 8008d26 <tcp_write+0x4d6>
 8008d14:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008d16:	b933      	cbnz	r3, 8008d26 <tcp_write+0x4d6>
 8008d18:	4b11      	ldr	r3, [pc, #68]	; (8008d60 <tcp_write+0x510>)
 8008d1a:	4915      	ldr	r1, [pc, #84]	; (8008d70 <tcp_write+0x520>)
 8008d1c:	4812      	ldr	r0, [pc, #72]	; (8008d68 <tcp_write+0x518>)
 8008d1e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8008d22:	f001 fd2b 	bl	800a77c <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8008d26:	b15c      	cbz	r4, 8008d40 <tcp_write+0x4f0>
 8008d28:	68e4      	ldr	r4, [r4, #12]
 8008d2a:	b14c      	cbz	r4, 8008d40 <tcp_write+0x4f0>
 8008d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d2e:	f013 0602 	ands.w	r6, r3, #2
 8008d32:	d105      	bne.n	8008d40 <tcp_write+0x4f0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8008d34:	2008      	movs	r0, #8
 8008d36:	89a5      	ldrh	r5, [r4, #12]
 8008d38:	f7fb fa66 	bl	8004208 <lwip_htons>
 8008d3c:	4328      	orrs	r0, r5
 8008d3e:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 8008d40:	2000      	movs	r0, #0
 8008d42:	e5a4      	b.n	800888e <tcp_write+0x3e>
      p->tot_len += extendlen;
 8008d44:	f04f 0900 	mov.w	r9, #0
 8008d48:	e74a      	b.n	8008be0 <tcp_write+0x390>
    return ERR_CONN;
 8008d4a:	f06f 000a 	mvn.w	r0, #10
 8008d4e:	e59e      	b.n	800888e <tcp_write+0x3e>
  if (oversize_used > 0) {
 8008d50:	2e00      	cmp	r6, #0
 8008d52:	d18f      	bne.n	8008c74 <tcp_write+0x424>
  pcb->unsent_oversize = oversize;
 8008d54:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008d58:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 8008d5c:	e69a      	b.n	8008a94 <tcp_write+0x244>
 8008d5e:	bf00      	nop
 8008d60:	0800ce93 	.word	0x0800ce93
 8008d64:	0800d024 	.word	0x0800d024
 8008d68:	0800b831 	.word	0x0800b831
 8008d6c:	0800d062 	.word	0x0800d062
 8008d70:	0800d0ee 	.word	0x0800d0ee
 8008d74:	0800d070 	.word	0x0800d070
 8008d78:	0800d0b9 	.word	0x0800d0b9

08008d7c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008d7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008d80:	f011 0803 	ands.w	r8, r1, #3
{
 8008d84:	4604      	mov	r4, r0
 8008d86:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008d88:	d106      	bne.n	8008d98 <tcp_enqueue_flags+0x1c>
 8008d8a:	4b41      	ldr	r3, [pc, #260]	; (8008e90 <tcp_enqueue_flags+0x114>)
 8008d8c:	4941      	ldr	r1, [pc, #260]	; (8008e94 <tcp_enqueue_flags+0x118>)
 8008d8e:	4842      	ldr	r0, [pc, #264]	; (8008e98 <tcp_enqueue_flags+0x11c>)
 8008d90:	f240 321b 	movw	r2, #795	; 0x31b
 8008d94:	f001 fcf2 	bl	800a77c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008d98:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008d9c:	2b08      	cmp	r3, #8
 8008d9e:	d90a      	bls.n	8008db6 <tcp_enqueue_flags+0x3a>
 8008da0:	07f1      	lsls	r1, r6, #31
 8008da2:	d408      	bmi.n	8008db6 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8008da4:	7ea3      	ldrb	r3, [r4, #26]
 8008da6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008daa:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008dac:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8008db0:	b003      	add	sp, #12
 8008db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008db6:	f006 0302 	and.w	r3, r6, #2
  if (flags & TCP_SYN) {
 8008dba:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008dbc:	bf14      	ite	ne
 8008dbe:	2704      	movne	r7, #4
 8008dc0:	2700      	moveq	r7, #0
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	4610      	mov	r0, r2
  u8_t optflags = 0;
 8008dca:	bf14      	ite	ne
 8008dcc:	f04f 0901 	movne.w	r9, #1
 8008dd0:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008dd4:	f7fd f83a 	bl	8005e4c <pbuf_alloc>
 8008dd8:	4605      	mov	r5, r0
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d0e2      	beq.n	8008da4 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008dde:	8943      	ldrh	r3, [r0, #10]
 8008de0:	42bb      	cmp	r3, r7
 8008de2:	d206      	bcs.n	8008df2 <tcp_enqueue_flags+0x76>
 8008de4:	4b2a      	ldr	r3, [pc, #168]	; (8008e90 <tcp_enqueue_flags+0x114>)
 8008de6:	492d      	ldr	r1, [pc, #180]	; (8008e9c <tcp_enqueue_flags+0x120>)
 8008de8:	482b      	ldr	r0, [pc, #172]	; (8008e98 <tcp_enqueue_flags+0x11c>)
 8008dea:	f240 3241 	movw	r2, #833	; 0x341
 8008dee:	f001 fcc5 	bl	800a77c <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008df2:	f8cd 9000 	str.w	r9, [sp]
 8008df6:	4629      	mov	r1, r5
 8008df8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008dfa:	4632      	mov	r2, r6
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f7ff fc83 	bl	8008708 <tcp_create_segment>
 8008e02:	4605      	mov	r5, r0
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d0cd      	beq.n	8008da4 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008e08:	68c3      	ldr	r3, [r0, #12]
 8008e0a:	079a      	lsls	r2, r3, #30
 8008e0c:	d006      	beq.n	8008e1c <tcp_enqueue_flags+0xa0>
 8008e0e:	4b20      	ldr	r3, [pc, #128]	; (8008e90 <tcp_enqueue_flags+0x114>)
 8008e10:	4923      	ldr	r1, [pc, #140]	; (8008ea0 <tcp_enqueue_flags+0x124>)
 8008e12:	4821      	ldr	r0, [pc, #132]	; (8008e98 <tcp_enqueue_flags+0x11c>)
 8008e14:	f240 3249 	movw	r2, #841	; 0x349
 8008e18:	f001 fcb0 	bl	800a77c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008e1c:	892b      	ldrh	r3, [r5, #8]
 8008e1e:	b133      	cbz	r3, 8008e2e <tcp_enqueue_flags+0xb2>
 8008e20:	4b1b      	ldr	r3, [pc, #108]	; (8008e90 <tcp_enqueue_flags+0x114>)
 8008e22:	4920      	ldr	r1, [pc, #128]	; (8008ea4 <tcp_enqueue_flags+0x128>)
 8008e24:	481c      	ldr	r0, [pc, #112]	; (8008e98 <tcp_enqueue_flags+0x11c>)
 8008e26:	f240 324a 	movw	r2, #842	; 0x34a
 8008e2a:	f001 fca7 	bl	800a77c <iprintf>
  if (pcb->unsent == NULL) {
 8008e2e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008e30:	bb4b      	cbnz	r3, 8008e86 <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 8008e32:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008e3a:	f1b8 0f00 	cmp.w	r8, #0
 8008e3e:	d002      	beq.n	8008e46 <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 8008e40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e42:	3301      	adds	r3, #1
 8008e44:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8008e46:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8008e48:	bf42      	ittt	mi
 8008e4a:	7ea3      	ldrbmi	r3, [r4, #26]
 8008e4c:	f043 0320 	orrmi.w	r3, r3, #32
 8008e50:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008e52:	6868      	ldr	r0, [r5, #4]
 8008e54:	f7fd f94a 	bl	80060ec <pbuf_clen>
 8008e58:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008e5c:	4418      	add	r0, r3
 8008e5e:	b280      	uxth	r0, r0
 8008e60:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d0a3      	beq.n	8008db0 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008e68:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008e6a:	b948      	cbnz	r0, 8008e80 <tcp_enqueue_flags+0x104>
 8008e6c:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8008e6e:	2c00      	cmp	r4, #0
 8008e70:	d19e      	bne.n	8008db0 <tcp_enqueue_flags+0x34>
 8008e72:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <tcp_enqueue_flags+0x114>)
 8008e74:	490c      	ldr	r1, [pc, #48]	; (8008ea8 <tcp_enqueue_flags+0x12c>)
 8008e76:	4808      	ldr	r0, [pc, #32]	; (8008e98 <tcp_enqueue_flags+0x11c>)
 8008e78:	f240 326d 	movw	r2, #877	; 0x36d
 8008e7c:	f001 fc7e 	bl	800a77c <iprintf>
  return ERR_OK;
 8008e80:	2000      	movs	r0, #0
 8008e82:	e795      	b.n	8008db0 <tcp_enqueue_flags+0x34>
 8008e84:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	2a00      	cmp	r2, #0
 8008e8a:	d1fb      	bne.n	8008e84 <tcp_enqueue_flags+0x108>
    useg->next = seg;
 8008e8c:	601d      	str	r5, [r3, #0]
 8008e8e:	e7d1      	b.n	8008e34 <tcp_enqueue_flags+0xb8>
 8008e90:	0800ce93 	.word	0x0800ce93
 8008e94:	0800cd30 	.word	0x0800cd30
 8008e98:	0800b831 	.word	0x0800b831
 8008e9c:	0800cd85 	.word	0x0800cd85
 8008ea0:	0800cdbe 	.word	0x0800cdbe
 8008ea4:	0800cdd6 	.word	0x0800cdd6
 8008ea8:	0800ce00 	.word	0x0800ce00

08008eac <tcp_send_fin>:
{
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8008eae:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8008eb0:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8008eb2:	b934      	cbnz	r4, 8008ec2 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	2101      	movs	r1, #1
}
 8008eb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008ebc:	f7ff bf5e 	b.w	8008d7c <tcp_enqueue_flags>
 8008ec0:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1fb      	bne.n	8008ec0 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008ec8:	68e3      	ldr	r3, [r4, #12]
 8008eca:	8998      	ldrh	r0, [r3, #12]
 8008ecc:	f7fb f99c 	bl	8004208 <lwip_htons>
 8008ed0:	f010 0707 	ands.w	r7, r0, #7
 8008ed4:	d1ee      	bne.n	8008eb4 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008ed6:	68e6      	ldr	r6, [r4, #12]
 8008ed8:	2001      	movs	r0, #1
 8008eda:	89b4      	ldrh	r4, [r6, #12]
 8008edc:	f7fb f994 	bl	8004208 <lwip_htons>
 8008ee0:	4320      	orrs	r0, r4
 8008ee2:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 8008ee4:	7eab      	ldrb	r3, [r5, #26]
 8008ee6:	f043 0320 	orr.w	r3, r3, #32
 8008eea:	76ab      	strb	r3, [r5, #26]
}
 8008eec:	4638      	mov	r0, r7
 8008eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ef0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8008ef0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008ef2:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008ef4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008ef6:	f7fb f98a 	bl	800420e <lwip_htonl>
 8008efa:	2100      	movs	r1, #0
 8008efc:	4602      	mov	r2, r0
 8008efe:	4620      	mov	r0, r4
 8008f00:	f7ff fc6a 	bl	80087d8 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8008f04:	4606      	mov	r6, r0
 8008f06:	b940      	cbnz	r0, 8008f1a <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008f08:	7ea3      	ldrb	r3, [r4, #26]
 8008f0a:	f043 0303 	orr.w	r3, r3, #3
 8008f0e:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8008f10:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8008f14:	4628      	mov	r0, r5
 8008f16:	b004      	add	sp, #16
 8008f18:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008f1a:	1d25      	adds	r5, r4, #4
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	f7fb fe67 	bl	8004bf0 <ip4_route>
  if (netif == NULL) {
 8008f22:	b1a0      	cbz	r0, 8008f4e <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8008f24:	2206      	movs	r2, #6
 8008f26:	9201      	str	r2, [sp, #4]
 8008f28:	7a62      	ldrb	r2, [r4, #9]
 8008f2a:	9002      	str	r0, [sp, #8]
 8008f2c:	9200      	str	r2, [sp, #0]
 8008f2e:	7aa3      	ldrb	r3, [r4, #10]
 8008f30:	462a      	mov	r2, r5
 8008f32:	4621      	mov	r1, r4
 8008f34:	4630      	mov	r0, r6
 8008f36:	f7fb ffc1 	bl	8004ebc <ip4_output_if>
 8008f3a:	4605      	mov	r5, r0
  pbuf_free(p);
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f7fc ff23 	bl	8005d88 <pbuf_free>
 8008f42:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8008f44:	b135      	cbz	r5, 8008f54 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008f46:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008f4a:	76a3      	strb	r3, [r4, #26]
 8008f4c:	e7e2      	b.n	8008f14 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8008f4e:	f06f 0503 	mvn.w	r5, #3
 8008f52:	e7f3      	b.n	8008f3c <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008f54:	f023 0303 	bic.w	r3, r3, #3
 8008f58:	e7f7      	b.n	8008f4a <tcp_send_empty_ack+0x5a>
	...

08008f5c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8008f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008f60:	7d03      	ldrb	r3, [r0, #20]
 8008f62:	2b01      	cmp	r3, #1
{
 8008f64:	b087      	sub	sp, #28
 8008f66:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008f68:	d106      	bne.n	8008f78 <tcp_output+0x1c>
 8008f6a:	4ba5      	ldr	r3, [pc, #660]	; (8009200 <tcp_output+0x2a4>)
 8008f6c:	49a5      	ldr	r1, [pc, #660]	; (8009204 <tcp_output+0x2a8>)
 8008f6e:	48a6      	ldr	r0, [pc, #664]	; (8009208 <tcp_output+0x2ac>)
 8008f70:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8008f74:	f001 fc02 	bl	800a77c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008f78:	4ba4      	ldr	r3, [pc, #656]	; (800920c <tcp_output+0x2b0>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	429c      	cmp	r4, r3
 8008f7e:	d052      	beq.n	8009026 <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008f80:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8008f84:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8008f88:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008f8a:	429f      	cmp	r7, r3
 8008f8c:	bf28      	it	cs
 8008f8e:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8008f90:	7ea3      	ldrb	r3, [r4, #26]
 8008f92:	0799      	lsls	r1, r3, #30
 8008f94:	d510      	bpl.n	8008fb8 <tcp_output+0x5c>
 8008f96:	b92d      	cbnz	r5, 8008fa4 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8008f98:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8008f9a:	b007      	add	sp, #28
 8008f9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8008fa0:	f7ff bfa6 	b.w	8008ef0 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8008fa4:	68eb      	ldr	r3, [r5, #12]
 8008fa6:	6858      	ldr	r0, [r3, #4]
 8008fa8:	f7fb f931 	bl	800420e <lwip_htonl>
 8008fac:	892b      	ldrh	r3, [r5, #8]
 8008fae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008fb0:	1a9b      	subs	r3, r3, r2
 8008fb2:	4418      	add	r0, r3
     (seg == NULL ||
 8008fb4:	4287      	cmp	r7, r0
 8008fb6:	d3ef      	bcc.n	8008f98 <tcp_output+0x3c>
  useg = pcb->unacked;
 8008fb8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 8008fba:	2e00      	cmp	r6, #0
 8008fbc:	d136      	bne.n	800902c <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008fbe:	f104 0804 	add.w	r8, r4, #4
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	f7fb fe14 	bl	8004bf0 <ip4_route>
  if (netif == NULL) {
 8008fc8:	4681      	mov	r9, r0
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	f000 813c 	beq.w	8009248 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 8008fd0:	b10c      	cbz	r4, 8008fd6 <tcp_output+0x7a>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	b913      	cbnz	r3, 8008fdc <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008fd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008fda:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 8008fdc:	b1d5      	cbz	r5, 8009014 <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8008fde:	68eb      	ldr	r3, [r5, #12]
 8008fe0:	6858      	ldr	r0, [r3, #4]
 8008fe2:	f7fb f914 	bl	800420e <lwip_htonl>
 8008fe6:	892b      	ldrh	r3, [r5, #8]
 8008fe8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008fea:	1a9b      	subs	r3, r3, r2
 8008fec:	4418      	add	r0, r3
  if (seg != NULL &&
 8008fee:	4287      	cmp	r7, r0
 8008ff0:	d26f      	bcs.n	80090d2 <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8008ff2:	2f00      	cmp	r7, #0
 8008ff4:	d06d      	beq.n	80090d2 <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8008ff6:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008ffa:	429f      	cmp	r7, r3
 8008ffc:	d169      	bne.n	80090d2 <tcp_output+0x176>
 8008ffe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009000:	2b00      	cmp	r3, #0
 8009002:	d166      	bne.n	80090d2 <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 8009004:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009008:	b923      	cbnz	r3, 8009014 <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 800900a:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 800900e:	2301      	movs	r3, #1
 8009010:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 8009014:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009016:	b913      	cbnz	r3, 800901e <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 8009018:	2300      	movs	r3, #0
 800901a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 800901e:	7ea3      	ldrb	r3, [r4, #26]
 8009020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009024:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8009026:	2000      	movs	r0, #0
 8009028:	e0e6      	b.n	80091f8 <tcp_output+0x29c>
 800902a:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 800902c:	6833      	ldr	r3, [r6, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1fb      	bne.n	800902a <tcp_output+0xce>
 8009032:	e7c4      	b.n	8008fbe <tcp_output+0x62>
    pcb->unsent = seg->next;
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8009038:	7d23      	ldrb	r3, [r4, #20]
 800903a:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800903c:	bf1e      	ittt	ne
 800903e:	7ea3      	ldrbne	r3, [r4, #26]
 8009040:	f023 0303 	bicne.w	r3, r3, #3
 8009044:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009046:	68eb      	ldr	r3, [r5, #12]
 8009048:	6858      	ldr	r0, [r3, #4]
 800904a:	f7fb f8e0 	bl	800420e <lwip_htonl>
 800904e:	68e9      	ldr	r1, [r5, #12]
 8009050:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009054:	4683      	mov	fp, r0
 8009056:	8988      	ldrh	r0, [r1, #12]
 8009058:	f7fb f8d6 	bl	8004208 <lwip_htons>
 800905c:	f010 0003 	ands.w	r0, r0, #3
 8009060:	eb0b 030a 	add.w	r3, fp, sl
 8009064:	bf18      	it	ne
 8009066:	2001      	movne	r0, #1
 8009068:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800906a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800906c:	68ea      	ldr	r2, [r5, #12]
 800906e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009072:	1a1b      	subs	r3, r3, r0
 8009074:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8009076:	bfb8      	it	lt
 8009078:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800907a:	8990      	ldrh	r0, [r2, #12]
 800907c:	f7fb f8c4 	bl	8004208 <lwip_htons>
 8009080:	f010 0003 	ands.w	r0, r0, #3
 8009084:	bf18      	it	ne
 8009086:	2001      	movne	r0, #1
 8009088:	eb10 0f0a 	cmn.w	r0, sl
 800908c:	f000 80d8 	beq.w	8009240 <tcp_output+0x2e4>
      seg->next = NULL;
 8009090:	2300      	movs	r3, #0
 8009092:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8009094:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009096:	b913      	cbnz	r3, 800909e <tcp_output+0x142>
        pcb->unacked = seg;
 8009098:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 800909a:	462e      	mov	r6, r5
 800909c:	e016      	b.n	80090cc <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800909e:	68eb      	ldr	r3, [r5, #12]
 80090a0:	6858      	ldr	r0, [r3, #4]
 80090a2:	f7fb f8b4 	bl	800420e <lwip_htonl>
 80090a6:	68f2      	ldr	r2, [r6, #12]
 80090a8:	4682      	mov	sl, r0
 80090aa:	6850      	ldr	r0, [r2, #4]
 80090ac:	f7fb f8af 	bl	800420e <lwip_htonl>
 80090b0:	ebaa 0000 	sub.w	r0, sl, r0
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f280 80c1 	bge.w	800923c <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80090ba:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	2a00      	cmp	r2, #0
 80090c2:	f040 80a9 	bne.w	8009218 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 80090ca:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 80090cc:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 80090ce:	2d00      	cmp	r5, #0
 80090d0:	d0a2      	beq.n	8009018 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80090d2:	68eb      	ldr	r3, [r5, #12]
 80090d4:	6858      	ldr	r0, [r3, #4]
 80090d6:	f7fb f89a 	bl	800420e <lwip_htonl>
 80090da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80090dc:	1ac0      	subs	r0, r0, r3
 80090de:	892b      	ldrh	r3, [r5, #8]
 80090e0:	4418      	add	r0, r3
  while (seg != NULL &&
 80090e2:	4287      	cmp	r7, r0
 80090e4:	d396      	bcc.n	8009014 <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 80090e6:	68eb      	ldr	r3, [r5, #12]
 80090e8:	8998      	ldrh	r0, [r3, #12]
 80090ea:	f7fb f88d 	bl	8004208 <lwip_htons>
 80090ee:	0742      	lsls	r2, r0, #29
 80090f0:	d506      	bpl.n	8009100 <tcp_output+0x1a4>
 80090f2:	4b43      	ldr	r3, [pc, #268]	; (8009200 <tcp_output+0x2a4>)
 80090f4:	4946      	ldr	r1, [pc, #280]	; (8009210 <tcp_output+0x2b4>)
 80090f6:	4844      	ldr	r0, [pc, #272]	; (8009208 <tcp_output+0x2ac>)
 80090f8:	f240 4246 	movw	r2, #1094	; 0x446
 80090fc:	f001 fb3e 	bl	800a77c <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009100:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009102:	b19b      	cbz	r3, 800912c <tcp_output+0x1d0>
 8009104:	7ea2      	ldrb	r2, [r4, #26]
 8009106:	f012 0f44 	tst.w	r2, #68	; 0x44
 800910a:	d10f      	bne.n	800912c <tcp_output+0x1d0>
 800910c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800910e:	b12b      	cbz	r3, 800911c <tcp_output+0x1c0>
 8009110:	6819      	ldr	r1, [r3, #0]
 8009112:	b959      	cbnz	r1, 800912c <tcp_output+0x1d0>
 8009114:	8919      	ldrh	r1, [r3, #8]
 8009116:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009118:	4299      	cmp	r1, r3
 800911a:	d207      	bcs.n	800912c <tcp_output+0x1d0>
 800911c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8009120:	b123      	cbz	r3, 800912c <tcp_output+0x1d0>
 8009122:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009126:	2b08      	cmp	r3, #8
 8009128:	f240 8091 	bls.w	800924e <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 800912c:	7d23      	ldrb	r3, [r4, #20]
 800912e:	2b02      	cmp	r3, #2
 8009130:	d00a      	beq.n	8009148 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009132:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009136:	2010      	movs	r0, #16
 8009138:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 800913c:	f7fb f864 	bl	8004208 <lwip_htons>
 8009140:	ea4b 0000 	orr.w	r0, fp, r0
 8009144:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009148:	686b      	ldr	r3, [r5, #4]
 800914a:	89db      	ldrh	r3, [r3, #14]
 800914c:	2b01      	cmp	r3, #1
 800914e:	f47f af71 	bne.w	8009034 <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009152:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009154:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009158:	f7fb f859 	bl	800420e <lwip_htonl>
 800915c:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009160:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8009162:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009166:	f7fb f84f 	bl	8004208 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800916a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800916c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800916e:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009172:	4413      	add	r3, r2
 8009174:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009176:	7aab      	ldrb	r3, [r5, #10]
 8009178:	07db      	lsls	r3, r3, #31
 800917a:	d50c      	bpl.n	8009196 <tcp_output+0x23a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800917c:	4641      	mov	r1, r8
 800917e:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009182:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009186:	f7fd ffc7 	bl	8007118 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800918a:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800918e:	f7fb f83e 	bl	800420e <lwip_htonl>
 8009192:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009196:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800919a:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800919c:	bfbc      	itt	lt
 800919e:	2300      	movlt	r3, #0
 80091a0:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80091a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091a4:	b93b      	cbnz	r3, 80091b6 <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 80091a6:	4b1b      	ldr	r3, [pc, #108]	; (8009214 <tcp_output+0x2b8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80091ac:	68eb      	ldr	r3, [r5, #12]
 80091ae:	6858      	ldr	r0, [r3, #4]
 80091b0:	f7fb f82d 	bl	800420e <lwip_htonl>
 80091b4:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80091b6:	6868      	ldr	r0, [r5, #4]
 80091b8:	68ea      	ldr	r2, [r5, #12]
 80091ba:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80091bc:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 80091be:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 80091c4:	1ac9      	subs	r1, r1, r3
 80091c6:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 80091c8:	8901      	ldrh	r1, [r0, #8]
 80091ca:	1acb      	subs	r3, r1, r3
 80091cc:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	7413      	strb	r3, [r2, #16]
 80091d2:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80091d4:	2206      	movs	r2, #6
 80091d6:	9201      	str	r2, [sp, #4]
 80091d8:	7a62      	ldrb	r2, [r4, #9]
 80091da:	9200      	str	r2, [sp, #0]
 80091dc:	7aa3      	ldrb	r3, [r4, #10]
 80091de:	f8cd 9008 	str.w	r9, [sp, #8]
 80091e2:	4642      	mov	r2, r8
 80091e4:	4621      	mov	r1, r4
 80091e6:	f7fb fe69 	bl	8004ebc <ip4_output_if>
    if (err != ERR_OK) {
 80091ea:	2800      	cmp	r0, #0
 80091ec:	f43f af22 	beq.w	8009034 <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 80091f0:	7ea3      	ldrb	r3, [r4, #26]
 80091f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091f6:	76a3      	strb	r3, [r4, #26]
}
 80091f8:	b007      	add	sp, #28
 80091fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fe:	bf00      	nop
 8009200:	0800ce93 	.word	0x0800ce93
 8009204:	0800ce28 	.word	0x0800ce28
 8009208:	0800b831 	.word	0x0800b831
 800920c:	20005738 	.word	0x20005738
 8009210:	0800ce4e 	.word	0x0800ce4e
 8009214:	20005728 	.word	0x20005728
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009218:	68d2      	ldr	r2, [r2, #12]
 800921a:	9305      	str	r3, [sp, #20]
 800921c:	6850      	ldr	r0, [r2, #4]
 800921e:	f7fa fff6 	bl	800420e <lwip_htonl>
 8009222:	68e9      	ldr	r1, [r5, #12]
 8009224:	4682      	mov	sl, r0
 8009226:	6848      	ldr	r0, [r1, #4]
 8009228:	f7fa fff1 	bl	800420e <lwip_htonl>
 800922c:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8009230:	2800      	cmp	r0, #0
 8009232:	9b05      	ldr	r3, [sp, #20]
 8009234:	f6bf af47 	bge.w	80090c6 <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	e740      	b.n	80090be <tcp_output+0x162>
          useg->next = seg;
 800923c:	6035      	str	r5, [r6, #0]
 800923e:	e72c      	b.n	800909a <tcp_output+0x13e>
      tcp_seg_free(seg);
 8009240:	4628      	mov	r0, r5
 8009242:	f7fd f9e3 	bl	800660c <tcp_seg_free>
 8009246:	e741      	b.n	80090cc <tcp_output+0x170>
    return ERR_RTE;
 8009248:	f06f 0003 	mvn.w	r0, #3
 800924c:	e7d4      	b.n	80091f8 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800924e:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8009252:	f47f af6b 	bne.w	800912c <tcp_output+0x1d0>
 8009256:	e6dd      	b.n	8009014 <tcp_output+0xb8>

08009258 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	b085      	sub	sp, #20
 800925e:	4681      	mov	r9, r0
 8009260:	460e      	mov	r6, r1
 8009262:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009264:	2114      	movs	r1, #20
 8009266:	2200      	movs	r2, #0
 8009268:	2001      	movs	r0, #1
{
 800926a:	461f      	mov	r7, r3
 800926c:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8009270:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009274:	f7fc fdea 	bl	8005e4c <pbuf_alloc>
  if (p == NULL) {
 8009278:	4605      	mov	r5, r0
 800927a:	2800      	cmp	r0, #0
 800927c:	d03c      	beq.n	80092f8 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800927e:	8943      	ldrh	r3, [r0, #10]
 8009280:	2b13      	cmp	r3, #19
 8009282:	d806      	bhi.n	8009292 <tcp_rst+0x3a>
 8009284:	4b1e      	ldr	r3, [pc, #120]	; (8009300 <tcp_rst+0xa8>)
 8009286:	491f      	ldr	r1, [pc, #124]	; (8009304 <tcp_rst+0xac>)
 8009288:	481f      	ldr	r0, [pc, #124]	; (8009308 <tcp_rst+0xb0>)
 800928a:	f240 524d 	movw	r2, #1357	; 0x54d
 800928e:	f001 fa75 	bl	800a77c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 8009292:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 8009294:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8009296:	f7fa ffb7 	bl	8004208 <lwip_htons>
 800929a:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800929c:	4650      	mov	r0, sl
 800929e:	f7fa ffb3 	bl	8004208 <lwip_htons>
 80092a2:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80092a4:	4648      	mov	r0, r9
 80092a6:	f7fa ffb2 	bl	800420e <lwip_htonl>
 80092aa:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80092ac:	4630      	mov	r0, r6
 80092ae:	f7fa ffae 	bl	800420e <lwip_htonl>
 80092b2:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80092b4:	f245 0014 	movw	r0, #20500	; 0x5014
 80092b8:	f7fa ffa6 	bl	8004208 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80092bc:	2308      	movs	r3, #8
 80092be:	2600      	movs	r6, #0
 80092c0:	73a3      	strb	r3, [r4, #14]
 80092c2:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80092c4:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80092c6:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 80092c8:	7426      	strb	r6, [r4, #16]
 80092ca:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 80092cc:	74a6      	strb	r6, [r4, #18]
 80092ce:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80092d0:	4638      	mov	r0, r7
 80092d2:	f7fb fc8d 	bl	8004bf0 <ip4_route>
  if (netif != NULL) {
 80092d6:	b148      	cbz	r0, 80092ec <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80092d8:	2306      	movs	r3, #6
 80092da:	9002      	str	r0, [sp, #8]
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	9600      	str	r6, [sp, #0]
 80092e0:	23ff      	movs	r3, #255	; 0xff
 80092e2:	463a      	mov	r2, r7
 80092e4:	4641      	mov	r1, r8
 80092e6:	4628      	mov	r0, r5
 80092e8:	f7fb fde8 	bl	8004ebc <ip4_output_if>
  }
  pbuf_free(p);
 80092ec:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80092ee:	b005      	add	sp, #20
 80092f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80092f4:	f7fc bd48 	b.w	8005d88 <pbuf_free>
}
 80092f8:	b005      	add	sp, #20
 80092fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fe:	bf00      	nop
 8009300:	0800ce93 	.word	0x0800ce93
 8009304:	0800ce65 	.word	0x0800ce65
 8009308:	0800b831 	.word	0x0800b831

0800930c <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800930c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 800930e:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8009310:	b1aa      	cbz	r2, 800933e <tcp_rexmit_rto+0x32>
 8009312:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8009314:	680b      	ldr	r3, [r1, #0]
 8009316:	b983      	cbnz	r3, 800933a <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009318:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800931a:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800931c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800931e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 8009322:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8009324:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8009326:	bf1c      	itt	ne
 8009328:	3301      	addne	r3, #1
 800932a:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8009332:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 8009336:	f7ff be11 	b.w	8008f5c <tcp_output>
 800933a:	4619      	mov	r1, r3
 800933c:	e7ea      	b.n	8009314 <tcp_rexmit_rto+0x8>
}
 800933e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009342:	4770      	bx	lr

08009344 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8009346:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 8009348:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800934a:	b1ad      	cbz	r5, 8009378 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8009350:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 8009354:	6833      	ldr	r3, [r6, #0]
 8009356:	b983      	cbnz	r3, 800937a <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 8009358:	6833      	ldr	r3, [r6, #0]
 800935a:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800935c:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800935e:	682b      	ldr	r3, [r5, #0]
 8009360:	b90b      	cbnz	r3, 8009366 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009362:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009366:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800936a:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800936c:	bf1c      	itt	ne
 800936e:	3301      	addne	r3, #1
 8009370:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	6363      	str	r3, [r4, #52]	; 0x34
 8009378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	6858      	ldr	r0, [r3, #4]
 800937e:	f7fa ff46 	bl	800420e <lwip_htonl>
 8009382:	68eb      	ldr	r3, [r5, #12]
 8009384:	4607      	mov	r7, r0
 8009386:	6858      	ldr	r0, [r3, #4]
 8009388:	f7fa ff41 	bl	800420e <lwip_htonl>
 800938c:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800938e:	2800      	cmp	r0, #0
 8009390:	dae2      	bge.n	8009358 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 8009392:	6836      	ldr	r6, [r6, #0]
 8009394:	e7de      	b.n	8009354 <tcp_rexmit+0x10>

08009396 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009396:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8009398:	b510      	push	{r4, lr}
 800939a:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800939c:	b30b      	cbz	r3, 80093e2 <tcp_rexmit_fast+0x4c>
 800939e:	7e83      	ldrb	r3, [r0, #26]
 80093a0:	075b      	lsls	r3, r3, #29
 80093a2:	d41e      	bmi.n	80093e2 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80093a4:	f7ff ffce 	bl	8009344 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80093a8:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 80093ac:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80093b0:	4293      	cmp	r3, r2
 80093b2:	bf38      	it	cc
 80093b4:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80093b6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80093b8:	bf28      	it	cs
 80093ba:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80093bc:	0059      	lsls	r1, r3, #1
 80093be:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80093c0:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80093c4:	bf38      	it	cc
 80093c6:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80093ca:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80093ce:	440b      	add	r3, r1
 80093d0:	4413      	add	r3, r2
 80093d2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80093d6:	7ea3      	ldrb	r3, [r4, #26]
 80093d8:	f043 0304 	orr.w	r3, r3, #4
 80093dc:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	8623      	strh	r3, [r4, #48]	; 0x30
 80093e2:	bd10      	pop	{r4, pc}

080093e4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80093e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80093e6:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80093e8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80093ea:	3801      	subs	r0, #1
 80093ec:	f7fa ff0f 	bl	800420e <lwip_htonl>
 80093f0:	2100      	movs	r1, #0
 80093f2:	4602      	mov	r2, r0
 80093f4:	4620      	mov	r0, r4
 80093f6:	f7ff f9ef 	bl	80087d8 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80093fa:	4605      	mov	r5, r0
 80093fc:	b1c8      	cbz	r0, 8009432 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80093fe:	1d26      	adds	r6, r4, #4
 8009400:	4630      	mov	r0, r6
 8009402:	f7fb fbf5 	bl	8004bf0 <ip4_route>
  if (netif == NULL) {
 8009406:	b188      	cbz	r0, 800942c <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8009408:	2100      	movs	r1, #0
 800940a:	2206      	movs	r2, #6
 800940c:	7aa3      	ldrb	r3, [r4, #10]
 800940e:	9002      	str	r0, [sp, #8]
 8009410:	e88d 0006 	stmia.w	sp, {r1, r2}
 8009414:	4628      	mov	r0, r5
 8009416:	4621      	mov	r1, r4
 8009418:	4632      	mov	r2, r6
 800941a:	f7fb fd4f 	bl	8004ebc <ip4_output_if>
 800941e:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009420:	4628      	mov	r0, r5
 8009422:	f7fc fcb1 	bl	8005d88 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8009426:	4620      	mov	r0, r4
 8009428:	b004      	add	sp, #16
 800942a:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800942c:	f06f 0403 	mvn.w	r4, #3
 8009430:	e7f6      	b.n	8009420 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8009432:	f04f 34ff 	mov.w	r4, #4294967295
 8009436:	e7f6      	b.n	8009426 <tcp_keepalive+0x42>

08009438 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009438:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800943c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 800943e:	4606      	mov	r6, r0

  if (seg == NULL) {
 8009440:	b914      	cbnz	r4, 8009448 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8009442:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8009444:	2c00      	cmp	r4, #0
 8009446:	d042      	beq.n	80094ce <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009448:	68e3      	ldr	r3, [r4, #12]
 800944a:	8998      	ldrh	r0, [r3, #12]
 800944c:	f7fa fedc 	bl	8004208 <lwip_htons>
 8009450:	f010 0501 	ands.w	r5, r0, #1
 8009454:	bf18      	it	ne
 8009456:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009458:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800945a:	bf1c      	itt	ne
 800945c:	fab5 f585 	clzne	r5, r5
 8009460:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	f085 0101 	eor.w	r1, r5, #1
 8009468:	4630      	mov	r0, r6
 800946a:	f7ff f9b5 	bl	80087d8 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800946e:	4607      	mov	r7, r0
 8009470:	2800      	cmp	r0, #0
 8009472:	d03e      	beq.n	80094f2 <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009474:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8009478:	b36d      	cbz	r5, 80094d6 <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800947a:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 800947e:	2011      	movs	r0, #17
 8009480:	f7fa fec2 	bl	8004208 <lwip_htons>
 8009484:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8009488:	b2ad      	uxth	r5, r5
 800948a:	4328      	orrs	r0, r5
 800948c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009490:	68e3      	ldr	r3, [r4, #12]
 8009492:	6858      	ldr	r0, [r3, #4]
 8009494:	f7fa febb 	bl	800420e <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009498:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800949a:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800949c:	1a1b      	subs	r3, r3, r0
 800949e:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80094a0:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 80094a4:	bfb8      	it	lt
 80094a6:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80094a8:	4620      	mov	r0, r4
 80094aa:	f7fb fba1 	bl	8004bf0 <ip4_route>
  if (netif == NULL) {
 80094ae:	b1e8      	cbz	r0, 80094ec <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80094b0:	2100      	movs	r1, #0
 80094b2:	2206      	movs	r2, #6
 80094b4:	e88d 0006 	stmia.w	sp, {r1, r2}
 80094b8:	9002      	str	r0, [sp, #8]
 80094ba:	4622      	mov	r2, r4
 80094bc:	7ab3      	ldrb	r3, [r6, #10]
 80094be:	4631      	mov	r1, r6
 80094c0:	4638      	mov	r0, r7
 80094c2:	f7fb fcfb 	bl	8004ebc <ip4_output_if>
 80094c6:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80094c8:	4638      	mov	r0, r7
 80094ca:	f7fc fc5d 	bl	8005d88 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80094ce:	4620      	mov	r0, r4
 80094d0:	b004      	add	sp, #16
 80094d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80094d6:	6860      	ldr	r0, [r4, #4]
 80094d8:	8922      	ldrh	r2, [r4, #8]
 80094da:	8903      	ldrh	r3, [r0, #8]
 80094dc:	1a9b      	subs	r3, r3, r2
 80094de:	b29b      	uxth	r3, r3
 80094e0:	2201      	movs	r2, #1
 80094e2:	f108 0114 	add.w	r1, r8, #20
 80094e6:	f7fc fee1 	bl	80062ac <pbuf_copy_partial>
 80094ea:	e7d1      	b.n	8009490 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 80094ec:	f06f 0403 	mvn.w	r4, #3
 80094f0:	e7ea      	b.n	80094c8 <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 80094f2:	f04f 34ff 	mov.w	r4, #4294967295
 80094f6:	e7ea      	b.n	80094ce <tcp_zero_window_probe+0x96>

080094f8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80094f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094fc:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80094fe:	2006      	movs	r0, #6
{
 8009500:	460f      	mov	r7, r1
 8009502:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009504:	f7fc fac0 	bl	8005a88 <memp_malloc>
  if (timeout == NULL) {
 8009508:	4604      	mov	r4, r0
 800950a:	b938      	cbnz	r0, 800951c <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800950c:	4b1e      	ldr	r3, [pc, #120]	; (8009588 <sys_timeout+0x90>)
 800950e:	491f      	ldr	r1, [pc, #124]	; (800958c <sys_timeout+0x94>)
 8009510:	481f      	ldr	r0, [pc, #124]	; (8009590 <sys_timeout+0x98>)
 8009512:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 8009514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8009518:	f001 b930 	b.w	800a77c <iprintf>
  now = sys_now();
 800951c:	f000 fbce 	bl	8009cbc <sys_now>
  if (next_timeout == NULL) {
 8009520:	4a1c      	ldr	r2, [pc, #112]	; (8009594 <sys_timeout+0x9c>)
 8009522:	491d      	ldr	r1, [pc, #116]	; (8009598 <sys_timeout+0xa0>)
 8009524:	6813      	ldr	r3, [r2, #0]
 8009526:	b95b      	cbnz	r3, 8009540 <sys_timeout+0x48>
    timeouts_last_time = now;
 8009528:	6008      	str	r0, [r1, #0]
    diff = 0;
 800952a:	4618      	mov	r0, r3
  timeout->next = NULL;
 800952c:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 800952e:	4428      	add	r0, r5
  timeout->next = NULL;
 8009530:	6021      	str	r1, [r4, #0]
  timeout->h = handler;
 8009532:	60a7      	str	r7, [r4, #8]
  timeout->arg = arg;
 8009534:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 8009536:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8009538:	b92b      	cbnz	r3, 8009546 <sys_timeout+0x4e>
    next_timeout = timeout;
 800953a:	6014      	str	r4, [r2, #0]
 800953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8009540:	6809      	ldr	r1, [r1, #0]
 8009542:	1a40      	subs	r0, r0, r1
 8009544:	e7f2      	b.n	800952c <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 8009546:	6859      	ldr	r1, [r3, #4]
 8009548:	428d      	cmp	r5, r1
 800954a:	d217      	bcs.n	800957c <sys_timeout+0x84>
    next_timeout->time -= msecs;
 800954c:	1b4d      	subs	r5, r1, r5
 800954e:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	e7f2      	b.n	800953a <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 8009554:	684e      	ldr	r6, [r1, #4]
 8009556:	42b2      	cmp	r2, r6
 8009558:	d312      	bcc.n	8009580 <sys_timeout+0x88>
 800955a:	4608      	mov	r0, r1
      timeout->time -= t->time;
 800955c:	6841      	ldr	r1, [r0, #4]
 800955e:	6862      	ldr	r2, [r4, #4]
 8009560:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 8009562:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 8009564:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8009566:	2900      	cmp	r1, #0
 8009568:	d1f4      	bne.n	8009554 <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 800956a:	4295      	cmp	r5, r2
 800956c:	d202      	bcs.n	8009574 <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	441d      	add	r5, r3
 8009572:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 8009574:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 8009576:	6004      	str	r4, [r0, #0]
        break;
 8009578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800957c:	4618      	mov	r0, r3
 800957e:	e7ed      	b.n	800955c <sys_timeout+0x64>
          t->next->time -= timeout->time;
 8009580:	1ab2      	subs	r2, r6, r2
 8009582:	604a      	str	r2, [r1, #4]
 8009584:	e7f6      	b.n	8009574 <sys_timeout+0x7c>
 8009586:	bf00      	nop
 8009588:	0800d124 	.word	0x0800d124
 800958c:	0800d158 	.word	0x0800d158
 8009590:	0800b831 	.word	0x0800b831
 8009594:	200021dc 	.word	0x200021dc
 8009598:	200021e4 	.word	0x200021e4

0800959c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800959c:	4b08      	ldr	r3, [pc, #32]	; (80095c0 <tcp_timer_needed+0x24>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	b962      	cbnz	r2, 80095bc <tcp_timer_needed+0x20>
 80095a2:	4a08      	ldr	r2, [pc, #32]	; (80095c4 <tcp_timer_needed+0x28>)
 80095a4:	6812      	ldr	r2, [r2, #0]
 80095a6:	b912      	cbnz	r2, 80095ae <tcp_timer_needed+0x12>
 80095a8:	4a07      	ldr	r2, [pc, #28]	; (80095c8 <tcp_timer_needed+0x2c>)
 80095aa:	6812      	ldr	r2, [r2, #0]
 80095ac:	b132      	cbz	r2, 80095bc <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 80095ae:	2201      	movs	r2, #1
 80095b0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80095b2:	4906      	ldr	r1, [pc, #24]	; (80095cc <tcp_timer_needed+0x30>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	20fa      	movs	r0, #250	; 0xfa
 80095b8:	f7ff bf9e 	b.w	80094f8 <sys_timeout>
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	200021e0 	.word	0x200021e0
 80095c4:	20005724 	.word	0x20005724
 80095c8:	20005734 	.word	0x20005734
 80095cc:	080095d1 	.word	0x080095d1

080095d0 <tcpip_tcp_timer>:
{
 80095d0:	b508      	push	{r3, lr}
  tcp_tmr();
 80095d2:	f7fd fc39 	bl	8006e48 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80095d6:	4b08      	ldr	r3, [pc, #32]	; (80095f8 <tcpip_tcp_timer+0x28>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	b913      	cbnz	r3, 80095e2 <tcpip_tcp_timer+0x12>
 80095dc:	4b07      	ldr	r3, [pc, #28]	; (80095fc <tcpip_tcp_timer+0x2c>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	b133      	cbz	r3, 80095f0 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80095e2:	2200      	movs	r2, #0
 80095e4:	4906      	ldr	r1, [pc, #24]	; (8009600 <tcpip_tcp_timer+0x30>)
 80095e6:	20fa      	movs	r0, #250	; 0xfa
}
 80095e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80095ec:	f7ff bf84 	b.w	80094f8 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 80095f0:	4a04      	ldr	r2, [pc, #16]	; (8009604 <tcpip_tcp_timer+0x34>)
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	bd08      	pop	{r3, pc}
 80095f6:	bf00      	nop
 80095f8:	20005724 	.word	0x20005724
 80095fc:	20005734 	.word	0x20005734
 8009600:	080095d1 	.word	0x080095d1
 8009604:	200021e0 	.word	0x200021e0

08009608 <sys_timeouts_init>:
{
 8009608:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800960a:	4d0a      	ldr	r5, [pc, #40]	; (8009634 <sys_timeouts_init+0x2c>)
 800960c:	4c0a      	ldr	r4, [pc, #40]	; (8009638 <sys_timeouts_init+0x30>)
 800960e:	f105 0208 	add.w	r2, r5, #8
 8009612:	4621      	mov	r1, r4
 8009614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009618:	f7ff ff6e 	bl	80094f8 <sys_timeout>
 800961c:	f105 0210 	add.w	r2, r5, #16
 8009620:	4621      	mov	r1, r4
 8009622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009626:	f7ff ff67 	bl	80094f8 <sys_timeout>
  timeouts_last_time = sys_now();
 800962a:	f000 fb47 	bl	8009cbc <sys_now>
 800962e:	4b03      	ldr	r3, [pc, #12]	; (800963c <sys_timeouts_init+0x34>)
 8009630:	6018      	str	r0, [r3, #0]
 8009632:	bd38      	pop	{r3, r4, r5, pc}
 8009634:	0800d10c 	.word	0x0800d10c
 8009638:	08009641 	.word	0x08009641
 800963c:	200021e4 	.word	0x200021e4

08009640 <cyclic_timer>:
{
 8009640:	b510      	push	{r4, lr}
 8009642:	4604      	mov	r4, r0
  cyclic->handler();
 8009644:	6843      	ldr	r3, [r0, #4]
 8009646:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8009648:	4622      	mov	r2, r4
 800964a:	6820      	ldr	r0, [r4, #0]
 800964c:	4902      	ldr	r1, [pc, #8]	; (8009658 <cyclic_timer+0x18>)
}
 800964e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8009652:	f7ff bf51 	b.w	80094f8 <sys_timeout>
 8009656:	bf00      	nop
 8009658:	08009641 	.word	0x08009641

0800965c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800965c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (next_timeout) {
 8009660:	4d13      	ldr	r5, [pc, #76]	; (80096b0 <sys_check_timeouts+0x54>)
 8009662:	682b      	ldr	r3, [r5, #0]
 8009664:	b30b      	cbz	r3, 80096aa <sys_check_timeouts+0x4e>
    u8_t had_one;
    u32_t now;

    now = sys_now();
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8009666:	4e13      	ldr	r6, [pc, #76]	; (80096b4 <sys_check_timeouts+0x58>)
    do {
      PBUF_CHECK_FREE_OOSEQ();
 8009668:	4f13      	ldr	r7, [pc, #76]	; (80096b8 <sys_check_timeouts+0x5c>)
    now = sys_now();
 800966a:	f000 fb27 	bl	8009cbc <sys_now>
    diff = now - timeouts_last_time;
 800966e:	6834      	ldr	r4, [r6, #0]
 8009670:	1b04      	subs	r4, r0, r4
      PBUF_CHECK_FREE_OOSEQ();
 8009672:	783b      	ldrb	r3, [r7, #0]
 8009674:	b10b      	cbz	r3, 800967a <sys_check_timeouts+0x1e>
 8009676:	f7fc fb33 	bl	8005ce0 <pbuf_free_ooseq>
      had_one = 0;
      tmptimeout = next_timeout;
 800967a:	6829      	ldr	r1, [r5, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800967c:	b1a9      	cbz	r1, 80096aa <sys_check_timeouts+0x4e>
 800967e:	684b      	ldr	r3, [r1, #4]
 8009680:	429c      	cmp	r4, r3
 8009682:	d312      	bcc.n	80096aa <sys_check_timeouts+0x4e>
        /* timeout has expired */
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
 8009684:	6832      	ldr	r2, [r6, #0]
        diff -= tmptimeout->time;
        next_timeout = tmptimeout->next;
        handler = tmptimeout->h;
 8009686:	f8d1 8008 	ldr.w	r8, [r1, #8]
        arg = tmptimeout->arg;
 800968a:	f8d1 900c 	ldr.w	r9, [r1, #12]
        timeouts_last_time += tmptimeout->time;
 800968e:	441a      	add	r2, r3
        diff -= tmptimeout->time;
 8009690:	1ae4      	subs	r4, r4, r3
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009692:	2006      	movs	r0, #6
        next_timeout = tmptimeout->next;
 8009694:	680b      	ldr	r3, [r1, #0]
        timeouts_last_time += tmptimeout->time;
 8009696:	6032      	str	r2, [r6, #0]
        next_timeout = tmptimeout->next;
 8009698:	602b      	str	r3, [r5, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800969a:	f7fc fa11 	bl	8005ac0 <memp_free>
        if (handler != NULL) {
 800969e:	f1b8 0f00 	cmp.w	r8, #0
 80096a2:	d0e6      	beq.n	8009672 <sys_check_timeouts+0x16>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 80096a4:	4648      	mov	r0, r9
 80096a6:	47c0      	blx	r8
 80096a8:	e7e3      	b.n	8009672 <sys_check_timeouts+0x16>
 80096aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ae:	bf00      	nop
 80096b0:	200021dc 	.word	0x200021dc
 80096b4:	200021e4 	.word	0x200021e4
 80096b8:	2000571c 	.word	0x2000571c

080096bc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80096bc:	4770      	bx	lr
	...

080096c0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80096c4:	8943      	ldrh	r3, [r0, #10]
 80096c6:	2b07      	cmp	r3, #7
{
 80096c8:	b085      	sub	sp, #20
 80096ca:	4605      	mov	r5, r0
 80096cc:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 80096ce:	d805      	bhi.n	80096dc <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80096d0:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80096d2:	b005      	add	sp, #20
 80096d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 80096d8:	f7fc bb56 	b.w	8005d88 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80096dc:	4e3e      	ldr	r6, [pc, #248]	; (80097d8 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 80096de:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80096e0:	6831      	ldr	r1, [r6, #0]
 80096e2:	6970      	ldr	r0, [r6, #20]
 80096e4:	f7fb fbfb 	bl	8004ede <ip4_addr_isbroadcast_u32>
 80096e8:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 80096ea:	8820      	ldrh	r0, [r4, #0]
 80096ec:	f7fa fd8c 	bl	8004208 <lwip_htons>
 80096f0:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 80096f2:	8860      	ldrh	r0, [r4, #2]
 80096f4:	f7fa fd88 	bl	8004208 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80096f8:	4a38      	ldr	r2, [pc, #224]	; (80097dc <udp_input+0x11c>)
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80096fa:	6971      	ldr	r1, [r6, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80096fc:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8009700:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8009702:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009704:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 8009706:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009708:	4603      	mov	r3, r0
  prev = NULL;
 800970a:	46a4      	mov	ip, r4
 800970c:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800970e:	b92b      	cbnz	r3, 800971c <udp_input+0x5c>
  if (pcb != NULL) {
 8009710:	bb0c      	cbnz	r4, 8009756 <udp_input+0x96>
  if (for_us) {
 8009712:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009716:	428b      	cmp	r3, r1
 8009718:	d1da      	bne.n	80096d0 <udp_input+0x10>
 800971a:	e01c      	b.n	8009756 <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 800971c:	8a5a      	ldrh	r2, [r3, #18]
 800971e:	4552      	cmp	r2, sl
 8009720:	d12b      	bne.n	800977a <udp_input+0xba>
 8009722:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 8009724:	b32f      	cbz	r7, 8009772 <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009726:	b13a      	cbz	r2, 8009738 <udp_input+0x78>
 8009728:	1c4e      	adds	r6, r1, #1
 800972a:	d005      	beq.n	8009738 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800972c:	404a      	eors	r2, r1
 800972e:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009730:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009734:	4216      	tst	r6, r2
 8009736:	d120      	bne.n	800977a <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8009738:	7c1a      	ldrb	r2, [r3, #16]
 800973a:	0752      	lsls	r2, r2, #29
 800973c:	d402      	bmi.n	8009744 <udp_input+0x84>
 800973e:	2c00      	cmp	r4, #0
 8009740:	bf08      	it	eq
 8009742:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8009744:	8a9a      	ldrh	r2, [r3, #20]
 8009746:	4542      	cmp	r2, r8
 8009748:	d117      	bne.n	800977a <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800974a:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 800974c:	b9c2      	cbnz	r2, 8009780 <udp_input+0xc0>
        if (prev != NULL) {
 800974e:	f1bc 0f00 	cmp.w	ip, #0
 8009752:	d118      	bne.n	8009786 <udp_input+0xc6>
 8009754:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 8009756:	f06f 0107 	mvn.w	r1, #7
 800975a:	4628      	mov	r0, r5
 800975c:	f7fc fb0e 	bl	8005d7c <pbuf_header>
 8009760:	b1c0      	cbz	r0, 8009794 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8009762:	4b1f      	ldr	r3, [pc, #124]	; (80097e0 <udp_input+0x120>)
 8009764:	491f      	ldr	r1, [pc, #124]	; (80097e4 <udp_input+0x124>)
 8009766:	4820      	ldr	r0, [pc, #128]	; (80097e8 <udp_input+0x128>)
 8009768:	f240 1255 	movw	r2, #341	; 0x155
 800976c:	f001 f806 	bl	800a77c <iprintf>
 8009770:	e7ae      	b.n	80096d0 <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009772:	2a00      	cmp	r2, #0
 8009774:	d0e0      	beq.n	8009738 <udp_input+0x78>
 8009776:	428a      	cmp	r2, r1
 8009778:	d0de      	beq.n	8009738 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800977a:	469c      	mov	ip, r3
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	e7c6      	b.n	800970e <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009780:	4572      	cmp	r2, lr
 8009782:	d1fa      	bne.n	800977a <udp_input+0xba>
 8009784:	e7e3      	b.n	800974e <udp_input+0x8e>
          prev->next = pcb->next;
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	f8cc 200c 	str.w	r2, [ip, #12]
          udp_pcbs = pcb;
 800978c:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 8009790:	60d8      	str	r0, [r3, #12]
 8009792:	e7df      	b.n	8009754 <udp_input+0x94>
    if (pcb != NULL) {
 8009794:	b164      	cbz	r4, 80097b0 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 8009796:	69a6      	ldr	r6, [r4, #24]
 8009798:	2e00      	cmp	r6, #0
 800979a:	d099      	beq.n	80096d0 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800979c:	f8cd 8000 	str.w	r8, [sp]
 80097a0:	4b12      	ldr	r3, [pc, #72]	; (80097ec <udp_input+0x12c>)
 80097a2:	69e0      	ldr	r0, [r4, #28]
 80097a4:	462a      	mov	r2, r5
 80097a6:	4621      	mov	r1, r4
 80097a8:	47b0      	blx	r6
}
 80097aa:	b005      	add	sp, #20
 80097ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80097b0:	2f00      	cmp	r7, #0
 80097b2:	d18d      	bne.n	80096d0 <udp_input+0x10>
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097bc:	2be0      	cmp	r3, #224	; 0xe0
 80097be:	d087      	beq.n	80096d0 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	8999      	ldrh	r1, [r3, #12]
 80097c4:	3108      	adds	r1, #8
 80097c6:	b209      	sxth	r1, r1
 80097c8:	4628      	mov	r0, r5
 80097ca:	f7fc fada 	bl	8005d82 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80097ce:	2103      	movs	r1, #3
 80097d0:	4628      	mov	r0, r5
 80097d2:	f7fb fa03 	bl	8004bdc <icmp_dest_unreach>
 80097d6:	e77b      	b.n	80096d0 <udp_input+0x10>
 80097d8:	200021fc 	.word	0x200021fc
 80097dc:	2000573c 	.word	0x2000573c
 80097e0:	0800d195 	.word	0x0800d195
 80097e4:	0800d1c4 	.word	0x0800d1c4
 80097e8:	0800b831 	.word	0x0800b831
 80097ec:	2000220c 	.word	0x2000220c

080097f0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80097f0:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80097f2:	b138      	cbz	r0, 8009804 <udp_netif_ip_addr_changed+0x14>
 80097f4:	6803      	ldr	r3, [r0, #0]
 80097f6:	b12b      	cbz	r3, 8009804 <udp_netif_ip_addr_changed+0x14>
 80097f8:	b121      	cbz	r1, 8009804 <udp_netif_ip_addr_changed+0x14>
 80097fa:	680b      	ldr	r3, [r1, #0]
 80097fc:	b113      	cbz	r3, 8009804 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80097fe:	4b06      	ldr	r3, [pc, #24]	; (8009818 <udp_netif_ip_addr_changed+0x28>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	b903      	cbnz	r3, 8009806 <udp_netif_ip_addr_changed+0x16>
 8009804:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8009806:	681c      	ldr	r4, [r3, #0]
 8009808:	6802      	ldr	r2, [r0, #0]
 800980a:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800980c:	bf04      	itt	eq
 800980e:	680a      	ldreq	r2, [r1, #0]
 8009810:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	e7f5      	b.n	8009802 <udp_netif_ip_addr_changed+0x12>
 8009816:	bf00      	nop
 8009818:	2000573c 	.word	0x2000573c

0800981c <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800981c:	8943      	ldrh	r3, [r0, #10]
 800981e:	2b0e      	cmp	r3, #14
{
 8009820:	b570      	push	{r4, r5, r6, lr}
 8009822:	4604      	mov	r4, r0
 8009824:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 8009826:	d914      	bls.n	8009852 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8009828:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800982a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800982c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800982e:	07d9      	lsls	r1, r3, #31
 8009830:	d50a      	bpl.n	8009848 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8009832:	2b01      	cmp	r3, #1
 8009834:	d111      	bne.n	800985a <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009836:	7843      	ldrb	r3, [r0, #1]
 8009838:	b933      	cbnz	r3, 8009848 <ethernet_input+0x2c>
 800983a:	7883      	ldrb	r3, [r0, #2]
 800983c:	2b5e      	cmp	r3, #94	; 0x5e
 800983e:	d103      	bne.n	8009848 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8009840:	7b63      	ldrb	r3, [r4, #13]
 8009842:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8009846:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8009848:	2e08      	cmp	r6, #8
 800984a:	d010      	beq.n	800986e <ethernet_input+0x52>
 800984c:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8009850:	d01e      	beq.n	8009890 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8009852:	4620      	mov	r0, r4
 8009854:	f7fc fa98 	bl	8005d88 <pbuf_free>
  return ERR_OK;
 8009858:	e018      	b.n	800988c <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800985a:	2206      	movs	r2, #6
 800985c:	4914      	ldr	r1, [pc, #80]	; (80098b0 <ethernet_input+0x94>)
 800985e:	f000 febf 	bl	800a5e0 <memcmp>
 8009862:	2800      	cmp	r0, #0
 8009864:	d1f0      	bne.n	8009848 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 8009866:	7b63      	ldrb	r3, [r4, #13]
 8009868:	f043 0308 	orr.w	r3, r3, #8
 800986c:	e7eb      	b.n	8009846 <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800986e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8009872:	071a      	lsls	r2, r3, #28
 8009874:	d5ed      	bpl.n	8009852 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8009876:	f06f 010d 	mvn.w	r1, #13
 800987a:	4620      	mov	r0, r4
 800987c:	f7fc fa7e 	bl	8005d7c <pbuf_header>
 8009880:	2800      	cmp	r0, #0
 8009882:	d1e6      	bne.n	8009852 <ethernet_input+0x36>
        ip4_input(p, netif);
 8009884:	4629      	mov	r1, r5
 8009886:	4620      	mov	r0, r4
 8009888:	f7fb f9de 	bl	8004c48 <ip4_input>
}
 800988c:	2000      	movs	r0, #0
 800988e:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009890:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8009894:	071b      	lsls	r3, r3, #28
 8009896:	d5dc      	bpl.n	8009852 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8009898:	f06f 010d 	mvn.w	r1, #13
 800989c:	4620      	mov	r0, r4
 800989e:	f7fc fa6d 	bl	8005d7c <pbuf_header>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d1d5      	bne.n	8009852 <ethernet_input+0x36>
        etharp_input(p, netif);
 80098a6:	4629      	mov	r1, r5
 80098a8:	4620      	mov	r0, r4
 80098aa:	f7fa fe3f 	bl	800452c <etharp_input>
      break;
 80098ae:	e7ed      	b.n	800988c <ethernet_input+0x70>
 80098b0:	0800d1d8 	.word	0x0800d1d8

080098b4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80098b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b8:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80098ba:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 80098be:	460d      	mov	r5, r1
 80098c0:	4616      	mov	r6, r2
 80098c2:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 80098c4:	f7fa fca0 	bl	8004208 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80098c8:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 80098ca:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80098cc:	4628      	mov	r0, r5
 80098ce:	f7fc fa55 	bl	8005d7c <pbuf_header>
 80098d2:	b9e0      	cbnz	r0, 800990e <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80098d4:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 80098d6:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	600b      	str	r3, [r1, #0]
 80098de:	88bb      	ldrh	r3, [r7, #4]
 80098e0:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 80098e2:	6833      	ldr	r3, [r6, #0]
 80098e4:	f8c1 3006 	str.w	r3, [r1, #6]
 80098e8:	88b3      	ldrh	r3, [r6, #4]
 80098ea:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80098ec:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80098f0:	2b06      	cmp	r3, #6
 80098f2:	d006      	beq.n	8009902 <ethernet_output+0x4e>
 80098f4:	4b08      	ldr	r3, [pc, #32]	; (8009918 <ethernet_output+0x64>)
 80098f6:	4909      	ldr	r1, [pc, #36]	; (800991c <ethernet_output+0x68>)
 80098f8:	4809      	ldr	r0, [pc, #36]	; (8009920 <ethernet_output+0x6c>)
 80098fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80098fe:	f000 ff3d 	bl	800a77c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8009902:	69a3      	ldr	r3, [r4, #24]
 8009904:	4629      	mov	r1, r5
 8009906:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8009908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800990c:	4718      	bx	r3
}
 800990e:	f06f 0001 	mvn.w	r0, #1
 8009912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009916:	bf00      	nop
 8009918:	0800d1de 	.word	0x0800d1de
 800991c:	0800d213 	.word	0x0800d213
 8009920:	0800b831 	.word	0x0800b831

08009924 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8009928:	4a25      	ldr	r2, [pc, #148]	; (80099c0 <low_level_output+0x9c>)
 800992a:	9200      	str	r2, [sp, #0]
 800992c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800992e:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8009932:	68ab      	ldr	r3, [r5, #8]
{
 8009934:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 8009936:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009938:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 800993c:	b92c      	cbnz	r4, 800994a <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800993e:	4639      	mov	r1, r7
 8009940:	481f      	ldr	r0, [pc, #124]	; (80099c0 <low_level_output+0x9c>)
 8009942:	f7f7 f81f 	bl	8000984 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8009946:	4620      	mov	r0, r4
 8009948:	e004      	b.n	8009954 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800994a:	682a      	ldr	r2, [r5, #0]
 800994c:	2a00      	cmp	r2, #0
 800994e:	da11      	bge.n	8009974 <low_level_output+0x50>
        errval = ERR_USE;
 8009950:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009954:	9b00      	ldr	r3, [sp, #0]
 8009956:	f241 0214 	movw	r2, #4116	; 0x1014
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	5899      	ldr	r1, [r3, r2]
 800995e:	0689      	lsls	r1, r1, #26
 8009960:	d505      	bpl.n	800996e <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8009962:	2120      	movs	r1, #32
 8009964:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8009966:	f241 0204 	movw	r2, #4100	; 0x1004
 800996a:	2100      	movs	r1, #0
 800996c:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800996e:	b003      	add	sp, #12
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 8009974:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009978:	4646      	mov	r6, r8
      payloadoffset = 0;
 800997a:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800997e:	eb06 0809 	add.w	r8, r6, r9
 8009982:	45d8      	cmp	r8, fp
 8009984:	eb03 0006 	add.w	r0, r3, r6
 8009988:	6861      	ldr	r1, [r4, #4]
 800998a:	d808      	bhi.n	800999e <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800998c:	464a      	mov	r2, r9
 800998e:	4451      	add	r1, sl
 8009990:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8009992:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009994:	f000 fe33 	bl	800a5fe <memcpy>
  for(q = p; q != NULL; q = q->next)
 8009998:	6824      	ldr	r4, [r4, #0]
 800999a:	9b01      	ldr	r3, [sp, #4]
 800999c:	e7ce      	b.n	800993c <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800999e:	ebab 0606 	sub.w	r6, fp, r6
 80099a2:	4632      	mov	r2, r6
 80099a4:	4451      	add	r1, sl
 80099a6:	f000 fe2a 	bl	800a5fe <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80099aa:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80099ac:	682b      	ldr	r3, [r5, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	dbce      	blt.n	8009950 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80099b2:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80099b4:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80099b6:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80099b8:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 80099bc:	2600      	movs	r6, #0
 80099be:	e7de      	b.n	800997e <low_level_output+0x5a>
 80099c0:	20007010 	.word	0x20007010

080099c4 <HAL_ETH_MspInit>:
{
 80099c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099c6:	4604      	mov	r4, r0
 80099c8:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099ca:	2214      	movs	r2, #20
 80099cc:	2100      	movs	r1, #0
 80099ce:	a807      	add	r0, sp, #28
 80099d0:	f000 fe20 	bl	800a614 <memset>
  if(ethHandle->Instance==ETH)
 80099d4:	6822      	ldr	r2, [r4, #0]
 80099d6:	4b32      	ldr	r3, [pc, #200]	; (8009aa0 <HAL_ETH_MspInit+0xdc>)
 80099d8:	429a      	cmp	r2, r3
 80099da:	d15f      	bne.n	8009a9c <HAL_ETH_MspInit+0xd8>
    __HAL_RCC_ETH_CLK_ENABLE();
 80099dc:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 80099e0:	2400      	movs	r4, #0
 80099e2:	9401      	str	r4, [sp, #4]
 80099e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80099e6:	482f      	ldr	r0, [pc, #188]	; (8009aa4 <HAL_ETH_MspInit+0xe0>)
    __HAL_RCC_ETH_CLK_ENABLE();
 80099e8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80099ec:	631a      	str	r2, [r3, #48]	; 0x30
 80099ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099f0:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80099f4:	9201      	str	r2, [sp, #4]
 80099f6:	9a01      	ldr	r2, [sp, #4]
 80099f8:	9402      	str	r4, [sp, #8]
 80099fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099fc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009a00:	631a      	str	r2, [r3, #48]	; 0x30
 8009a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a04:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8009a08:	9202      	str	r2, [sp, #8]
 8009a0a:	9a02      	ldr	r2, [sp, #8]
 8009a0c:	9403      	str	r4, [sp, #12]
 8009a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a10:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009a14:	631a      	str	r2, [r3, #48]	; 0x30
 8009a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a18:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009a1c:	9203      	str	r2, [sp, #12]
 8009a1e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a20:	9404      	str	r4, [sp, #16]
 8009a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a24:	f042 0204 	orr.w	r2, r2, #4
 8009a28:	631a      	str	r2, [r3, #48]	; 0x30
 8009a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a2c:	f002 0204 	and.w	r2, r2, #4
 8009a30:	9204      	str	r2, [sp, #16]
 8009a32:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a34:	9405      	str	r4, [sp, #20]
 8009a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a38:	f042 0201 	orr.w	r2, r2, #1
 8009a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8009a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a40:	f002 0201 	and.w	r2, r2, #1
 8009a44:	9205      	str	r2, [sp, #20]
 8009a46:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a48:	9406      	str	r4, [sp, #24]
 8009a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a4c:	f042 0202 	orr.w	r2, r2, #2
 8009a50:	631a      	str	r2, [r3, #48]	; 0x30
 8009a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a5a:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a5c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a5e:	250b      	movs	r5, #11
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a60:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a62:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009a64:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a66:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009a68:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a6a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a6c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a6e:	f7f7 f9e5 	bl	8000e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009a72:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a74:	a907      	add	r1, sp, #28
 8009a76:	480c      	ldr	r0, [pc, #48]	; (8009aa8 <HAL_ETH_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009a78:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a7a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a7c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a7e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a80:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a82:	f7f7 f9db 	bl	8000e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009a86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a8a:	a907      	add	r1, sp, #28
 8009a8c:	4807      	ldr	r0, [pc, #28]	; (8009aac <HAL_ETH_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009a8e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a90:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a92:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a94:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a96:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a98:	f7f7 f9d0 	bl	8000e3c <HAL_GPIO_Init>
}
 8009a9c:	b00d      	add	sp, #52	; 0x34
 8009a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aa0:	40028000 	.word	0x40028000
 8009aa4:	40020800 	.word	0x40020800
 8009aa8:	40020000 	.word	0x40020000
 8009aac:	40020400 	.word	0x40020400

08009ab0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8009ab4:	4c35      	ldr	r4, [pc, #212]	; (8009b8c <ethernetif_input+0xdc>)
{
 8009ab6:	9001      	str	r0, [sp, #4]
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f7f6 ffd7 	bl	8000a6c <HAL_ETH_GetReceivedFrame>
 8009abe:	4605      	mov	r5, r0
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d160      	bne.n	8009b86 <ethernetif_input+0xd6>
  len = heth.RxFrameInfos.length;
 8009ac4:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ac8:	9300      	str	r3, [sp, #0]
  if (len > 0)
 8009aca:	bb19      	cbnz	r1, 8009b14 <ethernetif_input+0x64>
  struct pbuf *p = NULL;
 8009acc:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009ace:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009ad0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	4282      	cmp	r2, r0
 8009ad6:	d14f      	bne.n	8009b78 <ethernetif_input+0xc8>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8009ad8:	f241 0114 	movw	r1, #4116	; 0x1014
 8009adc:	6823      	ldr	r3, [r4, #0]
 8009ade:	5858      	ldr	r0, [r3, r1]
 8009ae0:	0600      	lsls	r0, r0, #24
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009ae2:	bf42      	ittt	mi
 8009ae4:	2080      	movmi	r0, #128	; 0x80
 8009ae6:	5058      	strmi	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 8009ae8:	f241 0108 	movwmi	r1, #4104	; 0x1008
    heth.RxFrameInfos.SegCount =0;  
 8009aec:	f04f 0200 	mov.w	r2, #0
 8009af0:	63a2      	str	r2, [r4, #56]	; 0x38
    heth.Instance->DMARPDR = 0;
 8009af2:	bf48      	it	mi
 8009af4:	505a      	strmi	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8009af6:	2f00      	cmp	r7, #0
 8009af8:	d045      	beq.n	8009b86 <ethernetif_input+0xd6>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8009afa:	9b01      	ldr	r3, [sp, #4]
 8009afc:	9901      	ldr	r1, [sp, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	4638      	mov	r0, r7
 8009b02:	4798      	blx	r3
    
  if (err != ERR_OK)
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d03e      	beq.n	8009b86 <ethernetif_input+0xd6>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8009b08:	4638      	mov	r0, r7
    p = NULL;    
  }
}
 8009b0a:	b003      	add	sp, #12
 8009b0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8009b10:	f7fc b93a 	b.w	8005d88 <pbuf_free>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8009b14:	2203      	movs	r2, #3
 8009b16:	2004      	movs	r0, #4
 8009b18:	f7fc f998 	bl	8005e4c <pbuf_alloc>
  if (p != NULL)
 8009b1c:	4607      	mov	r7, r0
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d0d4      	beq.n	8009acc <ethernetif_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009b22:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8009b26:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009b28:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 8009b2c:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8009b30:	462e      	mov	r6, r5
      payloadoffset = 0;
 8009b32:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009b36:	18b5      	adds	r5, r6, r2
 8009b38:	9b00      	ldr	r3, [sp, #0]
 8009b3a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009b3e:	455d      	cmp	r5, fp
 8009b40:	eb03 0106 	add.w	r1, r3, r6
 8009b44:	d808      	bhi.n	8009b58 <ethernetif_input+0xa8>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009b46:	4448      	add	r0, r9
 8009b48:	f000 fd59 	bl	800a5fe <memcpy>
    for(q = p; q != NULL; q = q->next)
 8009b4c:	f8d8 8000 	ldr.w	r8, [r8]
 8009b50:	f1b8 0f00 	cmp.w	r8, #0
 8009b54:	d1ea      	bne.n	8009b2c <ethernetif_input+0x7c>
 8009b56:	e7ba      	b.n	8009ace <ethernetif_input+0x1e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009b58:	ebab 0606 	sub.w	r6, fp, r6
 8009b5c:	4632      	mov	r2, r6
 8009b5e:	4448      	add	r0, r9
 8009b60:	f000 fd4d 	bl	800a5fe <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009b64:	f8da a00c 	ldr.w	sl, [sl, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009b68:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009b6c:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009b6e:	44b1      	add	r9, r6
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009b70:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 8009b74:	2600      	movs	r6, #0
 8009b76:	e7de      	b.n	8009b36 <ethernetif_input+0x86>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009b78:	6819      	ldr	r1, [r3, #0]
 8009b7a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8009b7e:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009b80:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009b82:	3201      	adds	r2, #1
 8009b84:	e7a6      	b.n	8009ad4 <ethernetif_input+0x24>
}
 8009b86:	b003      	add	sp, #12
 8009b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8c:	20007010 	.word	0x20007010

08009b90 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009b90:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009b92:	4604      	mov	r4, r0
{
 8009b94:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009b96:	b930      	cbnz	r0, 8009ba6 <ethernetif_init+0x16>
 8009b98:	4b3d      	ldr	r3, [pc, #244]	; (8009c90 <ethernetif_init+0x100>)
 8009b9a:	493e      	ldr	r1, [pc, #248]	; (8009c94 <ethernetif_init+0x104>)
 8009b9c:	483e      	ldr	r0, [pc, #248]	; (8009c98 <ethernetif_init+0x108>)
 8009b9e:	f240 2206 	movw	r2, #518	; 0x206
 8009ba2:	f000 fdeb 	bl	800a77c <iprintf>
  heth.Instance = ETH;
 8009ba6:	4d3d      	ldr	r5, [pc, #244]	; (8009c9c <ethernetif_init+0x10c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009ba8:	493d      	ldr	r1, [pc, #244]	; (8009ca0 <ethernetif_init+0x110>)
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009baa:	2373      	movs	r3, #115	; 0x73
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009bac:	2201      	movs	r2, #1
  netif->name[0] = IFNAME0;
 8009bae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8009bb2:	2374      	movs	r3, #116	; 0x74
 8009bb4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009bb8:	e885 0006 	stmia.w	r5, {r1, r2}
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009bbc:	4b39      	ldr	r3, [pc, #228]	; (8009ca4 <ethernetif_init+0x114>)
 8009bbe:	6163      	str	r3, [r4, #20]
  MACAddr[1] = 0x80;
 8009bc0:	2280      	movs	r2, #128	; 0x80
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009bc2:	4b39      	ldr	r3, [pc, #228]	; (8009ca8 <ethernetif_init+0x118>)
  MACAddr[1] = 0x80;
 8009bc4:	f88d 2009 	strb.w	r2, [sp, #9]
  MACAddr[2] = 0xE1;
 8009bc8:	22e1      	movs	r2, #225	; 0xe1
  netif->linkoutput = low_level_output;
 8009bca:	61a3      	str	r3, [r4, #24]
  MACAddr[2] = 0xE1;
 8009bcc:	f88d 200a 	strb.w	r2, [sp, #10]
  uint32_t regvalue = 0;
 8009bd0:	2300      	movs	r3, #0
  MACAddr[5] = 0x05;
 8009bd2:	2205      	movs	r2, #5
  uint32_t regvalue = 0;
 8009bd4:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8009bd6:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 8009bd8:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[3] = 0x00;
 8009bdc:	f88d 300b 	strb.w	r3, [sp, #11]
  MACAddr[4] = 0x00;
 8009be0:	f88d 300c 	strb.w	r3, [sp, #12]
  MACAddr[5] = 0x05;
 8009be4:	f88d 200d 	strb.w	r2, [sp, #13]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8009be8:	61ab      	str	r3, [r5, #24]
  heth.Init.MACAddr = &MACAddr[0];
 8009bea:	aa02      	add	r2, sp, #8
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009bec:	61eb      	str	r3, [r5, #28]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009bee:	4628      	mov	r0, r5
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009bf0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.MACAddr = &MACAddr[0];
 8009bf4:	616a      	str	r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009bf6:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009bf8:	f7f6 ffe8 	bl	8000bcc <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8009bfc:	b928      	cbnz	r0, 8009c0a <ethernetif_init+0x7a>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009bfe:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8009c02:	f043 0304 	orr.w	r3, r3, #4
 8009c06:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8009c0a:	2304      	movs	r3, #4
 8009c0c:	4a27      	ldr	r2, [pc, #156]	; (8009cac <ethernetif_init+0x11c>)
 8009c0e:	4928      	ldr	r1, [pc, #160]	; (8009cb0 <ethernetif_init+0x120>)
 8009c10:	4822      	ldr	r0, [pc, #136]	; (8009c9c <ethernetif_init+0x10c>)
 8009c12:	f7f6 fe3d 	bl	8000890 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8009c16:	4927      	ldr	r1, [pc, #156]	; (8009cb4 <ethernetif_init+0x124>)
 8009c18:	4a27      	ldr	r2, [pc, #156]	; (8009cb8 <ethernetif_init+0x128>)
 8009c1a:	4820      	ldr	r0, [pc, #128]	; (8009c9c <ethernetif_init+0x10c>)
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	f7f6 fe74 	bl	800090a <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009c22:	2306      	movs	r3, #6
 8009c24:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009c28:	696b      	ldr	r3, [r5, #20]
  HAL_ETH_Start(&heth);
 8009c2a:	481c      	ldr	r0, [pc, #112]	; (8009c9c <ethernetif_init+0x10c>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009c2c:	781a      	ldrb	r2, [r3, #0]
 8009c2e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009c32:	785a      	ldrb	r2, [r3, #1]
 8009c34:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009c38:	789a      	ldrb	r2, [r3, #2]
 8009c3a:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009c3e:	78da      	ldrb	r2, [r3, #3]
 8009c40:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009c44:	791a      	ldrb	r2, [r3, #4]
 8009c46:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009c4a:	795b      	ldrb	r3, [r3, #5]
 8009c4c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 8009c50:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009c54:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009c56:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8009c5a:	f043 030a 	orr.w	r3, r3, #10
 8009c5e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_Start(&heth);
 8009c62:	f7f7 f8af 	bl	8000dc4 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009c66:	aa01      	add	r2, sp, #4
 8009c68:	211d      	movs	r1, #29
 8009c6a:	480c      	ldr	r0, [pc, #48]	; (8009c9c <ethernetif_init+0x10c>)
 8009c6c:	f7f6 ff3d 	bl	8000aea <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009c70:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009c72:	480a      	ldr	r0, [pc, #40]	; (8009c9c <ethernetif_init+0x10c>)
  regvalue |= (PHY_ISFR_INT4);
 8009c74:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009c78:	211d      	movs	r1, #29
  regvalue |= (PHY_ISFR_INT4);
 8009c7a:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009c7c:	f7f6 ff6f 	bl	8000b5e <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8009c80:	aa01      	add	r2, sp, #4
 8009c82:	211d      	movs	r1, #29
 8009c84:	4805      	ldr	r0, [pc, #20]	; (8009c9c <ethernetif_init+0x10c>)
 8009c86:	f7f6 ff30 	bl	8000aea <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	b005      	add	sp, #20
 8009c8e:	bd30      	pop	{r4, r5, pc}
 8009c90:	0800d24a 	.word	0x0800d24a
 8009c94:	0800bc66 	.word	0x0800bc66
 8009c98:	0800b831 	.word	0x0800b831
 8009c9c:	20007010 	.word	0x20007010
 8009ca0:	40028000 	.word	0x40028000
 8009ca4:	080048f1 	.word	0x080048f1
 8009ca8:	08009925 	.word	0x08009925
 8009cac:	20007058 	.word	0x20007058
 8009cb0:	20005740 	.word	0x20005740
 8009cb4:	20006f90 	.word	0x20006f90
 8009cb8:	200057c0 	.word	0x200057c0

08009cbc <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 8009cbc:	f7f6 bcc2 	b.w	8000644 <HAL_GetTick>

08009cc0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009cc2:	4f2d      	ldr	r7, [pc, #180]	; (8009d78 <MX_LWIP_Init+0xb8>)
  IP_ADDRESS[1] = 168;
  IP_ADDRESS[2] = 1;
  IP_ADDRESS[3] = 5;
  NETMASK_ADDRESS[0] = 255;
 8009cc4:	4e2d      	ldr	r6, [pc, #180]	; (8009d7c <MX_LWIP_Init+0xbc>)
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 255;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 192;
 8009cc6:	4d2e      	ldr	r5, [pc, #184]	; (8009d80 <MX_LWIP_Init+0xc0>)
  IP_ADDRESS[3] = 5;
 8009cc8:	2305      	movs	r3, #5
 8009cca:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 8009ccc:	23ff      	movs	r3, #255	; 0xff
{
 8009cce:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 192;
 8009cd0:	20c0      	movs	r0, #192	; 0xc0
  IP_ADDRESS[1] = 168;
 8009cd2:	21a8      	movs	r1, #168	; 0xa8
  IP_ADDRESS[2] = 1;
 8009cd4:	2201      	movs	r2, #1
  NETMASK_ADDRESS[0] = 255;
 8009cd6:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 8009cd8:	7073      	strb	r3, [r6, #1]
  NETMASK_ADDRESS[2] = 255;
 8009cda:	70b3      	strb	r3, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 8009cdc:	2400      	movs	r4, #0
  GATEWAY_ADDRESS[1] = 168;
  GATEWAY_ADDRESS[2] = 1;
  GATEWAY_ADDRESS[3] = 254;
 8009cde:	23fe      	movs	r3, #254	; 0xfe
  GATEWAY_ADDRESS[0] = 192;
 8009ce0:	7028      	strb	r0, [r5, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009ce2:	7069      	strb	r1, [r5, #1]
  GATEWAY_ADDRESS[2] = 1;
 8009ce4:	70aa      	strb	r2, [r5, #2]
  GATEWAY_ADDRESS[3] = 254;
 8009ce6:	70eb      	strb	r3, [r5, #3]
  IP_ADDRESS[0] = 192;
 8009ce8:	7038      	strb	r0, [r7, #0]
  IP_ADDRESS[1] = 168;
 8009cea:	7079      	strb	r1, [r7, #1]
  IP_ADDRESS[2] = 1;
 8009cec:	70ba      	strb	r2, [r7, #2]
  NETMASK_ADDRESS[3] = 0;
 8009cee:	70f4      	strb	r4, [r6, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8009cf0:	f7fa faee 	bl	80042d0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009cf4:	787b      	ldrb	r3, [r7, #1]
 8009cf6:	783a      	ldrb	r2, [r7, #0]
 8009cf8:	4922      	ldr	r1, [pc, #136]	; (8009d84 <MX_LWIP_Init+0xc4>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009cfa:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009cfc:	041b      	lsls	r3, r3, #16
 8009cfe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009d02:	78fa      	ldrb	r2, [r7, #3]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	78ba      	ldrb	r2, [r7, #2]
 8009d08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d0c:	ba1b      	rev	r3, r3
 8009d0e:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009d10:	7873      	ldrb	r3, [r6, #1]
 8009d12:	7832      	ldrb	r2, [r6, #0]
 8009d14:	041b      	lsls	r3, r3, #16
 8009d16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009d1a:	78f2      	ldrb	r2, [r6, #3]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	78b2      	ldrb	r2, [r6, #2]
 8009d20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d24:	4a18      	ldr	r2, [pc, #96]	; (8009d88 <MX_LWIP_Init+0xc8>)
 8009d26:	ba1b      	rev	r3, r3
 8009d28:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009d2a:	782b      	ldrb	r3, [r5, #0]
 8009d2c:	0400      	lsls	r0, r0, #16
 8009d2e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009d32:	78eb      	ldrb	r3, [r5, #3]
 8009d34:	4318      	orrs	r0, r3
 8009d36:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009d38:	4d14      	ldr	r5, [pc, #80]	; (8009d8c <MX_LWIP_Init+0xcc>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009d3a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009d3e:	4b14      	ldr	r3, [pc, #80]	; (8009d90 <MX_LWIP_Init+0xd0>)
 8009d40:	ba00      	rev	r0, r0
 8009d42:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009d44:	4813      	ldr	r0, [pc, #76]	; (8009d94 <MX_LWIP_Init+0xd4>)
 8009d46:	9002      	str	r0, [sp, #8]
 8009d48:	4813      	ldr	r0, [pc, #76]	; (8009d98 <MX_LWIP_Init+0xd8>)
 8009d4a:	9001      	str	r0, [sp, #4]
 8009d4c:	9400      	str	r4, [sp, #0]
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f7fb ff18 	bl	8005b84 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009d54:	4628      	mov	r0, r5
 8009d56:	f7fb ff53 	bl	8005c00 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009d5a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8009d5e:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009d60:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8009d62:	d504      	bpl.n	8009d6e <MX_LWIP_Init+0xae>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009d64:	b005      	add	sp, #20
 8009d66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 8009d6a:	f7fb bf4f 	b.w	8005c0c <netif_set_up>
}
 8009d6e:	b005      	add	sp, #20
 8009d70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 8009d74:	f7fb bf59 	b.w	8005c2a <netif_set_down>
 8009d78:	20008864 	.word	0x20008864
 8009d7c:	20008860 	.word	0x20008860
 8009d80:	20008828 	.word	0x20008828
 8009d84:	2000885c 	.word	0x2000885c
 8009d88:	20008868 	.word	0x20008868
 8009d8c:	2000882c 	.word	0x2000882c
 8009d90:	2000886c 	.word	0x2000886c
 8009d94:	0800981d 	.word	0x0800981d
 8009d98:	08009b91 	.word	0x08009b91

08009d9c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8009d9c:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8009d9e:	4803      	ldr	r0, [pc, #12]	; (8009dac <MX_LWIP_Process+0x10>)
 8009da0:	f7ff fe86 	bl	8009ab0 <ethernetif_input>
  /* Handle timeouts */
  sys_check_timeouts();

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8009da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_check_timeouts();
 8009da8:	f7ff bc58 	b.w	800965c <sys_check_timeouts>
 8009dac:	2000882c 	.word	0x2000882c

08009db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009db0:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009db2:	2230      	movs	r2, #48	; 0x30
{
 8009db4:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009db6:	eb0d 0002 	add.w	r0, sp, r2
 8009dba:	2100      	movs	r1, #0
 8009dbc:	f000 fc2a 	bl	800a614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009dc0:	2214      	movs	r2, #20
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	a807      	add	r0, sp, #28
 8009dc6:	f000 fc25 	bl	800a614 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009dca:	2100      	movs	r1, #0
 8009dcc:	2210      	movs	r2, #16
 8009dce:	a803      	add	r0, sp, #12
 8009dd0:	f000 fc20 	bl	800a614 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009dd4:	2500      	movs	r5, #0
 8009dd6:	4b21      	ldr	r3, [pc, #132]	; (8009e5c <SystemClock_Config+0xac>)
 8009dd8:	9501      	str	r5, [sp, #4]
 8009dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ddc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009de0:	641a      	str	r2, [r3, #64]	; 0x40
 8009de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009de8:	9301      	str	r3, [sp, #4]
 8009dea:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009dec:	4b1c      	ldr	r3, [pc, #112]	; (8009e60 <SystemClock_Config+0xb0>)
 8009dee:	9502      	str	r5, [sp, #8]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dfe:	9302      	str	r3, [sp, #8]
 8009e00:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e06:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009e08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e0c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009e0e:	2308      	movs	r3, #8
 8009e10:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8009e12:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009e16:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009e18:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 8009e1a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009e1c:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009e1e:	2307      	movs	r3, #7
 8009e20:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009e22:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009e24:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009e26:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009e28:	f7f8 f826 	bl	8001e78 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009e2c:	230f      	movs	r3, #15
 8009e2e:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009e30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009e34:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009e36:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009e3c:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009e3e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009e40:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e42:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009e44:	f7f8 f9ec 	bl	8002220 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8009e48:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009e4a:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8009e4c:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8009e4e:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8009e50:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009e52:	f7f8 fa97 	bl	8002384 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8009e56:	b018      	add	sp, #96	; 0x60
 8009e58:	bd70      	pop	{r4, r5, r6, pc}
 8009e5a:	bf00      	nop
 8009e5c:	40023800 	.word	0x40023800
 8009e60:	40007000 	.word	0x40007000

08009e64 <main>:
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8009e68:	f7f6 fbc6 	bl	80005f8 <HAL_Init>
  SystemClock_Config();
 8009e6c:	f7ff ffa0 	bl	8009db0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e70:	2214      	movs	r2, #20
 8009e72:	2100      	movs	r1, #0
 8009e74:	a807      	add	r0, sp, #28
 8009e76:	f000 fbcd 	bl	800a614 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009e7a:	2400      	movs	r4, #0
 8009e7c:	4b6a      	ldr	r3, [pc, #424]	; (800a028 <main+0x1c4>)
 8009e7e:	9401      	str	r4, [sp, #4]
 8009e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8009e82:	486a      	ldr	r0, [pc, #424]	; (800a02c <main+0x1c8>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009e84:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 800a058 <main+0x1f4>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009e88:	f042 0210 	orr.w	r2, r2, #16
 8009e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8009e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e90:	f002 0210 	and.w	r2, r2, #16
 8009e94:	9201      	str	r2, [sp, #4]
 8009e96:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e98:	9402      	str	r4, [sp, #8]
 8009e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e9c:	f042 0204 	orr.w	r2, r2, #4
 8009ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8009ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ea4:	f002 0204 	and.w	r2, r2, #4
 8009ea8:	9202      	str	r2, [sp, #8]
 8009eaa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009eac:	9403      	str	r4, [sp, #12]
 8009eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8009eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eb8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009ebc:	9203      	str	r2, [sp, #12]
 8009ebe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ec0:	9404      	str	r4, [sp, #16]
 8009ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ec4:	f042 0201 	orr.w	r2, r2, #1
 8009ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8009eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ecc:	f002 0201 	and.w	r2, r2, #1
 8009ed0:	9204      	str	r2, [sp, #16]
 8009ed2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ed4:	9405      	str	r4, [sp, #20]
 8009ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ed8:	f042 0202 	orr.w	r2, r2, #2
 8009edc:	631a      	str	r2, [r3, #48]	; 0x30
 8009ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ee0:	f002 0202 	and.w	r2, r2, #2
 8009ee4:	9205      	str	r2, [sp, #20]
 8009ee6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009ee8:	9406      	str	r4, [sp, #24]
 8009eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eec:	f042 0208 	orr.w	r2, r2, #8
 8009ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8009ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef4:	f003 0308 	and.w	r3, r3, #8
 8009ef8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8009efa:	4622      	mov	r2, r4
 8009efc:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009efe:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8009f00:	f7f7 f87c 	bl	8000ffc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8009f04:	2201      	movs	r2, #1
 8009f06:	4611      	mov	r1, r2
 8009f08:	4849      	ldr	r0, [pc, #292]	; (800a030 <main+0x1cc>)
 8009f0a:	f7f7 f877 	bl	8000ffc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8009f0e:	4622      	mov	r2, r4
 8009f10:	f24f 0110 	movw	r1, #61456	; 0xf010
 8009f14:	4847      	ldr	r0, [pc, #284]	; (800a034 <main+0x1d0>)
 8009f16:	f7f7 f871 	bl	8000ffc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f1a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8009f1c:	2608      	movs	r6, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8009f1e:	a907      	add	r1, sp, #28
 8009f20:	4842      	ldr	r0, [pc, #264]	; (800a02c <main+0x1c8>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8009f22:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f24:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f26:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f28:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8009f2a:	f7f6 ff87 	bl	8000e3c <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8009f2e:	a907      	add	r1, sp, #28
 8009f30:	483f      	ldr	r0, [pc, #252]	; (800a030 <main+0x1cc>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8009f32:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009f34:	2705      	movs	r7, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f36:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f38:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f3a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8009f3c:	f7f6 ff7e 	bl	8000e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8009f40:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8009f42:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f44:	2602      	movs	r6, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8009f46:	483a      	ldr	r0, [pc, #232]	; (800a030 <main+0x1cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f48:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f4a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f4c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009f4e:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8009f50:	f7f6 ff74 	bl	8000e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8009f54:	a907      	add	r1, sp, #28
 8009f56:	4838      	ldr	r0, [pc, #224]	; (800a038 <main+0x1d4>)
  GPIO_InitStruct.Pin = B1_Pin;
 8009f58:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009f5a:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f5e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8009f60:	f7f6 ff6c 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 8009f64:	2360      	movs	r3, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f66:	a907      	add	r1, sp, #28
 8009f68:	4833      	ldr	r0, [pc, #204]	; (800a038 <main+0x1d4>)
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 8009f6a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f6c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f6e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f70:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009f72:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f74:	f7f6 ff62 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8009f78:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8009f7a:	a907      	add	r1, sp, #28
 8009f7c:	482f      	ldr	r0, [pc, #188]	; (800a03c <main+0x1d8>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8009f7e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f80:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f82:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8009f84:	f7f6 ff5a 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8009f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8009f8c:	a907      	add	r1, sp, #28
 8009f8e:	482b      	ldr	r0, [pc, #172]	; (800a03c <main+0x1d8>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8009f90:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f92:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f94:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f96:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009f98:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8009f9a:	f7f6 ff4f 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8009f9e:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009fa2:	a907      	add	r1, sp, #28
 8009fa4:	4823      	ldr	r0, [pc, #140]	; (800a034 <main+0x1d0>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8009fa6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fa8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009faa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fac:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009fae:	f7f6 ff45 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8009fb2:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009fb4:	a907      	add	r1, sp, #28
 8009fb6:	481f      	ldr	r0, [pc, #124]	; (800a034 <main+0x1d0>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8009fb8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009fba:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fbc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009fbe:	f7f6 ff3d 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8009fc2:	a907      	add	r1, sp, #28
 8009fc4:	4819      	ldr	r0, [pc, #100]	; (800a02c <main+0x1c8>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8009fc6:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009fc8:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fcc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8009fce:	f7f6 ff35 	bl	8000e3c <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8009fd2:	481b      	ldr	r0, [pc, #108]	; (800a040 <main+0x1dc>)
  hi2c1.Init.ClockSpeed = 100000;
 8009fd4:	4a1b      	ldr	r2, [pc, #108]	; (800a044 <main+0x1e0>)
 8009fd6:	4b1c      	ldr	r3, [pc, #112]	; (800a048 <main+0x1e4>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009fd8:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8009fda:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009fde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009fe2:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8009fe4:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009fe6:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009fe8:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009fea:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009fec:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009fee:	f7f7 fc5f 	bl	80018b0 <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 8009ff2:	4816      	ldr	r0, [pc, #88]	; (800a04c <main+0x1e8>)
 8009ff4:	4b16      	ldr	r3, [pc, #88]	; (800a050 <main+0x1ec>)
 8009ff6:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8009ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ffc:	6043      	str	r3, [r0, #4]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8009ffe:	6103      	str	r3, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800a000:	4b14      	ldr	r3, [pc, #80]	; (800a054 <main+0x1f0>)
 800a002:	6143      	str	r3, [r0, #20]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800a004:	6084      	str	r4, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800a006:	60c4      	str	r4, [r0, #12]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800a008:	6184      	str	r4, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800a00a:	61c4      	str	r4, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800a00c:	6204      	str	r4, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800a00e:	f7f7 fcfb 	bl	8001a08 <HAL_I2S_Init>
  MX_LWIP_Init();
 800a012:	f7ff fe55 	bl	8009cc0 <MX_LWIP_Init>
  MX_USB_HOST_Init();
 800a016:	f000 f933 	bl	800a280 <MX_USB_HOST_Init>
  httpd_init();
 800a01a:	f7fa f8b5 	bl	8004188 <httpd_init>
    MX_USB_HOST_Process();
 800a01e:	f000 f94f 	bl	800a2c0 <MX_USB_HOST_Process>
    MX_LWIP_Process();
 800a022:	f7ff febb 	bl	8009d9c <MX_LWIP_Process>
 800a026:	e7fa      	b.n	800a01e <main+0x1ba>
 800a028:	40023800 	.word	0x40023800
 800a02c:	40021000 	.word	0x40021000
 800a030:	40020800 	.word	0x40020800
 800a034:	40020c00 	.word	0x40020c00
 800a038:	40020000 	.word	0x40020000
 800a03c:	40020400 	.word	0x40020400
 800a040:	20008870 	.word	0x20008870
 800a044:	40005400 	.word	0x40005400
 800a048:	000186a0 	.word	0x000186a0
 800a04c:	200088c4 	.word	0x200088c4
 800a050:	40003c00 	.word	0x40003c00
 800a054:	00017700 	.word	0x00017700
 800a058:	10120000 	.word	0x10120000

0800a05c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a05c:	4770      	bx	lr
	...

0800a060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a060:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a062:	4b0c      	ldr	r3, [pc, #48]	; (800a094 <HAL_MspInit+0x34>)
 800a064:	2100      	movs	r1, #0
 800a066:	9100      	str	r1, [sp, #0]
 800a068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a06a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a06e:	645a      	str	r2, [r3, #68]	; 0x44
 800a070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a072:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800a076:	9200      	str	r2, [sp, #0]
 800a078:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a07a:	9101      	str	r1, [sp, #4]
 800a07c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a07e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a082:	641a      	str	r2, [r3, #64]	; 0x40
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a08a:	9301      	str	r3, [sp, #4]
 800a08c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a08e:	b002      	add	sp, #8
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	40023800 	.word	0x40023800

0800a098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a098:	b530      	push	{r4, r5, lr}
 800a09a:	4604      	mov	r4, r0
 800a09c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a09e:	2214      	movs	r2, #20
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	a803      	add	r0, sp, #12
 800a0a4:	f000 fab6 	bl	800a614 <memset>
  if(hi2c->Instance==I2C1)
 800a0a8:	6822      	ldr	r2, [r4, #0]
 800a0aa:	4b14      	ldr	r3, [pc, #80]	; (800a0fc <HAL_I2C_MspInit+0x64>)
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d122      	bne.n	800a0f6 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0b0:	4c13      	ldr	r4, [pc, #76]	; (800a100 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0b2:	4814      	ldr	r0, [pc, #80]	; (800a104 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0b4:	2500      	movs	r5, #0
 800a0b6:	9501      	str	r5, [sp, #4]
 800a0b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a0ba:	f043 0302 	orr.w	r3, r3, #2
 800a0be:	6323      	str	r3, [r4, #48]	; 0x30
 800a0c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800a0ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a0ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a0d0:	2312      	movs	r3, #18
 800a0d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0d8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a0da:	2304      	movs	r3, #4
 800a0dc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0de:	f7f6 fead 	bl	8000e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a0e2:	9502      	str	r5, [sp, #8]
 800a0e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0ea:	6423      	str	r3, [r4, #64]	; 0x40
 800a0ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0f2:	9302      	str	r3, [sp, #8]
 800a0f4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a0f6:	b009      	add	sp, #36	; 0x24
 800a0f8:	bd30      	pop	{r4, r5, pc}
 800a0fa:	bf00      	nop
 800a0fc:	40005400 	.word	0x40005400
 800a100:	40023800 	.word	0x40023800
 800a104:	40020400 	.word	0x40020400

0800a108 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	4604      	mov	r4, r0
 800a10c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a10e:	2214      	movs	r2, #20
 800a110:	2100      	movs	r1, #0
 800a112:	a803      	add	r0, sp, #12
 800a114:	f000 fa7e 	bl	800a614 <memset>
  if(hi2s->Instance==SPI3)
 800a118:	6822      	ldr	r2, [r4, #0]
 800a11a:	4b1d      	ldr	r3, [pc, #116]	; (800a190 <HAL_I2S_MspInit+0x88>)
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d135      	bne.n	800a18c <HAL_I2S_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a120:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 800a124:	2400      	movs	r4, #0
 800a126:	9400      	str	r4, [sp, #0]
 800a128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800a12a:	481a      	ldr	r0, [pc, #104]	; (800a194 <HAL_I2S_MspInit+0x8c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a12c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a130:	641a      	str	r2, [r3, #64]	; 0x40
 800a132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a134:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800a138:	9200      	str	r2, [sp, #0]
 800a13a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a13c:	9401      	str	r4, [sp, #4]
 800a13e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a140:	f042 0201 	orr.w	r2, r2, #1
 800a144:	631a      	str	r2, [r3, #48]	; 0x30
 800a146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a148:	f002 0201 	and.w	r2, r2, #1
 800a14c:	9201      	str	r2, [sp, #4]
 800a14e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a150:	9402      	str	r4, [sp, #8]
 800a152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a154:	f042 0204 	orr.w	r2, r2, #4
 800a158:	631a      	str	r2, [r3, #48]	; 0x30
 800a15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15c:	f003 0304 	and.w	r3, r3, #4
 800a160:	9302      	str	r3, [sp, #8]
 800a162:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a164:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800a166:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a168:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800a16a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800a16c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a16e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a170:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800a172:	f7f6 fe63 	bl	8000e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800a176:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a17a:	a903      	add	r1, sp, #12
 800a17c:	4806      	ldr	r0, [pc, #24]	; (800a198 <HAL_I2S_MspInit+0x90>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800a17e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a180:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a182:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a184:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a186:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a188:	f7f6 fe58 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800a18c:	b008      	add	sp, #32
 800a18e:	bd70      	pop	{r4, r5, r6, pc}
 800a190:	40003c00 	.word	0x40003c00
 800a194:	40020000 	.word	0x40020000
 800a198:	40020800 	.word	0x40020800

0800a19c <NMI_Handler>:
 800a19c:	4770      	bx	lr

0800a19e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a19e:	e7fe      	b.n	800a19e <HardFault_Handler>

0800a1a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a1a0:	e7fe      	b.n	800a1a0 <MemManage_Handler>

0800a1a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a1a2:	e7fe      	b.n	800a1a2 <BusFault_Handler>

0800a1a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a1a4:	e7fe      	b.n	800a1a4 <UsageFault_Handler>

0800a1a6 <SVC_Handler>:
 800a1a6:	4770      	bx	lr

0800a1a8 <DebugMon_Handler>:
 800a1a8:	4770      	bx	lr

0800a1aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a1aa:	4770      	bx	lr

0800a1ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a1ac:	f7f6 ba3e 	b.w	800062c <HAL_IncTick>

0800a1b0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800a1b0:	4801      	ldr	r0, [pc, #4]	; (800a1b8 <OTG_FS_IRQHandler+0x8>)
 800a1b2:	f7f7 b825 	b.w	8001200 <HAL_HCD_IRQHandler>
 800a1b6:	bf00      	nop
 800a1b8:	20008cd8 	.word	0x20008cd8

0800a1bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	460e      	mov	r6, r1
 800a1c0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	1ba3      	subs	r3, r4, r6
 800a1c6:	429d      	cmp	r5, r3
 800a1c8:	dc01      	bgt.n	800a1ce <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800a1ce:	f3af 8000 	nop.w
 800a1d2:	f804 0b01 	strb.w	r0, [r4], #1
 800a1d6:	e7f5      	b.n	800a1c4 <_read+0x8>

0800a1d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a1d8:	b570      	push	{r4, r5, r6, lr}
 800a1da:	460e      	mov	r6, r1
 800a1dc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a1de:	460c      	mov	r4, r1
 800a1e0:	1ba3      	subs	r3, r4, r6
 800a1e2:	429d      	cmp	r5, r3
 800a1e4:	dc01      	bgt.n	800a1ea <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800a1ea:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a1ee:	f3af 8000 	nop.w
 800a1f2:	e7f5      	b.n	800a1e0 <_write+0x8>

0800a1f4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a1f4:	4b09      	ldr	r3, [pc, #36]	; (800a21c <_sbrk+0x28>)
 800a1f6:	6819      	ldr	r1, [r3, #0]
{
 800a1f8:	4602      	mov	r2, r0
	if (heap_end == 0)
 800a1fa:	b909      	cbnz	r1, 800a200 <_sbrk+0xc>
		heap_end = &end;
 800a1fc:	4908      	ldr	r1, [pc, #32]	; (800a220 <_sbrk+0x2c>)
 800a1fe:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800a200:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800a202:	4669      	mov	r1, sp
 800a204:	4402      	add	r2, r0
 800a206:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800a208:	bf89      	itett	hi
 800a20a:	4b06      	ldrhi	r3, [pc, #24]	; (800a224 <_sbrk+0x30>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 800a20c:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800a20e:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 800a210:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 800a214:	bf88      	it	hi
 800a216:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	200021e8 	.word	0x200021e8
 800a220:	20008fa0 	.word	0x20008fa0
 800a224:	20008f9c 	.word	0x20008f9c

0800a228 <_close>:

int _close(int file)
{
	return -1;
}
 800a228:	f04f 30ff 	mov.w	r0, #4294967295
 800a22c:	4770      	bx	lr

0800a22e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800a22e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a232:	604b      	str	r3, [r1, #4]
	return 0;
}
 800a234:	2000      	movs	r0, #0
 800a236:	4770      	bx	lr

0800a238 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800a238:	2001      	movs	r0, #1
 800a23a:	4770      	bx	lr

0800a23c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800a23c:	2000      	movs	r0, #0
 800a23e:	4770      	bx	lr

0800a240 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a240:	4b05      	ldr	r3, [pc, #20]	; (800a258 <SystemInit+0x18>)
 800a242:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a246:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800a24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a24e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a252:	609a      	str	r2, [r3, #8]
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	e000ed00 	.word	0xe000ed00

0800a25c <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a25c:	2904      	cmp	r1, #4
 800a25e:	d00a      	beq.n	800a276 <USBH_UserProcess+0x1a>
 800a260:	2905      	cmp	r1, #5
 800a262:	d004      	beq.n	800a26e <USBH_UserProcess+0x12>
 800a264:	2902      	cmp	r1, #2
 800a266:	d105      	bne.n	800a274 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a268:	4b04      	ldr	r3, [pc, #16]	; (800a27c <USBH_UserProcess+0x20>)
 800a26a:	7019      	strb	r1, [r3, #0]
  break;
 800a26c:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800a26e:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a270:	4b02      	ldr	r3, [pc, #8]	; (800a27c <USBH_UserProcess+0x20>)
 800a272:	701a      	strb	r2, [r3, #0]
 800a274:	4770      	bx	lr
 800a276:	2201      	movs	r2, #1
 800a278:	e7fa      	b.n	800a270 <USBH_UserProcess+0x14>
 800a27a:	bf00      	nop
 800a27c:	200021ec 	.word	0x200021ec

0800a280 <MX_USB_HOST_Init>:
{
 800a280:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a282:	2201      	movs	r2, #1
 800a284:	490b      	ldr	r1, [pc, #44]	; (800a2b4 <MX_USB_HOST_Init+0x34>)
 800a286:	480c      	ldr	r0, [pc, #48]	; (800a2b8 <MX_USB_HOST_Init+0x38>)
 800a288:	f7f8 fe7a 	bl	8002f80 <USBH_Init>
 800a28c:	b108      	cbz	r0, 800a292 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 800a28e:	f7ff fee5 	bl	800a05c <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a292:	490a      	ldr	r1, [pc, #40]	; (800a2bc <MX_USB_HOST_Init+0x3c>)
 800a294:	4808      	ldr	r0, [pc, #32]	; (800a2b8 <MX_USB_HOST_Init+0x38>)
 800a296:	f7f8 fe8a 	bl	8002fae <USBH_RegisterClass>
 800a29a:	b108      	cbz	r0, 800a2a0 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 800a29c:	f7ff fede 	bl	800a05c <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a2a0:	4805      	ldr	r0, [pc, #20]	; (800a2b8 <MX_USB_HOST_Init+0x38>)
 800a2a2:	f7f8 feb7 	bl	8003014 <USBH_Start>
 800a2a6:	b118      	cbz	r0, 800a2b0 <MX_USB_HOST_Init+0x30>
}
 800a2a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800a2ac:	f7ff bed6 	b.w	800a05c <Error_Handler>
 800a2b0:	bd08      	pop	{r3, pc}
 800a2b2:	bf00      	nop
 800a2b4:	0800a25d 	.word	0x0800a25d
 800a2b8:	2000890c 	.word	0x2000890c
 800a2bc:	20000008 	.word	0x20000008

0800a2c0 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 800a2c0:	4801      	ldr	r0, [pc, #4]	; (800a2c8 <MX_USB_HOST_Process+0x8>)
 800a2c2:	f7f8 beb1 	b.w	8003028 <USBH_Process>
 800a2c6:	bf00      	nop
 800a2c8:	2000890c 	.word	0x2000890c

0800a2cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a2cc:	b530      	push	{r4, r5, lr}
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2d2:	2214      	movs	r2, #20
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	a803      	add	r0, sp, #12
 800a2d8:	f000 f99c 	bl	800a614 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2e2:	d135      	bne.n	800a350 <HAL_HCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2e4:	4c1b      	ldr	r4, [pc, #108]	; (800a354 <HAL_HCD_MspInit+0x88>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a2e6:	481c      	ldr	r0, [pc, #112]	; (800a358 <HAL_HCD_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2e8:	2500      	movs	r5, #0
 800a2ea:	9501      	str	r5, [sp, #4]
 800a2ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a2ee:	f043 0301 	orr.w	r3, r3, #1
 800a2f2:	6323      	str	r3, [r4, #48]	; 0x30
 800a2f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	9301      	str	r3, [sp, #4]
 800a2fc:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a2fe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a300:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a304:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a306:	f7f6 fd99 	bl	8000e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a30a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a30e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a310:	2302      	movs	r3, #2
 800a312:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a314:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a316:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a318:	480f      	ldr	r0, [pc, #60]	; (800a358 <HAL_HCD_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a31a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a31c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a31e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a320:	f7f6 fd8c 	bl	8000e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a324:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a32a:	6363      	str	r3, [r4, #52]	; 0x34
 800a32c:	9502      	str	r5, [sp, #8]
 800a32e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a334:	6463      	str	r3, [r4, #68]	; 0x44
 800a336:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a33c:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a33e:	2043      	movs	r0, #67	; 0x43
 800a340:	462a      	mov	r2, r5
 800a342:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a344:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a346:	f7f6 f9a9 	bl	800069c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a34a:	2043      	movs	r0, #67	; 0x43
 800a34c:	f7f6 f9da 	bl	8000704 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a350:	b009      	add	sp, #36	; 0x24
 800a352:	bd30      	pop	{r4, r5, pc}
 800a354:	40023800 	.word	0x40023800
 800a358:	40020000 	.word	0x40020000

0800a35c <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800a35c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a360:	f7f8 bfaa 	b.w	80032b8 <USBH_LL_IncTimer>

0800a364 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800a364:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a368:	f7f8 bfbc 	b.w	80032e4 <USBH_LL_Connect>

0800a36c <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800a36c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a370:	f7f8 bfcc 	b.w	800330c <USBH_LL_Disconnect>

0800a374 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a374:	4770      	bx	lr

0800a376 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 800a376:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a37a:	f7f8 bfab 	b.w	80032d4 <USBH_LL_PortEnabled>

0800a37e <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800a37e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800a382:	f7f8 bfab 	b.w	80032dc <USBH_LL_PortDisabled>
	...

0800a388 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a388:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a38a:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800a38e:	2b01      	cmp	r3, #1
{
 800a390:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800a392:	d11b      	bne.n	800a3cc <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a394:	480e      	ldr	r0, [pc, #56]	; (800a3d0 <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 800a396:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a39a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a39e:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a3a0:	2208      	movs	r2, #8
 800a3a2:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a3a4:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a3a6:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a3a8:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 800a3aa:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a3ae:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a3b0:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a3b2:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a3b4:	f7f6 fe78 	bl	80010a8 <HAL_HCD_Init>
 800a3b8:	b108      	cbz	r0, 800a3be <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 800a3ba:	f7ff fe4f 	bl	800a05c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a3be:	4804      	ldr	r0, [pc, #16]	; (800a3d0 <USBH_LL_Init+0x48>)
 800a3c0:	f7f7 fa70 	bl	80018a4 <HAL_HCD_GetCurrentFrame>
 800a3c4:	4601      	mov	r1, r0
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f7f8 ff73 	bl	80032b2 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	bd10      	pop	{r4, pc}
 800a3d0:	20008cd8 	.word	0x20008cd8

0800a3d4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a3d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800a3d6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a3da:	f7f7 fa2d 	bl	8001838 <HAL_HCD_Start>
 800a3de:	2803      	cmp	r0, #3
 800a3e0:	bf9a      	itte	ls
 800a3e2:	4b02      	ldrls	r3, [pc, #8]	; (800a3ec <USBH_LL_Start+0x18>)
 800a3e4:	5c18      	ldrbls	r0, [r3, r0]
 800a3e6:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800a3e8:	bd08      	pop	{r3, pc}
 800a3ea:	bf00      	nop
 800a3ec:	0800d279 	.word	0x0800d279

0800a3f0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a3f0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800a3f2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a3f6:	f7f7 fa35 	bl	8001864 <HAL_HCD_Stop>
 800a3fa:	2803      	cmp	r0, #3
 800a3fc:	bf9a      	itte	ls
 800a3fe:	4b02      	ldrls	r3, [pc, #8]	; (800a408 <USBH_LL_Stop+0x18>)
 800a400:	5c18      	ldrbls	r0, [r3, r0]
 800a402:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800a404:	bd08      	pop	{r3, pc}
 800a406:	bf00      	nop
 800a408:	0800d279 	.word	0x0800d279

0800a40c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a40c:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a40e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a412:	f7f7 fa4a 	bl	80018aa <HAL_HCD_GetCurrentSpeed>
 800a416:	2802      	cmp	r0, #2
 800a418:	bf9a      	itte	ls
 800a41a:	4b02      	ldrls	r3, [pc, #8]	; (800a424 <USBH_LL_GetSpeed+0x18>)
 800a41c:	5c18      	ldrbls	r0, [r3, r0]
 800a41e:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800a420:	bd08      	pop	{r3, pc}
 800a422:	bf00      	nop
 800a424:	0800d276 	.word	0x0800d276

0800a428 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a428:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a42a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a42e:	f7f7 fa2b 	bl	8001888 <HAL_HCD_ResetPort>
 800a432:	2803      	cmp	r0, #3
 800a434:	bf9a      	itte	ls
 800a436:	4b02      	ldrls	r3, [pc, #8]	; (800a440 <USBH_LL_ResetPort+0x18>)
 800a438:	5c18      	ldrbls	r0, [r3, r0]
 800a43a:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800a43c:	bd08      	pop	{r3, pc}
 800a43e:	bf00      	nop
 800a440:	0800d279 	.word	0x0800d279

0800a444 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a444:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a448:	f7f7 ba27 	b.w	800189a <HAL_HCD_HC_GetXferCount>

0800a44c <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a44c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a44e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800a452:	9402      	str	r4, [sp, #8]
 800a454:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800a458:	9401      	str	r4, [sp, #4]
 800a45a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800a45e:	9400      	str	r4, [sp, #0]
 800a460:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a464:	f7f6 fdd6 	bl	8001014 <HAL_HCD_HC_Init>
 800a468:	2803      	cmp	r0, #3
 800a46a:	bf9a      	itte	ls
 800a46c:	4b02      	ldrls	r3, [pc, #8]	; (800a478 <USBH_LL_OpenPipe+0x2c>)
 800a46e:	5c18      	ldrbls	r0, [r3, r0]
 800a470:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800a472:	b004      	add	sp, #16
 800a474:	bd10      	pop	{r4, pc}
 800a476:	bf00      	nop
 800a478:	0800d279 	.word	0x0800d279

0800a47c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a47c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a47e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a482:	f7f6 fdff 	bl	8001084 <HAL_HCD_HC_Halt>
 800a486:	2803      	cmp	r0, #3
 800a488:	bf9a      	itte	ls
 800a48a:	4b02      	ldrls	r3, [pc, #8]	; (800a494 <USBH_LL_ClosePipe+0x18>)
 800a48c:	5c18      	ldrbls	r0, [r3, r0]
 800a48e:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800a490:	bd08      	pop	{r3, pc}
 800a492:	bf00      	nop
 800a494:	0800d279 	.word	0x0800d279

0800a498 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a49a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800a49e:	9403      	str	r4, [sp, #12]
 800a4a0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800a4a4:	9402      	str	r4, [sp, #8]
 800a4a6:	9c07      	ldr	r4, [sp, #28]
 800a4a8:	9401      	str	r4, [sp, #4]
 800a4aa:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800a4ae:	9400      	str	r4, [sp, #0]
 800a4b0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a4b4:	f7f6 fe42 	bl	800113c <HAL_HCD_HC_SubmitRequest>
 800a4b8:	2803      	cmp	r0, #3
 800a4ba:	bf9a      	itte	ls
 800a4bc:	4b02      	ldrls	r3, [pc, #8]	; (800a4c8 <USBH_LL_SubmitURB+0x30>)
 800a4be:	5c18      	ldrbls	r0, [r3, r0]
 800a4c0:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800a4c2:	b004      	add	sp, #16
 800a4c4:	bd10      	pop	{r4, pc}
 800a4c6:	bf00      	nop
 800a4c8:	0800d279 	.word	0x0800d279

0800a4cc <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a4cc:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800a4d0:	f7f7 b9dd 	b.w	800188e <HAL_HCD_HC_GetURBState>

0800a4d4 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a4d4:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800a4d6:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d102      	bne.n	800a4e4 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 800a4de:	4608      	mov	r0, r1
 800a4e0:	f000 f816 	bl	800a510 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a4e4:	20c8      	movs	r0, #200	; 0xc8
 800a4e6:	f7f6 f8b3 	bl	8000650 <HAL_Delay>
  return USBH_OK;
}
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	bd08      	pop	{r3, pc}

0800a4ee <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a4ee:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 800a4f2:	2328      	movs	r3, #40	; 0x28
 800a4f4:	fb03 0101 	mla	r1, r3, r1, r0
 800a4f8:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800a4fc:	b11b      	cbz	r3, 800a506 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a4fe:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800a502:	2000      	movs	r0, #0
 800a504:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800a506:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 800a50a:	e7fa      	b.n	800a502 <USBH_LL_SetToggle+0x14>

0800a50c <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800a50c:	f7f6 b8a0 	b.w	8000650 <HAL_Delay>

0800a510 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a510:	fab0 f280 	clz	r2, r0
 800a514:	0952      	lsrs	r2, r2, #5
 800a516:	2101      	movs	r1, #1
 800a518:	4801      	ldr	r0, [pc, #4]	; (800a520 <MX_DriverVbusFS+0x10>)
 800a51a:	f7f6 bd6f 	b.w	8000ffc <HAL_GPIO_WritePin>
 800a51e:	bf00      	nop
 800a520:	40020800 	.word	0x40020800

0800a524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a55c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a528:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a52a:	e003      	b.n	800a534 <LoopCopyDataInit>

0800a52c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a52c:	4b0c      	ldr	r3, [pc, #48]	; (800a560 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a52e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a530:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a532:	3104      	adds	r1, #4

0800a534 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a534:	480b      	ldr	r0, [pc, #44]	; (800a564 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a536:	4b0c      	ldr	r3, [pc, #48]	; (800a568 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a538:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a53a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a53c:	d3f6      	bcc.n	800a52c <CopyDataInit>
  ldr  r2, =_sbss
 800a53e:	4a0b      	ldr	r2, [pc, #44]	; (800a56c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a540:	e002      	b.n	800a548 <LoopFillZerobss>

0800a542 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a542:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a544:	f842 3b04 	str.w	r3, [r2], #4

0800a548 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a548:	4b09      	ldr	r3, [pc, #36]	; (800a570 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a54a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a54c:	d3f9      	bcc.n	800a542 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a54e:	f7ff fe77 	bl	800a240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a552:	f000 f811 	bl	800a578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a556:	f7ff fc85 	bl	8009e64 <main>
  bx  lr    
 800a55a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a55c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a560:	0800d328 	.word	0x0800d328
  ldr  r0, =_sdata
 800a564:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a568:	20001c10 	.word	0x20001c10
  ldr  r2, =_sbss
 800a56c:	20001c10 	.word	0x20001c10
  ldr  r3, = _ebss
 800a570:	20008fa0 	.word	0x20008fa0

0800a574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a574:	e7fe      	b.n	800a574 <ADC_IRQHandler>
	...

0800a578 <__libc_init_array>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4e0d      	ldr	r6, [pc, #52]	; (800a5b0 <__libc_init_array+0x38>)
 800a57c:	4c0d      	ldr	r4, [pc, #52]	; (800a5b4 <__libc_init_array+0x3c>)
 800a57e:	1ba4      	subs	r4, r4, r6
 800a580:	10a4      	asrs	r4, r4, #2
 800a582:	2500      	movs	r5, #0
 800a584:	42a5      	cmp	r5, r4
 800a586:	d109      	bne.n	800a59c <__libc_init_array+0x24>
 800a588:	4e0b      	ldr	r6, [pc, #44]	; (800a5b8 <__libc_init_array+0x40>)
 800a58a:	4c0c      	ldr	r4, [pc, #48]	; (800a5bc <__libc_init_array+0x44>)
 800a58c:	f000 ff7e 	bl	800b48c <_init>
 800a590:	1ba4      	subs	r4, r4, r6
 800a592:	10a4      	asrs	r4, r4, #2
 800a594:	2500      	movs	r5, #0
 800a596:	42a5      	cmp	r5, r4
 800a598:	d105      	bne.n	800a5a6 <__libc_init_array+0x2e>
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5a0:	4798      	blx	r3
 800a5a2:	3501      	adds	r5, #1
 800a5a4:	e7ee      	b.n	800a584 <__libc_init_array+0xc>
 800a5a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5aa:	4798      	blx	r3
 800a5ac:	3501      	adds	r5, #1
 800a5ae:	e7f2      	b.n	800a596 <__libc_init_array+0x1e>
 800a5b0:	0800d320 	.word	0x0800d320
 800a5b4:	0800d320 	.word	0x0800d320
 800a5b8:	0800d320 	.word	0x0800d320
 800a5bc:	0800d324 	.word	0x0800d324

0800a5c0 <malloc>:
 800a5c0:	4b02      	ldr	r3, [pc, #8]	; (800a5cc <malloc+0xc>)
 800a5c2:	4601      	mov	r1, r0
 800a5c4:	6818      	ldr	r0, [r3, #0]
 800a5c6:	f000 b87b 	b.w	800a6c0 <_malloc_r>
 800a5ca:	bf00      	nop
 800a5cc:	20001bac 	.word	0x20001bac

0800a5d0 <free>:
 800a5d0:	4b02      	ldr	r3, [pc, #8]	; (800a5dc <free+0xc>)
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	6818      	ldr	r0, [r3, #0]
 800a5d6:	f000 b825 	b.w	800a624 <_free_r>
 800a5da:	bf00      	nop
 800a5dc:	20001bac 	.word	0x20001bac

0800a5e0 <memcmp>:
 800a5e0:	b510      	push	{r4, lr}
 800a5e2:	3901      	subs	r1, #1
 800a5e4:	4402      	add	r2, r0
 800a5e6:	4290      	cmp	r0, r2
 800a5e8:	d101      	bne.n	800a5ee <memcmp+0xe>
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	bd10      	pop	{r4, pc}
 800a5ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a5f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a5f6:	42a3      	cmp	r3, r4
 800a5f8:	d0f5      	beq.n	800a5e6 <memcmp+0x6>
 800a5fa:	1b18      	subs	r0, r3, r4
 800a5fc:	bd10      	pop	{r4, pc}

0800a5fe <memcpy>:
 800a5fe:	b510      	push	{r4, lr}
 800a600:	1e43      	subs	r3, r0, #1
 800a602:	440a      	add	r2, r1
 800a604:	4291      	cmp	r1, r2
 800a606:	d100      	bne.n	800a60a <memcpy+0xc>
 800a608:	bd10      	pop	{r4, pc}
 800a60a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a60e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a612:	e7f7      	b.n	800a604 <memcpy+0x6>

0800a614 <memset>:
 800a614:	4402      	add	r2, r0
 800a616:	4603      	mov	r3, r0
 800a618:	4293      	cmp	r3, r2
 800a61a:	d100      	bne.n	800a61e <memset+0xa>
 800a61c:	4770      	bx	lr
 800a61e:	f803 1b01 	strb.w	r1, [r3], #1
 800a622:	e7f9      	b.n	800a618 <memset+0x4>

0800a624 <_free_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4605      	mov	r5, r0
 800a628:	2900      	cmp	r1, #0
 800a62a:	d045      	beq.n	800a6b8 <_free_r+0x94>
 800a62c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a630:	1f0c      	subs	r4, r1, #4
 800a632:	2b00      	cmp	r3, #0
 800a634:	bfb8      	it	lt
 800a636:	18e4      	addlt	r4, r4, r3
 800a638:	f000 f9ce 	bl	800a9d8 <__malloc_lock>
 800a63c:	4a1f      	ldr	r2, [pc, #124]	; (800a6bc <_free_r+0x98>)
 800a63e:	6813      	ldr	r3, [r2, #0]
 800a640:	4610      	mov	r0, r2
 800a642:	b933      	cbnz	r3, 800a652 <_free_r+0x2e>
 800a644:	6063      	str	r3, [r4, #4]
 800a646:	6014      	str	r4, [r2, #0]
 800a648:	4628      	mov	r0, r5
 800a64a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a64e:	f000 b9c4 	b.w	800a9da <__malloc_unlock>
 800a652:	42a3      	cmp	r3, r4
 800a654:	d90c      	bls.n	800a670 <_free_r+0x4c>
 800a656:	6821      	ldr	r1, [r4, #0]
 800a658:	1862      	adds	r2, r4, r1
 800a65a:	4293      	cmp	r3, r2
 800a65c:	bf04      	itt	eq
 800a65e:	681a      	ldreq	r2, [r3, #0]
 800a660:	685b      	ldreq	r3, [r3, #4]
 800a662:	6063      	str	r3, [r4, #4]
 800a664:	bf04      	itt	eq
 800a666:	1852      	addeq	r2, r2, r1
 800a668:	6022      	streq	r2, [r4, #0]
 800a66a:	6004      	str	r4, [r0, #0]
 800a66c:	e7ec      	b.n	800a648 <_free_r+0x24>
 800a66e:	4613      	mov	r3, r2
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	b10a      	cbz	r2, 800a678 <_free_r+0x54>
 800a674:	42a2      	cmp	r2, r4
 800a676:	d9fa      	bls.n	800a66e <_free_r+0x4a>
 800a678:	6819      	ldr	r1, [r3, #0]
 800a67a:	1858      	adds	r0, r3, r1
 800a67c:	42a0      	cmp	r0, r4
 800a67e:	d10b      	bne.n	800a698 <_free_r+0x74>
 800a680:	6820      	ldr	r0, [r4, #0]
 800a682:	4401      	add	r1, r0
 800a684:	1858      	adds	r0, r3, r1
 800a686:	4282      	cmp	r2, r0
 800a688:	6019      	str	r1, [r3, #0]
 800a68a:	d1dd      	bne.n	800a648 <_free_r+0x24>
 800a68c:	6810      	ldr	r0, [r2, #0]
 800a68e:	6852      	ldr	r2, [r2, #4]
 800a690:	605a      	str	r2, [r3, #4]
 800a692:	4401      	add	r1, r0
 800a694:	6019      	str	r1, [r3, #0]
 800a696:	e7d7      	b.n	800a648 <_free_r+0x24>
 800a698:	d902      	bls.n	800a6a0 <_free_r+0x7c>
 800a69a:	230c      	movs	r3, #12
 800a69c:	602b      	str	r3, [r5, #0]
 800a69e:	e7d3      	b.n	800a648 <_free_r+0x24>
 800a6a0:	6820      	ldr	r0, [r4, #0]
 800a6a2:	1821      	adds	r1, r4, r0
 800a6a4:	428a      	cmp	r2, r1
 800a6a6:	bf04      	itt	eq
 800a6a8:	6811      	ldreq	r1, [r2, #0]
 800a6aa:	6852      	ldreq	r2, [r2, #4]
 800a6ac:	6062      	str	r2, [r4, #4]
 800a6ae:	bf04      	itt	eq
 800a6b0:	1809      	addeq	r1, r1, r0
 800a6b2:	6021      	streq	r1, [r4, #0]
 800a6b4:	605c      	str	r4, [r3, #4]
 800a6b6:	e7c7      	b.n	800a648 <_free_r+0x24>
 800a6b8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ba:	bf00      	nop
 800a6bc:	200021f0 	.word	0x200021f0

0800a6c0 <_malloc_r>:
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	1ccd      	adds	r5, r1, #3
 800a6c4:	f025 0503 	bic.w	r5, r5, #3
 800a6c8:	3508      	adds	r5, #8
 800a6ca:	2d0c      	cmp	r5, #12
 800a6cc:	bf38      	it	cc
 800a6ce:	250c      	movcc	r5, #12
 800a6d0:	2d00      	cmp	r5, #0
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	db01      	blt.n	800a6da <_malloc_r+0x1a>
 800a6d6:	42a9      	cmp	r1, r5
 800a6d8:	d903      	bls.n	800a6e2 <_malloc_r+0x22>
 800a6da:	230c      	movs	r3, #12
 800a6dc:	6033      	str	r3, [r6, #0]
 800a6de:	2000      	movs	r0, #0
 800a6e0:	bd70      	pop	{r4, r5, r6, pc}
 800a6e2:	f000 f979 	bl	800a9d8 <__malloc_lock>
 800a6e6:	4a23      	ldr	r2, [pc, #140]	; (800a774 <_malloc_r+0xb4>)
 800a6e8:	6814      	ldr	r4, [r2, #0]
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	b991      	cbnz	r1, 800a714 <_malloc_r+0x54>
 800a6ee:	4c22      	ldr	r4, [pc, #136]	; (800a778 <_malloc_r+0xb8>)
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	b91b      	cbnz	r3, 800a6fc <_malloc_r+0x3c>
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f000 f859 	bl	800a7ac <_sbrk_r>
 800a6fa:	6020      	str	r0, [r4, #0]
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4630      	mov	r0, r6
 800a700:	f000 f854 	bl	800a7ac <_sbrk_r>
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	d126      	bne.n	800a756 <_malloc_r+0x96>
 800a708:	230c      	movs	r3, #12
 800a70a:	6033      	str	r3, [r6, #0]
 800a70c:	4630      	mov	r0, r6
 800a70e:	f000 f964 	bl	800a9da <__malloc_unlock>
 800a712:	e7e4      	b.n	800a6de <_malloc_r+0x1e>
 800a714:	680b      	ldr	r3, [r1, #0]
 800a716:	1b5b      	subs	r3, r3, r5
 800a718:	d41a      	bmi.n	800a750 <_malloc_r+0x90>
 800a71a:	2b0b      	cmp	r3, #11
 800a71c:	d90f      	bls.n	800a73e <_malloc_r+0x7e>
 800a71e:	600b      	str	r3, [r1, #0]
 800a720:	50cd      	str	r5, [r1, r3]
 800a722:	18cc      	adds	r4, r1, r3
 800a724:	4630      	mov	r0, r6
 800a726:	f000 f958 	bl	800a9da <__malloc_unlock>
 800a72a:	f104 000b 	add.w	r0, r4, #11
 800a72e:	1d23      	adds	r3, r4, #4
 800a730:	f020 0007 	bic.w	r0, r0, #7
 800a734:	1ac3      	subs	r3, r0, r3
 800a736:	d01b      	beq.n	800a770 <_malloc_r+0xb0>
 800a738:	425a      	negs	r2, r3
 800a73a:	50e2      	str	r2, [r4, r3]
 800a73c:	bd70      	pop	{r4, r5, r6, pc}
 800a73e:	428c      	cmp	r4, r1
 800a740:	bf0d      	iteet	eq
 800a742:	6863      	ldreq	r3, [r4, #4]
 800a744:	684b      	ldrne	r3, [r1, #4]
 800a746:	6063      	strne	r3, [r4, #4]
 800a748:	6013      	streq	r3, [r2, #0]
 800a74a:	bf18      	it	ne
 800a74c:	460c      	movne	r4, r1
 800a74e:	e7e9      	b.n	800a724 <_malloc_r+0x64>
 800a750:	460c      	mov	r4, r1
 800a752:	6849      	ldr	r1, [r1, #4]
 800a754:	e7ca      	b.n	800a6ec <_malloc_r+0x2c>
 800a756:	1cc4      	adds	r4, r0, #3
 800a758:	f024 0403 	bic.w	r4, r4, #3
 800a75c:	42a0      	cmp	r0, r4
 800a75e:	d005      	beq.n	800a76c <_malloc_r+0xac>
 800a760:	1a21      	subs	r1, r4, r0
 800a762:	4630      	mov	r0, r6
 800a764:	f000 f822 	bl	800a7ac <_sbrk_r>
 800a768:	3001      	adds	r0, #1
 800a76a:	d0cd      	beq.n	800a708 <_malloc_r+0x48>
 800a76c:	6025      	str	r5, [r4, #0]
 800a76e:	e7d9      	b.n	800a724 <_malloc_r+0x64>
 800a770:	bd70      	pop	{r4, r5, r6, pc}
 800a772:	bf00      	nop
 800a774:	200021f0 	.word	0x200021f0
 800a778:	200021f4 	.word	0x200021f4

0800a77c <iprintf>:
 800a77c:	b40f      	push	{r0, r1, r2, r3}
 800a77e:	4b0a      	ldr	r3, [pc, #40]	; (800a7a8 <iprintf+0x2c>)
 800a780:	b513      	push	{r0, r1, r4, lr}
 800a782:	681c      	ldr	r4, [r3, #0]
 800a784:	b124      	cbz	r4, 800a790 <iprintf+0x14>
 800a786:	69a3      	ldr	r3, [r4, #24]
 800a788:	b913      	cbnz	r3, 800a790 <iprintf+0x14>
 800a78a:	4620      	mov	r0, r4
 800a78c:	f000 f89a 	bl	800a8c4 <__sinit>
 800a790:	ab05      	add	r3, sp, #20
 800a792:	9a04      	ldr	r2, [sp, #16]
 800a794:	68a1      	ldr	r1, [r4, #8]
 800a796:	9301      	str	r3, [sp, #4]
 800a798:	4620      	mov	r0, r4
 800a79a:	f000 f949 	bl	800aa30 <_vfiprintf_r>
 800a79e:	b002      	add	sp, #8
 800a7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a4:	b004      	add	sp, #16
 800a7a6:	4770      	bx	lr
 800a7a8:	20001bac 	.word	0x20001bac

0800a7ac <_sbrk_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	4c06      	ldr	r4, [pc, #24]	; (800a7c8 <_sbrk_r+0x1c>)
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	4608      	mov	r0, r1
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	f7ff fd1c 	bl	800a1f4 <_sbrk>
 800a7bc:	1c43      	adds	r3, r0, #1
 800a7be:	d102      	bne.n	800a7c6 <_sbrk_r+0x1a>
 800a7c0:	6823      	ldr	r3, [r4, #0]
 800a7c2:	b103      	cbz	r3, 800a7c6 <_sbrk_r+0x1a>
 800a7c4:	602b      	str	r3, [r5, #0]
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	20008f9c 	.word	0x20008f9c

0800a7cc <strchr>:
 800a7cc:	b2c9      	uxtb	r1, r1
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7d4:	b11a      	cbz	r2, 800a7de <strchr+0x12>
 800a7d6:	4291      	cmp	r1, r2
 800a7d8:	d1f9      	bne.n	800a7ce <strchr+0x2>
 800a7da:	4618      	mov	r0, r3
 800a7dc:	4770      	bx	lr
 800a7de:	2900      	cmp	r1, #0
 800a7e0:	bf0c      	ite	eq
 800a7e2:	4618      	moveq	r0, r3
 800a7e4:	2000      	movne	r0, #0
 800a7e6:	4770      	bx	lr

0800a7e8 <strncmp>:
 800a7e8:	b510      	push	{r4, lr}
 800a7ea:	b16a      	cbz	r2, 800a808 <strncmp+0x20>
 800a7ec:	3901      	subs	r1, #1
 800a7ee:	1884      	adds	r4, r0, r2
 800a7f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a7f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d103      	bne.n	800a804 <strncmp+0x1c>
 800a7fc:	42a0      	cmp	r0, r4
 800a7fe:	d001      	beq.n	800a804 <strncmp+0x1c>
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1f5      	bne.n	800a7f0 <strncmp+0x8>
 800a804:	1a98      	subs	r0, r3, r2
 800a806:	bd10      	pop	{r4, pc}
 800a808:	4610      	mov	r0, r2
 800a80a:	bd10      	pop	{r4, pc}

0800a80c <strstr>:
 800a80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a80e:	7803      	ldrb	r3, [r0, #0]
 800a810:	b133      	cbz	r3, 800a820 <strstr+0x14>
 800a812:	4603      	mov	r3, r0
 800a814:	4618      	mov	r0, r3
 800a816:	1c5e      	adds	r6, r3, #1
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	b933      	cbnz	r3, 800a82a <strstr+0x1e>
 800a81c:	4618      	mov	r0, r3
 800a81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a820:	780b      	ldrb	r3, [r1, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	bf18      	it	ne
 800a826:	2000      	movne	r0, #0
 800a828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a82a:	1e4d      	subs	r5, r1, #1
 800a82c:	1e44      	subs	r4, r0, #1
 800a82e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a832:	2a00      	cmp	r2, #0
 800a834:	d0f3      	beq.n	800a81e <strstr+0x12>
 800a836:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800a83a:	4297      	cmp	r7, r2
 800a83c:	4633      	mov	r3, r6
 800a83e:	d0f6      	beq.n	800a82e <strstr+0x22>
 800a840:	e7e8      	b.n	800a814 <strstr+0x8>
	...

0800a844 <_cleanup_r>:
 800a844:	4901      	ldr	r1, [pc, #4]	; (800a84c <_cleanup_r+0x8>)
 800a846:	f000 b8a9 	b.w	800a99c <_fwalk_reent>
 800a84a:	bf00      	nop
 800a84c:	0800b2e5 	.word	0x0800b2e5

0800a850 <std.isra.0>:
 800a850:	2300      	movs	r3, #0
 800a852:	b510      	push	{r4, lr}
 800a854:	4604      	mov	r4, r0
 800a856:	6003      	str	r3, [r0, #0]
 800a858:	6043      	str	r3, [r0, #4]
 800a85a:	6083      	str	r3, [r0, #8]
 800a85c:	8181      	strh	r1, [r0, #12]
 800a85e:	6643      	str	r3, [r0, #100]	; 0x64
 800a860:	81c2      	strh	r2, [r0, #14]
 800a862:	6103      	str	r3, [r0, #16]
 800a864:	6143      	str	r3, [r0, #20]
 800a866:	6183      	str	r3, [r0, #24]
 800a868:	4619      	mov	r1, r3
 800a86a:	2208      	movs	r2, #8
 800a86c:	305c      	adds	r0, #92	; 0x5c
 800a86e:	f7ff fed1 	bl	800a614 <memset>
 800a872:	4b05      	ldr	r3, [pc, #20]	; (800a888 <std.isra.0+0x38>)
 800a874:	6263      	str	r3, [r4, #36]	; 0x24
 800a876:	4b05      	ldr	r3, [pc, #20]	; (800a88c <std.isra.0+0x3c>)
 800a878:	62a3      	str	r3, [r4, #40]	; 0x28
 800a87a:	4b05      	ldr	r3, [pc, #20]	; (800a890 <std.isra.0+0x40>)
 800a87c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a87e:	4b05      	ldr	r3, [pc, #20]	; (800a894 <std.isra.0+0x44>)
 800a880:	6224      	str	r4, [r4, #32]
 800a882:	6323      	str	r3, [r4, #48]	; 0x30
 800a884:	bd10      	pop	{r4, pc}
 800a886:	bf00      	nop
 800a888:	0800af89 	.word	0x0800af89
 800a88c:	0800afab 	.word	0x0800afab
 800a890:	0800afe3 	.word	0x0800afe3
 800a894:	0800b007 	.word	0x0800b007

0800a898 <__sfmoreglue>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	1e4a      	subs	r2, r1, #1
 800a89c:	2568      	movs	r5, #104	; 0x68
 800a89e:	4355      	muls	r5, r2
 800a8a0:	460e      	mov	r6, r1
 800a8a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8a6:	f7ff ff0b 	bl	800a6c0 <_malloc_r>
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	b140      	cbz	r0, 800a8c0 <__sfmoreglue+0x28>
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	e880 0042 	stmia.w	r0, {r1, r6}
 800a8b4:	300c      	adds	r0, #12
 800a8b6:	60a0      	str	r0, [r4, #8]
 800a8b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8bc:	f7ff feaa 	bl	800a614 <memset>
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	bd70      	pop	{r4, r5, r6, pc}

0800a8c4 <__sinit>:
 800a8c4:	6983      	ldr	r3, [r0, #24]
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	bb33      	cbnz	r3, 800a91a <__sinit+0x56>
 800a8cc:	6483      	str	r3, [r0, #72]	; 0x48
 800a8ce:	64c3      	str	r3, [r0, #76]	; 0x4c
 800a8d0:	6503      	str	r3, [r0, #80]	; 0x50
 800a8d2:	4b12      	ldr	r3, [pc, #72]	; (800a91c <__sinit+0x58>)
 800a8d4:	4a12      	ldr	r2, [pc, #72]	; (800a920 <__sinit+0x5c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6282      	str	r2, [r0, #40]	; 0x28
 800a8da:	4298      	cmp	r0, r3
 800a8dc:	bf04      	itt	eq
 800a8de:	2301      	moveq	r3, #1
 800a8e0:	6183      	streq	r3, [r0, #24]
 800a8e2:	f000 f81f 	bl	800a924 <__sfp>
 800a8e6:	6060      	str	r0, [r4, #4]
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 f81b 	bl	800a924 <__sfp>
 800a8ee:	60a0      	str	r0, [r4, #8]
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f000 f817 	bl	800a924 <__sfp>
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	60e0      	str	r0, [r4, #12]
 800a8fa:	2104      	movs	r1, #4
 800a8fc:	6860      	ldr	r0, [r4, #4]
 800a8fe:	f7ff ffa7 	bl	800a850 <std.isra.0>
 800a902:	2201      	movs	r2, #1
 800a904:	2109      	movs	r1, #9
 800a906:	68a0      	ldr	r0, [r4, #8]
 800a908:	f7ff ffa2 	bl	800a850 <std.isra.0>
 800a90c:	2202      	movs	r2, #2
 800a90e:	2112      	movs	r1, #18
 800a910:	68e0      	ldr	r0, [r4, #12]
 800a912:	f7ff ff9d 	bl	800a850 <std.isra.0>
 800a916:	2301      	movs	r3, #1
 800a918:	61a3      	str	r3, [r4, #24]
 800a91a:	bd10      	pop	{r4, pc}
 800a91c:	0800d2e0 	.word	0x0800d2e0
 800a920:	0800a845 	.word	0x0800a845

0800a924 <__sfp>:
 800a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a926:	4b1c      	ldr	r3, [pc, #112]	; (800a998 <__sfp+0x74>)
 800a928:	681e      	ldr	r6, [r3, #0]
 800a92a:	69b3      	ldr	r3, [r6, #24]
 800a92c:	4607      	mov	r7, r0
 800a92e:	b913      	cbnz	r3, 800a936 <__sfp+0x12>
 800a930:	4630      	mov	r0, r6
 800a932:	f7ff ffc7 	bl	800a8c4 <__sinit>
 800a936:	3648      	adds	r6, #72	; 0x48
 800a938:	68b4      	ldr	r4, [r6, #8]
 800a93a:	6873      	ldr	r3, [r6, #4]
 800a93c:	3b01      	subs	r3, #1
 800a93e:	d503      	bpl.n	800a948 <__sfp+0x24>
 800a940:	6833      	ldr	r3, [r6, #0]
 800a942:	b133      	cbz	r3, 800a952 <__sfp+0x2e>
 800a944:	6836      	ldr	r6, [r6, #0]
 800a946:	e7f7      	b.n	800a938 <__sfp+0x14>
 800a948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a94c:	b16d      	cbz	r5, 800a96a <__sfp+0x46>
 800a94e:	3468      	adds	r4, #104	; 0x68
 800a950:	e7f4      	b.n	800a93c <__sfp+0x18>
 800a952:	2104      	movs	r1, #4
 800a954:	4638      	mov	r0, r7
 800a956:	f7ff ff9f 	bl	800a898 <__sfmoreglue>
 800a95a:	6030      	str	r0, [r6, #0]
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d1f1      	bne.n	800a944 <__sfp+0x20>
 800a960:	230c      	movs	r3, #12
 800a962:	603b      	str	r3, [r7, #0]
 800a964:	4604      	mov	r4, r0
 800a966:	4620      	mov	r0, r4
 800a968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a96a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a96e:	81e3      	strh	r3, [r4, #14]
 800a970:	2301      	movs	r3, #1
 800a972:	81a3      	strh	r3, [r4, #12]
 800a974:	6665      	str	r5, [r4, #100]	; 0x64
 800a976:	6025      	str	r5, [r4, #0]
 800a978:	60a5      	str	r5, [r4, #8]
 800a97a:	6065      	str	r5, [r4, #4]
 800a97c:	6125      	str	r5, [r4, #16]
 800a97e:	6165      	str	r5, [r4, #20]
 800a980:	61a5      	str	r5, [r4, #24]
 800a982:	2208      	movs	r2, #8
 800a984:	4629      	mov	r1, r5
 800a986:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a98a:	f7ff fe43 	bl	800a614 <memset>
 800a98e:	6365      	str	r5, [r4, #52]	; 0x34
 800a990:	63a5      	str	r5, [r4, #56]	; 0x38
 800a992:	64a5      	str	r5, [r4, #72]	; 0x48
 800a994:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a996:	e7e6      	b.n	800a966 <__sfp+0x42>
 800a998:	0800d2e0 	.word	0x0800d2e0

0800a99c <_fwalk_reent>:
 800a99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9a0:	4680      	mov	r8, r0
 800a9a2:	4689      	mov	r9, r1
 800a9a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9a8:	2600      	movs	r6, #0
 800a9aa:	b914      	cbnz	r4, 800a9b2 <_fwalk_reent+0x16>
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9b2:	68a5      	ldr	r5, [r4, #8]
 800a9b4:	6867      	ldr	r7, [r4, #4]
 800a9b6:	3f01      	subs	r7, #1
 800a9b8:	d501      	bpl.n	800a9be <_fwalk_reent+0x22>
 800a9ba:	6824      	ldr	r4, [r4, #0]
 800a9bc:	e7f5      	b.n	800a9aa <_fwalk_reent+0xe>
 800a9be:	89ab      	ldrh	r3, [r5, #12]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d907      	bls.n	800a9d4 <_fwalk_reent+0x38>
 800a9c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	d003      	beq.n	800a9d4 <_fwalk_reent+0x38>
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	47c8      	blx	r9
 800a9d2:	4306      	orrs	r6, r0
 800a9d4:	3568      	adds	r5, #104	; 0x68
 800a9d6:	e7ee      	b.n	800a9b6 <_fwalk_reent+0x1a>

0800a9d8 <__malloc_lock>:
 800a9d8:	4770      	bx	lr

0800a9da <__malloc_unlock>:
 800a9da:	4770      	bx	lr

0800a9dc <__sfputc_r>:
 800a9dc:	6893      	ldr	r3, [r2, #8]
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	b410      	push	{r4}
 800a9e4:	6093      	str	r3, [r2, #8]
 800a9e6:	da09      	bge.n	800a9fc <__sfputc_r+0x20>
 800a9e8:	6994      	ldr	r4, [r2, #24]
 800a9ea:	42a3      	cmp	r3, r4
 800a9ec:	db02      	blt.n	800a9f4 <__sfputc_r+0x18>
 800a9ee:	b2cb      	uxtb	r3, r1
 800a9f0:	2b0a      	cmp	r3, #10
 800a9f2:	d103      	bne.n	800a9fc <__sfputc_r+0x20>
 800a9f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9f8:	f000 bb0a 	b.w	800b010 <__swbuf_r>
 800a9fc:	6813      	ldr	r3, [r2, #0]
 800a9fe:	1c58      	adds	r0, r3, #1
 800aa00:	6010      	str	r0, [r2, #0]
 800aa02:	7019      	strb	r1, [r3, #0]
 800aa04:	b2c8      	uxtb	r0, r1
 800aa06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <__sfputs_r>:
 800aa0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0e:	4606      	mov	r6, r0
 800aa10:	460f      	mov	r7, r1
 800aa12:	4614      	mov	r4, r2
 800aa14:	18d5      	adds	r5, r2, r3
 800aa16:	42ac      	cmp	r4, r5
 800aa18:	d101      	bne.n	800aa1e <__sfputs_r+0x12>
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	e007      	b.n	800aa2e <__sfputs_r+0x22>
 800aa1e:	463a      	mov	r2, r7
 800aa20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa24:	4630      	mov	r0, r6
 800aa26:	f7ff ffd9 	bl	800a9dc <__sfputc_r>
 800aa2a:	1c43      	adds	r3, r0, #1
 800aa2c:	d1f3      	bne.n	800aa16 <__sfputs_r+0xa>
 800aa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa30 <_vfiprintf_r>:
 800aa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa34:	b09d      	sub	sp, #116	; 0x74
 800aa36:	460c      	mov	r4, r1
 800aa38:	4617      	mov	r7, r2
 800aa3a:	9303      	str	r3, [sp, #12]
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	b118      	cbz	r0, 800aa48 <_vfiprintf_r+0x18>
 800aa40:	6983      	ldr	r3, [r0, #24]
 800aa42:	b90b      	cbnz	r3, 800aa48 <_vfiprintf_r+0x18>
 800aa44:	f7ff ff3e 	bl	800a8c4 <__sinit>
 800aa48:	4b7c      	ldr	r3, [pc, #496]	; (800ac3c <_vfiprintf_r+0x20c>)
 800aa4a:	429c      	cmp	r4, r3
 800aa4c:	d157      	bne.n	800aafe <_vfiprintf_r+0xce>
 800aa4e:	6874      	ldr	r4, [r6, #4]
 800aa50:	89a3      	ldrh	r3, [r4, #12]
 800aa52:	0718      	lsls	r0, r3, #28
 800aa54:	d55d      	bpl.n	800ab12 <_vfiprintf_r+0xe2>
 800aa56:	6923      	ldr	r3, [r4, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d05a      	beq.n	800ab12 <_vfiprintf_r+0xe2>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa60:	2320      	movs	r3, #32
 800aa62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa66:	2330      	movs	r3, #48	; 0x30
 800aa68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa6c:	f04f 0b01 	mov.w	fp, #1
 800aa70:	46b8      	mov	r8, r7
 800aa72:	4645      	mov	r5, r8
 800aa74:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d155      	bne.n	800ab28 <_vfiprintf_r+0xf8>
 800aa7c:	ebb8 0a07 	subs.w	sl, r8, r7
 800aa80:	d00b      	beq.n	800aa9a <_vfiprintf_r+0x6a>
 800aa82:	4653      	mov	r3, sl
 800aa84:	463a      	mov	r2, r7
 800aa86:	4621      	mov	r1, r4
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7ff ffbf 	bl	800aa0c <__sfputs_r>
 800aa8e:	3001      	adds	r0, #1
 800aa90:	f000 80c4 	beq.w	800ac1c <_vfiprintf_r+0x1ec>
 800aa94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa96:	4453      	add	r3, sl
 800aa98:	9309      	str	r3, [sp, #36]	; 0x24
 800aa9a:	f898 3000 	ldrb.w	r3, [r8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f000 80bc 	beq.w	800ac1c <_vfiprintf_r+0x1ec>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f04f 32ff 	mov.w	r2, #4294967295
 800aaaa:	9304      	str	r3, [sp, #16]
 800aaac:	9307      	str	r3, [sp, #28]
 800aaae:	9205      	str	r2, [sp, #20]
 800aab0:	9306      	str	r3, [sp, #24]
 800aab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aab6:	931a      	str	r3, [sp, #104]	; 0x68
 800aab8:	2205      	movs	r2, #5
 800aaba:	7829      	ldrb	r1, [r5, #0]
 800aabc:	4860      	ldr	r0, [pc, #384]	; (800ac40 <_vfiprintf_r+0x210>)
 800aabe:	f7f5 fb9f 	bl	8000200 <memchr>
 800aac2:	f105 0801 	add.w	r8, r5, #1
 800aac6:	9b04      	ldr	r3, [sp, #16]
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d131      	bne.n	800ab30 <_vfiprintf_r+0x100>
 800aacc:	06d9      	lsls	r1, r3, #27
 800aace:	bf44      	itt	mi
 800aad0:	2220      	movmi	r2, #32
 800aad2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aad6:	071a      	lsls	r2, r3, #28
 800aad8:	bf44      	itt	mi
 800aada:	222b      	movmi	r2, #43	; 0x2b
 800aadc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aae0:	782a      	ldrb	r2, [r5, #0]
 800aae2:	2a2a      	cmp	r2, #42	; 0x2a
 800aae4:	d02c      	beq.n	800ab40 <_vfiprintf_r+0x110>
 800aae6:	9a07      	ldr	r2, [sp, #28]
 800aae8:	2100      	movs	r1, #0
 800aaea:	200a      	movs	r0, #10
 800aaec:	46a8      	mov	r8, r5
 800aaee:	3501      	adds	r5, #1
 800aaf0:	f898 3000 	ldrb.w	r3, [r8]
 800aaf4:	3b30      	subs	r3, #48	; 0x30
 800aaf6:	2b09      	cmp	r3, #9
 800aaf8:	d96d      	bls.n	800abd6 <_vfiprintf_r+0x1a6>
 800aafa:	b371      	cbz	r1, 800ab5a <_vfiprintf_r+0x12a>
 800aafc:	e026      	b.n	800ab4c <_vfiprintf_r+0x11c>
 800aafe:	4b51      	ldr	r3, [pc, #324]	; (800ac44 <_vfiprintf_r+0x214>)
 800ab00:	429c      	cmp	r4, r3
 800ab02:	d101      	bne.n	800ab08 <_vfiprintf_r+0xd8>
 800ab04:	68b4      	ldr	r4, [r6, #8]
 800ab06:	e7a3      	b.n	800aa50 <_vfiprintf_r+0x20>
 800ab08:	4b4f      	ldr	r3, [pc, #316]	; (800ac48 <_vfiprintf_r+0x218>)
 800ab0a:	429c      	cmp	r4, r3
 800ab0c:	bf08      	it	eq
 800ab0e:	68f4      	ldreq	r4, [r6, #12]
 800ab10:	e79e      	b.n	800aa50 <_vfiprintf_r+0x20>
 800ab12:	4621      	mov	r1, r4
 800ab14:	4630      	mov	r0, r6
 800ab16:	f000 fadf 	bl	800b0d8 <__swsetup_r>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d09e      	beq.n	800aa5c <_vfiprintf_r+0x2c>
 800ab1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab22:	b01d      	add	sp, #116	; 0x74
 800ab24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab28:	2b25      	cmp	r3, #37	; 0x25
 800ab2a:	d0a7      	beq.n	800aa7c <_vfiprintf_r+0x4c>
 800ab2c:	46a8      	mov	r8, r5
 800ab2e:	e7a0      	b.n	800aa72 <_vfiprintf_r+0x42>
 800ab30:	4a43      	ldr	r2, [pc, #268]	; (800ac40 <_vfiprintf_r+0x210>)
 800ab32:	1a80      	subs	r0, r0, r2
 800ab34:	fa0b f000 	lsl.w	r0, fp, r0
 800ab38:	4318      	orrs	r0, r3
 800ab3a:	9004      	str	r0, [sp, #16]
 800ab3c:	4645      	mov	r5, r8
 800ab3e:	e7bb      	b.n	800aab8 <_vfiprintf_r+0x88>
 800ab40:	9a03      	ldr	r2, [sp, #12]
 800ab42:	1d11      	adds	r1, r2, #4
 800ab44:	6812      	ldr	r2, [r2, #0]
 800ab46:	9103      	str	r1, [sp, #12]
 800ab48:	2a00      	cmp	r2, #0
 800ab4a:	db01      	blt.n	800ab50 <_vfiprintf_r+0x120>
 800ab4c:	9207      	str	r2, [sp, #28]
 800ab4e:	e004      	b.n	800ab5a <_vfiprintf_r+0x12a>
 800ab50:	4252      	negs	r2, r2
 800ab52:	f043 0302 	orr.w	r3, r3, #2
 800ab56:	9207      	str	r2, [sp, #28]
 800ab58:	9304      	str	r3, [sp, #16]
 800ab5a:	f898 3000 	ldrb.w	r3, [r8]
 800ab5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ab60:	d110      	bne.n	800ab84 <_vfiprintf_r+0x154>
 800ab62:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ab66:	2b2a      	cmp	r3, #42	; 0x2a
 800ab68:	f108 0101 	add.w	r1, r8, #1
 800ab6c:	d137      	bne.n	800abde <_vfiprintf_r+0x1ae>
 800ab6e:	9b03      	ldr	r3, [sp, #12]
 800ab70:	1d1a      	adds	r2, r3, #4
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	9203      	str	r2, [sp, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bfb8      	it	lt
 800ab7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab7e:	f108 0802 	add.w	r8, r8, #2
 800ab82:	9305      	str	r3, [sp, #20]
 800ab84:	4d31      	ldr	r5, [pc, #196]	; (800ac4c <_vfiprintf_r+0x21c>)
 800ab86:	f898 1000 	ldrb.w	r1, [r8]
 800ab8a:	2203      	movs	r2, #3
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	f7f5 fb37 	bl	8000200 <memchr>
 800ab92:	b140      	cbz	r0, 800aba6 <_vfiprintf_r+0x176>
 800ab94:	2340      	movs	r3, #64	; 0x40
 800ab96:	1b40      	subs	r0, r0, r5
 800ab98:	fa03 f000 	lsl.w	r0, r3, r0
 800ab9c:	9b04      	ldr	r3, [sp, #16]
 800ab9e:	4303      	orrs	r3, r0
 800aba0:	9304      	str	r3, [sp, #16]
 800aba2:	f108 0801 	add.w	r8, r8, #1
 800aba6:	f898 1000 	ldrb.w	r1, [r8]
 800abaa:	4829      	ldr	r0, [pc, #164]	; (800ac50 <_vfiprintf_r+0x220>)
 800abac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abb0:	2206      	movs	r2, #6
 800abb2:	f108 0701 	add.w	r7, r8, #1
 800abb6:	f7f5 fb23 	bl	8000200 <memchr>
 800abba:	2800      	cmp	r0, #0
 800abbc:	d034      	beq.n	800ac28 <_vfiprintf_r+0x1f8>
 800abbe:	4b25      	ldr	r3, [pc, #148]	; (800ac54 <_vfiprintf_r+0x224>)
 800abc0:	bb03      	cbnz	r3, 800ac04 <_vfiprintf_r+0x1d4>
 800abc2:	9b03      	ldr	r3, [sp, #12]
 800abc4:	3307      	adds	r3, #7
 800abc6:	f023 0307 	bic.w	r3, r3, #7
 800abca:	3308      	adds	r3, #8
 800abcc:	9303      	str	r3, [sp, #12]
 800abce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd0:	444b      	add	r3, r9
 800abd2:	9309      	str	r3, [sp, #36]	; 0x24
 800abd4:	e74c      	b.n	800aa70 <_vfiprintf_r+0x40>
 800abd6:	fb00 3202 	mla	r2, r0, r2, r3
 800abda:	2101      	movs	r1, #1
 800abdc:	e786      	b.n	800aaec <_vfiprintf_r+0xbc>
 800abde:	2300      	movs	r3, #0
 800abe0:	9305      	str	r3, [sp, #20]
 800abe2:	4618      	mov	r0, r3
 800abe4:	250a      	movs	r5, #10
 800abe6:	4688      	mov	r8, r1
 800abe8:	3101      	adds	r1, #1
 800abea:	f898 2000 	ldrb.w	r2, [r8]
 800abee:	3a30      	subs	r2, #48	; 0x30
 800abf0:	2a09      	cmp	r2, #9
 800abf2:	d903      	bls.n	800abfc <_vfiprintf_r+0x1cc>
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d0c5      	beq.n	800ab84 <_vfiprintf_r+0x154>
 800abf8:	9005      	str	r0, [sp, #20]
 800abfa:	e7c3      	b.n	800ab84 <_vfiprintf_r+0x154>
 800abfc:	fb05 2000 	mla	r0, r5, r0, r2
 800ac00:	2301      	movs	r3, #1
 800ac02:	e7f0      	b.n	800abe6 <_vfiprintf_r+0x1b6>
 800ac04:	ab03      	add	r3, sp, #12
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	4622      	mov	r2, r4
 800ac0a:	4b13      	ldr	r3, [pc, #76]	; (800ac58 <_vfiprintf_r+0x228>)
 800ac0c:	a904      	add	r1, sp, #16
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f3af 8000 	nop.w
 800ac14:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ac18:	4681      	mov	r9, r0
 800ac1a:	d1d8      	bne.n	800abce <_vfiprintf_r+0x19e>
 800ac1c:	89a3      	ldrh	r3, [r4, #12]
 800ac1e:	065b      	lsls	r3, r3, #25
 800ac20:	f53f af7d 	bmi.w	800ab1e <_vfiprintf_r+0xee>
 800ac24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac26:	e77c      	b.n	800ab22 <_vfiprintf_r+0xf2>
 800ac28:	ab03      	add	r3, sp, #12
 800ac2a:	9300      	str	r3, [sp, #0]
 800ac2c:	4622      	mov	r2, r4
 800ac2e:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <_vfiprintf_r+0x228>)
 800ac30:	a904      	add	r1, sp, #16
 800ac32:	4630      	mov	r0, r6
 800ac34:	f000 f888 	bl	800ad48 <_printf_i>
 800ac38:	e7ec      	b.n	800ac14 <_vfiprintf_r+0x1e4>
 800ac3a:	bf00      	nop
 800ac3c:	0800d2a0 	.word	0x0800d2a0
 800ac40:	0800d2e4 	.word	0x0800d2e4
 800ac44:	0800d2c0 	.word	0x0800d2c0
 800ac48:	0800d280 	.word	0x0800d280
 800ac4c:	0800d2ea 	.word	0x0800d2ea
 800ac50:	0800d2ee 	.word	0x0800d2ee
 800ac54:	00000000 	.word	0x00000000
 800ac58:	0800aa0d 	.word	0x0800aa0d

0800ac5c <_printf_common>:
 800ac5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac60:	4691      	mov	r9, r2
 800ac62:	461f      	mov	r7, r3
 800ac64:	688a      	ldr	r2, [r1, #8]
 800ac66:	690b      	ldr	r3, [r1, #16]
 800ac68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	bfb8      	it	lt
 800ac70:	4613      	movlt	r3, r2
 800ac72:	f8c9 3000 	str.w	r3, [r9]
 800ac76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460c      	mov	r4, r1
 800ac7e:	b112      	cbz	r2, 800ac86 <_printf_common+0x2a>
 800ac80:	3301      	adds	r3, #1
 800ac82:	f8c9 3000 	str.w	r3, [r9]
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	0699      	lsls	r1, r3, #26
 800ac8a:	bf42      	ittt	mi
 800ac8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ac90:	3302      	addmi	r3, #2
 800ac92:	f8c9 3000 	strmi.w	r3, [r9]
 800ac96:	6825      	ldr	r5, [r4, #0]
 800ac98:	f015 0506 	ands.w	r5, r5, #6
 800ac9c:	d107      	bne.n	800acae <_printf_common+0x52>
 800ac9e:	f104 0a19 	add.w	sl, r4, #25
 800aca2:	68e3      	ldr	r3, [r4, #12]
 800aca4:	f8d9 2000 	ldr.w	r2, [r9]
 800aca8:	1a9b      	subs	r3, r3, r2
 800acaa:	429d      	cmp	r5, r3
 800acac:	db29      	blt.n	800ad02 <_printf_common+0xa6>
 800acae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800acb2:	6822      	ldr	r2, [r4, #0]
 800acb4:	3300      	adds	r3, #0
 800acb6:	bf18      	it	ne
 800acb8:	2301      	movne	r3, #1
 800acba:	0692      	lsls	r2, r2, #26
 800acbc:	d42e      	bmi.n	800ad1c <_printf_common+0xc0>
 800acbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acc2:	4639      	mov	r1, r7
 800acc4:	4630      	mov	r0, r6
 800acc6:	47c0      	blx	r8
 800acc8:	3001      	adds	r0, #1
 800acca:	d021      	beq.n	800ad10 <_printf_common+0xb4>
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	68e5      	ldr	r5, [r4, #12]
 800acd0:	f8d9 2000 	ldr.w	r2, [r9]
 800acd4:	f003 0306 	and.w	r3, r3, #6
 800acd8:	2b04      	cmp	r3, #4
 800acda:	bf08      	it	eq
 800acdc:	1aad      	subeq	r5, r5, r2
 800acde:	68a3      	ldr	r3, [r4, #8]
 800ace0:	6922      	ldr	r2, [r4, #16]
 800ace2:	bf0c      	ite	eq
 800ace4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ace8:	2500      	movne	r5, #0
 800acea:	4293      	cmp	r3, r2
 800acec:	bfc4      	itt	gt
 800acee:	1a9b      	subgt	r3, r3, r2
 800acf0:	18ed      	addgt	r5, r5, r3
 800acf2:	f04f 0900 	mov.w	r9, #0
 800acf6:	341a      	adds	r4, #26
 800acf8:	454d      	cmp	r5, r9
 800acfa:	d11b      	bne.n	800ad34 <_printf_common+0xd8>
 800acfc:	2000      	movs	r0, #0
 800acfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad02:	2301      	movs	r3, #1
 800ad04:	4652      	mov	r2, sl
 800ad06:	4639      	mov	r1, r7
 800ad08:	4630      	mov	r0, r6
 800ad0a:	47c0      	blx	r8
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	d103      	bne.n	800ad18 <_printf_common+0xbc>
 800ad10:	f04f 30ff 	mov.w	r0, #4294967295
 800ad14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad18:	3501      	adds	r5, #1
 800ad1a:	e7c2      	b.n	800aca2 <_printf_common+0x46>
 800ad1c:	18e1      	adds	r1, r4, r3
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	2030      	movs	r0, #48	; 0x30
 800ad22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad26:	4422      	add	r2, r4
 800ad28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad30:	3302      	adds	r3, #2
 800ad32:	e7c4      	b.n	800acbe <_printf_common+0x62>
 800ad34:	2301      	movs	r3, #1
 800ad36:	4622      	mov	r2, r4
 800ad38:	4639      	mov	r1, r7
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	47c0      	blx	r8
 800ad3e:	3001      	adds	r0, #1
 800ad40:	d0e6      	beq.n	800ad10 <_printf_common+0xb4>
 800ad42:	f109 0901 	add.w	r9, r9, #1
 800ad46:	e7d7      	b.n	800acf8 <_printf_common+0x9c>

0800ad48 <_printf_i>:
 800ad48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad4c:	4617      	mov	r7, r2
 800ad4e:	7e0a      	ldrb	r2, [r1, #24]
 800ad50:	b085      	sub	sp, #20
 800ad52:	2a6e      	cmp	r2, #110	; 0x6e
 800ad54:	4698      	mov	r8, r3
 800ad56:	4606      	mov	r6, r0
 800ad58:	460c      	mov	r4, r1
 800ad5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad5c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800ad60:	f000 80bc 	beq.w	800aedc <_printf_i+0x194>
 800ad64:	d81a      	bhi.n	800ad9c <_printf_i+0x54>
 800ad66:	2a63      	cmp	r2, #99	; 0x63
 800ad68:	d02e      	beq.n	800adc8 <_printf_i+0x80>
 800ad6a:	d80a      	bhi.n	800ad82 <_printf_i+0x3a>
 800ad6c:	2a00      	cmp	r2, #0
 800ad6e:	f000 80c8 	beq.w	800af02 <_printf_i+0x1ba>
 800ad72:	2a58      	cmp	r2, #88	; 0x58
 800ad74:	f000 808a 	beq.w	800ae8c <_printf_i+0x144>
 800ad78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad7c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800ad80:	e02a      	b.n	800add8 <_printf_i+0x90>
 800ad82:	2a64      	cmp	r2, #100	; 0x64
 800ad84:	d001      	beq.n	800ad8a <_printf_i+0x42>
 800ad86:	2a69      	cmp	r2, #105	; 0x69
 800ad88:	d1f6      	bne.n	800ad78 <_printf_i+0x30>
 800ad8a:	6821      	ldr	r1, [r4, #0]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ad92:	d023      	beq.n	800addc <_printf_i+0x94>
 800ad94:	1d11      	adds	r1, r2, #4
 800ad96:	6019      	str	r1, [r3, #0]
 800ad98:	6813      	ldr	r3, [r2, #0]
 800ad9a:	e027      	b.n	800adec <_printf_i+0xa4>
 800ad9c:	2a73      	cmp	r2, #115	; 0x73
 800ad9e:	f000 80b4 	beq.w	800af0a <_printf_i+0x1c2>
 800ada2:	d808      	bhi.n	800adb6 <_printf_i+0x6e>
 800ada4:	2a6f      	cmp	r2, #111	; 0x6f
 800ada6:	d02a      	beq.n	800adfe <_printf_i+0xb6>
 800ada8:	2a70      	cmp	r2, #112	; 0x70
 800adaa:	d1e5      	bne.n	800ad78 <_printf_i+0x30>
 800adac:	680a      	ldr	r2, [r1, #0]
 800adae:	f042 0220 	orr.w	r2, r2, #32
 800adb2:	600a      	str	r2, [r1, #0]
 800adb4:	e003      	b.n	800adbe <_printf_i+0x76>
 800adb6:	2a75      	cmp	r2, #117	; 0x75
 800adb8:	d021      	beq.n	800adfe <_printf_i+0xb6>
 800adba:	2a78      	cmp	r2, #120	; 0x78
 800adbc:	d1dc      	bne.n	800ad78 <_printf_i+0x30>
 800adbe:	2278      	movs	r2, #120	; 0x78
 800adc0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800adc4:	496e      	ldr	r1, [pc, #440]	; (800af80 <_printf_i+0x238>)
 800adc6:	e064      	b.n	800ae92 <_printf_i+0x14a>
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800adce:	1d11      	adds	r1, r2, #4
 800add0:	6019      	str	r1, [r3, #0]
 800add2:	6813      	ldr	r3, [r2, #0]
 800add4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800add8:	2301      	movs	r3, #1
 800adda:	e0a3      	b.n	800af24 <_printf_i+0x1dc>
 800addc:	f011 0f40 	tst.w	r1, #64	; 0x40
 800ade0:	f102 0104 	add.w	r1, r2, #4
 800ade4:	6019      	str	r1, [r3, #0]
 800ade6:	d0d7      	beq.n	800ad98 <_printf_i+0x50>
 800ade8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800adec:	2b00      	cmp	r3, #0
 800adee:	da03      	bge.n	800adf8 <_printf_i+0xb0>
 800adf0:	222d      	movs	r2, #45	; 0x2d
 800adf2:	425b      	negs	r3, r3
 800adf4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800adf8:	4962      	ldr	r1, [pc, #392]	; (800af84 <_printf_i+0x23c>)
 800adfa:	220a      	movs	r2, #10
 800adfc:	e017      	b.n	800ae2e <_printf_i+0xe6>
 800adfe:	6820      	ldr	r0, [r4, #0]
 800ae00:	6819      	ldr	r1, [r3, #0]
 800ae02:	f010 0f80 	tst.w	r0, #128	; 0x80
 800ae06:	d003      	beq.n	800ae10 <_printf_i+0xc8>
 800ae08:	1d08      	adds	r0, r1, #4
 800ae0a:	6018      	str	r0, [r3, #0]
 800ae0c:	680b      	ldr	r3, [r1, #0]
 800ae0e:	e006      	b.n	800ae1e <_printf_i+0xd6>
 800ae10:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae14:	f101 0004 	add.w	r0, r1, #4
 800ae18:	6018      	str	r0, [r3, #0]
 800ae1a:	d0f7      	beq.n	800ae0c <_printf_i+0xc4>
 800ae1c:	880b      	ldrh	r3, [r1, #0]
 800ae1e:	4959      	ldr	r1, [pc, #356]	; (800af84 <_printf_i+0x23c>)
 800ae20:	2a6f      	cmp	r2, #111	; 0x6f
 800ae22:	bf14      	ite	ne
 800ae24:	220a      	movne	r2, #10
 800ae26:	2208      	moveq	r2, #8
 800ae28:	2000      	movs	r0, #0
 800ae2a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800ae2e:	6865      	ldr	r5, [r4, #4]
 800ae30:	60a5      	str	r5, [r4, #8]
 800ae32:	2d00      	cmp	r5, #0
 800ae34:	f2c0 809c 	blt.w	800af70 <_printf_i+0x228>
 800ae38:	6820      	ldr	r0, [r4, #0]
 800ae3a:	f020 0004 	bic.w	r0, r0, #4
 800ae3e:	6020      	str	r0, [r4, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d13f      	bne.n	800aec4 <_printf_i+0x17c>
 800ae44:	2d00      	cmp	r5, #0
 800ae46:	f040 8095 	bne.w	800af74 <_printf_i+0x22c>
 800ae4a:	4675      	mov	r5, lr
 800ae4c:	2a08      	cmp	r2, #8
 800ae4e:	d10b      	bne.n	800ae68 <_printf_i+0x120>
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	07da      	lsls	r2, r3, #31
 800ae54:	d508      	bpl.n	800ae68 <_printf_i+0x120>
 800ae56:	6923      	ldr	r3, [r4, #16]
 800ae58:	6862      	ldr	r2, [r4, #4]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	bfde      	ittt	le
 800ae5e:	2330      	movle	r3, #48	; 0x30
 800ae60:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae64:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae68:	ebae 0305 	sub.w	r3, lr, r5
 800ae6c:	6123      	str	r3, [r4, #16]
 800ae6e:	f8cd 8000 	str.w	r8, [sp]
 800ae72:	463b      	mov	r3, r7
 800ae74:	aa03      	add	r2, sp, #12
 800ae76:	4621      	mov	r1, r4
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f7ff feef 	bl	800ac5c <_printf_common>
 800ae7e:	3001      	adds	r0, #1
 800ae80:	d155      	bne.n	800af2e <_printf_i+0x1e6>
 800ae82:	f04f 30ff 	mov.w	r0, #4294967295
 800ae86:	b005      	add	sp, #20
 800ae88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae8c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800ae90:	493c      	ldr	r1, [pc, #240]	; (800af84 <_printf_i+0x23c>)
 800ae92:	6822      	ldr	r2, [r4, #0]
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	f012 0f80 	tst.w	r2, #128	; 0x80
 800ae9a:	f100 0504 	add.w	r5, r0, #4
 800ae9e:	601d      	str	r5, [r3, #0]
 800aea0:	d001      	beq.n	800aea6 <_printf_i+0x15e>
 800aea2:	6803      	ldr	r3, [r0, #0]
 800aea4:	e002      	b.n	800aeac <_printf_i+0x164>
 800aea6:	0655      	lsls	r5, r2, #25
 800aea8:	d5fb      	bpl.n	800aea2 <_printf_i+0x15a>
 800aeaa:	8803      	ldrh	r3, [r0, #0]
 800aeac:	07d0      	lsls	r0, r2, #31
 800aeae:	bf44      	itt	mi
 800aeb0:	f042 0220 	orrmi.w	r2, r2, #32
 800aeb4:	6022      	strmi	r2, [r4, #0]
 800aeb6:	b91b      	cbnz	r3, 800aec0 <_printf_i+0x178>
 800aeb8:	6822      	ldr	r2, [r4, #0]
 800aeba:	f022 0220 	bic.w	r2, r2, #32
 800aebe:	6022      	str	r2, [r4, #0]
 800aec0:	2210      	movs	r2, #16
 800aec2:	e7b1      	b.n	800ae28 <_printf_i+0xe0>
 800aec4:	4675      	mov	r5, lr
 800aec6:	fbb3 f0f2 	udiv	r0, r3, r2
 800aeca:	fb02 3310 	mls	r3, r2, r0, r3
 800aece:	5ccb      	ldrb	r3, [r1, r3]
 800aed0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800aed4:	4603      	mov	r3, r0
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d1f5      	bne.n	800aec6 <_printf_i+0x17e>
 800aeda:	e7b7      	b.n	800ae4c <_printf_i+0x104>
 800aedc:	6808      	ldr	r0, [r1, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	6949      	ldr	r1, [r1, #20]
 800aee2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800aee6:	d004      	beq.n	800aef2 <_printf_i+0x1aa>
 800aee8:	1d10      	adds	r0, r2, #4
 800aeea:	6018      	str	r0, [r3, #0]
 800aeec:	6813      	ldr	r3, [r2, #0]
 800aeee:	6019      	str	r1, [r3, #0]
 800aef0:	e007      	b.n	800af02 <_printf_i+0x1ba>
 800aef2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aef6:	f102 0004 	add.w	r0, r2, #4
 800aefa:	6018      	str	r0, [r3, #0]
 800aefc:	6813      	ldr	r3, [r2, #0]
 800aefe:	d0f6      	beq.n	800aeee <_printf_i+0x1a6>
 800af00:	8019      	strh	r1, [r3, #0]
 800af02:	2300      	movs	r3, #0
 800af04:	6123      	str	r3, [r4, #16]
 800af06:	4675      	mov	r5, lr
 800af08:	e7b1      	b.n	800ae6e <_printf_i+0x126>
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	1d11      	adds	r1, r2, #4
 800af0e:	6019      	str	r1, [r3, #0]
 800af10:	6815      	ldr	r5, [r2, #0]
 800af12:	6862      	ldr	r2, [r4, #4]
 800af14:	2100      	movs	r1, #0
 800af16:	4628      	mov	r0, r5
 800af18:	f7f5 f972 	bl	8000200 <memchr>
 800af1c:	b108      	cbz	r0, 800af22 <_printf_i+0x1da>
 800af1e:	1b40      	subs	r0, r0, r5
 800af20:	6060      	str	r0, [r4, #4]
 800af22:	6863      	ldr	r3, [r4, #4]
 800af24:	6123      	str	r3, [r4, #16]
 800af26:	2300      	movs	r3, #0
 800af28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af2c:	e79f      	b.n	800ae6e <_printf_i+0x126>
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	462a      	mov	r2, r5
 800af32:	4639      	mov	r1, r7
 800af34:	4630      	mov	r0, r6
 800af36:	47c0      	blx	r8
 800af38:	3001      	adds	r0, #1
 800af3a:	d0a2      	beq.n	800ae82 <_printf_i+0x13a>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	079b      	lsls	r3, r3, #30
 800af40:	d507      	bpl.n	800af52 <_printf_i+0x20a>
 800af42:	2500      	movs	r5, #0
 800af44:	f104 0919 	add.w	r9, r4, #25
 800af48:	68e3      	ldr	r3, [r4, #12]
 800af4a:	9a03      	ldr	r2, [sp, #12]
 800af4c:	1a9b      	subs	r3, r3, r2
 800af4e:	429d      	cmp	r5, r3
 800af50:	db05      	blt.n	800af5e <_printf_i+0x216>
 800af52:	68e0      	ldr	r0, [r4, #12]
 800af54:	9b03      	ldr	r3, [sp, #12]
 800af56:	4298      	cmp	r0, r3
 800af58:	bfb8      	it	lt
 800af5a:	4618      	movlt	r0, r3
 800af5c:	e793      	b.n	800ae86 <_printf_i+0x13e>
 800af5e:	2301      	movs	r3, #1
 800af60:	464a      	mov	r2, r9
 800af62:	4639      	mov	r1, r7
 800af64:	4630      	mov	r0, r6
 800af66:	47c0      	blx	r8
 800af68:	3001      	adds	r0, #1
 800af6a:	d08a      	beq.n	800ae82 <_printf_i+0x13a>
 800af6c:	3501      	adds	r5, #1
 800af6e:	e7eb      	b.n	800af48 <_printf_i+0x200>
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1a7      	bne.n	800aec4 <_printf_i+0x17c>
 800af74:	780b      	ldrb	r3, [r1, #0]
 800af76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af7e:	e765      	b.n	800ae4c <_printf_i+0x104>
 800af80:	0800d306 	.word	0x0800d306
 800af84:	0800d2f5 	.word	0x0800d2f5

0800af88 <__sread>:
 800af88:	b510      	push	{r4, lr}
 800af8a:	460c      	mov	r4, r1
 800af8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af90:	f000 fa48 	bl	800b424 <_read_r>
 800af94:	2800      	cmp	r0, #0
 800af96:	bfab      	itete	ge
 800af98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af9a:	89a3      	ldrhlt	r3, [r4, #12]
 800af9c:	181b      	addge	r3, r3, r0
 800af9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afa2:	bfac      	ite	ge
 800afa4:	6563      	strge	r3, [r4, #84]	; 0x54
 800afa6:	81a3      	strhlt	r3, [r4, #12]
 800afa8:	bd10      	pop	{r4, pc}

0800afaa <__swrite>:
 800afaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afae:	461f      	mov	r7, r3
 800afb0:	898b      	ldrh	r3, [r1, #12]
 800afb2:	05db      	lsls	r3, r3, #23
 800afb4:	4605      	mov	r5, r0
 800afb6:	460c      	mov	r4, r1
 800afb8:	4616      	mov	r6, r2
 800afba:	d505      	bpl.n	800afc8 <__swrite+0x1e>
 800afbc:	2302      	movs	r3, #2
 800afbe:	2200      	movs	r2, #0
 800afc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc4:	f000 f9b8 	bl	800b338 <_lseek_r>
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afd2:	81a3      	strh	r3, [r4, #12]
 800afd4:	4632      	mov	r2, r6
 800afd6:	463b      	mov	r3, r7
 800afd8:	4628      	mov	r0, r5
 800afda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afde:	f000 b869 	b.w	800b0b4 <_write_r>

0800afe2 <__sseek>:
 800afe2:	b510      	push	{r4, lr}
 800afe4:	460c      	mov	r4, r1
 800afe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afea:	f000 f9a5 	bl	800b338 <_lseek_r>
 800afee:	1c43      	adds	r3, r0, #1
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	bf15      	itete	ne
 800aff4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800affa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800affe:	81a3      	strheq	r3, [r4, #12]
 800b000:	bf18      	it	ne
 800b002:	81a3      	strhne	r3, [r4, #12]
 800b004:	bd10      	pop	{r4, pc}

0800b006 <__sclose>:
 800b006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b00a:	f000 b8d3 	b.w	800b1b4 <_close_r>
	...

0800b010 <__swbuf_r>:
 800b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b012:	460e      	mov	r6, r1
 800b014:	4614      	mov	r4, r2
 800b016:	4605      	mov	r5, r0
 800b018:	b118      	cbz	r0, 800b022 <__swbuf_r+0x12>
 800b01a:	6983      	ldr	r3, [r0, #24]
 800b01c:	b90b      	cbnz	r3, 800b022 <__swbuf_r+0x12>
 800b01e:	f7ff fc51 	bl	800a8c4 <__sinit>
 800b022:	4b21      	ldr	r3, [pc, #132]	; (800b0a8 <__swbuf_r+0x98>)
 800b024:	429c      	cmp	r4, r3
 800b026:	d12a      	bne.n	800b07e <__swbuf_r+0x6e>
 800b028:	686c      	ldr	r4, [r5, #4]
 800b02a:	69a3      	ldr	r3, [r4, #24]
 800b02c:	60a3      	str	r3, [r4, #8]
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	071a      	lsls	r2, r3, #28
 800b032:	d52e      	bpl.n	800b092 <__swbuf_r+0x82>
 800b034:	6923      	ldr	r3, [r4, #16]
 800b036:	b363      	cbz	r3, 800b092 <__swbuf_r+0x82>
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	6820      	ldr	r0, [r4, #0]
 800b03c:	1ac0      	subs	r0, r0, r3
 800b03e:	6963      	ldr	r3, [r4, #20]
 800b040:	b2f6      	uxtb	r6, r6
 800b042:	4298      	cmp	r0, r3
 800b044:	4637      	mov	r7, r6
 800b046:	db04      	blt.n	800b052 <__swbuf_r+0x42>
 800b048:	4621      	mov	r1, r4
 800b04a:	4628      	mov	r0, r5
 800b04c:	f000 f94a 	bl	800b2e4 <_fflush_r>
 800b050:	bb28      	cbnz	r0, 800b09e <__swbuf_r+0x8e>
 800b052:	68a3      	ldr	r3, [r4, #8]
 800b054:	3b01      	subs	r3, #1
 800b056:	60a3      	str	r3, [r4, #8]
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	1c5a      	adds	r2, r3, #1
 800b05c:	6022      	str	r2, [r4, #0]
 800b05e:	701e      	strb	r6, [r3, #0]
 800b060:	6963      	ldr	r3, [r4, #20]
 800b062:	3001      	adds	r0, #1
 800b064:	4298      	cmp	r0, r3
 800b066:	d004      	beq.n	800b072 <__swbuf_r+0x62>
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	07db      	lsls	r3, r3, #31
 800b06c:	d519      	bpl.n	800b0a2 <__swbuf_r+0x92>
 800b06e:	2e0a      	cmp	r6, #10
 800b070:	d117      	bne.n	800b0a2 <__swbuf_r+0x92>
 800b072:	4621      	mov	r1, r4
 800b074:	4628      	mov	r0, r5
 800b076:	f000 f935 	bl	800b2e4 <_fflush_r>
 800b07a:	b190      	cbz	r0, 800b0a2 <__swbuf_r+0x92>
 800b07c:	e00f      	b.n	800b09e <__swbuf_r+0x8e>
 800b07e:	4b0b      	ldr	r3, [pc, #44]	; (800b0ac <__swbuf_r+0x9c>)
 800b080:	429c      	cmp	r4, r3
 800b082:	d101      	bne.n	800b088 <__swbuf_r+0x78>
 800b084:	68ac      	ldr	r4, [r5, #8]
 800b086:	e7d0      	b.n	800b02a <__swbuf_r+0x1a>
 800b088:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <__swbuf_r+0xa0>)
 800b08a:	429c      	cmp	r4, r3
 800b08c:	bf08      	it	eq
 800b08e:	68ec      	ldreq	r4, [r5, #12]
 800b090:	e7cb      	b.n	800b02a <__swbuf_r+0x1a>
 800b092:	4621      	mov	r1, r4
 800b094:	4628      	mov	r0, r5
 800b096:	f000 f81f 	bl	800b0d8 <__swsetup_r>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d0cc      	beq.n	800b038 <__swbuf_r+0x28>
 800b09e:	f04f 37ff 	mov.w	r7, #4294967295
 800b0a2:	4638      	mov	r0, r7
 800b0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	0800d2a0 	.word	0x0800d2a0
 800b0ac:	0800d2c0 	.word	0x0800d2c0
 800b0b0:	0800d280 	.word	0x0800d280

0800b0b4 <_write_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4c07      	ldr	r4, [pc, #28]	; (800b0d4 <_write_r+0x20>)
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	4608      	mov	r0, r1
 800b0bc:	4611      	mov	r1, r2
 800b0be:	2200      	movs	r2, #0
 800b0c0:	6022      	str	r2, [r4, #0]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	f7ff f888 	bl	800a1d8 <_write>
 800b0c8:	1c43      	adds	r3, r0, #1
 800b0ca:	d102      	bne.n	800b0d2 <_write_r+0x1e>
 800b0cc:	6823      	ldr	r3, [r4, #0]
 800b0ce:	b103      	cbz	r3, 800b0d2 <_write_r+0x1e>
 800b0d0:	602b      	str	r3, [r5, #0]
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
 800b0d4:	20008f9c 	.word	0x20008f9c

0800b0d8 <__swsetup_r>:
 800b0d8:	4b32      	ldr	r3, [pc, #200]	; (800b1a4 <__swsetup_r+0xcc>)
 800b0da:	b570      	push	{r4, r5, r6, lr}
 800b0dc:	681d      	ldr	r5, [r3, #0]
 800b0de:	4606      	mov	r6, r0
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	b125      	cbz	r5, 800b0ee <__swsetup_r+0x16>
 800b0e4:	69ab      	ldr	r3, [r5, #24]
 800b0e6:	b913      	cbnz	r3, 800b0ee <__swsetup_r+0x16>
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f7ff fbeb 	bl	800a8c4 <__sinit>
 800b0ee:	4b2e      	ldr	r3, [pc, #184]	; (800b1a8 <__swsetup_r+0xd0>)
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	d10f      	bne.n	800b114 <__swsetup_r+0x3c>
 800b0f4:	686c      	ldr	r4, [r5, #4]
 800b0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	0715      	lsls	r5, r2, #28
 800b0fe:	d42c      	bmi.n	800b15a <__swsetup_r+0x82>
 800b100:	06d0      	lsls	r0, r2, #27
 800b102:	d411      	bmi.n	800b128 <__swsetup_r+0x50>
 800b104:	2209      	movs	r2, #9
 800b106:	6032      	str	r2, [r6, #0]
 800b108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b10c:	81a3      	strh	r3, [r4, #12]
 800b10e:	f04f 30ff 	mov.w	r0, #4294967295
 800b112:	bd70      	pop	{r4, r5, r6, pc}
 800b114:	4b25      	ldr	r3, [pc, #148]	; (800b1ac <__swsetup_r+0xd4>)
 800b116:	429c      	cmp	r4, r3
 800b118:	d101      	bne.n	800b11e <__swsetup_r+0x46>
 800b11a:	68ac      	ldr	r4, [r5, #8]
 800b11c:	e7eb      	b.n	800b0f6 <__swsetup_r+0x1e>
 800b11e:	4b24      	ldr	r3, [pc, #144]	; (800b1b0 <__swsetup_r+0xd8>)
 800b120:	429c      	cmp	r4, r3
 800b122:	bf08      	it	eq
 800b124:	68ec      	ldreq	r4, [r5, #12]
 800b126:	e7e6      	b.n	800b0f6 <__swsetup_r+0x1e>
 800b128:	0751      	lsls	r1, r2, #29
 800b12a:	d512      	bpl.n	800b152 <__swsetup_r+0x7a>
 800b12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b12e:	b141      	cbz	r1, 800b142 <__swsetup_r+0x6a>
 800b130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b134:	4299      	cmp	r1, r3
 800b136:	d002      	beq.n	800b13e <__swsetup_r+0x66>
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff fa73 	bl	800a624 <_free_r>
 800b13e:	2300      	movs	r3, #0
 800b140:	6363      	str	r3, [r4, #52]	; 0x34
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b148:	81a3      	strh	r3, [r4, #12]
 800b14a:	2300      	movs	r3, #0
 800b14c:	6063      	str	r3, [r4, #4]
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	f043 0308 	orr.w	r3, r3, #8
 800b158:	81a3      	strh	r3, [r4, #12]
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	b94b      	cbnz	r3, 800b172 <__swsetup_r+0x9a>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b168:	d003      	beq.n	800b172 <__swsetup_r+0x9a>
 800b16a:	4621      	mov	r1, r4
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 f919 	bl	800b3a4 <__smakebuf_r>
 800b172:	89a2      	ldrh	r2, [r4, #12]
 800b174:	f012 0301 	ands.w	r3, r2, #1
 800b178:	d00c      	beq.n	800b194 <__swsetup_r+0xbc>
 800b17a:	2300      	movs	r3, #0
 800b17c:	60a3      	str	r3, [r4, #8]
 800b17e:	6963      	ldr	r3, [r4, #20]
 800b180:	425b      	negs	r3, r3
 800b182:	61a3      	str	r3, [r4, #24]
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	b953      	cbnz	r3, 800b19e <__swsetup_r+0xc6>
 800b188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b18c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b190:	d1ba      	bne.n	800b108 <__swsetup_r+0x30>
 800b192:	bd70      	pop	{r4, r5, r6, pc}
 800b194:	0792      	lsls	r2, r2, #30
 800b196:	bf58      	it	pl
 800b198:	6963      	ldrpl	r3, [r4, #20]
 800b19a:	60a3      	str	r3, [r4, #8]
 800b19c:	e7f2      	b.n	800b184 <__swsetup_r+0xac>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	e7f7      	b.n	800b192 <__swsetup_r+0xba>
 800b1a2:	bf00      	nop
 800b1a4:	20001bac 	.word	0x20001bac
 800b1a8:	0800d2a0 	.word	0x0800d2a0
 800b1ac:	0800d2c0 	.word	0x0800d2c0
 800b1b0:	0800d280 	.word	0x0800d280

0800b1b4 <_close_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	4c06      	ldr	r4, [pc, #24]	; (800b1d0 <_close_r+0x1c>)
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	4608      	mov	r0, r1
 800b1be:	6023      	str	r3, [r4, #0]
 800b1c0:	f7ff f832 	bl	800a228 <_close>
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	d102      	bne.n	800b1ce <_close_r+0x1a>
 800b1c8:	6823      	ldr	r3, [r4, #0]
 800b1ca:	b103      	cbz	r3, 800b1ce <_close_r+0x1a>
 800b1cc:	602b      	str	r3, [r5, #0]
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	20008f9c 	.word	0x20008f9c

0800b1d4 <__sflush_r>:
 800b1d4:	898a      	ldrh	r2, [r1, #12]
 800b1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1da:	4605      	mov	r5, r0
 800b1dc:	0710      	lsls	r0, r2, #28
 800b1de:	460c      	mov	r4, r1
 800b1e0:	d45a      	bmi.n	800b298 <__sflush_r+0xc4>
 800b1e2:	684b      	ldr	r3, [r1, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	dc05      	bgt.n	800b1f4 <__sflush_r+0x20>
 800b1e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	dc02      	bgt.n	800b1f4 <__sflush_r+0x20>
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1f6:	2e00      	cmp	r6, #0
 800b1f8:	d0f9      	beq.n	800b1ee <__sflush_r+0x1a>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b200:	682f      	ldr	r7, [r5, #0]
 800b202:	602b      	str	r3, [r5, #0]
 800b204:	d033      	beq.n	800b26e <__sflush_r+0x9a>
 800b206:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	075a      	lsls	r2, r3, #29
 800b20c:	d505      	bpl.n	800b21a <__sflush_r+0x46>
 800b20e:	6863      	ldr	r3, [r4, #4]
 800b210:	1ac0      	subs	r0, r0, r3
 800b212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b214:	b10b      	cbz	r3, 800b21a <__sflush_r+0x46>
 800b216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b218:	1ac0      	subs	r0, r0, r3
 800b21a:	2300      	movs	r3, #0
 800b21c:	4602      	mov	r2, r0
 800b21e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b220:	6a21      	ldr	r1, [r4, #32]
 800b222:	4628      	mov	r0, r5
 800b224:	47b0      	blx	r6
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	89a3      	ldrh	r3, [r4, #12]
 800b22a:	d106      	bne.n	800b23a <__sflush_r+0x66>
 800b22c:	6829      	ldr	r1, [r5, #0]
 800b22e:	291d      	cmp	r1, #29
 800b230:	d84b      	bhi.n	800b2ca <__sflush_r+0xf6>
 800b232:	4a2b      	ldr	r2, [pc, #172]	; (800b2e0 <__sflush_r+0x10c>)
 800b234:	40ca      	lsrs	r2, r1
 800b236:	07d6      	lsls	r6, r2, #31
 800b238:	d547      	bpl.n	800b2ca <__sflush_r+0xf6>
 800b23a:	2200      	movs	r2, #0
 800b23c:	6062      	str	r2, [r4, #4]
 800b23e:	04d9      	lsls	r1, r3, #19
 800b240:	6922      	ldr	r2, [r4, #16]
 800b242:	6022      	str	r2, [r4, #0]
 800b244:	d504      	bpl.n	800b250 <__sflush_r+0x7c>
 800b246:	1c42      	adds	r2, r0, #1
 800b248:	d101      	bne.n	800b24e <__sflush_r+0x7a>
 800b24a:	682b      	ldr	r3, [r5, #0]
 800b24c:	b903      	cbnz	r3, 800b250 <__sflush_r+0x7c>
 800b24e:	6560      	str	r0, [r4, #84]	; 0x54
 800b250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b252:	602f      	str	r7, [r5, #0]
 800b254:	2900      	cmp	r1, #0
 800b256:	d0ca      	beq.n	800b1ee <__sflush_r+0x1a>
 800b258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b25c:	4299      	cmp	r1, r3
 800b25e:	d002      	beq.n	800b266 <__sflush_r+0x92>
 800b260:	4628      	mov	r0, r5
 800b262:	f7ff f9df 	bl	800a624 <_free_r>
 800b266:	2000      	movs	r0, #0
 800b268:	6360      	str	r0, [r4, #52]	; 0x34
 800b26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b26e:	6a21      	ldr	r1, [r4, #32]
 800b270:	2301      	movs	r3, #1
 800b272:	4628      	mov	r0, r5
 800b274:	47b0      	blx	r6
 800b276:	1c41      	adds	r1, r0, #1
 800b278:	d1c6      	bne.n	800b208 <__sflush_r+0x34>
 800b27a:	682b      	ldr	r3, [r5, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d0c3      	beq.n	800b208 <__sflush_r+0x34>
 800b280:	2b1d      	cmp	r3, #29
 800b282:	d001      	beq.n	800b288 <__sflush_r+0xb4>
 800b284:	2b16      	cmp	r3, #22
 800b286:	d101      	bne.n	800b28c <__sflush_r+0xb8>
 800b288:	602f      	str	r7, [r5, #0]
 800b28a:	e7b0      	b.n	800b1ee <__sflush_r+0x1a>
 800b28c:	89a3      	ldrh	r3, [r4, #12]
 800b28e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b292:	81a3      	strh	r3, [r4, #12]
 800b294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b298:	690f      	ldr	r7, [r1, #16]
 800b29a:	2f00      	cmp	r7, #0
 800b29c:	d0a7      	beq.n	800b1ee <__sflush_r+0x1a>
 800b29e:	0793      	lsls	r3, r2, #30
 800b2a0:	680e      	ldr	r6, [r1, #0]
 800b2a2:	bf08      	it	eq
 800b2a4:	694b      	ldreq	r3, [r1, #20]
 800b2a6:	600f      	str	r7, [r1, #0]
 800b2a8:	bf18      	it	ne
 800b2aa:	2300      	movne	r3, #0
 800b2ac:	eba6 0807 	sub.w	r8, r6, r7
 800b2b0:	608b      	str	r3, [r1, #8]
 800b2b2:	f1b8 0f00 	cmp.w	r8, #0
 800b2b6:	dd9a      	ble.n	800b1ee <__sflush_r+0x1a>
 800b2b8:	4643      	mov	r3, r8
 800b2ba:	463a      	mov	r2, r7
 800b2bc:	6a21      	ldr	r1, [r4, #32]
 800b2be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	47b0      	blx	r6
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	dc07      	bgt.n	800b2d8 <__sflush_r+0x104>
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ce:	81a3      	strh	r3, [r4, #12]
 800b2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d8:	4407      	add	r7, r0
 800b2da:	eba8 0800 	sub.w	r8, r8, r0
 800b2de:	e7e8      	b.n	800b2b2 <__sflush_r+0xde>
 800b2e0:	20400001 	.word	0x20400001

0800b2e4 <_fflush_r>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	690b      	ldr	r3, [r1, #16]
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	b1db      	cbz	r3, 800b326 <_fflush_r+0x42>
 800b2ee:	b118      	cbz	r0, 800b2f8 <_fflush_r+0x14>
 800b2f0:	6983      	ldr	r3, [r0, #24]
 800b2f2:	b90b      	cbnz	r3, 800b2f8 <_fflush_r+0x14>
 800b2f4:	f7ff fae6 	bl	800a8c4 <__sinit>
 800b2f8:	4b0c      	ldr	r3, [pc, #48]	; (800b32c <_fflush_r+0x48>)
 800b2fa:	429c      	cmp	r4, r3
 800b2fc:	d109      	bne.n	800b312 <_fflush_r+0x2e>
 800b2fe:	686c      	ldr	r4, [r5, #4]
 800b300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b304:	b17b      	cbz	r3, 800b326 <_fflush_r+0x42>
 800b306:	4621      	mov	r1, r4
 800b308:	4628      	mov	r0, r5
 800b30a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b30e:	f7ff bf61 	b.w	800b1d4 <__sflush_r>
 800b312:	4b07      	ldr	r3, [pc, #28]	; (800b330 <_fflush_r+0x4c>)
 800b314:	429c      	cmp	r4, r3
 800b316:	d101      	bne.n	800b31c <_fflush_r+0x38>
 800b318:	68ac      	ldr	r4, [r5, #8]
 800b31a:	e7f1      	b.n	800b300 <_fflush_r+0x1c>
 800b31c:	4b05      	ldr	r3, [pc, #20]	; (800b334 <_fflush_r+0x50>)
 800b31e:	429c      	cmp	r4, r3
 800b320:	bf08      	it	eq
 800b322:	68ec      	ldreq	r4, [r5, #12]
 800b324:	e7ec      	b.n	800b300 <_fflush_r+0x1c>
 800b326:	2000      	movs	r0, #0
 800b328:	bd38      	pop	{r3, r4, r5, pc}
 800b32a:	bf00      	nop
 800b32c:	0800d2a0 	.word	0x0800d2a0
 800b330:	0800d2c0 	.word	0x0800d2c0
 800b334:	0800d280 	.word	0x0800d280

0800b338 <_lseek_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4c07      	ldr	r4, [pc, #28]	; (800b358 <_lseek_r+0x20>)
 800b33c:	4605      	mov	r5, r0
 800b33e:	4608      	mov	r0, r1
 800b340:	4611      	mov	r1, r2
 800b342:	2200      	movs	r2, #0
 800b344:	6022      	str	r2, [r4, #0]
 800b346:	461a      	mov	r2, r3
 800b348:	f7fe ff78 	bl	800a23c <_lseek>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d102      	bne.n	800b356 <_lseek_r+0x1e>
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	b103      	cbz	r3, 800b356 <_lseek_r+0x1e>
 800b354:	602b      	str	r3, [r5, #0]
 800b356:	bd38      	pop	{r3, r4, r5, pc}
 800b358:	20008f9c 	.word	0x20008f9c

0800b35c <__swhatbuf_r>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	460e      	mov	r6, r1
 800b360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b364:	2900      	cmp	r1, #0
 800b366:	b090      	sub	sp, #64	; 0x40
 800b368:	4614      	mov	r4, r2
 800b36a:	461d      	mov	r5, r3
 800b36c:	da07      	bge.n	800b37e <__swhatbuf_r+0x22>
 800b36e:	2300      	movs	r3, #0
 800b370:	602b      	str	r3, [r5, #0]
 800b372:	89b3      	ldrh	r3, [r6, #12]
 800b374:	061a      	lsls	r2, r3, #24
 800b376:	d410      	bmi.n	800b39a <__swhatbuf_r+0x3e>
 800b378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b37c:	e00e      	b.n	800b39c <__swhatbuf_r+0x40>
 800b37e:	aa01      	add	r2, sp, #4
 800b380:	f000 f862 	bl	800b448 <_fstat_r>
 800b384:	2800      	cmp	r0, #0
 800b386:	dbf2      	blt.n	800b36e <__swhatbuf_r+0x12>
 800b388:	9a02      	ldr	r2, [sp, #8]
 800b38a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b38e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b392:	425a      	negs	r2, r3
 800b394:	415a      	adcs	r2, r3
 800b396:	602a      	str	r2, [r5, #0]
 800b398:	e7ee      	b.n	800b378 <__swhatbuf_r+0x1c>
 800b39a:	2340      	movs	r3, #64	; 0x40
 800b39c:	2000      	movs	r0, #0
 800b39e:	6023      	str	r3, [r4, #0]
 800b3a0:	b010      	add	sp, #64	; 0x40
 800b3a2:	bd70      	pop	{r4, r5, r6, pc}

0800b3a4 <__smakebuf_r>:
 800b3a4:	898b      	ldrh	r3, [r1, #12]
 800b3a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3a8:	079d      	lsls	r5, r3, #30
 800b3aa:	4606      	mov	r6, r0
 800b3ac:	460c      	mov	r4, r1
 800b3ae:	d507      	bpl.n	800b3c0 <__smakebuf_r+0x1c>
 800b3b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	6123      	str	r3, [r4, #16]
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	6163      	str	r3, [r4, #20]
 800b3bc:	b002      	add	sp, #8
 800b3be:	bd70      	pop	{r4, r5, r6, pc}
 800b3c0:	ab01      	add	r3, sp, #4
 800b3c2:	466a      	mov	r2, sp
 800b3c4:	f7ff ffca 	bl	800b35c <__swhatbuf_r>
 800b3c8:	9900      	ldr	r1, [sp, #0]
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	f7ff f977 	bl	800a6c0 <_malloc_r>
 800b3d2:	b948      	cbnz	r0, 800b3e8 <__smakebuf_r+0x44>
 800b3d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3d8:	059a      	lsls	r2, r3, #22
 800b3da:	d4ef      	bmi.n	800b3bc <__smakebuf_r+0x18>
 800b3dc:	f023 0303 	bic.w	r3, r3, #3
 800b3e0:	f043 0302 	orr.w	r3, r3, #2
 800b3e4:	81a3      	strh	r3, [r4, #12]
 800b3e6:	e7e3      	b.n	800b3b0 <__smakebuf_r+0xc>
 800b3e8:	4b0d      	ldr	r3, [pc, #52]	; (800b420 <__smakebuf_r+0x7c>)
 800b3ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3ec:	89a3      	ldrh	r3, [r4, #12]
 800b3ee:	6020      	str	r0, [r4, #0]
 800b3f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f4:	81a3      	strh	r3, [r4, #12]
 800b3f6:	9b00      	ldr	r3, [sp, #0]
 800b3f8:	6163      	str	r3, [r4, #20]
 800b3fa:	9b01      	ldr	r3, [sp, #4]
 800b3fc:	6120      	str	r0, [r4, #16]
 800b3fe:	b15b      	cbz	r3, 800b418 <__smakebuf_r+0x74>
 800b400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b404:	4630      	mov	r0, r6
 800b406:	f000 f831 	bl	800b46c <_isatty_r>
 800b40a:	b128      	cbz	r0, 800b418 <__smakebuf_r+0x74>
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	f023 0303 	bic.w	r3, r3, #3
 800b412:	f043 0301 	orr.w	r3, r3, #1
 800b416:	81a3      	strh	r3, [r4, #12]
 800b418:	89a3      	ldrh	r3, [r4, #12]
 800b41a:	431d      	orrs	r5, r3
 800b41c:	81a5      	strh	r5, [r4, #12]
 800b41e:	e7cd      	b.n	800b3bc <__smakebuf_r+0x18>
 800b420:	0800a845 	.word	0x0800a845

0800b424 <_read_r>:
 800b424:	b538      	push	{r3, r4, r5, lr}
 800b426:	4c07      	ldr	r4, [pc, #28]	; (800b444 <_read_r+0x20>)
 800b428:	4605      	mov	r5, r0
 800b42a:	4608      	mov	r0, r1
 800b42c:	4611      	mov	r1, r2
 800b42e:	2200      	movs	r2, #0
 800b430:	6022      	str	r2, [r4, #0]
 800b432:	461a      	mov	r2, r3
 800b434:	f7fe fec2 	bl	800a1bc <_read>
 800b438:	1c43      	adds	r3, r0, #1
 800b43a:	d102      	bne.n	800b442 <_read_r+0x1e>
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	b103      	cbz	r3, 800b442 <_read_r+0x1e>
 800b440:	602b      	str	r3, [r5, #0]
 800b442:	bd38      	pop	{r3, r4, r5, pc}
 800b444:	20008f9c 	.word	0x20008f9c

0800b448 <_fstat_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4c07      	ldr	r4, [pc, #28]	; (800b468 <_fstat_r+0x20>)
 800b44c:	2300      	movs	r3, #0
 800b44e:	4605      	mov	r5, r0
 800b450:	4608      	mov	r0, r1
 800b452:	4611      	mov	r1, r2
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	f7fe feea 	bl	800a22e <_fstat>
 800b45a:	1c43      	adds	r3, r0, #1
 800b45c:	d102      	bne.n	800b464 <_fstat_r+0x1c>
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	b103      	cbz	r3, 800b464 <_fstat_r+0x1c>
 800b462:	602b      	str	r3, [r5, #0]
 800b464:	bd38      	pop	{r3, r4, r5, pc}
 800b466:	bf00      	nop
 800b468:	20008f9c 	.word	0x20008f9c

0800b46c <_isatty_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4c06      	ldr	r4, [pc, #24]	; (800b488 <_isatty_r+0x1c>)
 800b470:	2300      	movs	r3, #0
 800b472:	4605      	mov	r5, r0
 800b474:	4608      	mov	r0, r1
 800b476:	6023      	str	r3, [r4, #0]
 800b478:	f7fe fede 	bl	800a238 <_isatty>
 800b47c:	1c43      	adds	r3, r0, #1
 800b47e:	d102      	bne.n	800b486 <_isatty_r+0x1a>
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	b103      	cbz	r3, 800b486 <_isatty_r+0x1a>
 800b484:	602b      	str	r3, [r5, #0]
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	20008f9c 	.word	0x20008f9c

0800b48c <_init>:
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48e:	bf00      	nop
 800b490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b492:	bc08      	pop	{r3}
 800b494:	469e      	mov	lr, r3
 800b496:	4770      	bx	lr

0800b498 <_fini>:
 800b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49a:	bf00      	nop
 800b49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b49e:	bc08      	pop	{r3}
 800b4a0:	469e      	mov	lr, r3
 800b4a2:	4770      	bx	lr
